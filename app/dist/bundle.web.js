/** *** */ ;(function(modules) {
  // webpackBootstrap
  /** *** */ function hotDisposeChunk(chunkId) {
    /** *** */ delete installedChunks[chunkId]
    /** *** */
  }
  /** *** */ const parentHotUpdateCallback = window.webpackHotUpdate
  /** *** */ window.webpackHotUpdate = /** *** */ function webpackHotUpdateCallback(
    chunkId,
    moreModules
  ) {
    // eslint-disable-line no-unused-vars
    /** *** */ hotAddUpdateChunk(chunkId, moreModules)
    /** *** */ if (parentHotUpdateCallback)
      parentHotUpdateCallback(chunkId, moreModules)
    /** *** */
  }
  /** *** */

  /** *** */ function hotDownloadUpdateChunk(chunkId) {
    // eslint-disable-line no-unused-vars
    /** *** */ const head = document.getElementsByTagName('head')[0]
    /** *** */ const script = document.createElement('script')
    /** *** */ script.type = 'text/javascript'
    /** *** */ script.charset = 'utf-8'
    /** *** */ script.src = `${
      __webpack_require__.p
    }${chunkId}.${hotCurrentHash}.hot-update.js`
    /** *** */ /** *** */ head.appendChild(script)
    /** *** */
  }
  /** *** */

  /** *** */ function hotDownloadManifest(requestTimeout) {
    // eslint-disable-line no-unused-vars
    /** *** */ requestTimeout = requestTimeout || 10000
    /** *** */ return new Promise((resolve, reject) => {
      /** *** */ if (typeof XMLHttpRequest === 'undefined')
        /** *** */ return reject(new Error('No browser support'))
      /** *** */ try {
        /** *** */ var request = new XMLHttpRequest()
        /** *** */ var requestPath = `${
          __webpack_require__.p
        }${hotCurrentHash}.hot-update.json`
        /** *** */ request.open('GET', requestPath, true)
        /** *** */ request.timeout = requestTimeout
        /** *** */ request.send(null)
        /** *** */
      } catch (err) {
        /** *** */ return reject(err)
        /** *** */
      }
      /** *** */ request.onreadystatechange = function() {
        /** *** */ if (request.readyState !== 4) return
        /** *** */ if (request.status === 0) {
          /** *** */ // timeout
          /** *** */ reject(
            new Error(`Manifest request to ${requestPath} timed out.`)
          )
          /** *** */
        } else if (request.status === 404) {
          /** *** */ // no update available
          /** *** */ resolve()
          /** *** */
        } else if (request.status !== 200 && request.status !== 304) {
          /** *** */ // other failure
          /** *** */ reject(
            new Error(`Manifest request to ${requestPath} failed.`)
          )
          /** *** */
        } else {
          /** *** */ // success
          /** *** */ try {
            /** *** */ var update = JSON.parse(request.responseText)
            /** *** */
          } catch (e) {
            /** *** */ reject(e)
            /** *** */ return
            /** *** */
          }
          /** *** */ resolve(update)
          /** *** */
        }
        /** *** */
      }
      /** *** */
    })
    /** *** */
  }
  /** *** */
  /** *** */

  /** *** */

  /** *** */ let hotApplyOnUpdate = true
  /** *** */ var hotCurrentHash = '6c91957015d9f0647efe' // eslint-disable-line no-unused-vars
  /** *** */ const hotRequestTimeout = 10000
  /** *** */ const hotCurrentModuleData = {}
  /** *** */ let hotCurrentChildModule // eslint-disable-line no-unused-vars
  /** *** */ let hotCurrentParents = [] // eslint-disable-line no-unused-vars
  /** *** */ let hotCurrentParentsTemp = [] // eslint-disable-line no-unused-vars
  /** *** */

  /** *** */ function hotCreateRequire(moduleId) {
    // eslint-disable-line no-unused-vars
    /** *** */ const me = installedModules[moduleId]
    /** *** */ if (!me) return __webpack_require__
    /** *** */ const fn = function(request) {
      /** *** */ if (me.hot.active) {
        /** *** */ if (installedModules[request]) {
          /** *** */ if (
            installedModules[request].parents.indexOf(moduleId) < 0
          )
            /** *** */ installedModules[request].parents.push(moduleId)
          /** *** */
        } else {
          /** *** */ hotCurrentParents = [moduleId]
          /** *** */ hotCurrentChildModule = request
          /** *** */
        }
        /** *** */ if (me.children.indexOf(request) < 0)
          /** *** */ me.children.push(request)
        /** *** */
      } else {
        /** *** */ console.warn(
          `[HMR] unexpected require(${request}) from disposed module ${moduleId}`
        )
        /** *** */ hotCurrentParents = []
        /** *** */
      }
      /** *** */ return __webpack_require__(request)
      /** *** */
    }
    /** *** */ const ObjectFactory = function ObjectFactory(name) {
      /** *** */ return {
        /** *** */ configurable: true,
        /** *** */ enumerable: true,
        /** *** */ get() {
          /** *** */ return __webpack_require__[name]
          /** *** */
        },
        /** *** */ set(value) {
          /** *** */ __webpack_require__[name] = value
          /** *** */
        },
        /** *** */
      }
      /** *** */
    }
    /** *** */ for (const name in __webpack_require__) {
      /** *** */ if (
        Object.prototype.hasOwnProperty.call(__webpack_require__, name) &&
        name !== 'e'
      ) {
        /** *** */ Object.defineProperty(fn, name, ObjectFactory(name))
        /** *** */
      }
      /** *** */
    }
    /** *** */ fn.e = function(chunkId) {
      /** *** */ if (hotStatus === 'ready') /** *** */ hotSetStatus('prepare')
      /** *** */ hotChunksLoading++
      /** *** */ return __webpack_require__
        .e(chunkId)
        .then(finishChunkLoading, err => {
          /** *** */ finishChunkLoading()
          /** *** */ throw err
          /** *** */
        })
      /** *** */

      /** *** */ function finishChunkLoading() {
        /** *** */ hotChunksLoading--
        /** *** */ if (hotStatus === 'prepare') {
          /** *** */ if (!hotWaitingFilesMap[chunkId]) {
            /** *** */ hotEnsureUpdateChunk(chunkId)
            /** *** */
          }
          /** *** */ if (hotChunksLoading === 0 && hotWaitingFiles === 0) {
            /** *** */ hotUpdateDownloaded()
            /** *** */
          }
          /** *** */
        }
        /** *** */
      }
      /** *** */
    }
    /** *** */ return fn
    /** *** */
  }
  /** *** */

  /** *** */ function hotCreateModule(moduleId) {
    // eslint-disable-line no-unused-vars
    /** *** */ var hot = {
      /** *** */ // private stuff
      /** *** */ _acceptedDependencies: {},
      /** *** */ _declinedDependencies: {},
      /** *** */ _selfAccepted: false,
      /** *** */ _selfDeclined: false,
      /** *** */ _disposeHandlers: [],
      /** *** */ _main: hotCurrentChildModule !== moduleId, // Module API
      /** *** */

      /** *** */ /** *** */ active: true,
      /** *** */ accept(dep, callback) {
        /** *** */ if (typeof dep === 'undefined')
          /** *** */ hot._selfAccepted = true
        else if (typeof dep === 'function')
          /** *** */ /** *** */ hot._selfAccepted = dep
        else if (typeof dep === 'object')
          /** *** */ /** *** */ for (let i = 0; i < dep.length; i++)
            /** *** */ hot._acceptedDependencies[dep[i]] =
              callback || function() {}
        else
          /** *** */ /** *** */ hot._acceptedDependencies[dep] =
            callback || function() {}
        /** *** */
      },
      /** *** */ decline(dep) {
        /** *** */ if (typeof dep === 'undefined')
          /** *** */ hot._selfDeclined = true
        else if (typeof dep === 'object')
          /** *** */ /** *** */ for (let i = 0; i < dep.length; i++)
            /** *** */ hot._declinedDependencies[dep[i]] = true
        else /** *** */ /** *** */ hot._declinedDependencies[dep] = true
        /** *** */
      },
      /** *** */ dispose(callback) {
        /** *** */ hot._disposeHandlers.push(callback)
        /** *** */
      },
      /** *** */ addDisposeHandler(callback) {
        /** *** */ hot._disposeHandlers.push(callback)
        /** *** */
      },
      /** *** */ removeDisposeHandler(callback) {
        /** *** */ const idx = hot._disposeHandlers.indexOf(callback)
        /** *** */ if (idx >= 0) hot._disposeHandlers.splice(idx, 1)
        /** *** */
      }, // Management API
      /** *** */

      /** *** */ /** *** */ check: hotCheck,
      /** *** */ apply: hotApply,
      /** *** */ status(l) {
        /** *** */ if (!l) return hotStatus
        /** *** */ hotStatusHandlers.push(l)
        /** *** */
      },
      /** *** */ addStatusHandler(l) {
        /** *** */ hotStatusHandlers.push(l)
        /** *** */
      },
      /** *** */ removeStatusHandler(l) {
        /** *** */ const idx = hotStatusHandlers.indexOf(l)
        /** *** */ if (idx >= 0) hotStatusHandlers.splice(idx, 1)
        /** *** */
      }, // inherit from previous dispose call
      /** *** */

      /** *** */ /** *** */ data: hotCurrentModuleData[moduleId],
      /** *** */
    }
    /** *** */ hotCurrentChildModule = undefined
    /** *** */ return hot
    /** *** */
  }
  /** *** */

  /** *** */ var hotStatusHandlers = []
  /** *** */ var hotStatus = 'idle'
  /** *** */

  /** *** */ function hotSetStatus(newStatus) {
    /** *** */ hotStatus = newStatus
    /** *** */ for (let i = 0; i < hotStatusHandlers.length; i++)
      /** *** */ hotStatusHandlers[i].call(null, newStatus)
    /** *** */
  } // while downloading
  /** *** */

  /** *** */ /** *** */ var hotWaitingFiles = 0
  /** *** */ var hotChunksLoading = 0
  /** *** */ var hotWaitingFilesMap = {}
  /** *** */ let hotRequestedFilesMap = {}
  /** *** */ let hotAvailableFilesMap = {}
  /** *** */ let hotDeferred // The update info
  /** *** */

  /** *** */ /** *** */ let hotUpdate, hotUpdateNewHash
  /** *** */

  /** *** */ function toModuleId(id) {
    /** *** */ const isNumber = `${+id}` === id
    /** *** */ return isNumber ? +id : id
    /** *** */
  }
  /** *** */

  /** *** */ function hotCheck(apply) {
    /** *** */ if (hotStatus !== 'idle')
      throw new Error('check() is only allowed in idle status')
    /** *** */ hotApplyOnUpdate = apply
    /** *** */ hotSetStatus('check')
    /** *** */ return hotDownloadManifest(hotRequestTimeout).then(update => {
      /** *** */ if (!update) {
        /** *** */ hotSetStatus('idle')
        /** *** */ return null
        /** *** */
      }
      /** *** */ hotRequestedFilesMap = {}
      /** *** */ hotWaitingFilesMap = {}
      /** *** */ hotAvailableFilesMap = update.c
      /** *** */ hotUpdateNewHash = update.h
      /** *** */

      /** *** */ hotSetStatus('prepare')
      /** *** */ const promise = new Promise((resolve, reject) => {
        /** *** */ hotDeferred = {
          /** *** */ resolve,
          /** *** */ reject,
          /** *** */
        }
        /** *** */
      })
      /** *** */ hotUpdate = {}
      /** *** */ const chunkId = 0
      /** *** */ {
        // eslint-disable-line no-lone-blocks
        /** *** */ /* globals chunkId */
        /** *** */ hotEnsureUpdateChunk(chunkId)
        /** *** */
      }
      /** *** */ if (
        hotStatus === 'prepare' &&
        hotChunksLoading === 0 &&
        hotWaitingFiles === 0
      ) {
        /** *** */ hotUpdateDownloaded()
        /** *** */
      }
      /** *** */ return promise
      /** *** */
    })
    /** *** */
  }
  /** *** */

  /** *** */ function hotAddUpdateChunk(chunkId, moreModules) {
    // eslint-disable-line no-unused-vars
    /** *** */ if (
      !hotAvailableFilesMap[chunkId] ||
      !hotRequestedFilesMap[chunkId]
    )
      /** *** */ return
    /** *** */ hotRequestedFilesMap[chunkId] = false
    /** *** */ for (const moduleId in moreModules) {
      /** *** */ if (
        Object.prototype.hasOwnProperty.call(moreModules, moduleId)
      ) {
        /** *** */ hotUpdate[moduleId] = moreModules[moduleId]
        /** *** */
      }
      /** *** */
    }
    /** *** */ if (--hotWaitingFiles === 0 && hotChunksLoading === 0) {
      /** *** */ hotUpdateDownloaded()
      /** *** */
    }
    /** *** */
  }
  /** *** */

  /** *** */ function hotEnsureUpdateChunk(chunkId) {
    /** *** */ if (!hotAvailableFilesMap[chunkId]) {
      /** *** */ hotWaitingFilesMap[chunkId] = true
      /** *** */
    } else {
      /** *** */ hotRequestedFilesMap[chunkId] = true
      /** *** */ hotWaitingFiles++
      /** *** */ hotDownloadUpdateChunk(chunkId)
      /** *** */
    }
    /** *** */
  }
  /** *** */

  /** *** */ function hotUpdateDownloaded() {
    /** *** */ hotSetStatus('ready')
    /** *** */ const deferred = hotDeferred
    /** *** */ hotDeferred = null
    /** *** */ if (!deferred) return
    /** *** */ if (hotApplyOnUpdate) {
      /** *** */ // Wrap deferred object in Promise to mark it as a well-handled Promise to
      /** *** */ // avoid triggering uncaught exception warning in Chrome.
      /** *** */ // See https://bugs.chromium.org/p/chromium/issues/detail?id=465666
      /** *** */ Promise.resolve()
        .then(
          () => /** *** */ hotApply(hotApplyOnUpdate)
          /** *** */
        )
        .then(
          /** *** */ result => {
            /** *** */ deferred.resolve(result)
            /** *** */
          },
          /** *** */ err => {
            /** *** */ deferred.reject(err)
            /** *** */
          }
          /** *** */
        )
      /** *** */
    } else {
      /** *** */ const outdatedModules = []
      /** *** */ for (const id in hotUpdate) {
        /** *** */ if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
          /** *** */ outdatedModules.push(toModuleId(id))
          /** *** */
        }
        /** *** */
      }
      /** *** */ deferred.resolve(outdatedModules)
      /** *** */
    }
    /** *** */
  }
  /** *** */

  /** *** */ function hotApply(options) {
    /** *** */ if (hotStatus !== 'ready')
      throw new Error('apply() is only allowed in ready status')
    /** *** */ options = options || {}
    /** *** */

    /** *** */ let cb
    /** *** */ let i
    /** *** */ let j
    /** *** */ let module
    /** *** */ let moduleId
    /** *** */

    /** *** */ function getAffectedStuff(updateModuleId) {
      /** *** */ const outdatedModules = [updateModuleId]
      /** *** */ const outdatedDependencies = {}
      /** *** */

      /** *** */ const queue = outdatedModules.slice().map(
        id => /** *** */ ({
          /** *** */ chain: [id],
          /** *** */ id,
          /** *** */
        })
        /** *** */
      )
      /** *** */ while (queue.length > 0) {
        /** *** */ const queueItem = queue.pop()
        /** *** */ const moduleId = queueItem.id
        /** *** */ const chain = queueItem.chain
        /** *** */ module = installedModules[moduleId]
        /** *** */ if (!module || module.hot._selfAccepted) /** *** */ continue
        /** *** */ if (module.hot._selfDeclined) {
          /** *** */ return {
            /** *** */ type: 'self-declined',
            /** *** */ chain,
            /** *** */ moduleId,
            /** *** */
          }
          /** *** */
        }
        /** *** */ if (module.hot._main) {
          /** *** */ return {
            /** *** */ type: 'unaccepted',
            /** *** */ chain,
            /** *** */ moduleId,
            /** *** */
          }
          /** *** */
        }
        /** *** */ for (let i = 0; i < module.parents.length; i++) {
          /** *** */ const parentId = module.parents[i]
          /** *** */ const parent = installedModules[parentId]
          /** *** */ if (!parent) continue
          /** *** */ if (parent.hot._declinedDependencies[moduleId]) {
            /** *** */ return {
              /** *** */ type: 'declined',
              /** *** */ chain: chain.concat([parentId]),
              /** *** */ moduleId,
              /** *** */ parentId,
              /** *** */
            }
            /** *** */
          }
          /** *** */ if (outdatedModules.indexOf(parentId) >= 0) continue
          /** *** */ if (parent.hot._acceptedDependencies[moduleId]) {
            /** *** */ if (!outdatedDependencies[parentId])
              /** *** */ outdatedDependencies[parentId] = []
            /** *** */ addAllToSet(outdatedDependencies[parentId], [moduleId])
            /** *** */ continue
            /** *** */
          }
          /** *** */ delete outdatedDependencies[parentId]
          /** *** */ outdatedModules.push(parentId)
          /** *** */ queue.push({
            /** *** */ chain: chain.concat([parentId]),
            /** *** */ id: parentId,
            /** *** */
          })
          /** *** */
        }
        /** *** */
      }
      /** *** */

      /** *** */ return {
        /** *** */ type: 'accepted',
        /** *** */ moduleId: updateModuleId,
        /** *** */ outdatedModules,
        /** *** */ outdatedDependencies,
        /** *** */
      }
      /** *** */
    }
    /** *** */

    /** *** */ function addAllToSet(a, b) {
      /** *** */ for (let i = 0; i < b.length; i++) {
        /** *** */ const item = b[i]
        /** *** */ if (a.indexOf(item) < 0) /** *** */ a.push(item)
        /** *** */
      }
      /** *** */
    } // at begin all updates modules are outdated // the "outdated" status can propagate to parents if they don't accept the children
    /** *** */

    /** *** */ /** *** */ /** *** */ const outdatedDependencies = {}
    /** *** */ const outdatedModules = []
    /** *** */ const appliedUpdate = {}
    /** *** */

    /** *** */ const warnUnexpectedRequire = function warnUnexpectedRequire() {
      /** *** */ console.warn(
        `[HMR] unexpected require(${result.moduleId}) to disposed module`
      )
      /** *** */
    }
    /** *** */

    /** *** */ for (const id in hotUpdate) {
      /** *** */ if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
        /** *** */ moduleId = toModuleId(id)
        /** *** */ var result
        /** *** */ if (hotUpdate[id]) {
          /** *** */ result = getAffectedStuff(moduleId)
          /** *** */
        } else {
          /** *** */ result = {
            /** *** */ type: 'disposed',
            /** *** */ moduleId: id,
            /** *** */
          }
          /** *** */
        }
        /** *** */ let abortError = false
        /** *** */ let doApply = false
        /** *** */ let doDispose = false
        /** *** */ let chainInfo = ''
        /** *** */ if (result.chain) {
          /** *** */ chainInfo = `\nUpdate propagation: ${result.chain.join(
            ' -> '
          )}`
          /** *** */
        }
        /** *** */ switch (result.type) {
          /** *** */ case 'self-declined':
            /** *** */ if (options.onDeclined)
              /** *** */ options.onDeclined(result)
            /** *** */ if (!options.ignoreDeclined)
              /** *** */ abortError = new Error(
                `Aborted because of self decline: ${
                  result.moduleId
                }${chainInfo}`
              )
            /** *** */ break
          /** *** */ case 'declined':
            /** *** */ if (options.onDeclined)
              /** *** */ options.onDeclined(result)
            /** *** */ if (!options.ignoreDeclined)
              /** *** */ abortError = new Error(
                `Aborted because of declined dependency: ${
                  result.moduleId
                } in ${result.parentId}${chainInfo}`
              )
            /** *** */ break
          /** *** */ case 'unaccepted':
            /** *** */ if (options.onUnaccepted)
              /** *** */ options.onUnaccepted(result)
            /** *** */ if (!options.ignoreUnaccepted)
              /** *** */ abortError = new Error(
                `Aborted because ${moduleId} is not accepted${chainInfo}`
              )
            /** *** */ break
          /** *** */ case 'accepted':
            /** *** */ if (options.onAccepted)
              /** *** */ options.onAccepted(result)
            /** *** */ doApply = true
            /** *** */ break
          /** *** */ case 'disposed':
            /** *** */ if (options.onDisposed)
              /** *** */ options.onDisposed(result)
            /** *** */ doDispose = true
            /** *** */ break
          /** *** */ default:
            /** *** */ throw new Error(`Unexception type ${result.type}`)
          /** *** */
        }
        /** *** */ if (abortError) {
          /** *** */ hotSetStatus('abort')
          /** *** */ return Promise.reject(abortError)
          /** *** */
        }
        /** *** */ if (doApply) {
          /** *** */ appliedUpdate[moduleId] = hotUpdate[moduleId]
          /** *** */ addAllToSet(outdatedModules, result.outdatedModules)
          /** *** */ for (moduleId in result.outdatedDependencies) {
            /** *** */ if (
              Object.prototype.hasOwnProperty.call(
                result.outdatedDependencies,
                moduleId
              )
            ) {
              /** *** */ if (!outdatedDependencies[moduleId])
                /** *** */ outdatedDependencies[moduleId] = []
              /** *** */ addAllToSet(
                outdatedDependencies[moduleId],
                result.outdatedDependencies[moduleId]
              )
              /** *** */
            }
            /** *** */
          }
          /** *** */
        }
        /** *** */ if (doDispose) {
          /** *** */ addAllToSet(outdatedModules, [result.moduleId])
          /** *** */ appliedUpdate[moduleId] = warnUnexpectedRequire
          /** *** */
        }
        /** *** */
      }
      /** *** */
    } // Store self accepted outdated modules to require them later by the module system
    /** *** */

    /** *** */ /** *** */ const outdatedSelfAcceptedModules = []
    /** *** */ for (i = 0; i < outdatedModules.length; i++) {
      /** *** */ moduleId = outdatedModules[i]
      /** *** */ if (
        installedModules[moduleId] &&
        installedModules[moduleId].hot._selfAccepted
      )
        /** *** */ outdatedSelfAcceptedModules.push({
          /** *** */ module: moduleId,
          /** *** */ errorHandler: installedModules[moduleId].hot._selfAccepted,
          /** *** */
        })
      /** *** */
    } // Now in "dispose" phase
    /** *** */

    /** *** */ /** *** */ hotSetStatus('dispose')
    /** *** */ Object.keys(hotAvailableFilesMap).forEach(chunkId => {
      /** *** */ if (hotAvailableFilesMap[chunkId] === false) {
        /** *** */ hotDisposeChunk(chunkId)
        /** *** */
      }
      /** *** */
    })
    /** *** */

    /** *** */ let idx
    /** *** */ const queue = outdatedModules.slice()
    /** *** */ while (queue.length > 0) {
      /** *** */ moduleId = queue.pop()
      /** *** */ module = installedModules[moduleId]
      /** *** */ if (!module) continue
      /** *** */

      /** *** */ const data = {} // Call dispose handlers
      /** *** */

      /** *** */ /** *** */ const disposeHandlers = module.hot._disposeHandlers
      /** *** */ for (j = 0; j < disposeHandlers.length; j++) {
        /** *** */ cb = disposeHandlers[j]
        /** *** */ cb(data)
        /** *** */
      }
      /** *** */ hotCurrentModuleData[moduleId] = data // disable module (this disables requires from this module)
      /** *** */

      /** *** */ /** *** */ module.hot.active = false // remove module from cache
      /** *** */

      /** *** */ /** *** */ delete installedModules[moduleId] // when disposing there is no need to call dispose handler
      /** *** */

      /** *** */ /** *** */ delete outdatedDependencies[moduleId] // remove "parents" references from all children
      /** *** */

      /** *** */ /** *** */ for (j = 0; j < module.children.length; j++) {
        /** *** */ const child = installedModules[module.children[j]]
        /** *** */ if (!child) continue
        /** *** */ idx = child.parents.indexOf(moduleId)
        /** *** */ if (idx >= 0) {
          /** *** */ child.parents.splice(idx, 1)
          /** *** */
        }
        /** *** */
      }
      /** *** */
    } // remove outdated dependency from module children
    /** *** */

    /** *** */ /** *** */ let dependency
    /** *** */ let moduleOutdatedDependencies
    /** *** */ for (moduleId in outdatedDependencies) {
      /** *** */ if (
        Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
      ) {
        /** *** */ module = installedModules[moduleId]
        /** *** */ if (module) {
          /** *** */ moduleOutdatedDependencies = outdatedDependencies[moduleId]
          /** *** */ for (j = 0; j < moduleOutdatedDependencies.length; j++) {
            /** *** */ dependency = moduleOutdatedDependencies[j]
            /** *** */ idx = module.children.indexOf(dependency)
            /** *** */ if (idx >= 0) module.children.splice(idx, 1)
            /** *** */
          }
          /** *** */
        }
        /** *** */
      }
      /** *** */
    } // Not in "apply" phase
    /** *** */

    /** *** */ /** *** */ hotSetStatus('apply')
    /** *** */

    /** *** */ hotCurrentHash = hotUpdateNewHash // insert new code
    /** *** */

    /** *** */ /** *** */ for (moduleId in appliedUpdate) {
      /** *** */ if (
        Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)
      ) {
        /** *** */ modules[moduleId] = appliedUpdate[moduleId]
        /** *** */
      }
      /** *** */
    } // call accept handlers
    /** *** */

    /** *** */ /** *** */ let error = null
    /** *** */ for (moduleId in outdatedDependencies) {
      /** *** */ if (
        Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
      ) {
        /** *** */ module = installedModules[moduleId]
        /** *** */ if (module) {
          /** *** */ moduleOutdatedDependencies = outdatedDependencies[moduleId]
          /** *** */ const callbacks = []
          /** *** */ for (i = 0; i < moduleOutdatedDependencies.length; i++) {
            /** *** */ dependency = moduleOutdatedDependencies[i]
            /** *** */ cb = module.hot._acceptedDependencies[dependency]
            /** *** */ if (cb) {
              /** *** */ if (callbacks.indexOf(cb) >= 0) continue
              /** *** */ callbacks.push(cb)
              /** *** */
            }
            /** *** */
          }
          /** *** */ for (i = 0; i < callbacks.length; i++) {
            /** *** */ cb = callbacks[i]
            /** *** */ try {
              /** *** */ cb(moduleOutdatedDependencies)
              /** *** */
            } catch (err) {
              /** *** */ if (options.onErrored) {
                /** *** */ options.onErrored({
                  /** *** */ type: 'accept-errored',
                  /** *** */ moduleId,
                  /** *** */ dependencyId: moduleOutdatedDependencies[i],
                  /** *** */ error: err,
                  /** *** */
                })
                /** *** */
              }
              /** *** */ if (!options.ignoreErrored) {
                /** *** */ if (!error) /** *** */ error = err
                /** *** */
              }
              /** *** */
            }
            /** *** */
          }
          /** *** */
        }
        /** *** */
      }
      /** *** */
    } // Load self accepted modules
    /** *** */

    /** *** */ /** *** */ for (
      i = 0;
      i < outdatedSelfAcceptedModules.length;
      i++
    ) {
      /** *** */ const item = outdatedSelfAcceptedModules[i]
      /** *** */ moduleId = item.module
      /** *** */ hotCurrentParents = [moduleId]
      /** *** */ try {
        /** *** */ __webpack_require__(moduleId)
        /** *** */
      } catch (err) {
        /** *** */ if (typeof item.errorHandler === 'function') {
          /** *** */ try {
            /** *** */ item.errorHandler(err)
            /** *** */
          } catch (err2) {
            /** *** */ if (options.onErrored) {
              /** *** */ options.onErrored({
                /** *** */ type: 'self-accept-error-handler-errored',
                /** *** */ moduleId,
                /** *** */ error: err2,
                /** *** */ orginalError: err, // TODO remove in webpack 4
                /** *** */ originalError: err,
                /** *** */
              })
              /** *** */
            }
            /** *** */ if (!options.ignoreErrored) {
              /** *** */ if (!error) /** *** */ error = err2
              /** *** */
            }
            /** *** */ if (!error) /** *** */ error = err
            /** *** */
          }
          /** *** */
        } else {
          /** *** */ if (options.onErrored) {
            /** *** */ options.onErrored({
              /** *** */ type: 'self-accept-errored',
              /** *** */ moduleId,
              /** *** */ error: err,
              /** *** */
            })
            /** *** */
          }
          /** *** */ if (!options.ignoreErrored) {
            /** *** */ if (!error) /** *** */ error = err
            /** *** */
          }
          /** *** */
        }
        /** *** */
      }
      /** *** */
    } // handle errors in accept handlers and self accepted module load
    /** *** */

    /** *** */ /** *** */ if (error) {
      /** *** */ hotSetStatus('fail')
      /** *** */ return Promise.reject(error)
      /** *** */
    }
    /** *** */

    /** *** */ hotSetStatus('idle')
    /** *** */ return new Promise(resolve => {
      /** *** */ resolve(outdatedModules)
      /** *** */
    })
    /** *** */
  } // The module cache
  /** *** */
  /** *** */ /** *** */ var installedModules = {} // The require function
  /** *** */
  /** *** */ /** *** */ function __webpack_require__(moduleId) {
    /** *** */
    /** *** */ // Check if module is in cache
    /** *** */ if (installedModules[moduleId]) {
      /** *** */ return installedModules[moduleId].exports
      /** *** */
    } // Create a new module (and put it into the cache)
    /** *** */ /** *** */ const module = (installedModules[moduleId] = {
      /** *** */ i: moduleId,
      /** *** */ l: false,
      /** *** */ exports: {},
      /** *** */ hot: hotCreateModule(moduleId),
      /** *** */ parents: ((hotCurrentParentsTemp = hotCurrentParents),
      (hotCurrentParents = []),
      hotCurrentParentsTemp),
      /** *** */ children: [],
      /** *** */
    }) // Execute the module function
    /** *** */
    /** *** */ /** *** */ modules[moduleId].call(
      module.exports,
      module,
      module.exports,
      hotCreateRequire(moduleId)
    ) // Flag the module as loaded
    /** *** */
    /** *** */ /** *** */ module.l = true // Return the exports of the module
    /** *** */
    /** *** */ /** *** */ return module.exports
    /** *** */
  } // expose the modules object (__webpack_modules__)
  /** *** */
  /** *** */
  /** *** */ /** *** */ __webpack_require__.m = modules // expose the module cache
  /** *** */
  /** *** */ /** *** */ __webpack_require__.c = installedModules // define getter function for harmony exports
  /** *** */
  /** *** */ /** *** */ __webpack_require__.d = function(
    exports,
    name,
    getter
  ) {
    /** *** */ if (!__webpack_require__.o(exports, name)) {
      /** *** */ Object.defineProperty(exports, name, {
        /** *** */ configurable: false,
        /** *** */ enumerable: true,
        /** *** */ get: getter,
        /** *** */
      })
      /** *** */
    }
    /** *** */
  } // getDefaultExport function for compatibility with non-harmony modules
  /** *** */
  /** *** */ /** *** */ __webpack_require__.n = function(module) {
    /** *** */ const getter =
      module && module.__esModule
        ? /** *** */ function getDefault() {
            return module.default
          }
        : /** *** */ function getModuleExports() {
            return module
          }
    /** *** */ __webpack_require__.d(getter, 'a', getter)
    /** *** */ return getter
    /** *** */
  } // Object.prototype.hasOwnProperty.call
  /** *** */
  /** *** */ /** *** */ __webpack_require__.o = function(object, property) {
    return Object.prototype.hasOwnProperty.call(object, property)
  } // __webpack_public_path__
  /** *** */
  /** *** */ /** *** */ __webpack_require__.p = '' // __webpack_hash__
  /** *** */
  /** *** */ /** *** */ __webpack_require__.h = function() {
    return hotCurrentHash
  } // Load entry module and return exports
  /** *** */
  /** *** */ /** *** */ return hotCreateRequire(90)(
    (__webpack_require__.s = 90)
  )
  /** *** */
})(
  /** ********************************************************************* */
  /** *** */ [
    /* 0 */
    /** */ function(module, exports, __webpack_require__) {
      /**
       * Copyright (c) 2013-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       */

      if (true) {
        const REACT_ELEMENT_TYPE =
          (typeof Symbol === 'function' &&
            Symbol.for &&
            Symbol.for('react.element')) ||
          0xeac7

        const isValidElement = function(object) {
          return (
            typeof object === 'object' &&
            object !== null &&
            object.$$typeof === REACT_ELEMENT_TYPE
          )
        }

        // By explicitly using `prop-types` you are opting into new development behavior.
        // http://fb.me/prop-types-in-prod
        const throwOnDirectAccess = true
        module.exports = __webpack_require__(105)(
          isValidElement,
          throwOnDirectAccess
        )
      } else {
        // By explicitly using `prop-types` you are opting into new production behavior.
        // http://fb.me/prop-types-in-prod
        module.exports = require('./factoryWithThrowingShims')()
      }

      /** */
    },
    /* 1 */
    /** */ function(module, exports, __webpack_require__) {
      if (false) {
        module.exports = require('./cjs/react.production.min.js')
      } else {
        module.exports = __webpack_require__(91)
      }

      /** */
    },
    /* 2 */
    /** */ function(module, exports) {
      let g

      // This works in non-strict mode
      g = (function() {
        return this
      })()

      try {
        // This works if eval is allowed (see CSP)
        g = g || Function('return this')() || (1, eval)('this')
      } catch (e) {
        // This works if the window reference is available
        if (typeof window === 'object') g = window
      }

      // g can still be undefined, but nothing to do about it...
      // We return undefined, instead of nothing here, so it's
      // easier to handle this case. if(!global) { ...}

      module.exports = g

      /** */
    },
    /* 3 */
    /** */ function(module, exports, __webpack_require__) {
      /**
       * Copyright 2014-2015, Facebook, Inc.
       * All rights reserved.
       *
       * This source code is licensed under the BSD-style license found in the
       * LICENSE file in the root directory of this source tree. An additional grant
       * of patent rights can be found in the PATENTS file in the same directory.
       */

      /**
       * Similar to invariant but only logs a warning if the condition is not met.
       * This can be used to log issues in development environments in critical
       * paths. Removing the logging code for production environments will keep the
       * same logic and follow the same code paths.
       */

      let warning = function() {}

      if (true) {
        warning = function(condition, format, args) {
          const len = arguments.length
          args = new Array(len > 2 ? len - 2 : 0)
          for (let key = 2; key < len; key++) {
            args[key - 2] = arguments[key]
          }
          if (format === undefined) {
            throw new Error(
              '`warning(condition, format, ...args)` requires a warning ' +
                'message argument'
            )
          }

          if (format.length < 10 || /^[s\W]*$/.test(format)) {
            throw new Error(
              `${'The warning format should be able to uniquely identify this ' +
                'warning. Please, use a more descriptive format than: '}${format}`
            )
          }

          if (!condition) {
            let argIndex = 0
            const message = `Warning: ${format.replace(
              /%s/g,
              () => args[argIndex++]
            )}`
            if (typeof console !== 'undefined') {
              console.error(message)
            }
            try {
              // This error was thrown as a convenience so that you can use this stack
              // to find the callsite that caused this warning to fire.
              throw new Error(message)
            } catch (x) {}
          }
        }
      }

      module.exports = warning

      /** */
    },
    /* 4 */
    /** */ function(module, exports, __webpack_require__) {
      /**
       * Copyright (c) 2013-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       */

      /**
       * Use invariant() to assert state which your program assumes to be true.
       *
       * Provide sprintf-style format (only %s is supported) and arguments
       * to provide information about what broke and what you were
       * expecting.
       *
       * The invariant message will be stripped in production, but the invariant
       * will remain to ensure logic does not differ in production.
       */

      let validateFormat = function validateFormat(format) {}

      if (true) {
        validateFormat = function validateFormat(format) {
          if (format === undefined) {
            throw new Error('invariant requires an error message argument')
          }
        }
      }

      function invariant(condition, format, a, b, c, d, e, f) {
        validateFormat(format)

        if (!condition) {
          let error
          if (format === undefined) {
            error = new Error(
              'Minified exception occurred; use the non-minified dev environment ' +
                'for the full error message and additional helpful warnings.'
            )
          } else {
            const args = [a, b, c, d, e, f]
            let argIndex = 0
            error = new Error(format.replace(/%s/g, () => args[argIndex++]))
            error.name = 'Invariant Violation'
          }

          error.framesToPop = 1 // we don't care about invariant's own frame
          throw error
        }
      }

      module.exports = invariant

      /** */
    },
    /* 5 */
    /** */ function(module, exports, __webpack_require__) {
      exports.__esModule = true

      const _modality = __webpack_require__(159)

      const _modality2 = _interopRequireDefault(_modality)

      const _StyleSheet = __webpack_require__(160)

      const _StyleSheet2 = _interopRequireDefault(_StyleSheet)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      // initialize focus-ring fix
      ;(0, _modality2.default)()

      // allow component styles to be editable in React Dev Tools
      if (true) {
        let _require = __webpack_require__(9),
          canUseDOM = _require.canUseDOM

        if (canUseDOM && window.__REACT_DEVTOOLS_GLOBAL_HOOK__) {
          window.__REACT_DEVTOOLS_GLOBAL_HOOK__.resolveRNStyle =
            _StyleSheet2.default.flatten
        }
      }

      exports.default = _StyleSheet2.default

      /** */
    },
    /* 6 */
    /** */ function(module, exports, __webpack_require__) {
      /**
       * Copyright (c) 2014-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       */

      const emptyFunction = __webpack_require__(8)

      /**
       * Similar to invariant but only logs a warning if the condition is not met.
       * This can be used to log issues in development environments in critical
       * paths. Removing the logging code for production environments will keep the
       * same logic and follow the same code paths.
       */

      let warning = emptyFunction

      if (true) {
        const printWarning = function printWarning(format) {
          for (
            var _len = arguments.length,
              args = Array(_len > 1 ? _len - 1 : 0),
              _key = 1;
            _key < _len;
            _key++
          ) {
            args[_key - 1] = arguments[_key]
          }

          let argIndex = 0
          const message = `Warning: ${format.replace(
            /%s/g,
            () => args[argIndex++]
          )}`
          if (typeof console !== 'undefined') {
            console.error(message)
          }
          try {
            // --- Welcome to debugging React ---
            // This error was thrown as a convenience so that you can use this stack
            // to find the callsite that caused this warning to fire.
            throw new Error(message)
          } catch (x) {}
        }

        warning = function warning(condition, format) {
          if (format === undefined) {
            throw new Error(
              '`warning(condition, format, ...args)` requires a warning ' +
                'message argument'
            )
          }

          if (format.indexOf('Failed Composite propType: ') === 0) {
            return // Ignore CompositeComponent proptype check.
          }

          if (!condition) {
            for (
              var _len2 = arguments.length,
                args = Array(_len2 > 2 ? _len2 - 2 : 0),
                _key2 = 2;
              _key2 < _len2;
              _key2++
            ) {
              args[_key2 - 2] = arguments[_key2]
            }

            printWarning(...[format].concat(args))
          }
        }
      }

      module.exports = warning

      /** */
    },
    /* 7 */
    /** */ function(module, exports, __webpack_require__) {
      /**
       * Copyright 2013-2015, Facebook, Inc.
       * All rights reserved.
       *
       * This source code is licensed under the BSD-style license found in the
       * LICENSE file in the root directory of this source tree. An additional grant
       * of patent rights can be found in the PATENTS file in the same directory.
       */

      /**
       * Use invariant() to assert state which your program assumes to be true.
       *
       * Provide sprintf-style format (only %s is supported) and arguments
       * to provide information about what broke and what you were
       * expecting.
       *
       * The invariant message will be stripped in production, but the invariant
       * will remain to ensure logic does not differ in production.
       */

      const invariant = function(condition, format, a, b, c, d, e, f) {
        if (true) {
          if (format === undefined) {
            throw new Error('invariant requires an error message argument')
          }
        }

        if (!condition) {
          let error
          if (format === undefined) {
            error = new Error(
              'Minified exception occurred; use the non-minified dev environment ' +
                'for the full error message and additional helpful warnings.'
            )
          } else {
            const args = [a, b, c, d, e, f]
            let argIndex = 0
            error = new Error(format.replace(/%s/g, () => args[argIndex++]))
            error.name = 'Invariant Violation'
          }

          error.framesToPop = 1 // we don't care about invariant's own frame
          throw error
        }
      }

      module.exports = invariant

      /** */
    },
    /* 8 */
    /** */ function(module, exports, __webpack_require__) {
      /**
       * Copyright (c) 2013-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       */

      function makeEmptyFunction(arg) {
        return function() {
          return arg
        }
      }

      /**
       * This function accepts and discards inputs; it has no side effects. This is
       * primarily useful idiomatically for overridable function endpoints which
       * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
       */
      const emptyFunction = function emptyFunction() {}

      emptyFunction.thatReturns = makeEmptyFunction
      emptyFunction.thatReturnsFalse = makeEmptyFunction(false)
      emptyFunction.thatReturnsTrue = makeEmptyFunction(true)
      emptyFunction.thatReturnsNull = makeEmptyFunction(null)
      emptyFunction.thatReturnsThis = function() {
        return this
      }
      emptyFunction.thatReturnsArgument = function(arg) {
        return arg
      }

      module.exports = emptyFunction

      /** */
    },
    /* 9 */
    /** */ function(module, exports, __webpack_require__) {
      /**
       * Copyright (c) 2013-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       */

      const canUseDOM = !!(
        typeof window !== 'undefined' &&
        window.document &&
        window.document.createElement
      )

      /**
       * Simple, lightweight module assisting with the detection and context of
       * Worker. Helps avoid circular dependencies and allows code to reason about
       * whether or not they are in a Worker, even if they never include the main
       * `ReactWorker` dependency.
       */
      const ExecutionEnvironment = {
        canUseDOM,

        canUseWorkers: typeof Worker !== 'undefined',

        canUseEventListeners:
          canUseDOM && !!(window.addEventListener || window.attachEvent),

        canUseViewport: canUseDOM && !!window.screen,

        isInWorker: !canUseDOM, // For now, this is true - might change in the future.
      }

      module.exports = ExecutionEnvironment

      /** */
    },
    /* 10 */
    /** */ function(module, exports, __webpack_require__) {
      /*
object-assign
(c) Sindre Sorhus
@license MIT
*/

      /* eslint-disable no-unused-vars */
      const getOwnPropertySymbols = Object.getOwnPropertySymbols
      const hasOwnProperty = Object.prototype.hasOwnProperty
      const propIsEnumerable = Object.prototype.propertyIsEnumerable

      function toObject(val) {
        if (val === null || val === undefined) {
          throw new TypeError(
            'Object.assign cannot be called with null or undefined'
          )
        }

        return Object(val)
      }

      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false
          }

          // Detect buggy property enumeration order in older V8 versions.

          // https://bugs.chromium.org/p/v8/issues/detail?id=4118
          const test1 = new String('abc') // eslint-disable-line no-new-wrappers
          test1[5] = 'de'
          if (Object.getOwnPropertyNames(test1)[0] === '5') {
            return false
          }

          // https://bugs.chromium.org/p/v8/issues/detail?id=3056
          const test2 = {}
          for (let i = 0; i < 10; i++) {
            test2[`_${String.fromCharCode(i)}`] = i
          }
          const order2 = Object.getOwnPropertyNames(test2).map(n => test2[n])
          if (order2.join('') !== '0123456789') {
            return false
          }

          // https://bugs.chromium.org/p/v8/issues/detail?id=3056
          const test3 = {}
          'abcdefghijklmnopqrst'.split('').forEach(letter => {
            test3[letter] = letter
          })
          if (
            Object.keys(Object.assign({}, test3)).join('') !==
            'abcdefghijklmnopqrst'
          ) {
            return false
          }

          return true
        } catch (err) {
          // We don't expect any of the above to throw, but better to be safe.
          return false
        }
      }

      module.exports = shouldUseNative()
        ? Object.assign
        : function(target, source) {
            let from
            const to = toObject(target)
            let symbols

            for (let s = 1; s < arguments.length; s++) {
              from = Object(arguments[s])

              for (const key in from) {
                if (hasOwnProperty.call(from, key)) {
                  to[key] = from[key]
                }
              }

              if (getOwnPropertySymbols) {
                symbols = getOwnPropertySymbols(from)
                for (let i = 0; i < symbols.length; i++) {
                  if (propIsEnumerable.call(from, symbols[i])) {
                    to[symbols[i]] = from[symbols[i]]
                  }
                }
              }
            }

            return to
          }

      /** */
    },
    /* 11 */
    /** */ function(module, __webpack_exports__, __webpack_require__) {
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'a',
        () => addLeadingSlash
      )
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'f',
        () => stripLeadingSlash
      )
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'c',
        () => hasBasename
      )
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'e',
        () => stripBasename
      )
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'g',
        () => stripTrailingSlash
      )
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'd',
        () => parsePath
      )
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'b',
        () => createPath
      )
      var addLeadingSlash = function addLeadingSlash(path) {
        return path.charAt(0) === '/' ? path : `/${path}`
      }

      var stripLeadingSlash = function stripLeadingSlash(path) {
        return path.charAt(0) === '/' ? path.substr(1) : path
      }

      var hasBasename = function hasBasename(path, prefix) {
        return new RegExp(`^${prefix}(\\/|\\?|#|$)`, 'i').test(path)
      }

      var stripBasename = function stripBasename(path, prefix) {
        return hasBasename(path, prefix) ? path.substr(prefix.length) : path
      }

      var stripTrailingSlash = function stripTrailingSlash(path) {
        return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path
      }

      var parsePath = function parsePath(path) {
        let pathname = path || '/'
        let search = ''
        let hash = ''

        const hashIndex = pathname.indexOf('#')
        if (hashIndex !== -1) {
          hash = pathname.substr(hashIndex)
          pathname = pathname.substr(0, hashIndex)
        }

        const searchIndex = pathname.indexOf('?')
        if (searchIndex !== -1) {
          search = pathname.substr(searchIndex)
          pathname = pathname.substr(0, searchIndex)
        }

        return {
          pathname,
          search: search === '?' ? '' : search,
          hash: hash === '#' ? '' : hash,
        }
      }

      var createPath = function createPath(location) {
        let pathname = location.pathname,
          search = location.search,
          hash = location.hash

        let path = pathname || '/'

        if (search && search !== '?')
          path += search.charAt(0) === '?' ? search : `?${search}`

        if (hash && hash !== '#')
          path += hash.charAt(0) === '#' ? hash : `#${hash}`

        return path
      }

      /** */
    },
    /* 12 */
    /** */ function(module, exports, __webpack_require__) {
      exports.__esModule = true

      const _applyLayout = __webpack_require__(57)

      const _applyLayout2 = _interopRequireDefault(_applyLayout)

      const _applyNativeMethods = __webpack_require__(29)

      const _applyNativeMethods2 = _interopRequireDefault(_applyNativeMethods)

      const _propTypes = __webpack_require__(0)

      const _createElement = __webpack_require__(80)

      const _createElement2 = _interopRequireDefault(_createElement)

      const _invariant = __webpack_require__(4)

      const _invariant2 = _interopRequireDefault(_invariant)

      const _StyleSheet = __webpack_require__(5)

      const _StyleSheet2 = _interopRequireDefault(_StyleSheet)

      const _ViewPropTypes = __webpack_require__(82)

      const _ViewPropTypes2 = _interopRequireDefault(_ViewPropTypes)

      const _react = __webpack_require__(1)

      const _react2 = _interopRequireDefault(_react)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      function _objectWithoutProperties(obj, keys) {
        const target = {}
        for (const i in obj) {
          if (keys.indexOf(i) >= 0) continue
          if (!Object.prototype.hasOwnProperty.call(obj, i)) continue
          target[i] = obj[i]
        }
        return target
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError('Cannot call a class as a function')
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          )
        }
        return call && (typeof call === 'object' || typeof call === 'function')
          ? call
          : self
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== 'function' && superClass !== null) {
          throw new TypeError(
            `Super expression must either be null or a function, not ${typeof superClass}`
          )
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true,
          },
        })
        if (superClass)
          Object.setPrototypeOf
            ? Object.setPrototypeOf(subClass, superClass)
            : (subClass.__proto__ = superClass)
      } /**
       * Copyright (c) 2015-present, Nicolas Gallagher.
       * Copyright (c) 2015-present, Facebook, Inc.
       * All rights reserved.
       *
       * @providesModule View
       *
       */

      const calculateHitSlopStyle = function calculateHitSlopStyle(hitSlop) {
        const hitStyle = {}
        for (const prop in hitSlop) {
          if (hitSlop.hasOwnProperty(prop)) {
            const value = hitSlop[prop]
            hitStyle[prop] = value > 0 ? -1 * value : 0
          }
        }
        return hitStyle
      }

      const View = (function(_Component) {
        _inherits(View, _Component)

        function View() {
          _classCallCheck(this, View)

          return _possibleConstructorReturn(
            this,
            _Component.apply(this, arguments)
          )
        }

        View.prototype.render = function render() {
          let _props = this.props,
            hitSlop = _props.hitSlop,
            accessibilityViewIsModal = _props.accessibilityViewIsModal,
            collapsable = _props.collapsable,
            needsOffscreenAlphaCompositing =
              _props.needsOffscreenAlphaCompositing,
            onAccessibilityTap = _props.onAccessibilityTap,
            onLayout = _props.onLayout,
            onMagicTap = _props.onMagicTap,
            removeClippedSubviews = _props.removeClippedSubviews,
            renderToHardwareTextureAndroid =
              _props.renderToHardwareTextureAndroid,
            shouldRasterizeIOS = _props.shouldRasterizeIOS,
            tvParallaxProperties = _props.tvParallaxProperties,
            otherProps = _objectWithoutProperties(_props, [
              'hitSlop',
              'accessibilityViewIsModal',
              'collapsable',
              'needsOffscreenAlphaCompositing',
              'onAccessibilityTap',
              'onLayout',
              'onMagicTap',
              'removeClippedSubviews',
              'renderToHardwareTextureAndroid',
              'shouldRasterizeIOS',
              'tvParallaxProperties',
            ])

          if (true) {
            _react2.default.Children.toArray(this.props.children).forEach(
              item => {
                ;(0, _invariant2.default)(
                  typeof item !== 'string',
                  `Unexpected text node: ${item}. A text node cannot be a child of a <View>.`
                )
              }
            )
          }

          const isInAParentText = this.context.isInAParentText

          otherProps.style = _StyleSheet2.default.compose(
            styles.initial,
            _StyleSheet2.default.compose(
              isInAParentText && styles.inline,
              this.props.style
            )
          )

          if (hitSlop) {
            const hitSlopStyle = calculateHitSlopStyle(hitSlop)
            const hitSlopChild = (0, _createElement2.default)('span', {
              style: [styles.hitSlop, hitSlopStyle],
            })
            otherProps.children = _react2.default.Children.toArray([
              hitSlopChild,
              otherProps.children,
            ])
          }

          return (0, _createElement2.default)('div', otherProps)
        }

        return View
      })(_react.Component)

      View.displayName = 'View'
      View.contextTypes = {
        isInAParentText: _propTypes.bool,
      }
      View.propTypes = true ? _ViewPropTypes2.default : {}

      var styles = _StyleSheet2.default.create({
        // https://github.com/facebook/css-layout#default-values
        initial: {
          alignItems: 'stretch',
          borderWidth: 0,
          borderStyle: 'solid',
          boxSizing: 'border-box',
          display: 'flex',
          flexDirection: 'column',
          margin: 0,
          padding: 0,
          position: 'relative',
          zIndex: 0,
          // fix flexbox bugs
          minHeight: 0,
          minWidth: 0,
        },
        inline: {
          display: 'inline-flex',
        },
        // this zIndex-ordering positions the hitSlop above the View but behind
        // its children
        hitSlop: Object.assign({}, _StyleSheet2.default.absoluteFillObject, {
          zIndex: -1,
        }),
      })

      exports.default = (0, _applyLayout2.default)(
        (0, _applyNativeMethods2.default)(View)
      )

      /** */
    },
    /* 13 */
    /** */ function(module, exports, __webpack_require__) {
      exports.__esModule = true
      /**
       * Copyright (c) 2015-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @providesModule ColorPropType
       * @noflow
       */

      const isWebColor = function isWebColor(color) {
        return (
          color === 'currentcolor' ||
          color === 'inherit' ||
          color.indexOf('var(') === 0
        )
      }

      const colorPropType = function colorPropType(
        isRequired,
        props,
        propName,
        componentName,
        location,
        propFullName
      ) {
        const normalizeColor = __webpack_require__(32)
        const color = props[propName]
        if (color === undefined || color === null) {
          if (isRequired) {
            return new Error(
              `Required ${location} \`${propFullName ||
                propName}\` was not specified in \`${componentName}\`.`
            )
          }
          return
        }

        if (typeof color === 'number') {
          // Developers should not use a number, but we are using the prop type
          // both for user provided colors and for transformed ones. This isn't ideal
          // and should be fixed but will do for now...
          return
        }

        if (typeof color === 'string' && isWebColor(color)) {
          // Web supports additional color keywords and custom property values. Ignore them.
          return
        }

        if (normalizeColor(color) === null) {
          return new Error(
            `Invalid ${location} \`${propFullName ||
              propName}\` supplied to \`${componentName}\`: ${color}\n` +
              `Valid color formats are\n  - '#f0f' (#rgb)\n  - '#f0fc' (#rgba)\n  - '#ff00ff' (#rrggbb)\n  - '#ff00ff00' (#rrggbbaa)\n  - 'rgb(255, 255, 255)'\n  - 'rgba(255, 255, 255, 1.0)'\n  - 'hsl(360, 100%, 100%)'\n  - 'hsla(360, 100%, 100%, 1.0)'\n  - 'transparent'\n  - 'red'\n  - 0xff00ff00 (0xrrggbbaa)\n`
          )
        }
      }

      let ColorPropType = void 0

      if (true) {
        ColorPropType = colorPropType.bind(null, false /* isRequired */)
        ColorPropType.isRequired = colorPropType.bind(
          null,
          true /* isRequired */
        )
      } else {
        ColorPropType = function ColorPropType() {}
      }

      exports.default = ColorPropType

      /** */
    },
    /* 14 */
    /** */ function(module, exports, __webpack_require__) {
      Object.defineProperty(exports, '__esModule', {
        value: true,
      })
      exports.default = isPrefixedValue
      const regex = /-webkit-|-moz-|-ms-/

      function isPrefixedValue(value) {
        return typeof value === 'string' && regex.test(value)
      }
      module.exports = exports.default

      /** */
    },
    /* 15 */
    /** */ function(module, exports, __webpack_require__) {
      function checkDCE() {
        /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
        if (
          typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
          typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
        ) {
          return
        }
        if (true) {
          // This branch is unreachable because this function is only called
          // in production, but the condition is true only in development.
          // Therefore if the branch is still here, dead code elimination wasn't
          // properly applied.
          // Don't change the message. React DevTools relies on it. Also make sure
          // this message doesn't occur elsewhere in this function, or it will cause
          // a false positive.
          throw new Error('^_^')
        }
        try {
          // Verify that the code above has been dead code eliminated (DCE'd).
          __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE)
        } catch (err) {
          // DevTools shouldn't crash React, no matter what.
          // We should still report in case we break this code.
          console.error(err)
        }
      }

      if (false) {
        // DCE check should happen before ReactDOM bundle executes so that
        // DevTools can report bad minification during injection.
        checkDCE()
        module.exports = require('./cjs/react-dom.production.min.js')
      } else {
        module.exports = __webpack_require__(92)
      }

      /** */
    },
    /* 16 */
    /** */ function(module, __webpack_exports__, __webpack_require__) {
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'a',
        () => createLocation
      )
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'b',
        () => locationsAreEqual
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_0_resolve_pathname__ = __webpack_require__(
        40
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_1_value_equal__ = __webpack_require__(
        41
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_2__PathUtils__ = __webpack_require__(
        11
      )
      const _extends =
        Object.assign ||
        function(target) {
          for (let i = 1; i < arguments.length; i++) {
            const source = arguments[i]
            for (const key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key]
              }
            }
          }
          return target
        }

      var createLocation = function createLocation(
        path,
        state,
        key,
        currentLocation
      ) {
        let location = void 0
        if (typeof path === 'string') {
          // Two-arg form: push(path, state)
          location = Object(
            __WEBPACK_IMPORTED_MODULE_2__PathUtils__['d' /* parsePath */]
          )(path)
          location.state = state
        } else {
          // One-arg form: push(location)
          location = _extends({}, path)

          if (location.pathname === undefined) location.pathname = ''

          if (location.search) {
            if (location.search.charAt(0) !== '?')
              location.search = `?${location.search}`
          } else {
            location.search = ''
          }

          if (location.hash) {
            if (location.hash.charAt(0) !== '#')
              location.hash = `#${location.hash}`
          } else {
            location.hash = ''
          }

          if (state !== undefined && location.state === undefined)
            location.state = state
        }

        try {
          location.pathname = decodeURI(location.pathname)
        } catch (e) {
          if (e instanceof URIError) {
            throw new URIError(
              `Pathname "${location.pathname}" could not be decoded. ` +
                `This is likely caused by an invalid percent-encoding.`
            )
          } else {
            throw e
          }
        }

        if (key) location.key = key

        if (currentLocation) {
          // Resolve incomplete/relative pathname relative to current location.
          if (!location.pathname) {
            location.pathname = currentLocation.pathname
          } else if (location.pathname.charAt(0) !== '/') {
            location.pathname = Object(
              __WEBPACK_IMPORTED_MODULE_0_resolve_pathname__.default
            )(location.pathname, currentLocation.pathname)
          }
        } else {
          // When there is no prior location and pathname is empty, set it to /
          if (!location.pathname) {
            location.pathname = '/'
          }
        }

        return location
      }

      var locationsAreEqual = function locationsAreEqual(a, b) {
        return (
          a.pathname === b.pathname &&
          a.search === b.search &&
          a.hash === b.hash &&
          a.key === b.key &&
          Object(__WEBPACK_IMPORTED_MODULE_1_value_equal__.default)(
            a.state,
            b.state
          )
        )
      }

      /** */
    },
    /* 17 */
    /** */ function(module, exports, __webpack_require__) {
      ;(function(global) {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        })

        const _typeof =
          typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
            ? function(obj) {
                return typeof obj
              }
            : function(obj) {
                return obj &&
                  typeof Symbol === 'function' &&
                  obj.constructor === Symbol &&
                  obj !== Symbol.prototype
                  ? 'symbol'
                  : typeof obj
              }

        /**
         * This action type will be dispatched when your history
         * receives a location change.
         */
        const LOCATION_CHANGE = (exports.LOCATION_CHANGE =
          '@@router/LOCATION_CHANGE')

        const onLocationChanged = (exports.onLocationChanged = function onLocationChanged(
          location,
          action
        ) {
          return {
            type: _get__('LOCATION_CHANGE'),
            payload: {
              location,
              action,
            },
          }
        })

        /**
         * This action type will be dispatched by the history actions below.
         * If you're writing a middleware to watch for navigation events, be sure to
         * look for actions of this type.
         */
        const CALL_HISTORY_METHOD = (exports.CALL_HISTORY_METHOD =
          '@@router/CALL_HISTORY_METHOD')

        const updateLocation = function updateLocation(method) {
          return function() {
            for (
              var _len = arguments.length, args = Array(_len), _key = 0;
              _key < _len;
              _key++
            ) {
              args[_key] = arguments[_key]
            }

            return {
              type: _get__('CALL_HISTORY_METHOD'),
              payload: {
                method,
                args,
              },
            }
          }
        }

        /**
         * These actions correspond to the history API.
         * The associated routerMiddleware will capture these events before they get to
         * your reducer and reissue them as the matching function on your history.
         */
        const push = (exports.push = _get__('updateLocation')('push'))
        const replace = (exports.replace = _get__('updateLocation')('replace'))
        const go = (exports.go = _get__('updateLocation')('go'))
        const goBack = (exports.goBack = _get__('updateLocation')('goBack'))
        const goForward = (exports.goForward = _get__('updateLocation')(
          'goForward'
        ))

        const routerActions = (exports.routerActions = {
          push: _get__('push'),
          replace: _get__('replace'),
          go: _get__('go'),
          goBack: _get__('goBack'),
          goForward: _get__('goForward'),
        })

        function _getGlobalObject() {
          try {
            if (global) {
              return global
            }
          } catch (e) {
            try {
              if (window) {
                return window
              }
            } catch (e) {
              return this
            }
          }
        }

        let _RewireModuleId__ = null

        function _getRewireModuleId__() {
          if (_RewireModuleId__ === null) {
            const globalVariable = _getGlobalObject()

            if (!globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__) {
              globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__ = 0
            }

            _RewireModuleId__ = __$$GLOBAL_REWIRE_NEXT_MODULE_ID__++
          }

          return _RewireModuleId__
        }

        function _getRewireRegistry__() {
          const theGlobalVariable = _getGlobalObject()

          if (!theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__) {
            theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null)
          }

          return __$$GLOBAL_REWIRE_REGISTRY__
        }

        function _getRewiredData__() {
          const moduleId = _getRewireModuleId__()

          const registry = _getRewireRegistry__()

          let rewireData = registry[moduleId]

          if (!rewireData) {
            registry[moduleId] = Object.create(null)
            rewireData = registry[moduleId]
          }

          return rewireData
        }

        ;(function registerResetAll() {
          const theGlobalVariable = _getGlobalObject()

          if (!theGlobalVariable.__rewire_reset_all__) {
            theGlobalVariable.__rewire_reset_all__ = function() {
              theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(
                null
              )
            }
          }
        })()

        const INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__'
        const _RewireAPI__ = {}
        ;(function() {
          function addPropertyToAPIObject(name, value) {
            Object.defineProperty(_RewireAPI__, name, {
              value,
              enumerable: false,
              configurable: true,
            })
          }

          addPropertyToAPIObject('__get__', _get__)
          addPropertyToAPIObject('__GetDependency__', _get__)
          addPropertyToAPIObject('__Rewire__', _set__)
          addPropertyToAPIObject('__set__', _set__)
          addPropertyToAPIObject('__reset__', _reset__)
          addPropertyToAPIObject('__ResetDependency__', _reset__)
          addPropertyToAPIObject('__with__', _with__)
        })()

        function _get__(variableName) {
          const rewireData = _getRewiredData__()

          if (rewireData[variableName] === undefined) {
            return _get_original__(variableName)
          }
          const value = rewireData[variableName]

          if (value === INTENTIONAL_UNDEFINED) {
            return undefined
          }
          return value
        }

        function _get_original__(variableName) {
          switch (variableName) {
            case 'LOCATION_CHANGE':
              return LOCATION_CHANGE

            case 'CALL_HISTORY_METHOD':
              return CALL_HISTORY_METHOD

            case 'updateLocation':
              return updateLocation

            case 'push':
              return push

            case 'replace':
              return replace

            case 'go':
              return go

            case 'goBack':
              return goBack

            case 'goForward':
              return goForward
          }

          return undefined
        }

        function _assign__(variableName, value) {
          const rewireData = _getRewiredData__()

          if (rewireData[variableName] === undefined) {
            return _set_original__(variableName, value)
          }
          return (rewireData[variableName] = value)
        }

        function _set_original__(variableName, _value) {
          switch (variableName) {
          }

          return undefined
        }

        function _update_operation__(operation, variableName, prefix) {
          const oldValue = _get__(variableName)

          const newValue = operation === '++' ? oldValue + 1 : oldValue - 1

          _assign__(variableName, newValue)

          return prefix ? newValue : oldValue
        }

        function _set__(variableName, value) {
          const rewireData = _getRewiredData__()

          if (
            (typeof variableName === 'undefined'
              ? 'undefined'
              : _typeof(variableName)) === 'object'
          ) {
            Object.keys(variableName).forEach(name => {
              rewireData[name] = variableName[name]
            })
          } else {
            if (value === undefined) {
              rewireData[variableName] = INTENTIONAL_UNDEFINED
            } else {
              rewireData[variableName] = value
            }

            return function() {
              _reset__(variableName)
            }
          }
        }

        function _reset__(variableName) {
          const rewireData = _getRewiredData__()

          delete rewireData[variableName]

          if (Object.keys(rewireData).length == 0) {
            delete _getRewireRegistry__()[_getRewireModuleId__]
          }
        }

        function _with__(object) {
          const rewireData = _getRewiredData__()

          const rewiredVariableNames = Object.keys(object)
          const previousValues = {}

          function reset() {
            rewiredVariableNames.forEach(variableName => {
              rewireData[variableName] = previousValues[variableName]
            })
          }

          return function(callback) {
            rewiredVariableNames.forEach(variableName => {
              previousValues[variableName] = rewireData[variableName]
              rewireData[variableName] = object[variableName]
            })
            const result = callback()

            if (!!result && typeof result.then === 'function') {
              result.then(reset).catch(reset)
            } else {
              reset()
            }

            return result
          }
        }

        exports.__get__ = _get__
        exports.__GetDependency__ = _get__
        exports.__Rewire__ = _set__
        exports.__set__ = _set__
        exports.__ResetDependency__ = _reset__
        exports.__RewireAPI__ = _RewireAPI__
        exports.default = _RewireAPI__
        /* WEBPACK VAR INJECTION */
      }.call(exports, __webpack_require__(2)))

      /** */
    },
    /* 18 */
    /** */ function(module, __webpack_exports__, __webpack_require__) {
      Object.defineProperty(__webpack_exports__, '__esModule', { value: true })
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_0__components_Provider__ = __webpack_require__(
        121
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_1__components_connectAdvanced__ = __webpack_require__(
        48
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_2__connect_connect__ = __webpack_require__(
        123
      )
      /* harmony reexport (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'Provider',
        () => __WEBPACK_IMPORTED_MODULE_0__components_Provider__.b
      )
      /* harmony reexport (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'createProvider',
        () => __WEBPACK_IMPORTED_MODULE_0__components_Provider__.a
      )
      /* harmony reexport (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'connectAdvanced',
        () => __WEBPACK_IMPORTED_MODULE_1__components_connectAdvanced__.a
      )
      /* harmony reexport (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'connect',
        () => __WEBPACK_IMPORTED_MODULE_2__connect_connect__.a
      )

      /** */
    },
    /* 19 */
    /** */ function(module, exports, __webpack_require__) {
      exports.__esModule = true

      const _applyLayout = __webpack_require__(57)

      const _applyLayout2 = _interopRequireDefault(_applyLayout)

      const _applyNativeMethods = __webpack_require__(29)

      const _applyNativeMethods2 = _interopRequireDefault(_applyNativeMethods)

      const _propTypes = __webpack_require__(0)

      const _react = __webpack_require__(1)

      const _createElement = __webpack_require__(80)

      const _createElement2 = _interopRequireDefault(_createElement)

      const _StyleSheet = __webpack_require__(5)

      const _StyleSheet2 = _interopRequireDefault(_StyleSheet)

      const _TextPropTypes = __webpack_require__(205)

      const _TextPropTypes2 = _interopRequireDefault(_TextPropTypes)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      function _objectWithoutProperties(obj, keys) {
        const target = {}
        for (const i in obj) {
          if (keys.indexOf(i) >= 0) continue
          if (!Object.prototype.hasOwnProperty.call(obj, i)) continue
          target[i] = obj[i]
        }
        return target
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError('Cannot call a class as a function')
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          )
        }
        return call && (typeof call === 'object' || typeof call === 'function')
          ? call
          : self
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== 'function' && superClass !== null) {
          throw new TypeError(
            `Super expression must either be null or a function, not ${typeof superClass}`
          )
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true,
          },
        })
        if (superClass)
          Object.setPrototypeOf
            ? Object.setPrototypeOf(subClass, superClass)
            : (subClass.__proto__ = superClass)
      } /**
       * Copyright (c) 2015-present, Nicolas Gallagher.
       * Copyright (c) 2015-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @providesModule Text
       *
       */

      const Text = (function(_Component) {
        _inherits(Text, _Component)

        function Text() {
          _classCallCheck(this, Text)

          return _possibleConstructorReturn(
            this,
            _Component.apply(this, arguments)
          )
        }

        Text.prototype.getChildContext = function getChildContext() {
          return { isInAParentText: true }
        }

        Text.prototype.render = function render() {
          let _props = this.props,
            dir = _props.dir,
            numberOfLines = _props.numberOfLines,
            onPress = _props.onPress,
            selectable = _props.selectable,
            style = _props.style,
            adjustsFontSizeToFit = _props.adjustsFontSizeToFit,
            allowFontScaling = _props.allowFontScaling,
            ellipsizeMode = _props.ellipsizeMode,
            lineBreakMode = _props.lineBreakMode,
            minimumFontScale = _props.minimumFontScale,
            onLayout = _props.onLayout,
            onLongPress = _props.onLongPress,
            pressRetentionOffset = _props.pressRetentionOffset,
            selectionColor = _props.selectionColor,
            suppressHighlighting = _props.suppressHighlighting,
            textBreakStrategy = _props.textBreakStrategy,
            tvParallaxProperties = _props.tvParallaxProperties,
            otherProps = _objectWithoutProperties(_props, [
              'dir',
              'numberOfLines',
              'onPress',
              'selectable',
              'style',
              'adjustsFontSizeToFit',
              'allowFontScaling',
              'ellipsizeMode',
              'lineBreakMode',
              'minimumFontScale',
              'onLayout',
              'onLongPress',
              'pressRetentionOffset',
              'selectionColor',
              'suppressHighlighting',
              'textBreakStrategy',
              'tvParallaxProperties',
            ])

          const isInAParentText = this.context.isInAParentText

          if (onPress) {
            otherProps.accessible = true
            otherProps.onClick = onPress
            otherProps.onKeyDown = this._createEnterHandler(onPress)
          }

          // allow browsers to automatically infer the language writing direction
          otherProps.dir = dir !== undefined ? dir : 'auto'
          otherProps.style = [
            styles.initial,
            this.context.isInAParentText === true && styles.isInAParentText,
            style,
            selectable === false && styles.notSelectable,
            numberOfLines === 1 && styles.singleLineStyle,
            onPress && styles.pressable,
          ]

          const component = isInAParentText ? 'span' : 'div'

          return (0, _createElement2.default)(component, otherProps)
        }

        Text.prototype._createEnterHandler = function _createEnterHandler(fn) {
          return function(e) {
            if (e.keyCode === 13) {
              fn && fn(e)
            }
          }
        }

        return Text
      })(_react.Component)

      Text.displayName = 'Text'
      Text.childContextTypes = {
        isInAParentText: _propTypes.bool,
      }
      Text.contextTypes = {
        isInAParentText: _propTypes.bool,
      }
      Text.propTypes = true ? _TextPropTypes2.default : {}

      var styles = _StyleSheet2.default.create({
        initial: {
          borderWidth: 0,
          boxSizing: 'border-box',
          color: 'inherit',
          display: 'inline',
          font: 'inherit',
          fontFamily: 'System',
          fontSize: 14,
          margin: 0,
          padding: 0,
          textDecorationLine: 'none',
          whiteSpace: 'pre-wrap',
          wordWrap: 'break-word',
        },
        isInAParentText: {
          // inherit parent font styles
          fontFamily: 'inherit',
          fontSize: 'inherit',
          fontVariant: ['inherit'],
          whiteSpace: 'inherit',
        },
        notSelectable: {
          userSelect: 'none',
        },
        pressable: {
          cursor: 'pointer',
        },
        singleLineStyle: {
          maxWidth: '100%',
          overflow: 'hidden',
          textOverflow: 'ellipsis',
          whiteSpace: 'nowrap',
        },
      })

      exports.default = (0, _applyLayout2.default)(
        (0, _applyNativeMethods2.default)(Text)
      )

      /** */
    },
    /* 20 */
    /** */ function(module, exports, __webpack_require__) {
      /**
       * Copyright (c) 2013-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       */

      const emptyObject = {}

      if (true) {
        Object.freeze(emptyObject)
      }

      module.exports = emptyObject

      /** */
    },
    /* 21 */
    /** */ function(module, exports, __webpack_require__) {
      /**
       * Copyright (c) 2013-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       */

      if (true) {
        var invariant = __webpack_require__(4)
        var warning = __webpack_require__(6)
        var ReactPropTypesSecret = __webpack_require__(37)
        var loggedTypeFailures = {}
      }

      /**
       * Assert that the values match with the type specs.
       * Error messages are memorized and will only be shown once.
       *
       * @param {object} typeSpecs Map of name to a ReactPropType
       * @param {object} values Runtime values that need to be type-checked
       * @param {string} location e.g. "prop", "context", "child context"
       * @param {string} componentName Name of the component for error messages.
       * @param {?Function} getStack Returns the component stack.
       * @private
       */
      function checkPropTypes(
        typeSpecs,
        values,
        location,
        componentName,
        getStack
      ) {
        if (true) {
          for (const typeSpecName in typeSpecs) {
            if (typeSpecs.hasOwnProperty(typeSpecName)) {
              var error
              // Prop type validation may throw. In case they do, we don't want to
              // fail the render phase where it didn't fail before. So we log it.
              // After these have been cleaned up, we'll let them throw.
              try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                invariant(
                  typeof typeSpecs[typeSpecName] === 'function',
                  '%s: %s type `%s` is invalid; it must be a function, usually from ' +
                    'the `prop-types` package, but received `%s`.',
                  componentName || 'React class',
                  location,
                  typeSpecName,
                  typeof typeSpecs[typeSpecName]
                )
                error = typeSpecs[typeSpecName](
                  values,
                  typeSpecName,
                  componentName,
                  location,
                  null,
                  ReactPropTypesSecret
                )
              } catch (ex) {
                error = ex
              }
              warning(
                !error || error instanceof Error,
                '%s: type specification of %s `%s` is invalid; the type checker ' +
                  'function must return `null` or an `Error` but returned a %s. ' +
                  'You may have forgotten to pass an argument to the type checker ' +
                  'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
                  'shape all require an argument).',
                componentName || 'React class',
                location,
                typeSpecName,
                typeof error
              )
              if (
                error instanceof Error &&
                !(error.message in loggedTypeFailures)
              ) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error.message] = true

                const stack = getStack ? getStack() : ''

                warning(
                  false,
                  'Failed %s type: %s%s',
                  location,
                  error.message,
                  stack != null ? stack : ''
                )
              }
            }
          }
        }
      }

      module.exports = checkPropTypes

      /** */
    },
    /* 22 */
    /** */ function(module, exports, __webpack_require__) {
      exports.__esModule = true
      const addLeadingSlash = (exports.addLeadingSlash = function addLeadingSlash(
        path
      ) {
        return path.charAt(0) === '/' ? path : `/${path}`
      })

      const stripLeadingSlash = (exports.stripLeadingSlash = function stripLeadingSlash(
        path
      ) {
        return path.charAt(0) === '/' ? path.substr(1) : path
      })

      const hasBasename = (exports.hasBasename = function hasBasename(
        path,
        prefix
      ) {
        return new RegExp(`^${prefix}(\\/|\\?|#|$)`, 'i').test(path)
      })

      const stripBasename = (exports.stripBasename = function stripBasename(
        path,
        prefix
      ) {
        return hasBasename(path, prefix) ? path.substr(prefix.length) : path
      })

      const stripTrailingSlash = (exports.stripTrailingSlash = function stripTrailingSlash(
        path
      ) {
        return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path
      })

      const parsePath = (exports.parsePath = function parsePath(path) {
        let pathname = path || '/'
        let search = ''
        let hash = ''

        const hashIndex = pathname.indexOf('#')
        if (hashIndex !== -1) {
          hash = pathname.substr(hashIndex)
          pathname = pathname.substr(0, hashIndex)
        }

        const searchIndex = pathname.indexOf('?')
        if (searchIndex !== -1) {
          search = pathname.substr(searchIndex)
          pathname = pathname.substr(0, searchIndex)
        }

        return {
          pathname,
          search: search === '?' ? '' : search,
          hash: hash === '#' ? '' : hash,
        }
      })

      const createPath = (exports.createPath = function createPath(location) {
        let pathname = location.pathname,
          search = location.search,
          hash = location.hash

        let path = pathname || '/'

        if (search && search !== '?')
          path += search.charAt(0) === '?' ? search : `?${search}`

        if (hash && hash !== '#')
          path += hash.charAt(0) === '#' ? hash : `#${hash}`

        return path
      })

      /** */
    },
    /* 23 */
    /** */ function(module, __webpack_exports__, __webpack_require__) {
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(
        3
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_0_warning__
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_1_invariant__ = __webpack_require__(
        7
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_1_invariant___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_1_invariant__
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_2_react__ = __webpack_require__(
        1
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_2_react___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_2_react__
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_3_prop_types__ = __webpack_require__(
        0
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_3_prop_types___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_3_prop_types__
      )
      const _extends =
        Object.assign ||
        function(target) {
          for (let i = 1; i < arguments.length; i++) {
            const source = arguments[i]
            for (const key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key]
              }
            }
          }
          return target
        }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError('Cannot call a class as a function')
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          )
        }
        return call && (typeof call === 'object' || typeof call === 'function')
          ? call
          : self
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== 'function' && superClass !== null) {
          throw new TypeError(
            `Super expression must either be null or a function, not ${typeof superClass}`
          )
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true,
          },
        })
        if (superClass)
          Object.setPrototypeOf
            ? Object.setPrototypeOf(subClass, superClass)
            : (subClass.__proto__ = superClass)
      }

      /**
       * The public API for putting history on context.
       */

      const Router = (function(_React$Component) {
        _inherits(Router, _React$Component)

        function Router() {
          let _temp, _this, _ret

          _classCallCheck(this, Router)

          for (
            var _len = arguments.length, args = Array(_len), _key = 0;
            _key < _len;
            _key++
          ) {
            args[_key] = arguments[_key]
          }

          return (
            (_ret = ((_temp = ((_this = _possibleConstructorReturn(
              this,
              _React$Component.call(...[this].concat(args))
            )),
            _this)),
            (_this.state = {
              match: _this.computeMatch(_this.props.history.location.pathname),
            }),
            _temp)),
            _possibleConstructorReturn(_this, _ret)
          )
        }

        Router.prototype.getChildContext = function getChildContext() {
          return {
            router: _extends({}, this.context.router, {
              history: this.props.history,
              route: {
                location: this.props.history.location,
                match: this.state.match,
              },
            }),
          }
        }

        Router.prototype.computeMatch = function computeMatch(pathname) {
          return {
            path: '/',
            url: '/',
            params: {},
            isExact: pathname === '/',
          }
        }

        Router.prototype.componentWillMount = function componentWillMount() {
          const _this2 = this

          let _props = this.props,
            children = _props.children,
            history = _props.history

          __WEBPACK_IMPORTED_MODULE_1_invariant___default()(
            children == null ||
              __WEBPACK_IMPORTED_MODULE_2_react___default.a.Children.count(
                children
              ) === 1,
            'A <Router> may have only one child element'
          )

          // Do this here so we can setState when a <Redirect> changes the
          // location in componentWillMount. This happens e.g. when doing
          // server rendering using a <StaticRouter>.
          this.unlisten = history.listen(() => {
            _this2.setState({
              match: _this2.computeMatch(history.location.pathname),
            })
          })
        }

        Router.prototype.componentWillReceiveProps = function componentWillReceiveProps(
          nextProps
        ) {
          __WEBPACK_IMPORTED_MODULE_0_warning___default()(
            this.props.history === nextProps.history,
            'You cannot change <Router history>'
          )
        }

        Router.prototype.componentWillUnmount = function componentWillUnmount() {
          this.unlisten()
        }

        Router.prototype.render = function render() {
          const children = this.props.children

          return children
            ? __WEBPACK_IMPORTED_MODULE_2_react___default.a.Children.only(
                children
              )
            : null
        }

        return Router
      })(__WEBPACK_IMPORTED_MODULE_2_react___default.a.Component)

      Router.propTypes = {
        history:
          __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object.isRequired,
        children: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.node,
      }
      Router.contextTypes = {
        router: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object,
      }
      Router.childContextTypes = {
        router:
          __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object.isRequired,
      }

      /* harmony default export */ __webpack_exports__.a = Router

      /** */
    },
    /* 24 */
    /** */ function(module, __webpack_exports__, __webpack_require__) {
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(
        3
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_0_warning__
      )

      const createTransitionManager = function createTransitionManager() {
        let prompt = null

        const setPrompt = function setPrompt(nextPrompt) {
          __WEBPACK_IMPORTED_MODULE_0_warning___default()(
            prompt == null,
            'A history supports only one prompt at a time'
          )

          prompt = nextPrompt

          return function() {
            if (prompt === nextPrompt) prompt = null
          }
        }

        const confirmTransitionTo = function confirmTransitionTo(
          location,
          action,
          getUserConfirmation,
          callback
        ) {
          // TODO: If another transition starts while we're still confirming
          // the previous one, we may end up in a weird state. Figure out the
          // best way to handle this.
          if (prompt != null) {
            const result =
              typeof prompt === 'function' ? prompt(location, action) : prompt

            if (typeof result === 'string') {
              if (typeof getUserConfirmation === 'function') {
                getUserConfirmation(result, callback)
              } else {
                __WEBPACK_IMPORTED_MODULE_0_warning___default()(
                  false,
                  'A history needs a getUserConfirmation function in order to use a prompt message'
                )

                callback(true)
              }
            } else {
              // Return false from a transition hook to cancel the transition.
              callback(result !== false)
            }
          } else {
            callback(true)
          }
        }

        let listeners = []

        const appendListener = function appendListener(fn) {
          let isActive = true

          const listener = function listener() {
            if (isActive) fn(...arguments)
          }

          listeners.push(listener)

          return function() {
            isActive = false
            listeners = listeners.filter(item => item !== listener)
          }
        }

        const notifyListeners = function notifyListeners() {
          for (
            var _len = arguments.length, args = Array(_len), _key = 0;
            _key < _len;
            _key++
          ) {
            args[_key] = arguments[_key]
          }

          listeners.forEach(listener => listener(...args))
        }

        return {
          setPrompt,
          confirmTransitionTo,
          appendListener,
          notifyListeners,
        }
      }

      /* harmony default export */ __webpack_exports__.a = createTransitionManager

      /** */
    },
    /* 25 */
    /** */ function(module, __webpack_exports__, __webpack_require__) {
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_0_path_to_regexp__ = __webpack_require__(
        114
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_0_path_to_regexp___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_0_path_to_regexp__
      )

      const patternCache = {}
      const cacheLimit = 10000
      let cacheCount = 0

      const compilePath = function compilePath(pattern, options) {
        const cacheKey = `${options.end}${options.strict}${options.sensitive}`
        const cache = patternCache[cacheKey] || (patternCache[cacheKey] = {})

        if (cache[pattern]) return cache[pattern]

        const keys = []
        const re = __WEBPACK_IMPORTED_MODULE_0_path_to_regexp___default()(
          pattern,
          keys,
          options
        )
        const compiledPattern = { re, keys }

        if (cacheCount < cacheLimit) {
          cache[pattern] = compiledPattern
          cacheCount++
        }

        return compiledPattern
      }

      /**
       * Public API for matching a URL pathname to a path pattern.
       */
      const matchPath = function matchPath(pathname) {
        let options =
          arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}

        if (typeof options === 'string') options = { path: options }

        let _options = options,
          _options$path = _options.path,
          path = _options$path === undefined ? '/' : _options$path,
          _options$exact = _options.exact,
          exact = _options$exact === undefined ? false : _options$exact,
          _options$strict = _options.strict,
          strict = _options$strict === undefined ? false : _options$strict,
          _options$sensitive = _options.sensitive,
          sensitive =
            _options$sensitive === undefined ? false : _options$sensitive

        let _compilePath = compilePath(path, {
            end: exact,
            strict,
            sensitive,
          }),
          re = _compilePath.re,
          keys = _compilePath.keys

        const match = re.exec(pathname)

        if (!match) return null

        let url = match[0],
          values = match.slice(1)

        const isExact = pathname === url

        if (exact && !isExact) return null

        return {
          path, // the path pattern used to match
          url: path === '/' && url === '' ? '/' : url, // the matched portion of the URL
          isExact, // whether or not we matched exactly
          params: keys.reduce((memo, key, index) => {
            memo[key.name] = values[index]
            return memo
          }, {}),
        }
      }

      /* harmony default export */ __webpack_exports__.a = matchPath

      /** */
    },
    /* 26 */
    /** */ function(module, __webpack_exports__, __webpack_require__) {
      /* harmony export (immutable) */ __webpack_exports__.a = warning
      /**
       * Prints a warning in the console if it exists.
       *
       * @param {String} message The warning message.
       * @returns {void}
       */
      function warning(message) {
        /* eslint-disable no-console */
        if (
          typeof console !== 'undefined' &&
          typeof console.error === 'function'
        ) {
          console.error(message)
        }
        /* eslint-enable no-console */
        try {
          // This error was thrown as a convenience so that if you enable
          // "break on all exceptions" in your console,
          // it would pause the execution at this line.
          throw new Error(message)
          /* eslint-disable no-empty */
        } catch (e) {}
        /* eslint-enable no-empty */
      }

      /** */
    },
    /* 27 */
    /** */ function(module, __webpack_exports__, __webpack_require__) {
      Object.defineProperty(__webpack_exports__, '__esModule', { value: true })
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_0__createStore__ = __webpack_require__(
        49
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_1__combineReducers__ = __webpack_require__(
        137
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_2__bindActionCreators__ = __webpack_require__(
        138
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_3__applyMiddleware__ = __webpack_require__(
        139
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_4__compose__ = __webpack_require__(
        52
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_5__utils_warning__ = __webpack_require__(
        51
      )
      /* harmony reexport (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'createStore',
        () => __WEBPACK_IMPORTED_MODULE_0__createStore__.b
      )
      /* harmony reexport (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'combineReducers',
        () => __WEBPACK_IMPORTED_MODULE_1__combineReducers__.a
      )
      /* harmony reexport (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'bindActionCreators',
        () => __WEBPACK_IMPORTED_MODULE_2__bindActionCreators__.a
      )
      /* harmony reexport (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'applyMiddleware',
        () => __WEBPACK_IMPORTED_MODULE_3__applyMiddleware__.a
      )
      /* harmony reexport (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'compose',
        () => __WEBPACK_IMPORTED_MODULE_4__compose__.a
      )

      /*
* This is a dummy function to check if the function name has been altered by minification.
* If the function has been minified and NODE_ENV !== 'production', warn the user.
*/
      function isCrushed() {}

      if (
        'development' !== 'production' &&
        typeof isCrushed.name === 'string' &&
        isCrushed.name !== 'isCrushed'
      ) {
        Object(__WEBPACK_IMPORTED_MODULE_5__utils_warning__['a' /* default */])(
          "You are currently using minified code outside of NODE_ENV === 'production'. " +
            'This means that you are running a slower development build of Redux. ' +
            'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' +
            'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' +
            'to ensure you have the correct code for your production build.'
        )
      }

      /** */
    },
    /* 28 */
    /** */ function(module, __webpack_exports__, __webpack_require__) {
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_0__baseGetTag_js__ = __webpack_require__(
        126
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_1__getPrototype_js__ = __webpack_require__(
        131
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_2__isObjectLike_js__ = __webpack_require__(
        133
      )

      /** `Object#toString` result references. */
      const objectTag = '[object Object]'

      /** Used for built-in method references. */
      let funcProto = Function.prototype,
        objectProto = Object.prototype

      /** Used to resolve the decompiled source of functions. */
      const funcToString = funcProto.toString

      /** Used to check objects for own properties. */
      const hasOwnProperty = objectProto.hasOwnProperty

      /** Used to infer the `Object` constructor. */
      const objectCtorString = funcToString.call(Object)

      /**
       * Checks if `value` is a plain object, that is, an object created by the
       * `Object` constructor or one with a `[[Prototype]]` of `null`.
       *
       * @static
       * @memberOf _
       * @since 0.8.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * _.isPlainObject(new Foo);
       * // => false
       *
       * _.isPlainObject([1, 2, 3]);
       * // => false
       *
       * _.isPlainObject({ 'x': 0, 'y': 0 });
       * // => true
       *
       * _.isPlainObject(Object.create(null));
       * // => true
       */
      function isPlainObject(value) {
        if (
          !Object(
            __WEBPACK_IMPORTED_MODULE_2__isObjectLike_js__['a' /* default */]
          )(value) ||
          Object(
            __WEBPACK_IMPORTED_MODULE_0__baseGetTag_js__['a' /* default */]
          )(value) != objectTag
        ) {
          return false
        }
        const proto = Object(
          __WEBPACK_IMPORTED_MODULE_1__getPrototype_js__['a' /* default */]
        )(value)
        if (proto === null) {
          return true
        }
        const Ctor =
          hasOwnProperty.call(proto, 'constructor') && proto.constructor
        return (
          typeof Ctor === 'function' &&
          Ctor instanceof Ctor &&
          funcToString.call(Ctor) == objectCtorString
        )
      }

      /* harmony default export */ __webpack_exports__.a = isPlainObject

      /** */
    },
    /* 29 */
    /** */ function(module, exports, __webpack_require__) {
      exports.__esModule = true

      const _NativeMethodsMixin = __webpack_require__(156)

      const _NativeMethodsMixin2 = _interopRequireDefault(_NativeMethodsMixin)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      const applyNativeMethods = function applyNativeMethods(Component) {
        Object.keys(_NativeMethodsMixin2.default).forEach(method => {
          if (!Component.prototype[method]) {
            Component.prototype[method] = _NativeMethodsMixin2.default[method]
          }
        })
        return Component
      } /**
       * Copyright (c) 2015-present, Nicolas Gallagher.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @noflow
       */

      exports.default = applyNativeMethods

      /** */
    },
    /* 30 */
    /** */ function(module, exports, __webpack_require__) {
      exports.__esModule = true

      const _isDisabled = __webpack_require__(59)

      const _isDisabled2 = _interopRequireDefault(_isDisabled)

      const _propsToAccessibilityComponent = __webpack_require__(157)

      const _propsToAccessibilityComponent2 = _interopRequireDefault(
        _propsToAccessibilityComponent
      )

      const _propsToAriaRole = __webpack_require__(31)

      const _propsToAriaRole2 = _interopRequireDefault(_propsToAriaRole)

      const _propsToTabIndex = __webpack_require__(158)

      const _propsToTabIndex2 = _interopRequireDefault(_propsToTabIndex)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      /**
       * Copyright (c) 2017-present, Nicolas Gallagher.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       */

      const AccessibilityUtil = {
        isDisabled: _isDisabled2.default,
        propsToAccessibilityComponent: _propsToAccessibilityComponent2.default,
        propsToAriaRole: _propsToAriaRole2.default,
        propsToTabIndex: _propsToTabIndex2.default,
      }

      exports.default = AccessibilityUtil

      /** */
    },
    /* 31 */
    /** */ function(module, exports, __webpack_require__) {
      exports.__esModule = true
      /**
       * Copyright (c) 2017-present, Nicolas Gallagher.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       */

      const accessibilityComponentTypeToRole = {
        button: 'button',
        none: 'presentation',
      }

      const accessibilityTraitsToRole = {
        adjustable: 'slider',
        button: 'button',
        header: 'heading',
        image: 'img',
        link: 'link',
        none: 'presentation',
        search: 'search',
        summary: 'region',
      }

      /**
       * Provides compatibility with React Native's "accessibilityTraits" (iOS) and
       * "accessibilityComponentType" (Android), converting them to equivalent ARIA
       * roles.
       */
      const propsToAriaRole = function propsToAriaRole(_ref) {
        let accessibilityComponentType = _ref.accessibilityComponentType,
          accessibilityRole = _ref.accessibilityRole,
          accessibilityTraits = _ref.accessibilityTraits

        if (accessibilityRole) {
          return accessibilityRole
        }
        if (accessibilityTraits) {
          const trait = Array.isArray(accessibilityTraits)
            ? accessibilityTraits[0]
            : accessibilityTraits
          return accessibilityTraitsToRole[trait]
        }
        if (accessibilityComponentType) {
          return accessibilityComponentTypeToRole[accessibilityComponentType]
        }
      }

      exports.default = propsToAriaRole

      /** */
    },
    /* 32 */
    /** */ function(module, exports) {
      /*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

      function normalizeColor(color) {
        let match

        if (typeof color === 'number') {
          if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {
            return color
          }
          return null
        }

        // Ordered based on occurrences on Facebook codebase
        if ((match = matchers.hex6.exec(color))) {
          return parseInt(`${match[1]}ff`, 16) >>> 0
        }

        if (names.hasOwnProperty(color)) {
          return names[color]
        }

        if ((match = matchers.rgb.exec(color))) {
          return (
            ((parse255(match[1]) << 24) | // r
            (parse255(match[2]) << 16) | // g
            (parse255(match[3]) << 8) | // b
              0x000000ff) >>> // a
            0
          )
        }

        if ((match = matchers.rgba.exec(color))) {
          return (
            ((parse255(match[1]) << 24) | // r
            (parse255(match[2]) << 16) | // g
            (parse255(match[3]) << 8) | // b
              parse1(match[4])) >>> // a
            0
          )
        }

        if ((match = matchers.hex3.exec(color))) {
          return (
            parseInt(
              `${
                match[1] +
                match[1] + // r
                match[2] +
                match[2] + // g
                  match[3] +
                  match[3] // b
              }ff`, // a
              16
            ) >>> 0
          )
        }

        // https://drafts.csswg.org/css-color-4/#hex-notation
        if ((match = matchers.hex8.exec(color))) {
          return parseInt(match[1], 16) >>> 0
        }

        if ((match = matchers.hex4.exec(color))) {
          return (
            parseInt(
              match[1] +
              match[1] + // r
              match[2] +
              match[2] + // g
              match[3] +
              match[3] + // b
                match[4] +
                match[4], // a
              16
            ) >>> 0
          )
        }

        if ((match = matchers.hsl.exec(color))) {
          return (
            (hslToRgb(
              parse360(match[1]), // h
              parsePercentage(match[2]), // s
              parsePercentage(match[3]) // l
            ) |
              0x000000ff) >>> // a
            0
          )
        }

        if ((match = matchers.hsla.exec(color))) {
          return (
            (hslToRgb(
              parse360(match[1]), // h
              parsePercentage(match[2]), // s
              parsePercentage(match[3]) // l
            ) |
              parse1(match[4])) >>> // a
            0
          )
        }

        return null
      }

      function hue2rgb(p, q, t) {
        if (t < 0) {
          t += 1
        }
        if (t > 1) {
          t -= 1
        }
        if (t < 1 / 6) {
          return p + (q - p) * 6 * t
        }
        if (t < 1 / 2) {
          return q
        }
        if (t < 2 / 3) {
          return p + (q - p) * (2 / 3 - t) * 6
        }
        return p
      }

      function hslToRgb(h, s, l) {
        const q = l < 0.5 ? l * (1 + s) : l + s - l * s
        const p = 2 * l - q
        const r = hue2rgb(p, q, h + 1 / 3)
        const g = hue2rgb(p, q, h)
        const b = hue2rgb(p, q, h - 1 / 3)

        return (
          (Math.round(r * 255) << 24) |
          (Math.round(g * 255) << 16) |
          (Math.round(b * 255) << 8)
        )
      }

      // var INTEGER = '[-+]?\\d+';
      const NUMBER = '[-+]?\\d*\\.?\\d+'
      const PERCENTAGE = `${NUMBER}%`

      function toArray(arrayLike) {
        return Array.prototype.slice.call(arrayLike, 0)
      }

      function call() {
        return `\\(\\s*(${toArray(arguments).join(')\\s*,\\s*(')})\\s*\\)`
      }

      var matchers = {
        rgb: new RegExp(`rgb${call(NUMBER, NUMBER, NUMBER)}`),
        rgba: new RegExp(`rgba${call(NUMBER, NUMBER, NUMBER, NUMBER)}`),
        hsl: new RegExp(`hsl${call(NUMBER, PERCENTAGE, PERCENTAGE)}`),
        hsla: new RegExp(`hsla${call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER)}`),
        hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
        hex6: /^#([0-9a-fA-F]{6})$/,
        hex8: /^#([0-9a-fA-F]{8})$/,
      }

      function parse255(str) {
        const int = parseInt(str, 10)
        if (int < 0) {
          return 0
        }
        if (int > 255) {
          return 255
        }
        return int
      }

      function parse360(str) {
        const int = parseFloat(str)
        return ((int % 360 + 360) % 360) / 360
      }

      function parse1(str) {
        const num = parseFloat(str)
        if (num < 0) {
          return 0
        }
        if (num > 1) {
          return 255
        }
        return Math.round(num * 255)
      }

      function parsePercentage(str) {
        // parseFloat conveniently ignores the final %
        const int = parseFloat(str, 10)
        if (int < 0) {
          return 0
        }
        if (int > 100) {
          return 1
        }
        return int / 100
      }

      var names = {
        transparent: 0x00000000,

        // http://www.w3.org/TR/css3-color/#svg-color
        aliceblue: 0xf0f8ffff,
        antiquewhite: 0xfaebd7ff,
        aqua: 0x00ffffff,
        aquamarine: 0x7fffd4ff,
        azure: 0xf0ffffff,
        beige: 0xf5f5dcff,
        bisque: 0xffe4c4ff,
        black: 0x000000ff,
        blanchedalmond: 0xffebcdff,
        blue: 0x0000ffff,
        blueviolet: 0x8a2be2ff,
        brown: 0xa52a2aff,
        burlywood: 0xdeb887ff,
        burntsienna: 0xea7e5dff,
        cadetblue: 0x5f9ea0ff,
        chartreuse: 0x7fff00ff,
        chocolate: 0xd2691eff,
        coral: 0xff7f50ff,
        cornflowerblue: 0x6495edff,
        cornsilk: 0xfff8dcff,
        crimson: 0xdc143cff,
        cyan: 0x00ffffff,
        darkblue: 0x00008bff,
        darkcyan: 0x008b8bff,
        darkgoldenrod: 0xb8860bff,
        darkgray: 0xa9a9a9ff,
        darkgreen: 0x006400ff,
        darkgrey: 0xa9a9a9ff,
        darkkhaki: 0xbdb76bff,
        darkmagenta: 0x8b008bff,
        darkolivegreen: 0x556b2fff,
        darkorange: 0xff8c00ff,
        darkorchid: 0x9932ccff,
        darkred: 0x8b0000ff,
        darksalmon: 0xe9967aff,
        darkseagreen: 0x8fbc8fff,
        darkslateblue: 0x483d8bff,
        darkslategray: 0x2f4f4fff,
        darkslategrey: 0x2f4f4fff,
        darkturquoise: 0x00ced1ff,
        darkviolet: 0x9400d3ff,
        deeppink: 0xff1493ff,
        deepskyblue: 0x00bfffff,
        dimgray: 0x696969ff,
        dimgrey: 0x696969ff,
        dodgerblue: 0x1e90ffff,
        firebrick: 0xb22222ff,
        floralwhite: 0xfffaf0ff,
        forestgreen: 0x228b22ff,
        fuchsia: 0xff00ffff,
        gainsboro: 0xdcdcdcff,
        ghostwhite: 0xf8f8ffff,
        gold: 0xffd700ff,
        goldenrod: 0xdaa520ff,
        gray: 0x808080ff,
        green: 0x008000ff,
        greenyellow: 0xadff2fff,
        grey: 0x808080ff,
        honeydew: 0xf0fff0ff,
        hotpink: 0xff69b4ff,
        indianred: 0xcd5c5cff,
        indigo: 0x4b0082ff,
        ivory: 0xfffff0ff,
        khaki: 0xf0e68cff,
        lavender: 0xe6e6faff,
        lavenderblush: 0xfff0f5ff,
        lawngreen: 0x7cfc00ff,
        lemonchiffon: 0xfffacdff,
        lightblue: 0xadd8e6ff,
        lightcoral: 0xf08080ff,
        lightcyan: 0xe0ffffff,
        lightgoldenrodyellow: 0xfafad2ff,
        lightgray: 0xd3d3d3ff,
        lightgreen: 0x90ee90ff,
        lightgrey: 0xd3d3d3ff,
        lightpink: 0xffb6c1ff,
        lightsalmon: 0xffa07aff,
        lightseagreen: 0x20b2aaff,
        lightskyblue: 0x87cefaff,
        lightslategray: 0x778899ff,
        lightslategrey: 0x778899ff,
        lightsteelblue: 0xb0c4deff,
        lightyellow: 0xffffe0ff,
        lime: 0x00ff00ff,
        limegreen: 0x32cd32ff,
        linen: 0xfaf0e6ff,
        magenta: 0xff00ffff,
        maroon: 0x800000ff,
        mediumaquamarine: 0x66cdaaff,
        mediumblue: 0x0000cdff,
        mediumorchid: 0xba55d3ff,
        mediumpurple: 0x9370dbff,
        mediumseagreen: 0x3cb371ff,
        mediumslateblue: 0x7b68eeff,
        mediumspringgreen: 0x00fa9aff,
        mediumturquoise: 0x48d1ccff,
        mediumvioletred: 0xc71585ff,
        midnightblue: 0x191970ff,
        mintcream: 0xf5fffaff,
        mistyrose: 0xffe4e1ff,
        moccasin: 0xffe4b5ff,
        navajowhite: 0xffdeadff,
        navy: 0x000080ff,
        oldlace: 0xfdf5e6ff,
        olive: 0x808000ff,
        olivedrab: 0x6b8e23ff,
        orange: 0xffa500ff,
        orangered: 0xff4500ff,
        orchid: 0xda70d6ff,
        palegoldenrod: 0xeee8aaff,
        palegreen: 0x98fb98ff,
        paleturquoise: 0xafeeeeff,
        palevioletred: 0xdb7093ff,
        papayawhip: 0xffefd5ff,
        peachpuff: 0xffdab9ff,
        peru: 0xcd853fff,
        pink: 0xffc0cbff,
        plum: 0xdda0ddff,
        powderblue: 0xb0e0e6ff,
        purple: 0x800080ff,
        rebeccapurple: 0x663399ff,
        red: 0xff0000ff,
        rosybrown: 0xbc8f8fff,
        royalblue: 0x4169e1ff,
        saddlebrown: 0x8b4513ff,
        salmon: 0xfa8072ff,
        sandybrown: 0xf4a460ff,
        seagreen: 0x2e8b57ff,
        seashell: 0xfff5eeff,
        sienna: 0xa0522dff,
        silver: 0xc0c0c0ff,
        skyblue: 0x87ceebff,
        slateblue: 0x6a5acdff,
        slategray: 0x708090ff,
        slategrey: 0x708090ff,
        snow: 0xfffafaff,
        springgreen: 0x00ff7fff,
        steelblue: 0x4682b4ff,
        tan: 0xd2b48cff,
        teal: 0x008080ff,
        thistle: 0xd8bfd8ff,
        tomato: 0xff6347ff,
        turquoise: 0x40e0d0ff,
        violet: 0xee82eeff,
        wheat: 0xf5deb3ff,
        white: 0xffffffff,
        whitesmoke: 0xf5f5f5ff,
        yellow: 0xffff00ff,
        yellowgreen: 0x9acd32ff,
      }

      function rgba(colorInt) {
        const r = Math.round((colorInt & 0xff000000) >>> 24)
        const g = Math.round((colorInt & 0x00ff0000) >>> 16)
        const b = Math.round((colorInt & 0x0000ff00) >>> 8)
        const a = ((colorInt & 0x000000ff) >>> 0) / 255
        return {
          r,
          g,
          b,
          a,
        }
      }

      normalizeColor.rgba = rgba

      module.exports = normalizeColor

      /** */
    },
    /* 33 */
    /** */ function(module, exports, __webpack_require__) {
      exports.__esModule = true

      const _ColorPropType = __webpack_require__(13)

      const _ColorPropType2 = _interopRequireDefault(_ColorPropType)

      const _ViewStylePropTypes = __webpack_require__(34)

      const _ViewStylePropTypes2 = _interopRequireDefault(_ViewStylePropTypes)

      const _propTypes = __webpack_require__(0)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      const numberOrString = (0, _propTypes.oneOfType)([
        _propTypes.number,
        _propTypes.string,
      ]) /**
       * Copyright (c) 2015-present, Nicolas Gallagher.
       * Copyright (c) 2015-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       */

      const TextStylePropTypes = Object.assign(
        {},
        _ViewStylePropTypes2.default,
        {
          color: _ColorPropType2.default,
          fontFamily: _propTypes.string,
          fontFeatureSettings: _propTypes.string,
          fontSize: numberOrString,
          fontStyle: _propTypes.string,
          fontWeight: _propTypes.string,
          fontVariant: _propTypes.array,
          letterSpacing: numberOrString,
          lineHeight: numberOrString,
          textAlign: (0, _propTypes.oneOf)([
            'center',
            'end',
            'inherit',
            'justify',
            'justify-all',
            'left',
            'right',
            'start',
          ]),
          textAlignVertical: _propTypes.string,
          textDecorationColor: _ColorPropType2.default,
          textDecorationLine: _propTypes.string,
          textDecorationStyle: _propTypes.string,
          textShadowColor: _ColorPropType2.default,
          textShadowOffset: (0, _propTypes.shape)({
            width: _propTypes.number,
            height: _propTypes.number,
          }),
          textShadowRadius: _propTypes.number,
          writingDirection: (0, _propTypes.oneOf)(['auto', 'ltr', 'rtl']),
          /* @platform web */
          textIndent: numberOrString,
          textOverflow: _propTypes.string,
          textRendering: (0, _propTypes.oneOf)([
            'auto',
            'geometricPrecision',
            'optimizeLegibility',
            'optimizeSpeed',
          ]),
          textTransform: (0, _propTypes.oneOf)([
            'capitalize',
            'lowercase',
            'none',
            'uppercase',
          ]),
          unicodeBidi: (0, _propTypes.oneOf)([
            'normal',
            'bidi-override',
            'embed',
            'isolate',
            'isolate-override',
            'plaintext',
          ]),
          whiteSpace: _propTypes.string,
          wordWrap: _propTypes.string,
          MozOsxFontSmoothing: _propTypes.string,
          WebkitFontSmoothing: _propTypes.string,
        }
      )

      exports.default = TextStylePropTypes

      /** */
    },
    /* 34 */
    /** */ function(module, exports, __webpack_require__) {
      exports.__esModule = true

      const _AnimationPropTypes = __webpack_require__(62)

      const _AnimationPropTypes2 = _interopRequireDefault(_AnimationPropTypes)

      const _BorderPropTypes = __webpack_require__(63)

      const _BorderPropTypes2 = _interopRequireDefault(_BorderPropTypes)

      const _ColorPropType = __webpack_require__(13)

      const _ColorPropType2 = _interopRequireDefault(_ColorPropType)

      const _InteractionPropTypes = __webpack_require__(64)

      const _InteractionPropTypes2 = _interopRequireDefault(
        _InteractionPropTypes
      )

      const _LayoutPropTypes = __webpack_require__(65)

      const _LayoutPropTypes2 = _interopRequireDefault(_LayoutPropTypes)

      const _ShadowPropTypes = __webpack_require__(66)

      const _ShadowPropTypes2 = _interopRequireDefault(_ShadowPropTypes)

      const _TransformPropTypes = __webpack_require__(67)

      const _TransformPropTypes2 = _interopRequireDefault(_TransformPropTypes)

      const _propTypes = __webpack_require__(0)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      /**
       * Copyright (c) 2015-present, Nicolas Gallagher.
       * Copyright (c) 2015-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       */

      const overscrollBehaviorType = (0, _propTypes.oneOf)([
        'auto',
        'contain',
        'none',
      ])

      const ViewStylePropTypes = Object.assign(
        {},
        _AnimationPropTypes2.default,
        _BorderPropTypes2.default,
        _InteractionPropTypes2.default,
        _LayoutPropTypes2.default,
        _ShadowPropTypes2.default,
        _TransformPropTypes2.default,
        {
          backgroundColor: _ColorPropType2.default,
          opacity: _propTypes.number,
          /**
           * @platform unsupported
           */
          elevation: _propTypes.number,
          /**
           * @platform web
           */
          backgroundAttachment: _propTypes.string,
          backgroundBlendMode: _propTypes.string,
          backgroundClip: _propTypes.string,
          backgroundImage: _propTypes.string,
          backgroundOrigin: (0, _propTypes.oneOf)([
            'border-box',
            'content-box',
            'padding-box',
          ]),
          backgroundPosition: _propTypes.string,
          backgroundRepeat: _propTypes.string,
          backgroundSize: _propTypes.string,
          boxShadow: _propTypes.string,
          clip: _propTypes.string,
          filter: _propTypes.string,
          outline: _propTypes.string,
          outlineColor: _ColorPropType2.default,
          overscrollBehavior: overscrollBehaviorType,
          overscrollBehaviorX: overscrollBehaviorType,
          overscrollBehaviorY: overscrollBehaviorType,
          WebkitMaskImage: _propTypes.string,
          WebkitOverflowScrolling: (0, _propTypes.oneOf)(['auto', 'touch']),
        }
      )

      exports.default = ViewStylePropTypes

      /** */
    },
    /* 35 */
    /** */ function(module, exports, __webpack_require__) {
      const uppercasePattern = /[A-Z]/g
      const msPattern = /^ms-/
      const cache = {}

      function hyphenateStyleName(string) {
        return string in cache
          ? cache[string]
          : (cache[string] = string
              .replace(uppercasePattern, '-$&')
              .toLowerCase()
              .replace(msPattern, '-ms-'))
      }

      module.exports = hyphenateStyleName

      /** */
    },
    /* 36 */
    /** */ function(module, exports, __webpack_require__) {
      exports.__esModule = true

      const _extends =
        Object.assign ||
        function(target) {
          for (let i = 1; i < arguments.length; i++) {
            const source = arguments[i]
            for (const key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key]
              }
            }
          }
          return target
        }

      const _applyNativeMethods = __webpack_require__(29)

      const _applyNativeMethods2 = _interopRequireDefault(_applyNativeMethods)

      const _createReactClass = __webpack_require__(86)

      const _createReactClass2 = _interopRequireDefault(_createReactClass)

      const _ensurePositiveDelayProps = __webpack_require__(87)

      const _ensurePositiveDelayProps2 = _interopRequireDefault(
        _ensurePositiveDelayProps
      )

      const _propTypes = __webpack_require__(0)

      const _react = __webpack_require__(1)

      const _react2 = _interopRequireDefault(_react)

      const _StyleSheet = __webpack_require__(5)

      const _StyleSheet2 = _interopRequireDefault(_StyleSheet)

      const _Touchable = __webpack_require__(88)

      const _Touchable2 = _interopRequireDefault(_Touchable)

      const _TouchableWithoutFeedback = __webpack_require__(210)

      const _TouchableWithoutFeedback2 = _interopRequireDefault(
        _TouchableWithoutFeedback
      )

      const _View = __webpack_require__(12)

      const _View2 = _interopRequireDefault(_View)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      function _objectWithoutProperties(obj, keys) {
        const target = {}
        for (const i in obj) {
          if (keys.indexOf(i) >= 0) continue
          if (!Object.prototype.hasOwnProperty.call(obj, i)) continue
          target[i] = obj[i]
        }
        return target
      } /**
       * Copyright (c) 2016-present, Nicolas Gallagher.
       * Copyright (c) 2015-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @providesModule TouchableOpacity
       * @noflow
       */

      const flattenStyle = _StyleSheet2.default.flatten

      const PRESS_RETENTION_OFFSET = {
        top: 20,
        left: 20,
        right: 20,
        bottom: 30,
      }

      /**
       * A wrapper for making views respond properly to touches.
       * On press down, the opacity of the wrapped view is decreased, dimming it.
       *
       * Opacity is controlled by wrapping the children in a View, which is
       * added to the view hiearchy. Be aware that this can affect layout.
       *
       * Example:
       *
       * ```
       * renderButton: function() {
       *   return (
       *     <TouchableOpacity onPress={this._onPressButton}>
       *       <Image
       *         style={styles.button}
       *         source={require('./myButton.png')}
       *       />
       *     </TouchableOpacity>
       *   );
       * },
       * ```
       */

      /* eslint-disable react/prefer-es6-class */
      const TouchableOpacity = (0, _createReactClass2.default)({
        displayName: 'TouchableOpacity',
        mixins: [_Touchable2.default.Mixin],

        propTypes: Object.assign(
          {},
          _TouchableWithoutFeedback2.default.propTypes,
          {
            /**
             * Determines what the opacity of the wrapped view should be when touch is
             * active.
             */
            activeOpacity: _propTypes.number,
            focusedOpacity: _propTypes.number,
          }
        ),

        getDefaultProps: function getDefaultProps() {
          return {
            activeOpacity: 0.2,
            focusedOpacity: 0.7,
          }
        },

        getInitialState: function getInitialState() {
          return this.touchableGetInitialState()
        },

        componentDidMount: function componentDidMount() {
          ;(0, _ensurePositiveDelayProps2.default)(this.props)
        },

        componentWillReceiveProps: function componentWillReceiveProps(
          nextProps
        ) {
          ;(0, _ensurePositiveDelayProps2.default)(nextProps)
        },

        /**
         * Animate the touchable to a new opacity.
         */
        setOpacityTo: function setOpacityTo(value, duration) {
          this.setNativeProps({
            style: {
              opacity: value,
              transitionDuration: duration ? `${duration / 1000}s` : '0s',
            },
          })
        },

        /**
         * `Touchable.Mixin` self callbacks. The mixin will invoke these if they are
         * defined on your component.
         */
        touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
          if (e.dispatchConfig.registrationName === 'onResponderGrant') {
            this._opacityActive(0)
          } else {
            this._opacityActive(150)
          }
          this.props.onPressIn && this.props.onPressIn(e)
        },

        touchableHandleActivePressOut: function touchableHandleActivePressOut(
          e
        ) {
          this._opacityInactive(250)
          this.props.onPressOut && this.props.onPressOut(e)
        },

        touchableHandlePress: function touchableHandlePress(e) {
          this.props.onPress && this.props.onPress(e)
        },

        touchableHandleLongPress: function touchableHandleLongPress(e) {
          this.props.onLongPress && this.props.onLongPress(e)
        },

        touchableGetPressRectOffset: function touchableGetPressRectOffset() {
          return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET
        },

        touchableGetHitSlop: function touchableGetHitSlop() {
          return this.props.hitSlop
        },

        touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
          return this.props.delayPressIn || 0
        },

        touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
          return this.props.delayLongPress === 0
            ? 0
            : this.props.delayLongPress || 500
        },

        touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
          return this.props.delayPressOut
        },

        _opacityActive: function _opacityActive(duration) {
          this.setOpacityTo(this.props.activeOpacity, duration)
        },

        _opacityInactive: function _opacityInactive(duration) {
          this.setOpacityTo(this._getChildStyleOpacityWithDefault(), duration)
        },

        _opacityFocused: function _opacityFocused() {
          this.setOpacityTo(this.props.focusedOpacity)
        },

        _getChildStyleOpacityWithDefault: function _getChildStyleOpacityWithDefault() {
          const childStyle = flattenStyle(this.props.style) || {}
          return childStyle.opacity === undefined ? 1 : childStyle.opacity
        },

        render: function render() {
          let _props = this.props,
            activeOpacity = _props.activeOpacity,
            focusedOpacity = _props.focusedOpacity,
            delayLongPress = _props.delayLongPress,
            delayPressIn = _props.delayPressIn,
            delayPressOut = _props.delayPressOut,
            onLongPress = _props.onLongPress,
            onPress = _props.onPress,
            onPressIn = _props.onPressIn,
            onPressOut = _props.onPressOut,
            pressRetentionOffset = _props.pressRetentionOffset,
            other = _objectWithoutProperties(_props, [
              'activeOpacity',
              'focusedOpacity',
              'delayLongPress',
              'delayPressIn',
              'delayPressOut',
              'onLongPress',
              'onPress',
              'onPressIn',
              'onPressOut',
              'pressRetentionOffset',
            ])

          return _react2.default.createElement(
            _View2.default,
            _extends({}, other, {
              accessible: this.props.accessible !== false,
              onKeyDown: this.touchableHandleKeyEvent,
              onKeyUp: this.touchableHandleKeyEvent,
              onResponderGrant: this.touchableHandleResponderGrant,
              onResponderMove: this.touchableHandleResponderMove,
              onResponderRelease: this.touchableHandleResponderRelease,
              onResponderTerminate: this.touchableHandleResponderTerminate,
              onResponderTerminationRequest: this
                .touchableHandleResponderTerminationRequest,
              onStartShouldSetResponder: this
                .touchableHandleStartShouldSetResponder,
              style: [
                styles.root,
                !this.props.disabled && styles.actionable,
                this.props.style,
              ],
            }),
            this.props.children,
            _Touchable2.default.renderDebugView({
              color: 'blue',
              hitSlop: this.props.hitSlop,
            })
          )
        },
      })

      var styles = _StyleSheet2.default.create({
        root: {
          transitionProperty: 'opacity',
          transitionDuration: '0.15s',
          userSelect: 'none',
        },
        actionable: {
          cursor: 'pointer',
          touchAction: 'manipulation',
        },
      })

      exports.default = (0, _applyNativeMethods2.default)(TouchableOpacity)

      /** */
    },
    /* 37 */
    /** */ function(module, exports, __webpack_require__) {
      /**
       * Copyright (c) 2013-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       */

      const ReactPropTypesSecret =
        'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED'

      module.exports = ReactPropTypesSecret

      /** */
    },
    /* 38 */
    /** */ function(module, exports, __webpack_require__) {
      /**
       * Copyright (c) 2013-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @typechecks
       */

      const camelize = __webpack_require__(102)

      const msPattern = /^-ms-/

      /**
       * Camelcases a hyphenated CSS property name, for example:
       *
       *   > camelizeStyleName('background-color')
       *   < "backgroundColor"
       *   > camelizeStyleName('-moz-transition')
       *   < "MozTransition"
       *   > camelizeStyleName('-ms-transition')
       *   < "msTransition"
       *
       * As Andi Smith suggests
       * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
       * is converted to lowercase `ms`.
       *
       * @param {string} string
       * @return {string}
       */
      function camelizeStyleName(string) {
        return camelize(string.replace(msPattern, 'ms-'))
      }

      module.exports = camelizeStyleName

      /** */
    },
    /* 39 */
    /** */ function(module, __webpack_exports__, __webpack_require__) {
      Object.defineProperty(__webpack_exports__, '__esModule', { value: true })
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_0__MemoryRouter__ = __webpack_require__(
        104
      )
      /* harmony reexport (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'MemoryRouter',
        () => __WEBPACK_IMPORTED_MODULE_0__MemoryRouter__.a
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_1__Prompt__ = __webpack_require__(
        109
      )
      /* harmony reexport (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'Prompt',
        () => __WEBPACK_IMPORTED_MODULE_1__Prompt__.a
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_2__Redirect__ = __webpack_require__(
        110
      )
      /* harmony reexport (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'Redirect',
        () => __WEBPACK_IMPORTED_MODULE_2__Redirect__.a
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_3__Route__ = __webpack_require__(
        44
      )
      /* harmony reexport (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'Route',
        () => __WEBPACK_IMPORTED_MODULE_3__Route__.a
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_4__Router__ = __webpack_require__(
        23
      )
      /* harmony reexport (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'Router',
        () => __WEBPACK_IMPORTED_MODULE_4__Router__.a
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_5__StaticRouter__ = __webpack_require__(
        116
      )
      /* harmony reexport (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'StaticRouter',
        () => __WEBPACK_IMPORTED_MODULE_5__StaticRouter__.a
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_6__Switch__ = __webpack_require__(
        117
      )
      /* harmony reexport (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'Switch',
        () => __WEBPACK_IMPORTED_MODULE_6__Switch__.a
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_7__matchPath__ = __webpack_require__(
        25
      )
      /* harmony reexport (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'matchPath',
        () => __WEBPACK_IMPORTED_MODULE_7__matchPath__.a
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_8__withRouter__ = __webpack_require__(
        118
      )
      /* harmony reexport (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'withRouter',
        () => __WEBPACK_IMPORTED_MODULE_8__withRouter__.a
      )

      /** */
    },
    /* 40 */
    /** */ function(module, __webpack_exports__, __webpack_require__) {
      Object.defineProperty(__webpack_exports__, '__esModule', { value: true })
      function isAbsolute(pathname) {
        return pathname.charAt(0) === '/'
      }

      // About 1.5x faster than the two-arg version of Array#splice()
      function spliceOne(list, index) {
        for (let i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
          list[i] = list[k]
        }

        list.pop()
      }

      // This implementation is based heavily on node's url.parse
      function resolvePathname(to) {
        const from =
          arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ''

        const toParts = (to && to.split('/')) || []
        let fromParts = (from && from.split('/')) || []

        const isToAbs = to && isAbsolute(to)
        const isFromAbs = from && isAbsolute(from)
        const mustEndAbs = isToAbs || isFromAbs

        if (to && isAbsolute(to)) {
          // to is absolute
          fromParts = toParts
        } else if (toParts.length) {
          // to is relative, drop the filename
          fromParts.pop()
          fromParts = fromParts.concat(toParts)
        }

        if (!fromParts.length) return '/'

        let hasTrailingSlash = void 0
        if (fromParts.length) {
          const last = fromParts[fromParts.length - 1]
          hasTrailingSlash = last === '.' || last === '..' || last === ''
        } else {
          hasTrailingSlash = false
        }

        let up = 0
        for (let i = fromParts.length; i >= 0; i--) {
          const part = fromParts[i]

          if (part === '.') {
            spliceOne(fromParts, i)
          } else if (part === '..') {
            spliceOne(fromParts, i)
            up++
          } else if (up) {
            spliceOne(fromParts, i)
            up--
          }
        }

        if (!mustEndAbs)
          for (; up--; up) {
            fromParts.unshift('..')
          }
        if (
          mustEndAbs &&
          fromParts[0] !== '' &&
          (!fromParts[0] || !isAbsolute(fromParts[0]))
        )
          fromParts.unshift('')

        let result = fromParts.join('/')

        if (hasTrailingSlash && result.substr(-1) !== '/') result += '/'

        return result
      }

      /* harmony default export */ __webpack_exports__.default = resolvePathname

      /** */
    },
    /* 41 */
    /** */ function(module, __webpack_exports__, __webpack_require__) {
      Object.defineProperty(__webpack_exports__, '__esModule', { value: true })
      const _typeof =
        typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
          ? function(obj) {
              return typeof obj
            }
          : function(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj
            }

      function valueEqual(a, b) {
        if (a === b) return true

        if (a == null || b == null) return false

        if (Array.isArray(a)) {
          return (
            Array.isArray(b) &&
            a.length === b.length &&
            a.every((item, index) => valueEqual(item, b[index]))
          )
        }

        const aType = typeof a === 'undefined' ? 'undefined' : _typeof(a)
        const bType = typeof b === 'undefined' ? 'undefined' : _typeof(b)

        if (aType !== bType) return false

        if (aType === 'object') {
          const aValue = a.valueOf()
          const bValue = b.valueOf()

          if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue)

          const aKeys = Object.keys(a)
          const bKeys = Object.keys(b)

          if (aKeys.length !== bKeys.length) return false

          return aKeys.every(key => valueEqual(a[key], b[key]))
        }

        return false
      }

      /* harmony default export */ __webpack_exports__.default = valueEqual

      /** */
    },
    /* 42 */
    /** */ function(module, __webpack_exports__, __webpack_require__) {
      Object.defineProperty(__webpack_exports__, '__esModule', { value: true })
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_0__createBrowserHistory__ = __webpack_require__(
        111
      )
      /* harmony reexport (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'createBrowserHistory',
        () => __WEBPACK_IMPORTED_MODULE_0__createBrowserHistory__.a
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_1__createHashHistory__ = __webpack_require__(
        112
      )
      /* harmony reexport (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'createHashHistory',
        () => __WEBPACK_IMPORTED_MODULE_1__createHashHistory__.a
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_2__createMemoryHistory__ = __webpack_require__(
        113
      )
      /* harmony reexport (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'createMemoryHistory',
        () => __WEBPACK_IMPORTED_MODULE_2__createMemoryHistory__.a
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_3__LocationUtils__ = __webpack_require__(
        16
      )
      /* harmony reexport (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'createLocation',
        () => __WEBPACK_IMPORTED_MODULE_3__LocationUtils__.a
      )
      /* harmony reexport (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'locationsAreEqual',
        () => __WEBPACK_IMPORTED_MODULE_3__LocationUtils__.b
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_4__PathUtils__ = __webpack_require__(
        11
      )
      /* harmony reexport (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'parsePath',
        () => __WEBPACK_IMPORTED_MODULE_4__PathUtils__.d
      )
      /* harmony reexport (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'createPath',
        () => __WEBPACK_IMPORTED_MODULE_4__PathUtils__.b
      )

      /** */
    },
    /* 43 */
    /** */ function(module, __webpack_exports__, __webpack_require__) {
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'b',
        () => canUseDOM
      )
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'a',
        () => addEventListener
      )
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'e',
        () => removeEventListener
      )
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'c',
        () => getConfirmation
      )
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'g',
        () => supportsHistory
      )
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'h',
        () => supportsPopStateOnHashChange
      )
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'f',
        () => supportsGoWithoutReloadUsingHash
      )
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'd',
        () => isExtraneousPopstateEvent
      )
      var canUseDOM = !!(
        typeof window !== 'undefined' &&
        window.document &&
        window.document.createElement
      )

      var addEventListener = function addEventListener(node, event, listener) {
        return node.addEventListener
          ? node.addEventListener(event, listener, false)
          : node.attachEvent(`on${event}`, listener)
      }

      var removeEventListener = function removeEventListener(
        node,
        event,
        listener
      ) {
        return node.removeEventListener
          ? node.removeEventListener(event, listener, false)
          : node.detachEvent(`on${event}`, listener)
      }

      var getConfirmation = function getConfirmation(message, callback) {
        return callback(window.confirm(message))
      } // eslint-disable-line no-alert

      /**
       * Returns true if the HTML5 history API is supported. Taken from Modernizr.
       *
       * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
       * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
       * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
       */
      var supportsHistory = function supportsHistory() {
        const ua = window.navigator.userAgent

        if (
          (ua.indexOf('Android 2.') !== -1 ||
            ua.indexOf('Android 4.0') !== -1) &&
          ua.indexOf('Mobile Safari') !== -1 &&
          ua.indexOf('Chrome') === -1 &&
          ua.indexOf('Windows Phone') === -1
        )
          return false

        return window.history && 'pushState' in window.history
      }

      /**
       * Returns true if browser fires popstate on hash change.
       * IE10 and IE11 do not.
       */
      var supportsPopStateOnHashChange = function supportsPopStateOnHashChange() {
        return window.navigator.userAgent.indexOf('Trident') === -1
      }

      /**
       * Returns false if using go(n) with hash history causes a full page reload.
       */
      var supportsGoWithoutReloadUsingHash = function supportsGoWithoutReloadUsingHash() {
        return window.navigator.userAgent.indexOf('Firefox') === -1
      }

      /**
       * Returns true if a given popstate event is an extraneous WebKit event.
       * Accounts for the fact that Chrome on iOS fires real popstate events
       * containing undefined state when pressing the back button.
       */
      var isExtraneousPopstateEvent = function isExtraneousPopstateEvent(
        event
      ) {
        return (
          event.state === undefined &&
          navigator.userAgent.indexOf('CriOS') === -1
        )
      }

      /** */
    },
    /* 44 */
    /** */ function(module, __webpack_exports__, __webpack_require__) {
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(
        3
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_0_warning__
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_1_invariant__ = __webpack_require__(
        7
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_1_invariant___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_1_invariant__
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_2_react__ = __webpack_require__(
        1
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_2_react___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_2_react__
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_3_prop_types__ = __webpack_require__(
        0
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_3_prop_types___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_3_prop_types__
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_4__matchPath__ = __webpack_require__(
        25
      )
      const _extends =
        Object.assign ||
        function(target) {
          for (let i = 1; i < arguments.length; i++) {
            const source = arguments[i]
            for (const key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key]
              }
            }
          }
          return target
        }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError('Cannot call a class as a function')
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          )
        }
        return call && (typeof call === 'object' || typeof call === 'function')
          ? call
          : self
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== 'function' && superClass !== null) {
          throw new TypeError(
            `Super expression must either be null or a function, not ${typeof superClass}`
          )
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true,
          },
        })
        if (superClass)
          Object.setPrototypeOf
            ? Object.setPrototypeOf(subClass, superClass)
            : (subClass.__proto__ = superClass)
      }

      const isEmptyChildren = function isEmptyChildren(children) {
        return (
          __WEBPACK_IMPORTED_MODULE_2_react___default.a.Children.count(
            children
          ) === 0
        )
      }

      /**
       * The public API for matching a single path and rendering.
       */

      const Route = (function(_React$Component) {
        _inherits(Route, _React$Component)

        function Route() {
          let _temp, _this, _ret

          _classCallCheck(this, Route)

          for (
            var _len = arguments.length, args = Array(_len), _key = 0;
            _key < _len;
            _key++
          ) {
            args[_key] = arguments[_key]
          }

          return (
            (_ret = ((_temp = ((_this = _possibleConstructorReturn(
              this,
              _React$Component.call(...[this].concat(args))
            )),
            _this)),
            (_this.state = {
              match: _this.computeMatch(_this.props, _this.context.router),
            }),
            _temp)),
            _possibleConstructorReturn(_this, _ret)
          )
        }

        Route.prototype.getChildContext = function getChildContext() {
          return {
            router: _extends({}, this.context.router, {
              route: {
                location:
                  this.props.location || this.context.router.route.location,
                match: this.state.match,
              },
            }),
          }
        }

        Route.prototype.computeMatch = function computeMatch(_ref, router) {
          let computedMatch = _ref.computedMatch,
            location = _ref.location,
            path = _ref.path,
            strict = _ref.strict,
            exact = _ref.exact,
            sensitive = _ref.sensitive

          if (computedMatch) return computedMatch // <Switch> already computed the match for us

          __WEBPACK_IMPORTED_MODULE_1_invariant___default()(
            router,
            'You should not use <Route> or withRouter() outside a <Router>'
          )

          const route = router.route

          const pathname = (location || route.location).pathname

          return path
            ? Object(
                __WEBPACK_IMPORTED_MODULE_4__matchPath__['a' /* default */]
              )(pathname, {
                path,
                strict,
                exact,
                sensitive,
              })
            : route.match
        }

        Route.prototype.componentWillMount = function componentWillMount() {
          __WEBPACK_IMPORTED_MODULE_0_warning___default()(
            !(this.props.component && this.props.render),
            'You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored'
          )

          __WEBPACK_IMPORTED_MODULE_0_warning___default()(
            !(
              this.props.component &&
              this.props.children &&
              !isEmptyChildren(this.props.children)
            ),
            'You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored'
          )

          __WEBPACK_IMPORTED_MODULE_0_warning___default()(
            !(
              this.props.render &&
              this.props.children &&
              !isEmptyChildren(this.props.children)
            ),
            'You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored'
          )
        }

        Route.prototype.componentWillReceiveProps = function componentWillReceiveProps(
          nextProps,
          nextContext
        ) {
          __WEBPACK_IMPORTED_MODULE_0_warning___default()(
            !(nextProps.location && !this.props.location),
            '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'
          )

          __WEBPACK_IMPORTED_MODULE_0_warning___default()(
            !(!nextProps.location && this.props.location),
            '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'
          )

          this.setState({
            match: this.computeMatch(nextProps, nextContext.router),
          })
        }

        Route.prototype.render = function render() {
          const match = this.state.match
          let _props = this.props,
            children = _props.children,
            component = _props.component,
            render = _props.render
          let _context$router = this.context.router,
            history = _context$router.history,
            route = _context$router.route,
            staticContext = _context$router.staticContext

          const location = this.props.location || route.location
          const props = {
            match,
            location,
            history,
            staticContext,
          }

          return component // component prop gets first priority, only called if there's a match
            ? match
              ? __WEBPACK_IMPORTED_MODULE_2_react___default.a.createElement(
                  component,
                  props
                )
              : null
            : render // render prop is next, only called if there's a match
              ? match ? render(props) : null
              : children // children come last, always called
                ? typeof children === 'function'
                  ? children(props)
                  : !isEmptyChildren(children)
                    ? __WEBPACK_IMPORTED_MODULE_2_react___default.a.Children.only(
                        children
                      )
                    : null
                : null
        }

        return Route
      })(__WEBPACK_IMPORTED_MODULE_2_react___default.a.Component)

      Route.propTypes = {
        computedMatch:
          __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object, // private, from <Switch>
        path: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.string,
        exact: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool,
        strict: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool,
        sensitive: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool,
        component: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.func,
        render: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.func,
        children: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.oneOfType([
          __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.func,
          __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.node,
        ]),
        location: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object,
      }
      Route.contextTypes = {
        router: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.shape({
          history:
            __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object
              .isRequired,
          route:
            __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object
              .isRequired,
          staticContext:
            __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object,
        }),
      }
      Route.childContextTypes = {
        router:
          __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object.isRequired,
      }

      /* harmony default export */ __webpack_exports__.a = Route

      /** */
    },
    /* 45 */
    /** */ function(module, exports, __webpack_require__) {
      /**
       * Copyright 2015, Yahoo! Inc.
       * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
       */

      const REACT_STATICS = {
        childContextTypes: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        mixins: true,
        propTypes: true,
        type: true,
      }

      const KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true,
      }

      const defineProperty = Object.defineProperty
      const getOwnPropertyNames = Object.getOwnPropertyNames
      const getOwnPropertySymbols = Object.getOwnPropertySymbols
      const getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor
      const getPrototypeOf = Object.getPrototypeOf
      const objectPrototype = getPrototypeOf && getPrototypeOf(Object)

      module.exports = function hoistNonReactStatics(
        targetComponent,
        sourceComponent,
        blacklist
      ) {
        if (typeof sourceComponent !== 'string') {
          // don't hoist over string (html) components

          if (objectPrototype) {
            const inheritedComponent = getPrototypeOf(sourceComponent)
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics(
                targetComponent,
                inheritedComponent,
                blacklist
              )
            }
          }

          let keys = getOwnPropertyNames(sourceComponent)

          if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent))
          }

          for (let i = 0; i < keys.length; ++i) {
            const key = keys[i]
            if (
              !REACT_STATICS[key] &&
              !KNOWN_STATICS[key] &&
              (!blacklist || !blacklist[key])
            ) {
              const descriptor = getOwnPropertyDescriptor(sourceComponent, key)
              try {
                // Avoid failures from read-only properties
                defineProperty(targetComponent, key, descriptor)
              } catch (e) {}
            }
          }

          return targetComponent
        }

        return targetComponent
      }

      /** */
    },
    /* 46 */
    /** */ function(module, exports, __webpack_require__) {
      ;(function(global) {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.__RewireAPI__ = exports.__ResetDependency__ = exports.__set__ = exports.__Rewire__ = exports.__GetDependency__ = exports.__get__ = exports.routerMiddleware = exports.connectRouter = exports.ConnectedRouter = exports.routerActions = exports.goForward = exports.goBack = exports.go = exports.replace = exports.push = exports.CALL_HISTORY_METHOD = exports.LOCATION_CHANGE = undefined

        const _typeof =
          typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
            ? function(obj) {
                return typeof obj
              }
            : function(obj) {
                return obj &&
                  typeof Symbol === 'function' &&
                  obj.constructor === Symbol &&
                  obj !== Symbol.prototype
                  ? 'symbol'
                  : typeof obj
              }

        const _createAll = __webpack_require__(119)

        const _createAll2 = _interopRequireDefault(_createAll)

        const _plain = __webpack_require__(146)

        const _plain2 = _interopRequireDefault(_plain)

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        const _get__2 = _get__('createAll')(_get__('plainStructure'))

        let LOCATION_CHANGE = _get__2.LOCATION_CHANGE,
          CALL_HISTORY_METHOD = _get__2.CALL_HISTORY_METHOD,
          push = _get__2.push,
          replace = _get__2.replace,
          go = _get__2.go,
          goBack = _get__2.goBack,
          goForward = _get__2.goForward,
          routerActions = _get__2.routerActions,
          ConnectedRouter = _get__2.ConnectedRouter,
          connectRouter = _get__2.connectRouter,
          routerMiddleware = _get__2.routerMiddleware
        exports.LOCATION_CHANGE = LOCATION_CHANGE
        exports.CALL_HISTORY_METHOD = CALL_HISTORY_METHOD
        exports.push = push
        exports.replace = replace
        exports.go = go
        exports.goBack = goBack
        exports.goForward = goForward
        exports.routerActions = routerActions
        exports.ConnectedRouter = ConnectedRouter
        exports.connectRouter = connectRouter
        exports.routerMiddleware = routerMiddleware

        function _getGlobalObject() {
          try {
            if (global) {
              return global
            }
          } catch (e) {
            try {
              if (window) {
                return window
              }
            } catch (e) {
              return this
            }
          }
        }

        let _RewireModuleId__ = null

        function _getRewireModuleId__() {
          if (_RewireModuleId__ === null) {
            const globalVariable = _getGlobalObject()

            if (!globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__) {
              globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__ = 0
            }

            _RewireModuleId__ = __$$GLOBAL_REWIRE_NEXT_MODULE_ID__++
          }

          return _RewireModuleId__
        }

        function _getRewireRegistry__() {
          const theGlobalVariable = _getGlobalObject()

          if (!theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__) {
            theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null)
          }

          return __$$GLOBAL_REWIRE_REGISTRY__
        }

        function _getRewiredData__() {
          const moduleId = _getRewireModuleId__()

          const registry = _getRewireRegistry__()

          let rewireData = registry[moduleId]

          if (!rewireData) {
            registry[moduleId] = Object.create(null)
            rewireData = registry[moduleId]
          }

          return rewireData
        }

        ;(function registerResetAll() {
          const theGlobalVariable = _getGlobalObject()

          if (!theGlobalVariable.__rewire_reset_all__) {
            theGlobalVariable.__rewire_reset_all__ = function() {
              theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(
                null
              )
            }
          }
        })()

        const INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__'
        const _RewireAPI__ = {}
        ;(function() {
          function addPropertyToAPIObject(name, value) {
            Object.defineProperty(_RewireAPI__, name, {
              value,
              enumerable: false,
              configurable: true,
            })
          }

          addPropertyToAPIObject('__get__', _get__)
          addPropertyToAPIObject('__GetDependency__', _get__)
          addPropertyToAPIObject('__Rewire__', _set__)
          addPropertyToAPIObject('__set__', _set__)
          addPropertyToAPIObject('__reset__', _reset__)
          addPropertyToAPIObject('__ResetDependency__', _reset__)
          addPropertyToAPIObject('__with__', _with__)
        })()

        function _get__(variableName) {
          const rewireData = _getRewiredData__()

          if (rewireData[variableName] === undefined) {
            return _get_original__(variableName)
          }
          const value = rewireData[variableName]

          if (value === INTENTIONAL_UNDEFINED) {
            return undefined
          }
          return value
        }

        function _get_original__(variableName) {
          switch (variableName) {
            case 'createAll':
              return _createAll2.default

            case 'plainStructure':
              return _plain2.default
          }

          return undefined
        }

        function _assign__(variableName, value) {
          const rewireData = _getRewiredData__()

          if (rewireData[variableName] === undefined) {
            return _set_original__(variableName, value)
          }
          return (rewireData[variableName] = value)
        }

        function _set_original__(variableName, _value) {
          switch (variableName) {
          }

          return undefined
        }

        function _update_operation__(operation, variableName, prefix) {
          const oldValue = _get__(variableName)

          const newValue = operation === '++' ? oldValue + 1 : oldValue - 1

          _assign__(variableName, newValue)

          return prefix ? newValue : oldValue
        }

        function _set__(variableName, value) {
          const rewireData = _getRewiredData__()

          if (
            (typeof variableName === 'undefined'
              ? 'undefined'
              : _typeof(variableName)) === 'object'
          ) {
            Object.keys(variableName).forEach(name => {
              rewireData[name] = variableName[name]
            })
          } else {
            if (value === undefined) {
              rewireData[variableName] = INTENTIONAL_UNDEFINED
            } else {
              rewireData[variableName] = value
            }

            return function() {
              _reset__(variableName)
            }
          }
        }

        function _reset__(variableName) {
          const rewireData = _getRewiredData__()

          delete rewireData[variableName]

          if (Object.keys(rewireData).length == 0) {
            delete _getRewireRegistry__()[_getRewireModuleId__]
          }
        }

        function _with__(object) {
          const rewireData = _getRewiredData__()

          const rewiredVariableNames = Object.keys(object)
          const previousValues = {}

          function reset() {
            rewiredVariableNames.forEach(variableName => {
              rewireData[variableName] = previousValues[variableName]
            })
          }

          return function(callback) {
            rewiredVariableNames.forEach(variableName => {
              previousValues[variableName] = rewireData[variableName]
              rewireData[variableName] = object[variableName]
            })
            const result = callback()

            if (!!result && typeof result.then === 'function') {
              result.then(reset).catch(reset)
            } else {
              reset()
            }

            return result
          }
        }

        exports.__get__ = _get__
        exports.__GetDependency__ = _get__
        exports.__Rewire__ = _set__
        exports.__set__ = _set__
        exports.__ResetDependency__ = _reset__
        exports.__RewireAPI__ = _RewireAPI__
        exports.default = _RewireAPI__
        /* WEBPACK VAR INJECTION */
      }.call(exports, __webpack_require__(2)))

      /** */
    },
    /* 47 */
    /** */ function(module, __webpack_exports__, __webpack_require__) {
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'b',
        () => subscriptionShape
      )
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'a',
        () => storeShape
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_0_prop_types__ = __webpack_require__(
        0
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_0_prop_types___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_0_prop_types__
      )

      var subscriptionShape = __WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.shape(
        {
          trySubscribe:
            __WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func.isRequired,
          tryUnsubscribe:
            __WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func.isRequired,
          notifyNestedSubs:
            __WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func.isRequired,
          isSubscribed:
            __WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func.isRequired,
        }
      )

      var storeShape = __WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.shape(
        {
          subscribe:
            __WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func.isRequired,
          dispatch:
            __WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func.isRequired,
          getState:
            __WEBPACK_IMPORTED_MODULE_0_prop_types___default.a.func.isRequired,
        }
      )

      /** */
    },
    /* 48 */
    /** */ function(module, __webpack_exports__, __webpack_require__) {
      /* harmony export (immutable) */ __webpack_exports__.a = connectAdvanced
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_0_hoist_non_react_statics__ = __webpack_require__(
        45
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_0_hoist_non_react_statics___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_0_hoist_non_react_statics__
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_1_invariant__ = __webpack_require__(
        7
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_1_invariant___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_1_invariant__
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_2_react__ = __webpack_require__(
        1
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_2_react___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_2_react__
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_3__utils_Subscription__ = __webpack_require__(
        122
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_4__utils_PropTypes__ = __webpack_require__(
        47
      )
      const _extends =
        Object.assign ||
        function(target) {
          for (let i = 1; i < arguments.length; i++) {
            const source = arguments[i]
            for (const key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key]
              }
            }
          }
          return target
        }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError('Cannot call a class as a function')
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          )
        }
        return call && (typeof call === 'object' || typeof call === 'function')
          ? call
          : self
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== 'function' && superClass !== null) {
          throw new TypeError(
            `Super expression must either be null or a function, not ${typeof superClass}`
          )
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true,
          },
        })
        if (superClass)
          Object.setPrototypeOf
            ? Object.setPrototypeOf(subClass, superClass)
            : (subClass.__proto__ = superClass)
      }

      function _objectWithoutProperties(obj, keys) {
        const target = {}
        for (const i in obj) {
          if (keys.indexOf(i) >= 0) continue
          if (!Object.prototype.hasOwnProperty.call(obj, i)) continue
          target[i] = obj[i]
        }
        return target
      }

      let hotReloadingVersion = 0
      const dummyState = {}
      function noop() {}
      function makeSelectorStateful(sourceSelector, store) {
        // wrap the selector in an object that tracks its results between runs.
        var selector = {
          run: function runComponentSelector(props) {
            try {
              const nextProps = sourceSelector(store.getState(), props)
              if (nextProps !== selector.props || selector.error) {
                selector.shouldComponentUpdate = true
                selector.props = nextProps
                selector.error = null
              }
            } catch (error) {
              selector.shouldComponentUpdate = true
              selector.error = error
            }
          },
        }

        return selector
      }

      function connectAdvanced(
        /*
  selectorFactory is a func that is responsible for returning the selector function used to
  compute new props from state, props, and dispatch. For example:
     export default connectAdvanced((dispatch, options) => (state, props) => ({
      thing: state.things[props.thingId],
      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
    }))(YourComponent)
   Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
   Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
  props. Do not use connectAdvanced directly without memoizing results between calls to your
  selector, otherwise the Connect component will re-render on every state or props change.
*/
        selectorFactory
      ) {
        let _contextTypes, _childContextTypes

        let _ref =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : {},
          _ref$getDisplayName = _ref.getDisplayName,
          getDisplayName =
            _ref$getDisplayName === undefined
              ? function(name) {
                  return `ConnectAdvanced(${name})`
                }
              : _ref$getDisplayName,
          _ref$methodName = _ref.methodName,
          methodName =
            _ref$methodName === undefined ? 'connectAdvanced' : _ref$methodName,
          _ref$renderCountProp = _ref.renderCountProp,
          renderCountProp =
            _ref$renderCountProp === undefined
              ? undefined
              : _ref$renderCountProp,
          _ref$shouldHandleStat = _ref.shouldHandleStateChanges,
          shouldHandleStateChanges =
            _ref$shouldHandleStat === undefined ? true : _ref$shouldHandleStat,
          _ref$storeKey = _ref.storeKey,
          storeKey = _ref$storeKey === undefined ? 'store' : _ref$storeKey,
          _ref$withRef = _ref.withRef,
          withRef = _ref$withRef === undefined ? false : _ref$withRef,
          connectOptions = _objectWithoutProperties(_ref, [
            'getDisplayName',
            'methodName',
            'renderCountProp',
            'shouldHandleStateChanges',
            'storeKey',
            'withRef',
          ])

        const subscriptionKey = `${storeKey}Subscription`
        const version = hotReloadingVersion++

        const contextTypes = ((_contextTypes = {}),
        (_contextTypes[storeKey] =
          __WEBPACK_IMPORTED_MODULE_4__utils_PropTypes__['a' /* storeShape */]),
        (_contextTypes[subscriptionKey] =
          __WEBPACK_IMPORTED_MODULE_4__utils_PropTypes__[
            'b' /* subscriptionShape */
          ]),
        _contextTypes)
        const childContextTypes = ((_childContextTypes = {}),
        (_childContextTypes[subscriptionKey] =
          __WEBPACK_IMPORTED_MODULE_4__utils_PropTypes__[
            'b' /* subscriptionShape */
          ]),
        _childContextTypes)

        return function wrapWithConnect(WrappedComponent) {
          __WEBPACK_IMPORTED_MODULE_1_invariant___default()(
            typeof WrappedComponent === 'function',
            `You must pass a component to the function returned by ` +
              `connect. Instead received ${JSON.stringify(WrappedComponent)}`
          )

          const wrappedComponentName =
            WrappedComponent.displayName || WrappedComponent.name || 'Component'

          const displayName = getDisplayName(wrappedComponentName)

          const selectorFactoryOptions = _extends({}, connectOptions, {
            getDisplayName,
            methodName,
            renderCountProp,
            shouldHandleStateChanges,
            storeKey,
            withRef,
            displayName,
            wrappedComponentName,
            WrappedComponent,
          })

          const Connect = (function(_Component) {
            _inherits(Connect, _Component)

            function Connect(props, context) {
              _classCallCheck(this, Connect)

              const _this = _possibleConstructorReturn(
                this,
                _Component.call(this, props, context)
              )

              _this.version = version
              _this.state = {}
              _this.renderCount = 0
              _this.store = props[storeKey] || context[storeKey]
              _this.propsMode = Boolean(props[storeKey])
              _this.setWrappedInstance = _this.setWrappedInstance.bind(_this)

              __WEBPACK_IMPORTED_MODULE_1_invariant___default()(
                _this.store,
                `Could not find "${storeKey}" in either the context or props of ` +
                  `"${displayName}". Either wrap the root component in a <Provider>, ` +
                  `or explicitly pass "${storeKey}" as a prop to "${displayName}".`
              )

              _this.initSelector()
              _this.initSubscription()
              return _this
            }

            Connect.prototype.getChildContext = function getChildContext() {
              let _ref2

              // If this component received store from props, its subscription should be transparent
              // to any descendants receiving store+subscription from context; it passes along
              // subscription passed to it. Otherwise, it shadows the parent subscription, which allows
              // Connect to control ordering of notifications to flow top-down.
              const subscription = this.propsMode ? null : this.subscription
              return (
                (_ref2 = {}),
                (_ref2[subscriptionKey] =
                  subscription || this.context[subscriptionKey]),
                _ref2
              )
            }

            Connect.prototype.componentDidMount = function componentDidMount() {
              if (!shouldHandleStateChanges) return

              // componentWillMount fires during server side rendering, but componentDidMount and
              // componentWillUnmount do not. Because of this, trySubscribe happens during ...didMount.
              // Otherwise, unsubscription would never take place during SSR, causing a memory leak.
              // To handle the case where a child component may have triggered a state change by
              // dispatching an action in its componentWillMount, we have to re-run the select and maybe
              // re-render.
              this.subscription.trySubscribe()
              this.selector.run(this.props)
              if (this.selector.shouldComponentUpdate) this.forceUpdate()
            }

            Connect.prototype.componentWillReceiveProps = function componentWillReceiveProps(
              nextProps
            ) {
              this.selector.run(nextProps)
            }

            Connect.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
              return this.selector.shouldComponentUpdate
            }

            Connect.prototype.componentWillUnmount = function componentWillUnmount() {
              if (this.subscription) this.subscription.tryUnsubscribe()
              this.subscription = null
              this.notifyNestedSubs = noop
              this.store = null
              this.selector.run = noop
              this.selector.shouldComponentUpdate = false
            }

            Connect.prototype.getWrappedInstance = function getWrappedInstance() {
              __WEBPACK_IMPORTED_MODULE_1_invariant___default()(
                withRef,
                `To access the wrapped instance, you need to specify ` +
                  `{ withRef: true } in the options argument of the ${methodName}() call.`
              )
              return this.wrappedInstance
            }

            Connect.prototype.setWrappedInstance = function setWrappedInstance(
              ref
            ) {
              this.wrappedInstance = ref
            }

            Connect.prototype.initSelector = function initSelector() {
              const sourceSelector = selectorFactory(
                this.store.dispatch,
                selectorFactoryOptions
              )
              this.selector = makeSelectorStateful(sourceSelector, this.store)
              this.selector.run(this.props)
            }

            Connect.prototype.initSubscription = function initSubscription() {
              if (!shouldHandleStateChanges) return

              // parentSub's source should match where store came from: props vs. context. A component
              // connected to the store via props shouldn't use subscription from context, or vice versa.
              const parentSub = (this.propsMode ? this.props : this.context)[
                subscriptionKey
              ]
              this.subscription = new __WEBPACK_IMPORTED_MODULE_3__utils_Subscription__[
                'a' /* default */
              ](this.store, parentSub, this.onStateChange.bind(this))

              // `notifyNestedSubs` is duplicated to handle the case where the component is  unmounted in
              // the middle of the notification loop, where `this.subscription` will then be null. An
              // extra null check every change can be avoided by copying the method onto `this` and then
              // replacing it with a no-op on unmount. This can probably be avoided if Subscription's
              // listeners logic is changed to not call listeners that have been unsubscribed in the
              // middle of the notification loop.
              this.notifyNestedSubs = this.subscription.notifyNestedSubs.bind(
                this.subscription
              )
            }

            Connect.prototype.onStateChange = function onStateChange() {
              this.selector.run(this.props)

              if (!this.selector.shouldComponentUpdate) {
                this.notifyNestedSubs()
              } else {
                this.componentDidUpdate = this.notifyNestedSubsOnComponentDidUpdate
                this.setState(dummyState)
              }
            }

            Connect.prototype.notifyNestedSubsOnComponentDidUpdate = function notifyNestedSubsOnComponentDidUpdate() {
              // `componentDidUpdate` is conditionally implemented when `onStateChange` determines it
              // needs to notify nested subs. Once called, it unimplements itself until further state
              // changes occur. Doing it this way vs having a permanent `componentDidUpdate` that does
              // a boolean check every time avoids an extra method call most of the time, resulting
              // in some perf boost.
              this.componentDidUpdate = undefined
              this.notifyNestedSubs()
            }

            Connect.prototype.isSubscribed = function isSubscribed() {
              return (
                Boolean(this.subscription) && this.subscription.isSubscribed()
              )
            }

            Connect.prototype.addExtraProps = function addExtraProps(props) {
              if (
                !withRef &&
                !renderCountProp &&
                !(this.propsMode && this.subscription)
              )
                return props
              // make a shallow copy so that fields added don't leak to the original selector.
              // this is especially important for 'ref' since that's a reference back to the component
              // instance. a singleton memoized selector would then be holding a reference to the
              // instance, preventing the instance from being garbage collected, and that would be bad
              const withExtras = _extends({}, props)
              if (withRef) withExtras.ref = this.setWrappedInstance
              if (renderCountProp)
                withExtras[renderCountProp] = this.renderCount++
              if (this.propsMode && this.subscription)
                withExtras[subscriptionKey] = this.subscription
              return withExtras
            }

            Connect.prototype.render = function render() {
              const selector = this.selector
              selector.shouldComponentUpdate = false

              if (selector.error) {
                throw selector.error
              } else {
                return Object(
                  __WEBPACK_IMPORTED_MODULE_2_react__.createElement
                )(WrappedComponent, this.addExtraProps(selector.props))
              }
            }

            return Connect
          })(__WEBPACK_IMPORTED_MODULE_2_react__.Component)

          Connect.WrappedComponent = WrappedComponent
          Connect.displayName = displayName
          Connect.childContextTypes = childContextTypes
          Connect.contextTypes = contextTypes
          Connect.propTypes = contextTypes

          if (true) {
            Connect.prototype.componentWillUpdate = function componentWillUpdate() {
              const _this2 = this

              // We are hot reloading!
              if (this.version !== version) {
                this.version = version
                this.initSelector()

                // If any connected descendants don't hot reload (and resubscribe in the process), their
                // listeners will be lost when we unsubscribe. Unfortunately, by copying over all
                // listeners, this does mean that the old versions of connected descendants will still be
                // notified of state changes; however, their onStateChange function is a no-op so this
                // isn't a huge deal.
                let oldListeners = []

                if (this.subscription) {
                  oldListeners = this.subscription.listeners.get()
                  this.subscription.tryUnsubscribe()
                }
                this.initSubscription()
                if (shouldHandleStateChanges) {
                  this.subscription.trySubscribe()
                  oldListeners.forEach(listener =>
                    _this2.subscription.listeners.subscribe(listener)
                  )
                }
              }
            }
          }

          return __WEBPACK_IMPORTED_MODULE_0_hoist_non_react_statics___default()(
            Connect,
            WrappedComponent
          )
        }
      }

      /** */
    },
    /* 49 */
    /** */ function(module, __webpack_exports__, __webpack_require__) {
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'a',
        () => ActionTypes
      )
      /* harmony export (immutable) */ __webpack_exports__.b = createStore
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_0_lodash_es_isPlainObject__ = __webpack_require__(
        28
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_1_symbol_observable__ = __webpack_require__(
        134
      )

      /**
       * These are private action types reserved by Redux.
       * For any unknown actions, you must return the current state.
       * If the current state is undefined, you must return the initial state.
       * Do not reference these action types directly in your code.
       */
      var ActionTypes = {
        INIT: '@@redux/INIT',

        /**
         * Creates a Redux store that holds the state tree.
         * The only way to change the data in the store is to call `dispatch()` on it.
         *
         * There should only be a single store in your app. To specify how different
         * parts of the state tree respond to actions, you may combine several reducers
         * into a single reducer function by using `combineReducers`.
         *
         * @param {Function} reducer A function that returns the next state tree, given
         * the current state tree and the action to handle.
         *
         * @param {any} [preloadedState] The initial state. You may optionally specify it
         * to hydrate the state from the server in universal apps, or to restore a
         * previously serialized user session.
         * If you use `combineReducers` to produce the root reducer function, this must be
         * an object with the same shape as `combineReducers` keys.
         *
         * @param {Function} [enhancer] The store enhancer. You may optionally specify it
         * to enhance the store with third-party capabilities such as middleware,
         * time travel, persistence, etc. The only store enhancer that ships with Redux
         * is `applyMiddleware()`.
         *
         * @returns {Store} A Redux store that lets you read the state, dispatch actions
         * and subscribe to changes.
         */
      }
      function createStore(reducer, preloadedState, enhancer) {
        let _ref2

        if (
          typeof preloadedState === 'function' &&
          typeof enhancer === 'undefined'
        ) {
          enhancer = preloadedState
          preloadedState = undefined
        }

        if (typeof enhancer !== 'undefined') {
          if (typeof enhancer !== 'function') {
            throw new Error('Expected the enhancer to be a function.')
          }

          return enhancer(createStore)(reducer, preloadedState)
        }

        if (typeof reducer !== 'function') {
          throw new Error('Expected the reducer to be a function.')
        }

        let currentReducer = reducer
        let currentState = preloadedState
        let currentListeners = []
        let nextListeners = currentListeners
        let isDispatching = false

        function ensureCanMutateNextListeners() {
          if (nextListeners === currentListeners) {
            nextListeners = currentListeners.slice()
          }
        }

        /**
         * Reads the state tree managed by the store.
         *
         * @returns {any} The current state tree of your application.
         */
        function getState() {
          return currentState
        }

        /**
         * Adds a change listener. It will be called any time an action is dispatched,
         * and some part of the state tree may potentially have changed. You may then
         * call `getState()` to read the current state tree inside the callback.
         *
         * You may call `dispatch()` from a change listener, with the following
         * caveats:
         *
         * 1. The subscriptions are snapshotted just before every `dispatch()` call.
         * If you subscribe or unsubscribe while the listeners are being invoked, this
         * will not have any effect on the `dispatch()` that is currently in progress.
         * However, the next `dispatch()` call, whether nested or not, will use a more
         * recent snapshot of the subscription list.
         *
         * 2. The listener should not expect to see all state changes, as the state
         * might have been updated multiple times during a nested `dispatch()` before
         * the listener is called. It is, however, guaranteed that all subscribers
         * registered before the `dispatch()` started will be called with the latest
         * state by the time it exits.
         *
         * @param {Function} listener A callback to be invoked on every dispatch.
         * @returns {Function} A function to remove this change listener.
         */
        function subscribe(listener) {
          if (typeof listener !== 'function') {
            throw new Error('Expected listener to be a function.')
          }

          let isSubscribed = true

          ensureCanMutateNextListeners()
          nextListeners.push(listener)

          return function unsubscribe() {
            if (!isSubscribed) {
              return
            }

            isSubscribed = false

            ensureCanMutateNextListeners()
            const index = nextListeners.indexOf(listener)
            nextListeners.splice(index, 1)
          }
        }

        /**
         * Dispatches an action. It is the only way to trigger a state change.
         *
         * The `reducer` function, used to create the store, will be called with the
         * current state tree and the given `action`. Its return value will
         * be considered the **next** state of the tree, and the change listeners
         * will be notified.
         *
         * The base implementation only supports plain object actions. If you want to
         * dispatch a Promise, an Observable, a thunk, or something else, you need to
         * wrap your store creating function into the corresponding middleware. For
         * example, see the documentation for the `redux-thunk` package. Even the
         * middleware will eventually dispatch plain object actions using this method.
         *
         * @param {Object} action A plain object representing “what changed”. It is
         * a good idea to keep actions serializable so you can record and replay user
         * sessions, or use the time travelling `redux-devtools`. An action must have
         * a `type` property which may not be `undefined`. It is a good idea to use
         * string constants for action types.
         *
         * @returns {Object} For convenience, the same action object you dispatched.
         *
         * Note that, if you use a custom middleware, it may wrap `dispatch()` to
         * return something else (for example, a Promise you can await).
         */
        function dispatch(action) {
          if (
            !Object(
              __WEBPACK_IMPORTED_MODULE_0_lodash_es_isPlainObject__[
                'a' /* default */
              ]
            )(action)
          ) {
            throw new Error(
              'Actions must be plain objects. ' +
                'Use custom middleware for async actions.'
            )
          }

          if (typeof action.type === 'undefined') {
            throw new Error(
              'Actions may not have an undefined "type" property. ' +
                'Have you misspelled a constant?'
            )
          }

          if (isDispatching) {
            throw new Error('Reducers may not dispatch actions.')
          }

          try {
            isDispatching = true
            currentState = currentReducer(currentState, action)
          } finally {
            isDispatching = false
          }

          const listeners = (currentListeners = nextListeners)
          for (let i = 0; i < listeners.length; i++) {
            const listener = listeners[i]
            listener()
          }

          return action
        }

        /**
         * Replaces the reducer currently used by the store to calculate the state.
         *
         * You might need this if your app implements code splitting and you want to
         * load some of the reducers dynamically. You might also need this if you
         * implement a hot reloading mechanism for Redux.
         *
         * @param {Function} nextReducer The reducer for the store to use instead.
         * @returns {void}
         */
        function replaceReducer(nextReducer) {
          if (typeof nextReducer !== 'function') {
            throw new Error('Expected the nextReducer to be a function.')
          }

          currentReducer = nextReducer
          dispatch({ type: ActionTypes.INIT })
        }

        /**
         * Interoperability point for observable/reactive libraries.
         * @returns {observable} A minimal observable of state changes.
         * For more information, see the observable proposal:
         * https://github.com/tc39/proposal-observable
         */
        function observable() {
          let _ref

          const outerSubscribe = subscribe
          return (
            (_ref = {
              /**
               * The minimal observable subscription method.
               * @param {Object} observer Any object that can be used as an observer.
               * The observer object should have a `next` method.
               * @returns {subscription} An object with an `unsubscribe` method that can
               * be used to unsubscribe the observable from the store, and prevent further
               * emission of values from the observable.
               */
              subscribe: function subscribe(observer) {
                if (typeof observer !== 'object') {
                  throw new TypeError('Expected the observer to be an object.')
                }

                function observeState() {
                  if (observer.next) {
                    observer.next(getState())
                  }
                }

                observeState()
                const unsubscribe = outerSubscribe(observeState)
                return { unsubscribe }
              },
            }),
            (_ref[
              __WEBPACK_IMPORTED_MODULE_1_symbol_observable__['a' /* default */]
            ] = function() {
              return this
            }),
            _ref
          )
        }

        // When a store is created, an "INIT" action is dispatched so that every
        // reducer returns their initial state. This effectively populates
        // the initial state tree.
        dispatch({ type: ActionTypes.INIT })

        return (
          (_ref2 = {
            dispatch,
            subscribe,
            getState,
            replaceReducer,
          }),
          (_ref2[
            __WEBPACK_IMPORTED_MODULE_1_symbol_observable__['a' /* default */]
          ] = observable),
          _ref2
        )
      }

      /** */
    },
    /* 50 */
    /** */ function(module, __webpack_exports__, __webpack_require__) {
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_0__root_js__ = __webpack_require__(
        127
      )

      /** Built-in value references. */
      const Symbol =
        __WEBPACK_IMPORTED_MODULE_0__root_js__['a' /* default */].Symbol

      /* harmony default export */ __webpack_exports__.a = Symbol

      /** */
    },
    /* 51 */
    /** */ function(module, __webpack_exports__, __webpack_require__) {
      /* harmony export (immutable) */ __webpack_exports__.a = warning
      /**
       * Prints a warning in the console if it exists.
       *
       * @param {String} message The warning message.
       * @returns {void}
       */
      function warning(message) {
        /* eslint-disable no-console */
        if (
          typeof console !== 'undefined' &&
          typeof console.error === 'function'
        ) {
          console.error(message)
        }
        /* eslint-enable no-console */
        try {
          // This error was thrown as a convenience so that if you enable
          // "break on all exceptions" in your console,
          // it would pause the execution at this line.
          throw new Error(message)
          /* eslint-disable no-empty */
        } catch (e) {}
        /* eslint-enable no-empty */
      }

      /** */
    },
    /* 52 */
    /** */ function(module, __webpack_exports__, __webpack_require__) {
      /* harmony export (immutable) */ __webpack_exports__.a = compose
      /**
       * Composes single-argument functions from right to left. The rightmost
       * function can take multiple arguments as it provides the signature for
       * the resulting composite function.
       *
       * @param {...Function} funcs The functions to compose.
       * @returns {Function} A function obtained by composing the argument functions
       * from right to left. For example, compose(f, g, h) is identical to doing
       * (...args) => f(g(h(...args))).
       */

      function compose() {
        for (
          var _len = arguments.length, funcs = Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          funcs[_key] = arguments[_key]
        }

        if (funcs.length === 0) {
          return function(arg) {
            return arg
          }
        }

        if (funcs.length === 1) {
          return funcs[0]
        }

        return funcs.reduce(
          (a, b) =>
            function() {
              return a(b(...arguments))
            }
        )
      }

      /** */
    },
    /* 53 */
    /** */ function(module, __webpack_exports__, __webpack_require__) {
      /* harmony export (immutable) */ __webpack_exports__.a = wrapMapToPropsConstant
      /* unused harmony export getDependsOnOwnProps */
      /* harmony export (immutable) */ __webpack_exports__.b = wrapMapToPropsFunc
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_0__utils_verifyPlainObject__ = __webpack_require__(
        54
      )

      function wrapMapToPropsConstant(getConstant) {
        return function initConstantSelector(dispatch, options) {
          const constant = getConstant(dispatch, options)

          function constantSelector() {
            return constant
          }
          constantSelector.dependsOnOwnProps = false
          return constantSelector
        }
      }

      // dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args
      // to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine
      // whether mapToProps needs to be invoked when props have changed.
      //
      // A length of one signals that mapToProps does not depend on props from the parent component.
      // A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and
      // therefore not reporting its length accurately..
      function getDependsOnOwnProps(mapToProps) {
        return mapToProps.dependsOnOwnProps !== null &&
          mapToProps.dependsOnOwnProps !== undefined
          ? Boolean(mapToProps.dependsOnOwnProps)
          : mapToProps.length !== 1
      }

      // Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,
      // this function wraps mapToProps in a proxy function which does several things:
      //
      //  * Detects whether the mapToProps function being called depends on props, which
      //    is used by selectorFactory to decide if it should reinvoke on props changes.
      //
      //  * On first call, handles mapToProps if returns another function, and treats that
      //    new function as the true mapToProps for subsequent calls.
      //
      //  * On first call, verifies the first result is a plain object, in order to warn
      //    the developer that their mapToProps function is not returning a valid result.
      //
      function wrapMapToPropsFunc(mapToProps, methodName) {
        return function initProxySelector(dispatch, _ref) {
          const displayName = _ref.displayName

          var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
            return proxy.dependsOnOwnProps
              ? proxy.mapToProps(stateOrDispatch, ownProps)
              : proxy.mapToProps(stateOrDispatch)
          }

          // allow detectFactoryAndVerify to get ownProps
          proxy.dependsOnOwnProps = true

          proxy.mapToProps = function detectFactoryAndVerify(
            stateOrDispatch,
            ownProps
          ) {
            proxy.mapToProps = mapToProps
            proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps)
            let props = proxy(stateOrDispatch, ownProps)

            if (typeof props === 'function') {
              proxy.mapToProps = props
              proxy.dependsOnOwnProps = getDependsOnOwnProps(props)
              props = proxy(stateOrDispatch, ownProps)
            }

            if (true)
              Object(
                __WEBPACK_IMPORTED_MODULE_0__utils_verifyPlainObject__[
                  'a' /* default */
                ]
              )(props, displayName, methodName)

            return props
          }

          return proxy
        }
      }

      /** */
    },
    /* 54 */
    /** */ function(module, __webpack_exports__, __webpack_require__) {
      /* harmony export (immutable) */ __webpack_exports__.a = verifyPlainObject
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_0_lodash_es_isPlainObject__ = __webpack_require__(
        28
      )
      /* harmony import */ const __WEBPACK_IMPORTED_MODULE_1__warning__ = __webpack_require__(
        26
      )

      function verifyPlainObject(value, displayName, methodName) {
        if (
          !Object(
            __WEBPACK_IMPORTED_MODULE_0_lodash_es_isPlainObject__[
              'a' /* default */
            ]
          )(value)
        ) {
          Object(__WEBPACK_IMPORTED_MODULE_1__warning__['a' /* default */])(
            `${methodName}() in ${displayName} must return a plain object. Instead received ${value}.`
          )
        }
      }

      /** */
    },
    /* 55 */
    /** */ function(module, exports) {
      Object.defineProperty(exports, '__esModule', { value: true })
      const LOGIN_IN_DOING = (exports.LOGIN_IN_DOING = 'LOGIN_IN_DOING')
      const LOGIN_IN_DONE = (exports.LOGIN_IN_DONE = 'LOGIN_IN_DONE')
      const LOGIN_IN_ERROR = (exports.LOGIN_IN_ERROR = 'LOGIN_IN_ERROR')

      /** */
    },
    /* 56 */
    /** */ function(module, exports) {
      Object.defineProperty(exports, '__esModule', { value: true })
      const INCREMENT = (exports.INCREMENT = 'INCREMENT')
      const DECREMENT = (exports.DECREMENT = 'DECREMENT')

      /** */
    },
    /* 57 */
    /** */ function(module, exports, __webpack_require__) {
      exports.__esModule = true

      const _ExecutionEnvironment = __webpack_require__(9)

      const _debounce = __webpack_require__(155)

      const _debounce2 = _interopRequireDefault(_debounce)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      /**
       * Copyright (c) 2015-present, Nicolas Gallagher.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @noflow
       */

      const emptyObject = {}
      const registry = {}

      let id = 1
      const guid = function guid() {
        return `r-${id++}`
      }

      if (_ExecutionEnvironment.canUseDOM) {
        const triggerAll = function triggerAll() {
          Object.keys(registry).forEach(key => {
            const instance = registry[key]
            instance._handleLayout()
          })
        }

        window.addEventListener(
          'resize',
          (0, _debounce2.default)(triggerAll, 16),
          false
        )
      }

      const safeOverride = function safeOverride(original, next) {
        if (original) {
          return function prototypeOverride() {
            original.call(this)
            next.call(this)
          }
        }
        return next
      }

      const applyLayout = function applyLayout(Component) {
        const componentDidMount = Component.prototype.componentDidMount
        const componentDidUpdate = Component.prototype.componentDidUpdate
        const componentWillUnmount = Component.prototype.componentWillUnmount

        Component.prototype.componentDidMount = safeOverride(
          componentDidMount,
          function componentDidMount() {
            this._layoutState = emptyObject
            this._isMounted = true
            this._onLayoutId = guid()
            registry[this._onLayoutId] = this
            this._handleLayout()
          }
        )

        Component.prototype.componentDidUpdate = safeOverride(
          componentDidUpdate,
          function componentDidUpdate() {
            this._handleLayout()
          }
        )

        Component.prototype.componentWillUnmount = safeOverride(
          componentWillUnmount,
          function componentWillUnmount() {
            this._isMounted = false
            delete registry[this._onLayoutId]
          }
        )

        Component.prototype._handleLayout = function() {
          const _this = this

          const layout = this._layoutState
          const onLayout = this.props.onLayout

          if (onLayout) {
            this.measure((x, y, width, height) => {
              if (!_this._isMounted) return

              if (
                layout.x !== x ||
                layout.y !== y ||
                layout.width !== width ||
                layout.height !== height
              ) {
                _this._layoutState = {
                  x,
                  y,
                  width,
                  height,
                }
                const nativeEvent = { layout: _this._layoutState }
                onLayout({ nativeEvent, timeStamp: Date.now() })
              }
            })
          }
        }
        return Component
      }

      exports.default = applyLayout

      /** */
    },
    /* 58 */
    /** */ function(module, exports, __webpack_require__) {
      exports.__esModule = true

      const _AccessibilityUtil = __webpack_require__(30)

      const _AccessibilityUtil2 = _interopRequireDefault(_AccessibilityUtil)

      const _StyleSheet = __webpack_require__(5)

      const _StyleSheet2 = _interopRequireDefault(_StyleSheet)

      const _styleResolver2 = __webpack_require__(68)

      const _styleResolver3 = _interopRequireDefault(_styleResolver2)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      function _objectWithoutProperties(obj, keys) {
        const target = {}
        for (const i in obj) {
          if (keys.indexOf(i) >= 0) continue
          if (!Object.prototype.hasOwnProperty.call(obj, i)) continue
          target[i] = obj[i]
        }
        return target
      } /**
       * Copyright (c) 2015-present, Nicolas Gallagher.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @noflow
       */

      const emptyObject = {}

      const resetStyles = _StyleSheet2.default.create({
        ariaButton: {
          cursor: 'pointer',
        },
        button: {
          appearance: 'none',
          backgroundColor: 'transparent',
          color: 'inherit',
          font: 'inherit',
          textAlign: 'inherit',
        },
        heading: {
          font: 'inherit',
        },
        link: {
          backgroundColor: 'transparent',
          color: 'inherit',
          textDecorationLine: 'none',
        },
        list: {
          listStyle: 'none',
        },
      })

      const pointerEventsStyles = _StyleSheet2.default.create({
        auto: {
          pointerEvents: 'auto',
        },
        'box-none': {
          pointerEvents: 'box-none',
        },
        'box-only': {
          pointerEvents: 'box-only',
        },
        none: {
          pointerEvents: 'none',
        },
      })

      const defaultStyleResolver = function defaultStyleResolver(style) {
        return _styleResolver3.default.resolve(style)
      }

      const createDOMProps = function createDOMProps(
        component,
        props,
        styleResolver
      ) {
        if (!styleResolver) {
          styleResolver = defaultStyleResolver
        }

        if (!props) {
          props = emptyObject
        }

        let _props = props,
          accessibilityLabel = _props.accessibilityLabel,
          accessibilityLiveRegion = _props.accessibilityLiveRegion,
          importantForAccessibility = _props.importantForAccessibility,
          placeholderTextColor = _props.placeholderTextColor,
          pointerEvents = _props.pointerEvents,
          providedStyle = _props.style,
          testID = _props.testID,
          accessible = _props.accessible,
          accessibilityComponentType = _props.accessibilityComponentType,
          accessibilityRole = _props.accessibilityRole,
          accessibilityTraits = _props.accessibilityTraits,
          domProps = _objectWithoutProperties(_props, [
            'accessibilityLabel',
            'accessibilityLiveRegion',
            'importantForAccessibility',
            'placeholderTextColor',
            'pointerEvents',
            'style',
            'testID',
            'accessible',
            'accessibilityComponentType',
            'accessibilityRole',
            'accessibilityTraits',
          ])

        const isDisabled = _AccessibilityUtil2.default.isDisabled(props)
        const role = _AccessibilityUtil2.default.propsToAriaRole(props)
        const tabIndex = _AccessibilityUtil2.default.propsToTabIndex(props)
        const reactNativeStyle = [
          component === 'a' && resetStyles.link,
          component === 'button' && resetStyles.button,
          role === 'heading' && resetStyles.heading,
          component === 'ul' && resetStyles.list,
          role === 'button' && !isDisabled && resetStyles.ariaButton,
          pointerEvents && pointerEventsStyles[pointerEvents],
          providedStyle,
          placeholderTextColor && {
            placeholderTextColor,
          },
        ]

        let _styleResolver = styleResolver(reactNativeStyle),
          className = _styleResolver.className,
          style = _styleResolver.style

        if (isDisabled) {
          domProps['aria-disabled'] = true
        }
        if (importantForAccessibility === 'no-hide-descendants') {
          domProps['aria-hidden'] = true
        }
        if (accessibilityLabel && accessibilityLabel.constructor === String) {
          domProps['aria-label'] = accessibilityLabel
        }
        if (
          accessibilityLiveRegion &&
          accessibilityLiveRegion.constructor === String
        ) {
          domProps['aria-live'] =
            accessibilityLiveRegion === 'none' ? 'off' : accessibilityLiveRegion
        }
        if (className && className.constructor === String) {
          domProps.className = domProps.className
            ? `${domProps.className} ${className}`
            : className
        }
        if (component === 'a' && domProps.target === '_blank') {
          domProps.rel = `${domProps.rel || ''} noopener noreferrer`
        }
        if (role && role.constructor === String && role !== 'label') {
          domProps.role = role
        }
        if (style) {
          domProps.style = style
        }
        if (tabIndex) {
          domProps.tabIndex = tabIndex
        }
        if (testID && testID.constructor === String) {
          domProps['data-testid'] = testID
        }

        return domProps
      }

      exports.default = createDOMProps

      /** */
    },
    /* 59 */
    /** */ function(module, exports, __webpack_require__) {
      exports.__esModule = true
      /**
       * Copyright (c) 2017-present, Nicolas Gallagher.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       */

      const isDisabled = function isDisabled(props) {
        return props.disabled || props['aria-disabled']
      }

      exports.default = isDisabled

      /** */
    },
    /* 60 */
    /** */ function(module, exports, __webpack_require__) {
      exports.__esModule = true

      const _ReactNativePropRegistry = __webpack_require__(61)

      const _ReactNativePropRegistry2 = _interopRequireDefault(
        _ReactNativePropRegistry
      )

      const _invariant = __webpack_require__(4)

      const _invariant2 = _interopRequireDefault(_invariant)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      /**
       * Copyright (c) 2015-present, Nicolas Gallagher.
       * Copyright (c) 2015-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @providesModule flattenStyle
       *
       */

      function getStyle(style) {
        if (typeof style === 'number') {
          return _ReactNativePropRegistry2.default.getByID(style)
        }
        return style
      }

      function flattenStyle(style) {
        if (!style) {
          return undefined
        }

        if (true) {
          ;(0, _invariant2.default)(
            style !== true,
            'style may be false but not true'
          )
        }

        if (!Array.isArray(style)) {
          // $FlowFixMe
          return getStyle(style)
        }

        const result = {}
        for (let i = 0, styleLength = style.length; i < styleLength; ++i) {
          const computedStyle = flattenStyle(style[i])
          if (computedStyle) {
            for (const key in computedStyle) {
              const value = computedStyle[key]
              result[key] = value
            }
          }
        }
        return result
      }

      exports.default = flattenStyle

      /** */
    },
    /* 61 */
    /** */ function(module, exports, __webpack_require__) {
      exports.__esModule = true

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError('Cannot call a class as a function')
        }
      }

      /**
       * Copyright (c) 2015-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @providesModule ReactNativePropRegistry
       *
       */

      const emptyObject = {}
      const objects = {}
      const prefix = 'r'
      let uniqueID = 1

      const createKey = function createKey(id) {
        return `${prefix}-${id}`
      }

      const ReactNativePropRegistry = (function() {
        function ReactNativePropRegistry() {
          _classCallCheck(this, ReactNativePropRegistry)
        }

        ReactNativePropRegistry.register = function register(object) {
          const id = uniqueID++
          if (true) {
            Object.freeze(object)
          }
          const key = createKey(id)
          objects[key] = object
          return id
        }

        ReactNativePropRegistry.getByID = function getByID(id) {
          if (!id) {
            // Used in the style={[condition && id]} pattern,
            // we want it to be a no-op when the value is false or null
            return emptyObject
          }
          const key = createKey(id)
          const object = objects[key]
          if (!object) {
            console.warn(`Invalid style with id \`${id}\`. Skipping ...`)
            return emptyObject
          }
          return object
        }

        return ReactNativePropRegistry
      })()

      exports.default = ReactNativePropRegistry

      /** */
    },
    /* 62 */
    /** */ function(module, exports, __webpack_require__) {
      exports.__esModule = true

      const _propTypes = __webpack_require__(0)

      const AnimationPropTypes = {
        animationDelay: _propTypes.string,
        animationDirection: (0, _propTypes.oneOf)([
          'alternate',
          'alternate-reverse',
          'normal',
          'reverse',
        ]),
        animationDuration: _propTypes.string,
        animationFillMode: (0, _propTypes.oneOf)([
          'none',
          'forwards',
          'backwards',
          'both',
        ]),
        animationIterationCount: (0, _propTypes.oneOfType)([
          _propTypes.number,
          (0, _propTypes.oneOf)(['infinite']),
        ]),
        animationName: (0, _propTypes.oneOfType)([
          _propTypes.string,
          (0, _propTypes.arrayOf)(
            (0, _propTypes.oneOfType)([_propTypes.string, _propTypes.object])
          ),
        ]),
        animationPlayState: (0, _propTypes.oneOf)(['paused', 'running']),
        animationTimingFunction: _propTypes.string,
        transitionDelay: _propTypes.string,
        transitionDuration: _propTypes.string,
        transitionProperty: _propTypes.string,
        transitionTimingFunction: _propTypes.string,
      } /**
       * Copyright (c) 2017-present, Nicolas Gallagher.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       */

      exports.default = AnimationPropTypes

      /** */
    },
    /* 63 */
    /** */ function(module, exports, __webpack_require__) {
      exports.__esModule = true

      const _ColorPropType = __webpack_require__(13)

      const _ColorPropType2 = _interopRequireDefault(_ColorPropType)

      const _propTypes = __webpack_require__(0)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      /**
       * Copyright (c) 2015-present, Nicolas Gallagher.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       */

      const numberOrString = (0, _propTypes.oneOfType)([
        _propTypes.number,
        _propTypes.string,
      ])
      const BorderStylePropType = (0, _propTypes.oneOf)([
        'solid',
        'dotted',
        'dashed',
      ])

      const BorderPropTypes = {
        borderColor: _ColorPropType2.default,
        borderBottomColor: _ColorPropType2.default,
        borderEndColor: _ColorPropType2.default,
        borderLeftColor: _ColorPropType2.default,
        borderRightColor: _ColorPropType2.default,
        borderStartColor: _ColorPropType2.default,
        borderTopColor: _ColorPropType2.default,
        borderRadius: numberOrString,
        borderBottomEndRadius: numberOrString,
        borderBottomLeftRadius: numberOrString,
        borderBottomRightRadius: numberOrString,
        borderBottomStartRadius: numberOrString,
        borderTopEndRadius: numberOrString,
        borderTopLeftRadius: numberOrString,
        borderTopRightRadius: numberOrString,
        borderTopStartRadius: numberOrString,
        borderStyle: BorderStylePropType,
        borderBottomStyle: BorderStylePropType,
        borderEndStyle: BorderStylePropType,
        borderLeftStyle: BorderStylePropType,
        borderRightStyle: BorderStylePropType,
        borderStartStyle: BorderStylePropType,
        borderTopStyle: BorderStylePropType,
      }

      exports.default = BorderPropTypes

      /** */
    },
    /* 64 */
    /** */ function(module, exports, __webpack_require__) {
      exports.__esModule = true

      const _propTypes = __webpack_require__(0)

      const InteractionPropTypes = {
        cursor: _propTypes.string,
        touchAction: (0, _propTypes.oneOf)([
          'auto',
          'inherit',
          'manipulation',
          'none',
          'pan-down',
          'pan-left',
          'pan-right',
          'pan-up',
          'pan-x',
          'pan-y',
          'pinch-zoom',
        ]),
        userSelect: _propTypes.string,
        willChange: _propTypes.string,
      } /**
       * Copyright (c) 2017-present, Nicolas Gallagher.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       */

      exports.default = InteractionPropTypes

      /** */
    },
    /* 65 */
    /** */ function(module, exports, __webpack_require__) {
      exports.__esModule = true

      const _propTypes = __webpack_require__(0)

      const OverflowPropType = (0, _propTypes.oneOf)([
        'auto',
        'hidden',
        'scroll',
        'visible',
      ]) /**
       * Copyright (c) 2015-present, Nicolas Gallagher.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       */

      const hiddenOrVisible = (0, _propTypes.oneOf)(['hidden', 'visible'])
      const numberOrString = (0, _propTypes.oneOfType)([
        _propTypes.number,
        _propTypes.string,
      ])

      const LayoutPropTypes = {
        alignContent: (0, _propTypes.oneOf)([
          'center',
          'flex-end',
          'flex-start',
          'space-around',
          'space-between',
          'stretch',
        ]),
        alignItems: (0, _propTypes.oneOf)([
          'baseline',
          'center',
          'flex-end',
          'flex-start',
          'stretch',
        ]),
        alignSelf: (0, _propTypes.oneOf)([
          'auto',
          'baseline',
          'center',
          'flex-end',
          'flex-start',
          'stretch',
        ]),
        backfaceVisibility: hiddenOrVisible,
        borderWidth: numberOrString,
        borderBottomWidth: numberOrString,
        borderEndWidth: numberOrString,
        borderLeftWidth: numberOrString,
        borderRightWidth: numberOrString,
        borderStartWidth: numberOrString,
        borderTopWidth: numberOrString,
        bottom: numberOrString,
        boxSizing: _propTypes.string,
        direction: (0, _propTypes.oneOf)(['inherit', 'ltr', 'rtl']),
        display: _propTypes.string,
        end: numberOrString,
        flex: _propTypes.number,
        flexBasis: numberOrString,
        flexDirection: (0, _propTypes.oneOf)([
          'column',
          'column-reverse',
          'row',
          'row-reverse',
        ]),
        flexGrow: _propTypes.number,
        flexShrink: _propTypes.number,
        flexWrap: (0, _propTypes.oneOf)(['nowrap', 'wrap', 'wrap-reverse']),
        height: numberOrString,
        justifyContent: (0, _propTypes.oneOf)([
          'center',
          'flex-end',
          'flex-start',
          'space-around',
          'space-between',
          'space-evenly',
        ]),
        left: numberOrString,
        margin: numberOrString,
        marginBottom: numberOrString,
        marginHorizontal: numberOrString,
        marginEnd: numberOrString,
        marginLeft: numberOrString,
        marginRight: numberOrString,
        marginStart: numberOrString,
        marginTop: numberOrString,
        marginVertical: numberOrString,
        maxHeight: numberOrString,
        maxWidth: numberOrString,
        minHeight: numberOrString,
        minWidth: numberOrString,
        order: _propTypes.number,
        overflow: OverflowPropType,
        overflowX: OverflowPropType,
        overflowY: OverflowPropType,
        padding: numberOrString,
        paddingBottom: numberOrString,
        paddingHorizontal: numberOrString,
        paddingEnd: numberOrString,
        paddingLeft: numberOrString,
        paddingRight: numberOrString,
        paddingStart: numberOrString,
        paddingTop: numberOrString,
        paddingVertical: numberOrString,
        position: (0, _propTypes.oneOf)([
          'absolute',
          'fixed',
          'relative',
          'static',
          'sticky',
        ]),
        right: numberOrString,
        start: numberOrString,
        top: numberOrString,
        visibility: hiddenOrVisible,
        width: numberOrString,
        zIndex: _propTypes.number,
        /**
         * @platform unsupported
         */
        aspectRatio: _propTypes.number,
        /**
         * @platform web
         */
        gridAutoColumns: _propTypes.string,
        gridAutoFlow: _propTypes.string,
        gridAutoRows: _propTypes.string,
        gridColumnEnd: _propTypes.string,
        gridColumnGap: _propTypes.string,
        gridColumnStart: _propTypes.string,
        gridRowEnd: _propTypes.string,
        gridRowGap: _propTypes.string,
        gridRowStart: _propTypes.string,
        gridTemplateColumns: _propTypes.string,
        gridTemplateRows: _propTypes.string,
        gridTemplateAreas: _propTypes.string,
      }

      exports.default = LayoutPropTypes

      /** */
    },
    /* 66 */
    /** */ function(module, exports, __webpack_require__) {
      exports.__esModule = true

      const _ColorPropType = __webpack_require__(13)

      const _ColorPropType2 = _interopRequireDefault(_ColorPropType)

      const _propTypes = __webpack_require__(0)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      /**
       * Copyright (c) 2016-present, Nicolas Gallagher.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       */

      const numberOrString = (0, _propTypes.oneOfType)([
        _propTypes.number,
        _propTypes.string,
      ])

      const ShadowPropTypes = {
        shadowColor: _ColorPropType2.default,
        shadowOffset: (0, _propTypes.shape)({
          width: numberOrString,
          height: numberOrString,
        }),
        shadowOpacity: _propTypes.number,
        shadowRadius: numberOrString,
        shadowSpread: numberOrString,
      }

      exports.default = ShadowPropTypes

      /** */
    },
    /* 67 */
    /** */ function(module, exports, __webpack_require__) {
      exports.__esModule = true

      const _propTypes = __webpack_require__(0)

      const numberOrString = (0, _propTypes.oneOfType)([
        _propTypes.number,
        _propTypes.string,
      ]) /**
       * Copyright (c) 2015-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @providesModule TransformPropTypes
       *
       */

      const TransformPropTypes = {
        perspective: (0, _propTypes.oneOfType)([
          _propTypes.number,
          _propTypes.string,
        ]),
        perspectiveOrigin: _propTypes.string,
        transform: (0, _propTypes.arrayOf)(
          (0, _propTypes.oneOfType)([
            (0, _propTypes.shape)({ perspective: numberOrString }),
            (0, _propTypes.shape)({ rotate: _propTypes.string }),
            (0, _propTypes.shape)({ rotateX: _propTypes.string }),
            (0, _propTypes.shape)({ rotateY: _propTypes.string }),
            (0, _propTypes.shape)({ rotateZ: _propTypes.string }),
            (0, _propTypes.shape)({ scale: _propTypes.number }),
            (0, _propTypes.shape)({ scaleX: _propTypes.number }),
            (0, _propTypes.shape)({ scaleY: _propTypes.number }),
            (0, _propTypes.shape)({ skewX: _propTypes.string }),
            (0, _propTypes.shape)({ skewY: _propTypes.string }),
            (0, _propTypes.shape)({ translateX: numberOrString }),
            (0, _propTypes.shape)({ translateY: numberOrString }),
            (0, _propTypes.shape)({ translateZ: numberOrString }),
            (0, _propTypes.shape)({ translate3d: _propTypes.string }),
          ])
        ),
        transformOrigin: _propTypes.string,
        transformStyle: (0, _propTypes.oneOf)(['flat', 'preserve-3d']),
      }

      exports.default = TransformPropTypes

      /** */
    },
    /* 68 */
    /** */ function(module, exports, __webpack_require__) {
      exports.__esModule = true

      const _ReactNativeStyleResolver = __webpack_require__(166)

      const _ReactNativeStyleResolver2 = _interopRequireDefault(
        _ReactNativeStyleResolver
      )

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      const styleResolver = new _ReactNativeStyleResolver2.default() /**
       * Copyright (c) 2016-present, Nicolas Gallagher.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       */

      exports.default = styleResolver

      /** */
    },
    /* 69 */
    /** */ function(module, exports, __webpack_require__) {
      exports.__esModule = true

      const _normalizeValue = __webpack_require__(70)

      const _normalizeValue2 = _interopRequireDefault(_normalizeValue)

      const _processColor = __webpack_require__(167)

      const _processColor2 = _interopRequireDefault(_processColor)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      /**
       * The browser implements the CSS cascade, where the order of properties is a
       * factor in determining which styles to paint. React Native is different. It
       * gives giving precedence to the more specific style property. For example,
       * the value of `paddingTop` takes precedence over that of `padding`.
       *
       * This module creates mutally exclusive style declarations by expanding all of
       * React Native's supported shortform properties (e.g. `padding`) to their
       * longfrom equivalents.
       */

      /**
       * Copyright (c) 2016-present, Nicolas Gallagher.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @noflow
       */

      const emptyObject = {}
      const styleShortFormProperties = {
        borderColor: [
          'borderTopColor',
          'borderRightColor',
          'borderBottomColor',
          'borderLeftColor',
        ],
        borderRadius: [
          'borderTopLeftRadius',
          'borderTopRightRadius',
          'borderBottomRightRadius',
          'borderBottomLeftRadius',
        ],
        borderStyle: [
          'borderTopStyle',
          'borderRightStyle',
          'borderBottomStyle',
          'borderLeftStyle',
        ],
        borderWidth: [
          'borderTopWidth',
          'borderRightWidth',
          'borderBottomWidth',
          'borderLeftWidth',
        ],
        margin: ['marginTop', 'marginRight', 'marginBottom', 'marginLeft'],
        marginHorizontal: ['marginRight', 'marginLeft'],
        marginVertical: ['marginTop', 'marginBottom'],
        overflow: ['overflowX', 'overflowY'],
        overscrollBehavior: ['overscrollBehaviorX', 'overscrollBehaviorY'],
        padding: ['paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'],
        paddingHorizontal: ['paddingRight', 'paddingLeft'],
        paddingVertical: ['paddingTop', 'paddingBottom'],
        textDecorationLine: ['textDecoration'],
        writingDirection: ['direction'],
      }

      const colorProps = {
        backgroundColor: true,
        borderColor: true,
        borderTopColor: true,
        borderRightColor: true,
        borderBottomColor: true,
        borderLeftColor: true,
        color: true,
      }

      const borderWidthProps = {
        borderWidth: true,
        borderTopWidth: true,
        borderRightWidth: true,
        borderBottomWidth: true,
        borderLeftWidth: true,
      }

      const monospaceFontStack = 'monospace, monospace'
      const systemFontStack =
        'system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Ubuntu, "Helvetica Neue", sans-serif'

      const alphaSortProps = function alphaSortProps(propsArray) {
        return propsArray.sort((a, b) => {
          if (a < b) {
            return -1
          }
          if (a > b) {
            return 1
          }
          return 0
        })
      }

      const defaultOffset = { height: 0, width: 0 }

      /**
       * Shadow
       */

      // TODO: add inset and spread support
      const resolveShadow = function resolveShadow(resolvedStyle, style) {
        let _ref = style.shadowOffset || defaultOffset,
          height = _ref.height,
          width = _ref.width

        const offsetX = (0, _normalizeValue2.default)(null, width)
        const offsetY = (0, _normalizeValue2.default)(null, height)
        const blurRadius = (0, _normalizeValue2.default)(
          null,
          style.shadowRadius || 0
        )
        const color = (0, _processColor2.default)(
          style.shadowColor,
          style.shadowOpacity
        )

        if (color) {
          const boxShadow = `${offsetX} ${offsetY} ${blurRadius} ${color}`
          resolvedStyle.boxShadow = style.boxShadow
            ? `${style.boxShadow}, ${boxShadow}`
            : boxShadow
        } else if (style.boxShadow) {
          resolvedStyle.boxShadow = style.boxShadow
        }
      }

      /**
       * Text Shadow
       */

      const resolveTextShadow = function resolveTextShadow(
        resolvedStyle,
        style
      ) {
        let _ref2 = style.textShadowOffset || defaultOffset,
          height = _ref2.height,
          width = _ref2.width

        const offsetX = (0, _normalizeValue2.default)(null, width)
        const offsetY = (0, _normalizeValue2.default)(null, height)
        const blurRadius = (0, _normalizeValue2.default)(
          null,
          style.textShadowRadius || 0
        )
        const color = (0, _processColor2.default)(style.textShadowColor)

        if (color) {
          resolvedStyle.textShadow = `${offsetX} ${offsetY} ${blurRadius} ${color}`
        }
      }

      /**
       * Transform
       */

      // { scale: 2 } => 'scale(2)'
      // { translateX: 20 } => 'translateX(20px)'
      const mapTransform = function mapTransform(transform) {
        const type = Object.keys(transform)[0]
        const value = (0, _normalizeValue2.default)(type, transform[type])
        return `${type}(${value})`
      }

      // [1,2,3,4,5,6] => 'matrix3d(1,2,3,4,5,6)'
      const convertTransformMatrix = function convertTransformMatrix(
        transformMatrix
      ) {
        const matrix = transformMatrix.join(',')
        return `matrix3d(${matrix})`
      }

      const resolveTransform = function resolveTransform(resolvedStyle, style) {
        let transform = style.transform
        if (Array.isArray(style.transform)) {
          transform = style.transform.map(mapTransform).join(' ')
        } else if (style.transformMatrix) {
          transform = convertTransformMatrix(style.transformMatrix)
        }
        resolvedStyle.transform = transform
      }

      /**
       * Reducer
       */

      const createReducer = function createReducer(style, styleProps) {
        let hasResolvedShadow = false
        let hasResolvedTextShadow = false

        return function(resolvedStyle, prop) {
          let value = (0, _normalizeValue2.default)(prop, style[prop])

          // Make sure the default border width is explicitly set to '0' to avoid
          // falling back to any unwanted user-agent styles.
          if (borderWidthProps[prop]) {
            value =
              value == null ? (0, _normalizeValue2.default)(null, 0) : value
          }

          // Normalize color values
          if (colorProps[prop]) {
            value = (0, _processColor2.default)(value)
          }

          // Ignore everything else with a null value
          if (value == null) {
            return resolvedStyle
          }

          switch (prop) {
            // Ignore some React Native styles
            case 'aspectRatio':
            case 'elevation':
            case 'overlayColor':
            case 'resizeMode':
            case 'tintColor': {
              break
            }

            case 'display': {
              resolvedStyle.display = value
              // A flex container in React Native has these defaults which should be
              // set only if there is no otherwise supplied flex style.
              if (style.display === 'flex' && style.flex == null) {
                if (style.flexShrink == null) {
                  resolvedStyle.flexShrink = '0 !important'
                }
                if (style.flexBasis == null) {
                  resolvedStyle.flexBasis = 'auto !important'
                }
              }
              break
            }

            // The 'flex' property value in React Native must be a positive integer,
            // 0, or -1.
            //
            // On the web, a positive integer value for 'flex' is complicated by
            // browser differences. Although browsers render styles like 'flex:2'
            // consistently, they don't all set the same value for the resulting
            // 'flexBasis' (See #616). Expanding 'flex' in 'StyleSheet' would mean
            // setting different values for different browsers.
            //
            // This fix instead relies on the browser expanding 'flex' itself. And
            // because the 'flex' style is not being expanded the generated CSS is
            // likely to contain source order "conflicts". To avoid the browser
            // relying on source order to resolve the styles, all the longhand flex
            // property values must use '!important'.
            case 'flex': {
              if (value > 0) {
                resolvedStyle.flex = value
                resolvedStyle.flexGrow = `${value} !important`
                resolvedStyle.flexShrink = '1 !important'
              } else if (value === 0) {
                resolvedStyle.flexGrow = '0 !important'
                resolvedStyle.flexShrink = '0 !important'
                resolvedStyle.flexBasis = 'auto !important'
              } else if (value === -1) {
                resolvedStyle.flexGrow = '0 !important'
                resolvedStyle.flexShrink = '1 !important'
                resolvedStyle.flexBasis = 'auto !important'
              }
              break
            }

            case 'flexGrow':
            case 'flexShrink':
            case 'flexBasis': {
              if (value != null) {
                const hasImportant = `${value}`.indexOf('!important') > -1
                resolvedStyle[prop] = hasImportant
                  ? value
                  : `${value} !important`
              }
              break
            }

            case 'fontFamily': {
              if (value.indexOf('System') > -1) {
                const stack = value.split(/\s*,\s*/)
                stack[stack.indexOf('System')] = systemFontStack
                resolvedStyle.fontFamily = stack.join(', ')
              } else if (value === 'monospace') {
                resolvedStyle.fontFamily = monospaceFontStack
              } else {
                resolvedStyle.fontFamily = value
              }
              break
            }

            case 'fontVariant': {
              if (Array.isArray(value) && value.length > 0) {
                resolvedStyle.fontVariant = value.join(' ')
              }
              break
            }

            case 'shadowColor':
            case 'shadowOffset':
            case 'shadowOpacity':
            case 'shadowRadius': {
              if (!hasResolvedShadow) {
                resolveShadow(resolvedStyle, style)
              }
              hasResolvedShadow = true
              break
            }

            case 'textAlignVertical': {
              resolvedStyle.verticalAlign =
                value === 'center' ? 'middle' : value
              break
            }

            case 'textShadowColor':
            case 'textShadowOffset':
            case 'textShadowRadius': {
              if (!hasResolvedTextShadow) {
                resolveTextShadow(resolvedStyle, style)
              }
              hasResolvedTextShadow = true
              break
            }

            case 'transform':
            case 'transformMatrix': {
              resolveTransform(resolvedStyle, style)
              break
            }

            default: {
              const longFormProperties = styleShortFormProperties[prop]
              if (longFormProperties) {
                longFormProperties.forEach((longForm, i) => {
                  // The value of any longform property in the original styles takes
                  // precedence over the shortform's value.
                  if (styleProps.indexOf(longForm) === -1) {
                    resolvedStyle[longForm] = value
                  }
                })
              } else {
                resolvedStyle[prop] = value
              }
            }
          }

          return resolvedStyle
        }
      }

      const createReactDOMStyle = function createReactDOMStyle(style) {
        if (!style) {
          return emptyObject
        }
        const styleProps = Object.keys(style)
        const sortedStyleProps = alphaSortProps(styleProps)
        const reducer = createReducer(style, styleProps)
        const resolvedStyle = sortedStyleProps.reduce(reducer, {})
        return resolvedStyle
      }

      exports.default = createReactDOMStyle

      /** */
    },
    /* 70 */
    /** */ function(module, exports, __webpack_require__) {
      exports.__esModule = true

      const _unitlessNumbers = __webpack_require__(71)

      const _unitlessNumbers2 = _interopRequireDefault(_unitlessNumbers)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      const normalizeValue = function normalizeValue(property, value) {
        if (!_unitlessNumbers2.default[property] && typeof value === 'number') {
          value += 'px'
        }
        return value
      } /**
       * Copyright (c) 2016-present, Nicolas Gallagher.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @noflow
       */

      exports.default = normalizeValue

      /** */
    },
    /* 71 */
    /** */ function(module, exports, __webpack_require__) {
      exports.__esModule = true
      const unitlessNumbers = {
        animationIterationCount: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        flex: true,
        flexGrow: true,
        flexOrder: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        fontWeight: true,
        gridRow: true,
        gridColumn: true,
        lineClamp: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        // SVG-related
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true,
        // transform types
        scale: true,
        scaleX: true,
        scaleY: true,
        scaleZ: true,
        // RN properties
        shadowOpacity: true,
      }

      /**
       * Support style names that may come passed in prefixed by adding permutations
       * of vendor prefixes.
       */
      const prefixes = ['ms', 'Moz', 'O', 'Webkit']
      const prefixKey = function prefixKey(prefix, key) {
        return prefix + key.charAt(0).toUpperCase() + key.substring(1)
      }
      Object.keys(unitlessNumbers).forEach(prop => {
        prefixes.forEach(prefix => {
          unitlessNumbers[prefixKey(prefix, prop)] = unitlessNumbers[prop]
        })
      })

      exports.default = unitlessNumbers

      /** */
    },
    /* 72 */
    /** */ function(module, exports, __webpack_require__) {
      exports.__esModule = true

      const _ExecutionEnvironment = __webpack_require__(9)

      const _ExecutionEnvironment2 = _interopRequireDefault(
        _ExecutionEnvironment
      )

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      let doLeftAndRightSwapInRTL = true /**
       * Copyright (c) 2016-present, Nicolas Gallagher.
       * Copyright (c) 2015-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @providesModule I18nManager
       *
       */

      let isPreferredLanguageRTL = false
      let isRTLAllowed = true
      let isRTLForced = false

      const isRTL = function isRTL() {
        if (isRTLForced) {
          return true
        }
        return isRTLAllowed && isPreferredLanguageRTL
      }

      const onDirectionChange = function onDirectionChange() {
        if (_ExecutionEnvironment2.default.canUseDOM) {
          if (
            document.documentElement &&
            document.documentElement.setAttribute
          ) {
            document.documentElement.setAttribute(
              'dir',
              isRTL() ? 'rtl' : 'ltr'
            )
          }
        }
      }

      const I18nManager = {
        allowRTL: function allowRTL(bool) {
          isRTLAllowed = bool
          onDirectionChange()
        },
        forceRTL: function forceRTL(bool) {
          isRTLForced = bool
          onDirectionChange()
        },
        setPreferredLanguageRTL: function setPreferredLanguageRTL(bool) {
          isPreferredLanguageRTL = bool
          onDirectionChange()
        },
        swapLeftAndRightInRTL: function swapLeftAndRightInRTL(bool) {
          doLeftAndRightSwapInRTL = bool
        },

        get doLeftAndRightSwapInRTL() {
          return doLeftAndRightSwapInRTL
        },
        get isRTL() {
          return isRTL()
        },
      }

      exports.default = I18nManager

      /** */
    },
    /* 73 */
    /** */ function(module, exports, __webpack_require__) {
      exports.__esModule = true

      const _I18nManager = __webpack_require__(72)

      const _I18nManager2 = _interopRequireDefault(_I18nManager)

      const _multiplyStyleLengthValue = __webpack_require__(169)

      const _multiplyStyleLengthValue2 = _interopRequireDefault(
        _multiplyStyleLengthValue
      )

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      /**
       * Copyright (c) 2016-present, Nicolas Gallagher.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @noflow
       */

      const emptyObject = {}

      const borderTopLeftRadius = 'borderTopLeftRadius'
      const borderTopRightRadius = 'borderTopRightRadius'
      const borderBottomLeftRadius = 'borderBottomLeftRadius'
      const borderBottomRightRadius = 'borderBottomRightRadius'
      const borderLeftColor = 'borderLeftColor'
      const borderLeftStyle = 'borderLeftStyle'
      const borderLeftWidth = 'borderLeftWidth'
      const borderRightColor = 'borderRightColor'
      const borderRightStyle = 'borderRightStyle'
      const borderRightWidth = 'borderRightWidth'
      const right = 'right'
      const marginLeft = 'marginLeft'
      const marginRight = 'marginRight'
      const paddingLeft = 'paddingLeft'
      const paddingRight = 'paddingRight'
      const left = 'left'

      // Map of LTR property names to their BiDi equivalent.
      const PROPERTIES_FLIP = {
        borderTopLeftRadius: borderTopRightRadius,
        borderTopRightRadius: borderTopLeftRadius,
        borderBottomLeftRadius: borderBottomRightRadius,
        borderBottomRightRadius: borderBottomLeftRadius,
        borderLeftColor: borderRightColor,
        borderLeftStyle: borderRightStyle,
        borderLeftWidth: borderRightWidth,
        borderRightColor: borderLeftColor,
        borderRightStyle: borderLeftStyle,
        borderRightWidth: borderLeftWidth,
        left: right,
        marginLeft: marginRight,
        marginRight: marginLeft,
        paddingLeft: paddingRight,
        paddingRight: paddingLeft,
        right: left,
      }

      // Map of I18N property names to their LTR equivalent.
      const PROPERTIES_I18N = {
        borderTopStartRadius: borderTopLeftRadius,
        borderTopEndRadius: borderTopRightRadius,
        borderBottomStartRadius: borderBottomLeftRadius,
        borderBottomEndRadius: borderBottomRightRadius,
        borderStartColor: borderLeftColor,
        borderStartStyle: borderLeftStyle,
        borderStartWidth: borderLeftWidth,
        borderEndColor: borderRightColor,
        borderEndStyle: borderRightStyle,
        borderEndWidth: borderRightWidth,
        end: right,
        marginStart: marginLeft,
        marginEnd: marginRight,
        paddingStart: paddingLeft,
        paddingEnd: paddingRight,
        start: left,
      }

      const PROPERTIES_VALUE = {
        clear: true,
        float: true,
        textAlign: true,
      }

      // Invert the sign of a numeric-like value
      const additiveInverse = function additiveInverse(value) {
        return (0, _multiplyStyleLengthValue2.default)(value, -1)
      }

      const i18nStyle = function i18nStyle(originalStyle) {
        let doLeftAndRightSwapInRTL =
            _I18nManager2.default.doLeftAndRightSwapInRTL,
          isRTL = _I18nManager2.default.isRTL

        const style = originalStyle || emptyObject
        const frozenProps = {}
        const nextStyle = {}

        for (const originalProp in style) {
          if (!Object.prototype.hasOwnProperty.call(style, originalProp)) {
            continue
          }
          const originalValue = style[originalProp]
          let prop = originalProp
          let value = originalValue

          // BiDi flip properties
          if (PROPERTIES_I18N.hasOwnProperty(originalProp)) {
            // convert start/end
            const convertedProp = PROPERTIES_I18N[originalProp]
            prop = isRTL ? PROPERTIES_FLIP[convertedProp] : convertedProp
          } else if (
            isRTL &&
            doLeftAndRightSwapInRTL &&
            PROPERTIES_FLIP[originalProp]
          ) {
            prop = PROPERTIES_FLIP[originalProp]
          }

          // BiDi flip values
          if (PROPERTIES_VALUE.hasOwnProperty(originalProp)) {
            if (originalValue === 'start') {
              value = isRTL ? 'right' : 'left'
            } else if (originalValue === 'end') {
              value = isRTL ? 'left' : 'right'
            } else if (isRTL && doLeftAndRightSwapInRTL) {
              if (originalValue === 'left') {
                value = 'right'
              } else if (originalValue === 'right') {
                value = 'left'
              }
            }
          }

          if (isRTL && prop === 'textShadowOffset') {
            nextStyle[prop] = value
            nextStyle[prop].width = additiveInverse(value.width)
          } else if (!frozenProps[prop]) {
            nextStyle[prop] = value
          }

          if (PROPERTIES_I18N[originalProp]) {
            frozenProps[prop] = true
          }
        }

        return nextStyle
      }

      exports.default = i18nStyle

      /** */
    },
    /* 74 */
    /** */ function(module, exports, __webpack_require__) {
      exports.__esModule = true
      exports.prefixInlineStyles = undefined

      const _createPrefixer = __webpack_require__(170)

      const _createPrefixer2 = _interopRequireDefault(_createPrefixer)

      const _static = __webpack_require__(175)

      const _static2 = _interopRequireDefault(_static)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      /**
       * Copyright (c) 2015-present, Nicolas Gallagher.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       */

      const prefixAll = (0, _createPrefixer2.default)(_static2.default)

      exports.default = prefixAll
      const prefixInlineStyles = (exports.prefixInlineStyles = function prefixInlineStyles(
        style
      ) {
        const prefixedStyles = prefixAll(style)

        // React@15 removed undocumented support for fallback values in
        // inline-styles. Revert array values to the standard CSS value
        Object.keys(prefixedStyles).forEach(prop => {
          const value = prefixedStyles[prop]
          if (Array.isArray(value)) {
            prefixedStyles[prop] = value[value.length - 1]
          }
        })

        return prefixedStyles
      })

      /** */
    },
    /* 75 */
    /** */ function(module, exports, __webpack_require__) {
      Object.defineProperty(exports, '__esModule', {
        value: true,
      })
      exports.default = capitalizeString
      function capitalizeString(str) {
        return str.charAt(0).toUpperCase() + str.slice(1)
      }
      module.exports = exports.default

      /** */
    },
    /* 76 */
    /** */ function(module, exports, __webpack_require__) {
      exports.__esModule = true

      const _hyphenateStyleName = __webpack_require__(35)

      const _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName)

      const _mapKeyValue = __webpack_require__(191)

      const _mapKeyValue2 = _interopRequireDefault(_mapKeyValue)

      const _normalizeValue = __webpack_require__(70)

      const _normalizeValue2 = _interopRequireDefault(_normalizeValue)

      const _prefixStyles = __webpack_require__(74)

      const _prefixStyles2 = _interopRequireDefault(_prefixStyles)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      /**
       * Copyright (c) 2016-present, Nicolas Gallagher.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @noflow
       */

      const createDeclarationString = function createDeclarationString(
        prop,
        val
      ) {
        const name = (0, _hyphenateStyleName2.default)(prop)
        const value = (0, _normalizeValue2.default)(prop, val)
        if (Array.isArray(val)) {
          return val.map(v => `${name}:${v}`).join(';')
        }
        return `${name}:${value}`
      }

      /**
       * Generates valid CSS rule body from a JS object
       *
       * createRuleBlock({ width: 20, color: 'blue' });
       * // => 'color:blue;width:20px'
       */
      const createRuleBlock = function createRuleBlock(style) {
        return (0, _mapKeyValue2.default)(
          (0, _prefixStyles2.default)(style),
          createDeclarationString
        )
          .sort()
          .join(';')
      }

      exports.default = createRuleBlock

      /** */
    },
    /* 77 */
    /** */ function(module, exports, __webpack_require__) {
      exports.__esModule = true
      /* eslint-disable */

      /**
       * JS Implementation of MurmurHash2
       *
       * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
       * @see http://github.com/garycourt/murmurhash-js
       * @author <a href="mailto:aappleby@gmail.com">Austin Appleby</a>
       * @see http://sites.google.com/site/murmurhash/
       *
       * @param {string} str ASCII only
       * @param {number} seed Positive integer only
       * @return {number} 32-bit positive integer hash
       */

      function murmurhash2_32_gc(str, seed) {
        var l = str.length,
          h = seed ^ l,
          i = 0,
          k

        while (l >= 4) {
          k =
            (str.charCodeAt(i) & 0xff) |
            ((str.charCodeAt(++i) & 0xff) << 8) |
            ((str.charCodeAt(++i) & 0xff) << 16) |
            ((str.charCodeAt(++i) & 0xff) << 24)

          k =
            (k & 0xffff) * 0x5bd1e995 +
            ((((k >>> 16) * 0x5bd1e995) & 0xffff) << 16)
          k ^= k >>> 24
          k =
            (k & 0xffff) * 0x5bd1e995 +
            ((((k >>> 16) * 0x5bd1e995) & 0xffff) << 16)

          h =
            ((h & 0xffff) * 0x5bd1e995 +
              ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16)) ^
            k

          l -= 4
          ++i
        }

        switch (l) {
          case 3:
            h ^= (str.charCodeAt(i + 2) & 0xff) << 16
          case 2:
            h ^= (str.charCodeAt(i + 1) & 0xff) << 8
          case 1:
            h ^= str.charCodeAt(i) & 0xff
            h =
              (h & 0xffff) * 0x5bd1e995 +
              ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16)
        }

        h ^= h >>> 13
        h =
          (h & 0xffff) * 0x5bd1e995 +
          ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16)
        h ^= h >>> 15

        return h >>> 0
      }

      var hash = function hash(str) {
        return murmurhash2_32_gc(str, 1).toString(36)
      }

      exports.default = hash

      /***/
    },
    /* 78 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _reactDom = __webpack_require__(15)

      exports.default = _reactDom.findDOMNode /**
       * Copyright (c) 2016-present, Nicolas Gallagher.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @providesModule findNodeHandle
       * @noflow
       */

      /***/
    },
    /* 79 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _requestAnimationFrame = __webpack_require__(194)

      var _requestAnimationFrame2 = _interopRequireDefault(
        _requestAnimationFrame
      )

      var _setImmediate = __webpack_require__(196)

      var _setImmediate2 = _interopRequireDefault(_setImmediate)

      var _setValueForStyles = __webpack_require__(199)

      var _setValueForStyles2 = _interopRequireDefault(_setValueForStyles)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      var getRect = function getRect(node) {
        var height = node.offsetHeight
        var width = node.offsetWidth
        var left = node.offsetLeft
        var top = node.offsetTop
        node = node.offsetParent

        while (node && node.nodeType === 1 /* Node.ELEMENT_NODE */) {
          left += node.offsetLeft - node.scrollLeft
          top += node.offsetTop - node.scrollTop
          node = node.offsetParent
        }
        return { height: height, left: left, top: top, width: width }
      } /**
       * Copyright (c) 2016-present, Nicolas Gallagher.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @providesModule UIManager
       * @noflow
       */

      var hasRequestedAnimationFrame = false
      var measureLayoutQueue = []

      var processLayoutQueue = function processLayoutQueue() {
        measureLayoutQueue.splice(0, 250).forEach(function(item) {
          var node = item[0],
            relativeToNativeNode = item[1],
            callback = item[2]

          var relativeNode = relativeToNativeNode || (node && node.parentNode)

          if (node && relativeNode) {
            var relativeRect = getRect(relativeNode)

            var _getRect = getRect(node),
              height = _getRect.height,
              left = _getRect.left,
              top = _getRect.top,
              width = _getRect.width

            var x = left - relativeRect.left
            var y = top - relativeRect.top
            callback(x, y, width, height, left, top)
          }
        })

        if (measureLayoutQueue.length > 0) {
          ;(0, _setImmediate2.default)(processLayoutQueue)
        }
      }

      var _measureLayout = function _measureLayout(
        node,
        relativeToNativeNode,
        callback
      ) {
        if (!hasRequestedAnimationFrame) {
          ;(0, _requestAnimationFrame2.default)(function() {
            hasRequestedAnimationFrame = false
            processLayoutQueue()
          })
        }

        hasRequestedAnimationFrame = true
        measureLayoutQueue.push([node, relativeToNativeNode, callback])
      }

      var UIManager = {
        blur: function blur(node) {
          try {
            node.blur()
          } catch (err) {}
        },
        focus: function focus(node) {
          try {
            node.focus()
          } catch (err) {}
        },
        measure: function measure(node, callback) {
          _measureLayout(node, null, callback)
        },
        measureInWindow: function measureInWindow(node, callback) {
          ;(0, _requestAnimationFrame2.default)(function() {
            if (node) {
              var _getRect2 = getRect(node),
                height = _getRect2.height,
                left = _getRect2.left,
                top = _getRect2.top,
                width = _getRect2.width

              callback(left, top, width, height)
            }
          })
        },
        measureLayout: function measureLayout(
          node,
          relativeToNativeNode,
          onFail,
          onSuccess
        ) {
          _measureLayout(node, relativeToNativeNode, onSuccess)
        },
        updateView: function updateView(
          node,
          props,
          component /* only needed to surpress React errors in development */
        ) {
          for (var prop in props) {
            if (!Object.prototype.hasOwnProperty.call(props, prop)) {
              continue
            }

            var value = props[prop]
            switch (prop) {
              case 'style': {
                ;(0, _setValueForStyles2.default)(
                  node,
                  value,
                  component._reactInternalInstance
                )
                break
              }
              case 'class':
              case 'className': {
                node.setAttribute('class', value)
                break
              }
              case 'text':
              case 'value':
                // native platforms use `text` prop to replace text input value
                node.value = value
                break
              default:
                node.setAttribute(prop, value)
            }
          }
        },
      }

      exports.default = UIManager

      /***/
    },
    /* 80 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      __webpack_require__(202)

      var _AccessibilityUtil = __webpack_require__(30)

      var _AccessibilityUtil2 = _interopRequireDefault(_AccessibilityUtil)

      var _createDOMProps = __webpack_require__(58)

      var _createDOMProps2 = _interopRequireDefault(_createDOMProps)

      var _normalizeNativeEvent = __webpack_require__(81)

      var _normalizeNativeEvent2 = _interopRequireDefault(_normalizeNativeEvent)

      var _react = __webpack_require__(1)

      var _react2 = _interopRequireDefault(_react)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      /**
       * Ensure event handlers receive an event of the expected shape. The 'button'
       * role – for accessibility reasons and functional equivalence to the native
       * button element – must also support synthetic keyboard activation of onclick,
       * and remove event handlers when disabled.
       */
      var eventHandlerNames = {
        onBlur: true,
        onClick: true,
        onClickCapture: true,
        onContextMenu: true,
        onFocus: true,
        onResponderRelease: true,
        onTouchCancel: true,
        onTouchCancelCapture: true,
        onTouchEnd: true,
        onTouchEndCapture: true,
        onTouchMove: true,
        onTouchMoveCapture: true,
        onTouchStart: true,
        onTouchStartCapture: true,
      } /**
       * Copyright (c) 2015-present, Nicolas Gallagher.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @noflow
       */

      var adjustProps = function adjustProps(domProps) {
        var isButtonRole = domProps.role === 'button'
        var isDisabled = _AccessibilityUtil2.default.isDisabled(domProps)

        Object.keys(domProps).forEach(function(propName) {
          var prop = domProps[propName]
          var isEventHandler =
            typeof prop === 'function' && eventHandlerNames[propName]
          if (isEventHandler) {
            if (isButtonRole && isDisabled) {
              domProps[propName] = undefined
            } else if (propName === 'onResponderRelease') {
              // Browsers fire mouse events after touch events. This causes the
              // 'onResponderRelease' handler to be called twice for Touchables.
              // Auto-fix this issue by calling 'preventDefault' to cancel the mouse
              // events.
              domProps[propName] = function(e) {
                if (e.cancelable && !e.isDefaultPrevented()) {
                  e.preventDefault()
                }
                return prop(e)
              }
            } else {
              // TODO: move this out of the render path
              domProps[propName] = function(e) {
                e.nativeEvent = (0, _normalizeNativeEvent2.default)(
                  e.nativeEvent
                )
                return prop(e)
              }
            }
          }
        })

        // Button role should trigger 'onClick' if SPACE or ENTER keys are pressed
        if (isButtonRole && !isDisabled) {
          var onClick = domProps.onClick

          domProps.onKeyPress = function(e) {
            if (!e.isDefaultPrevented() && (e.which === 13 || e.which === 32)) {
              e.preventDefault()
              if (onClick) {
                onClick(e)
              }
            }
          }
        }
      }

      var createElement = function createElement(component, props) {
        for (
          var _len = arguments.length,
            children = Array(_len > 2 ? _len - 2 : 0),
            _key = 2;
          _key < _len;
          _key++
        ) {
          children[_key - 2] = arguments[_key]
        }

        // use equivalent platform elements where possible
        var accessibilityComponent = _AccessibilityUtil2.default.propsToAccessibilityComponent(
          props
        )
        var Component = accessibilityComponent || component
        var domProps = (0, _createDOMProps2.default)(Component, props)
        adjustProps(domProps)
        return _react2.default.createElement.apply(
          _react2.default,
          [Component, domProps].concat(children)
        )
      }

      exports.default = createElement

      /***/
    },
    /* 81 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true
      /**
       * Copyright (c) 2015-present, Nicolas Gallagher.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       */

      var emptyArray = []
      var emptyFunction = function emptyFunction() {}

      // Mobile Safari re-uses touch objects, so we copy the properties we want and normalize the identifier
      var normalizeTouches = function normalizeTouches(touches) {
        if (!touches) {
          return emptyArray
        }

        return Array.prototype.slice.call(touches).map(function(touch) {
          var identifier =
            touch.identifier > 20 ? touch.identifier % 20 : touch.identifier
          var locationX = void 0,
            locationY = void 0

          var node = touch.target
          if (node) {
            var isElement = node.nodeType === 1 /* Node.ELEMENT_NODE */
            if (isElement && typeof node.getBoundingClientRect === 'function') {
              var rect = node.getBoundingClientRect()
              locationX = touch.pageX - rect.left
              locationY = touch.pageY - rect.top
            }
          }

          return {
            _normalized: true,
            clientX: touch.clientX,
            clientY: touch.clientY,
            force: touch.force,
            locationX: locationX,
            locationY: locationY,
            identifier: identifier,
            pageX: touch.pageX,
            pageY: touch.pageY,
            radiusX: touch.radiusX,
            radiusY: touch.radiusY,
            rotationAngle: touch.rotationAngle,
            screenX: touch.screenX,
            screenY: touch.screenY,
            target: touch.target,
            // normalize the timestamp
            // https://stackoverflow.com/questions/26177087/ios-8-mobile-safari-wrong-timestamp-on-touch-events
            timestamp: Date.now(),
          }
        })
      }

      function normalizeTouchEvent(nativeEvent) {
        var changedTouches = normalizeTouches(nativeEvent.changedTouches)
        var touches = normalizeTouches(nativeEvent.touches)

        var preventDefault =
          typeof nativeEvent.preventDefault === 'function'
            ? nativeEvent.preventDefault.bind(nativeEvent)
            : emptyFunction
        var stopImmediatePropagation =
          typeof nativeEvent.stopImmediatePropagation === 'function'
            ? nativeEvent.stopImmediatePropagation.bind(nativeEvent)
            : emptyFunction
        var stopPropagation =
          typeof nativeEvent.stopPropagation === 'function'
            ? nativeEvent.stopPropagation.bind(nativeEvent)
            : emptyFunction

        var event = {
          _normalized: true,
          bubbles: nativeEvent.bubbles,
          cancelable: nativeEvent.cancelable,
          changedTouches: changedTouches,
          defaultPrevented: nativeEvent.defaultPrevented,
          identifier: undefined,
          locationX: undefined,
          locationY: undefined,
          pageX: nativeEvent.pageX,
          pageY: nativeEvent.pageY,
          preventDefault: preventDefault,
          stopImmediatePropagation: stopImmediatePropagation,
          stopPropagation: stopPropagation,
          target: nativeEvent.target,
          // normalize the timestamp
          // https://stackoverflow.com/questions/26177087/ios-8-mobile-safari-wrong-timestamp-on-touch-events
          timestamp: Date.now(),
          touches: touches,
          type: nativeEvent.type,
          which: nativeEvent.which,
        }

        if (changedTouches[0]) {
          event.identifier = changedTouches[0].identifier
          event.pageX = changedTouches[0].pageX
          event.pageY = changedTouches[0].pageY
          event.locationX = changedTouches[0].locationX
          event.locationY = changedTouches[0].locationY
        }

        return event
      }

      function normalizeMouseEvent(nativeEvent) {
        var touches = [
          {
            _normalized: true,
            clientX: nativeEvent.clientX,
            clientY: nativeEvent.clientY,
            force: nativeEvent.force,
            locationX: nativeEvent.clientX,
            locationY: nativeEvent.clientY,
            identifier: 0,
            pageX: nativeEvent.pageX,
            pageY: nativeEvent.pageY,
            screenX: nativeEvent.screenX,
            screenY: nativeEvent.screenY,
            target: nativeEvent.target,
            timestamp: Date.now(),
          },
        ]

        var preventDefault =
          typeof nativeEvent.preventDefault === 'function'
            ? nativeEvent.preventDefault.bind(nativeEvent)
            : emptyFunction
        var stopImmediatePropagation =
          typeof nativeEvent.stopImmediatePropagation === 'function'
            ? nativeEvent.stopImmediatePropagation.bind(nativeEvent)
            : emptyFunction
        var stopPropagation =
          typeof nativeEvent.stopPropagation === 'function'
            ? nativeEvent.stopPropagation.bind(nativeEvent)
            : emptyFunction

        return {
          _normalized: true,
          bubbles: nativeEvent.bubbles,
          cancelable: nativeEvent.cancelable,
          changedTouches: touches,
          defaultPrevented: nativeEvent.defaultPrevented,
          identifier: touches[0].identifier,
          locationX: nativeEvent.offsetX,
          locationY: nativeEvent.offsetY,
          pageX: nativeEvent.pageX,
          pageY: nativeEvent.pageY,
          preventDefault: preventDefault,
          stopImmediatePropagation: stopImmediatePropagation,
          stopPropagation: stopPropagation,
          target: nativeEvent.target,
          timestamp: touches[0].timestamp,
          touches: nativeEvent.type === 'mouseup' ? emptyArray : touches,
          type: nativeEvent.type,
          which: nativeEvent.which,
        }
      }

      // TODO: how to best handle keyboard events?
      function normalizeNativeEvent(nativeEvent) {
        if (!nativeEvent || nativeEvent._normalized) {
          return nativeEvent
        }
        var eventType = nativeEvent.type || ''
        var mouse = eventType.indexOf('mouse') >= 0
        if (mouse) {
          return normalizeMouseEvent(nativeEvent)
        } else {
          return normalizeTouchEvent(nativeEvent)
        }
      }

      exports.default = normalizeNativeEvent

      /***/
    },
    /* 82 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _EdgeInsetsPropType = __webpack_require__(83)

      var _EdgeInsetsPropType2 = _interopRequireDefault(_EdgeInsetsPropType)

      var _StyleSheetPropType = __webpack_require__(85)

      var _StyleSheetPropType2 = _interopRequireDefault(_StyleSheetPropType)

      var _ViewStylePropTypes = __webpack_require__(34)

      var _ViewStylePropTypes2 = _interopRequireDefault(_ViewStylePropTypes)

      var _propTypes = __webpack_require__(0)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      /**
       * Copyright (c) 2015-present, Nicolas Gallagher.
       * Copyright (c) 2015-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @providesModule ViewPropTypes
       *
       */

      var stylePropType = (0, _StyleSheetPropType2.default)(
        _ViewStylePropTypes2.default
      )

      var ViewPropTypes = {
        accessibilityComponentType: _propTypes.string,
        accessibilityLabel: _propTypes.string,
        accessibilityLiveRegion: (0, _propTypes.oneOf)([
          'assertive',
          'none',
          'polite',
        ]),
        accessibilityRole: _propTypes.string,
        accessibilityTraits: (0, _propTypes.oneOfType)([
          _propTypes.array,
          _propTypes.string,
        ]),
        accessible: _propTypes.bool,
        children: _propTypes.any,
        hitSlop: _EdgeInsetsPropType2.default,
        importantForAccessibility: (0, _propTypes.oneOf)([
          'auto',
          'no',
          'no-hide-descendants',
          'yes',
        ]),
        onBlur: _propTypes.func,
        onClick: _propTypes.func,
        onClickCapture: _propTypes.func,
        onContextMenu: _propTypes.func,
        onFocus: _propTypes.func,
        onLayout: _propTypes.func,
        onMoveShouldSetResponder: _propTypes.func,
        onMoveShouldSetResponderCapture: _propTypes.func,
        onResponderGrant: _propTypes.func,
        onResponderMove: _propTypes.func,
        onResponderReject: _propTypes.func,
        onResponderRelease: _propTypes.func,
        onResponderTerminate: _propTypes.func,
        onResponderTerminationRequest: _propTypes.func,
        onStartShouldSetResponder: _propTypes.func,
        onStartShouldSetResponderCapture: _propTypes.func,
        onTouchCancel: _propTypes.func,
        onTouchCancelCapture: _propTypes.func,
        onTouchEnd: _propTypes.func,
        onTouchEndCapture: _propTypes.func,
        onTouchMove: _propTypes.func,
        onTouchMoveCapture: _propTypes.func,
        onTouchStart: _propTypes.func,
        onTouchStartCapture: _propTypes.func,
        pointerEvents: (0, _propTypes.oneOf)([
          'auto',
          'box-none',
          'box-only',
          'none',
        ]),
        style: stylePropType,
        testID: _propTypes.string,
        // compatibility with React Native
        accessibilityViewIsModal: _propTypes.bool,
        collapsable: _propTypes.bool,
        needsOffscreenAlphaCompositing: _propTypes.bool,
        onAccessibilityTap: _propTypes.func,
        onMagicTap: _propTypes.func,
        removeClippedSubviews: _propTypes.bool,
        renderToHardwareTextureAndroid: _propTypes.bool,
        shouldRasterizeIOS: _propTypes.bool,
        tvParallaxProperties: _propTypes.object,
      }

      exports.default = ViewPropTypes

      /***/
    },
    /* 83 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _createStrictShapeTypeChecker = __webpack_require__(84)

      var _createStrictShapeTypeChecker2 = _interopRequireDefault(
        _createStrictShapeTypeChecker
      )

      var _propTypes = __webpack_require__(0)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      /**
       * Copyright (c) 2015-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @providesModule EdgeInsetsPropType
       *
       */

      var EdgeInsetsPropType = (0, _createStrictShapeTypeChecker2.default)({
        top: _propTypes.number,
        left: _propTypes.number,
        bottom: _propTypes.number,
        right: _propTypes.number,
      })

      exports.default = EdgeInsetsPropType

      /***/
    },
    /* 84 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _invariant = __webpack_require__(4)

      var _invariant2 = _interopRequireDefault(_invariant)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      function createStrictShapeTypeChecker(shapeTypes) {
        function checkType(
          isRequired,
          props,
          propName,
          componentName,
          location
        ) {
          if (!props[propName]) {
            if (isRequired) {
              ;(0, _invariant2.default)(
                false,
                'Required object `' +
                  propName +
                  '` was not specified in `' +
                  componentName +
                  '`.'
              )
            }
            return
          }
          var propValue = props[propName]
          var propType = typeof propValue
          var locationName = location || '(unknown)'
          if (propType !== 'object') {
            ;(0, _invariant2.default)(
              false,
              'Invalid ' +
                locationName +
                ' `' +
                propName +
                '` of type `' +
                propType +
                '` ' +
                ('supplied to `' + componentName + '`, expected `object`.')
            )
          }
          // We need to check all keys in case some are required but missing from
          // props.
          var allKeys = Object.assign({}, props[propName], shapeTypes)

          for (
            var _len = arguments.length,
              rest = Array(_len > 5 ? _len - 5 : 0),
              _key = 5;
            _key < _len;
            _key++
          ) {
            rest[_key - 5] = arguments[_key]
          }

          for (var _key2 in allKeys) {
            var checker = shapeTypes[_key2]
            if (!checker) {
              ;(0, _invariant2.default)(
                false,
                'Invalid props.' +
                  propName +
                  ' key `' +
                  _key2 +
                  '` supplied to `' +
                  componentName +
                  '`.' +
                  '\nBad object: ' +
                  JSON.stringify(props[propName], null, '  ') +
                  '\nValid keys: ' +
                  JSON.stringify(Object.keys(shapeTypes), null, '  ')
              )
            }
            var error = checker.apply(
              undefined,
              [propValue, _key2, componentName, location].concat(rest)
            )
            if (error) {
              ;(0, _invariant2.default)(
                false,
                error.message +
                  '\nBad object: ' +
                  JSON.stringify(props[propName], null, '  ')
              )
            }
          }
        }
        function chainedCheckType(props, propName, componentName, location) {
          for (
            var _len2 = arguments.length,
              rest = Array(_len2 > 4 ? _len2 - 4 : 0),
              _key3 = 4;
            _key3 < _len2;
            _key3++
          ) {
            rest[_key3 - 4] = arguments[_key3]
          }

          return checkType.apply(
            undefined,
            [false, props, propName, componentName, location].concat(rest)
          )
        }
        chainedCheckType.isRequired = checkType.bind(null, true)
        return chainedCheckType
      } /**
       * Copyright (c) 2015-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @providesModule createStrictShapeTypeChecker
       *
       */

      exports.default = createStrictShapeTypeChecker

      /***/
    },
    /* 85 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true
      /**
       * Copyright (c) 2015-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @providesModule StyleSheetPropType
       *
       */

      function StyleSheetPropType(shape) {
        var createStrictShapeTypeChecker = __webpack_require__(84).default
        var StyleSheet = __webpack_require__(5).default

        var shapePropType = createStrictShapeTypeChecker(shape)
        return function(props, propName, componentName, location) {
          var newProps = props
          if (props[propName]) {
            // Just make a dummy prop object with only the flattened style
            newProps = {}
            var flatStyle = StyleSheet.flatten(props[propName])
            // Remove custom properties from check
            var nextStyle = Object.keys(flatStyle).reduce(function(acc, curr) {
              if (curr.indexOf('--') !== 0) {
                acc[curr] = flatStyle[curr]
              }
              return acc
            }, {})
            newProps[propName] = nextStyle
          }

          for (
            var _len = arguments.length,
              rest = Array(_len > 4 ? _len - 4 : 0),
              _key = 4;
            _key < _len;
            _key++
          ) {
            rest[_key - 4] = arguments[_key]
          }

          return shapePropType.apply(
            undefined,
            [newProps, propName, componentName, location].concat(rest)
          )
        }
      }

      exports.default = StyleSheetPropType

      /***/
    },
    /* 86 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'
      /**
       * Copyright (c) 2013-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       */

      var React = __webpack_require__(1)
      var factory = __webpack_require__(206)

      if (typeof React === 'undefined') {
        throw Error(
          'create-react-class could not find the React object. If you are using script tags, ' +
            'make sure that React is being loaded before create-react-class.'
        )
      }

      // Hack to grab NoopUpdateQueue from isomorphic React
      var ReactNoopUpdateQueue = new React.Component().updater

      module.exports = factory(
        React.Component,
        React.isValidElement,
        ReactNoopUpdateQueue
      )

      /***/
    },
    /* 87 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _invariant = __webpack_require__(4)

      var _invariant2 = _interopRequireDefault(_invariant)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      var ensurePositiveDelayProps = function ensurePositiveDelayProps(props) {
        ;(0, _invariant2.default)(
          !(
            props.delayPressIn < 0 ||
            props.delayPressOut < 0 ||
            props.delayLongPress < 0
          ),
          'Touchable components cannot have negative delay properties'
        )
      } /**
       * Copyright (c) 2015-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @providesModule ensurePositiveDelayProps
       *
       */

      exports.default = ensurePositiveDelayProps

      /***/
    },
    /* 88 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _AccessibilityUtil = __webpack_require__(30)

      var _AccessibilityUtil2 = _interopRequireDefault(_AccessibilityUtil)

      var _BoundingDimensions = __webpack_require__(207)

      var _BoundingDimensions2 = _interopRequireDefault(_BoundingDimensions)

      var _findNodeHandle = __webpack_require__(78)

      var _findNodeHandle2 = _interopRequireDefault(_findNodeHandle)

      var _normalizeCssColor = __webpack_require__(32)

      var _normalizeCssColor2 = _interopRequireDefault(_normalizeCssColor)

      var _Position = __webpack_require__(208)

      var _Position2 = _interopRequireDefault(_Position)

      var _react = __webpack_require__(1)

      var _react2 = _interopRequireDefault(_react)

      var _TouchEventUtils = __webpack_require__(209)

      var _TouchEventUtils2 = _interopRequireDefault(_TouchEventUtils)

      var _UIManager = __webpack_require__(79)

      var _UIManager2 = _interopRequireDefault(_UIManager)

      var _View = __webpack_require__(12)

      var _View2 = _interopRequireDefault(_View)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      /**
       * `Touchable`: Taps done right.
       *
       * You hook your `ResponderEventPlugin` events into `Touchable`. `Touchable`
       * will measure time/geometry and tells you when to give feedback to the user.
       *
       * ====================== Touchable Tutorial ===============================
       * The `Touchable` mixin helps you handle the "press" interaction. It analyzes
       * the geometry of elements, and observes when another responder (scroll view
       * etc) has stolen the touch lock. It notifies your component when it should
       * give feedback to the user. (bouncing/highlighting/unhighlighting).
       *
       * - When a touch was activated (typically you highlight)
       * - When a touch was deactivated (typically you unhighlight)
       * - When a touch was "pressed" - a touch ended while still within the geometry
       *   of the element, and no other element (like scroller) has "stolen" touch
       *   lock ("responder") (Typically you bounce the element).
       *
       * A good tap interaction isn't as simple as you might think. There should be a
       * slight delay before showing a highlight when starting a touch. If a
       * subsequent touch move exceeds the boundary of the element, it should
       * unhighlight, but if that same touch is brought back within the boundary, it
       * should rehighlight again. A touch can move in and out of that boundary
       * several times, each time toggling highlighting, but a "press" is only
       * triggered if that touch ends while within the element's boundary and no
       * scroller (or anything else) has stolen the lock on touches.
       *
       * To create a new type of component that handles interaction using the
       * `Touchable` mixin, do the following:
       *
       * - Initialize the `Touchable` state.
       *
       *   getInitialState: function() {
       *     return merge(this.touchableGetInitialState(), yourComponentState);
       *   }
       *
       * - Choose the rendered component who's touches should start the interactive
       *   sequence. On that rendered node, forward all `Touchable` responder
       *   handlers. You can choose any rendered node you like. Choose a node whose
       *   hit target you'd like to instigate the interaction sequence:
       *
       *   // In render function:
       *   return (
       *     <View
       *       onStartShouldSetResponder={this.touchableHandleStartShouldSetResponder}
       *       onResponderTerminationRequest={this.touchableHandleResponderTerminationRequest}
       *       onResponderGrant={this.touchableHandleResponderGrant}
       *       onResponderMove={this.touchableHandleResponderMove}
       *       onResponderRelease={this.touchableHandleResponderRelease}
       *       onResponderTerminate={this.touchableHandleResponderTerminate}>
       *       <View>
       *         Even though the hit detection/interactions are triggered by the
       *         wrapping (typically larger) node, we usually end up implementing
       *         custom logic that highlights this inner one.
       *       </View>
       *     </View>
       *   );
       *
       * - You may set up your own handlers for each of these events, so long as you
       *   also invoke the `touchable*` handlers inside of your custom handler.
       *
       * - Implement the handlers on your component class in order to provide
       *   feedback to the user. See documentation for each of these class methods
       *   that you should implement.
       *
       *   touchableHandlePress: function() {
       *      this.performBounceAnimation();  // or whatever you want to do.
       *   },
       *   touchableHandleActivePressIn: function() {
       *     this.beginHighlighting(...);  // Whatever you like to convey activation
       *   },
       *   touchableHandleActivePressOut: function() {
       *     this.endHighlighting(...);  // Whatever you like to convey deactivation
       *   },
       *
       * - There are more advanced methods you can implement (see documentation below):
       *   touchableGetHighlightDelayMS: function() {
       *     return 20;
       *   }
       *   // In practice, *always* use a predeclared constant (conserve memory).
       *   touchableGetPressRectOffset: function() {
       *     return {top: 20, left: 20, right: 20, bottom: 100};
       *   }
       */

      /**
       * Touchable states.
       */
      var States = {
        NOT_RESPONDER: 'NOT_RESPONDER', // Not the responder
        RESPONDER_INACTIVE_PRESS_IN: 'RESPONDER_INACTIVE_PRESS_IN', // Responder, inactive, in the `PressRect`
        RESPONDER_INACTIVE_PRESS_OUT: 'RESPONDER_INACTIVE_PRESS_OUT', // Responder, inactive, out of `PressRect`
        RESPONDER_ACTIVE_PRESS_IN: 'RESPONDER_ACTIVE_PRESS_IN', // Responder, active, in the `PressRect`
        RESPONDER_ACTIVE_PRESS_OUT: 'RESPONDER_ACTIVE_PRESS_OUT', // Responder, active, out of `PressRect`
        RESPONDER_ACTIVE_LONG_PRESS_IN: 'RESPONDER_ACTIVE_LONG_PRESS_IN', // Responder, active, in the `PressRect`, after long press threshold
        RESPONDER_ACTIVE_LONG_PRESS_OUT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT', // Responder, active, out of `PressRect`, after long press threshold
        ERROR: 'ERROR',
      }

      /**
       * Quick lookup map for states that are considered to be "active"
       */
      /* eslint-disable react/prop-types */

      /**
       * Copyright (c) 2016-present, Nicolas Gallagher.
       * Copyright (c) 2013-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @providesModule Touchable
       *
       */

      var IsActive = {
        RESPONDER_ACTIVE_PRESS_OUT: true,
        RESPONDER_ACTIVE_PRESS_IN: true,
      }

      /**
       * Quick lookup for states that are considered to be "pressing" and are
       * therefore eligible to result in a "selection" if the press stops.
       */
      var IsPressingIn = {
        RESPONDER_INACTIVE_PRESS_IN: true,
        RESPONDER_ACTIVE_PRESS_IN: true,
        RESPONDER_ACTIVE_LONG_PRESS_IN: true,
      }

      var IsLongPressingIn = {
        RESPONDER_ACTIVE_LONG_PRESS_IN: true,
      }

      /**
       * Inputs to the state machine.
       */
      var Signals = {
        DELAY: 'DELAY',
        RESPONDER_GRANT: 'RESPONDER_GRANT',
        RESPONDER_RELEASE: 'RESPONDER_RELEASE',
        RESPONDER_TERMINATED: 'RESPONDER_TERMINATED',
        ENTER_PRESS_RECT: 'ENTER_PRESS_RECT',
        LEAVE_PRESS_RECT: 'LEAVE_PRESS_RECT',
        LONG_PRESS_DETECTED: 'LONG_PRESS_DETECTED',
      }

      /**
       * Mapping from States x Signals => States
       */
      var Transitions = {
        NOT_RESPONDER: {
          DELAY: States.ERROR,
          RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
          RESPONDER_RELEASE: States.ERROR,
          RESPONDER_TERMINATED: States.ERROR,
          ENTER_PRESS_RECT: States.ERROR,
          LEAVE_PRESS_RECT: States.ERROR,
          LONG_PRESS_DETECTED: States.ERROR,
        },
        RESPONDER_INACTIVE_PRESS_IN: {
          DELAY: States.RESPONDER_ACTIVE_PRESS_IN,
          RESPONDER_GRANT: States.ERROR,
          RESPONDER_RELEASE: States.NOT_RESPONDER,
          RESPONDER_TERMINATED: States.NOT_RESPONDER,
          ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
          LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
          LONG_PRESS_DETECTED: States.ERROR,
        },
        RESPONDER_INACTIVE_PRESS_OUT: {
          DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,
          RESPONDER_GRANT: States.ERROR,
          RESPONDER_RELEASE: States.NOT_RESPONDER,
          RESPONDER_TERMINATED: States.NOT_RESPONDER,
          ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
          LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
          LONG_PRESS_DETECTED: States.ERROR,
        },
        RESPONDER_ACTIVE_PRESS_IN: {
          DELAY: States.ERROR,
          RESPONDER_GRANT: States.ERROR,
          RESPONDER_RELEASE: States.NOT_RESPONDER,
          RESPONDER_TERMINATED: States.NOT_RESPONDER,
          ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
          LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
          LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
        },
        RESPONDER_ACTIVE_PRESS_OUT: {
          DELAY: States.ERROR,
          RESPONDER_GRANT: States.ERROR,
          RESPONDER_RELEASE: States.NOT_RESPONDER,
          RESPONDER_TERMINATED: States.NOT_RESPONDER,
          ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
          LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
          LONG_PRESS_DETECTED: States.ERROR,
        },
        RESPONDER_ACTIVE_LONG_PRESS_IN: {
          DELAY: States.ERROR,
          RESPONDER_GRANT: States.ERROR,
          RESPONDER_RELEASE: States.NOT_RESPONDER,
          RESPONDER_TERMINATED: States.NOT_RESPONDER,
          ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
          LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
          LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
        },
        RESPONDER_ACTIVE_LONG_PRESS_OUT: {
          DELAY: States.ERROR,
          RESPONDER_GRANT: States.ERROR,
          RESPONDER_RELEASE: States.NOT_RESPONDER,
          RESPONDER_TERMINATED: States.NOT_RESPONDER,
          ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
          LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
          LONG_PRESS_DETECTED: States.ERROR,
        },
        error: {
          DELAY: States.NOT_RESPONDER,
          RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
          RESPONDER_RELEASE: States.NOT_RESPONDER,
          RESPONDER_TERMINATED: States.NOT_RESPONDER,
          ENTER_PRESS_RECT: States.NOT_RESPONDER,
          LEAVE_PRESS_RECT: States.NOT_RESPONDER,
          LONG_PRESS_DETECTED: States.NOT_RESPONDER,
        },
      }

      // ==== Typical Constants for integrating into UI components ====
      // var HIT_EXPAND_PX = 20;
      // var HIT_VERT_OFFSET_PX = 10;
      var HIGHLIGHT_DELAY_MS = 130

      var PRESS_EXPAND_PX = 20

      var LONG_PRESS_THRESHOLD = 500

      var LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS

      var LONG_PRESS_ALLOWED_MOVEMENT = 10

      // Default amount "active" region protrudes beyond box

      /**
       * By convention, methods prefixed with underscores are meant to be @private,
       * and not @protected. Mixers shouldn't access them - not even to provide them
       * as callback handlers.
       *
       *
       * ========== Geometry =========
       * `Touchable` only assumes that there exists a `HitRect` node. The `PressRect`
       * is an abstract box that is extended beyond the `HitRect`.
       *
       *  +--------------------------+
       *  |                          | - "Start" events in `HitRect` cause `HitRect`
       *  |  +--------------------+  |   to become the responder.
       *  |  |  +--------------+  |  | - `HitRect` is typically expanded around
       *  |  |  |              |  |  |   the `VisualRect`, but shifted downward.
       *  |  |  |  VisualRect  |  |  | - After pressing down, after some delay,
       *  |  |  |              |  |  |   and before letting up, the Visual React
       *  |  |  +--------------+  |  |   will become "active". This makes it eligible
       *  |  |     HitRect        |  |   for being highlighted (so long as the
       *  |  +--------------------+  |   press remains in the `PressRect`).
       *  |        PressRect     o   |
       *  +----------------------|---+
       *           Out Region    |
       *                         +-----+ This gap between the `HitRect` and
       *                                 `PressRect` allows a touch to move far away
       *                                 from the original hit rect, and remain
       *                                 highlighted, and eligible for a "Press".
       *                                 Customize this via
       *                                 `touchableGetPressRectOffset()`.
       *
       *
       *
       * ======= State Machine =======
       *
       * +-------------+ <---+ RESPONDER_RELEASE
       * |NOT_RESPONDER|
       * +-------------+ <---+ RESPONDER_TERMINATED
       *     +
       *     | RESPONDER_GRANT (HitRect)
       *     v
       * +---------------------------+  DELAY   +-------------------------+  T + DELAY     +------------------------------+
       * |RESPONDER_INACTIVE_PRESS_IN|+-------->|RESPONDER_ACTIVE_PRESS_IN| +------------> |RESPONDER_ACTIVE_LONG_PRESS_IN|
       * +---------------------------+          +-------------------------+                +------------------------------+
       *     +            ^                         +           ^                                 +           ^
       *     |LEAVE_      |ENTER_                   |LEAVE_     |ENTER_                           |LEAVE_     |ENTER_
       *     |PRESS_RECT  |PRESS_RECT               |PRESS_RECT |PRESS_RECT                       |PRESS_RECT |PRESS_RECT
       *     |            |                         |           |                                 |           |
       *     v            +                         v           +                                 v           +
       * +----------------------------+  DELAY  +--------------------------+               +-------------------------------+
       * |RESPONDER_INACTIVE_PRESS_OUT|+------->|RESPONDER_ACTIVE_PRESS_OUT|               |RESPONDER_ACTIVE_LONG_PRESS_OUT|
       * +----------------------------+         +--------------------------+               +-------------------------------+
       *
       * T + DELAY => LONG_PRESS_DELAY_MS + DELAY
       *
       * Not drawn are the side effects of each transition. The most important side
       * effect is the `touchableHandlePress` abstract method invocation that occurs
       * when a responder is released while in either of the "Press" states.
       *
       * The other important side effects are the highlight abstract method
       * invocations (internal callbacks) to be implemented by the mixer.
       *
       *
       * @lends Touchable.prototype
       */
      var TouchableMixin = {
        // HACK (part 1): basic support for touchable interactions using a keyboard
        componentDidMount: function componentDidMount() {
          var _this = this

          this._touchableNode = (0, _findNodeHandle2.default)(this)
          if (this._touchableNode && this._touchableNode.addEventListener) {
            this._touchableBlurListener = function(e) {
              if (_this._isTouchableKeyboardActive) {
                if (
                  _this.state.touchable.touchState &&
                  _this.state.touchable.touchState !== States.NOT_RESPONDER
                ) {
                  _this.touchableHandleResponderTerminate({ nativeEvent: e })
                }
                _this._isTouchableKeyboardActive = false
              }
            }
            this._touchableNode.addEventListener(
              'blur',
              this._touchableBlurListener
            )
          }
        },

        /**
         * Clear all timeouts on unmount
         */
        componentWillUnmount: function componentWillUnmount() {
          if (this._touchableNode && this._touchableNode.addEventListener) {
            this._touchableNode.removeEventListener(
              'blur',
              this._touchableBlurListener
            )
          }
          this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout)
          this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout)
          this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout)
        },

        /**
         * It's prefer that mixins determine state in this way, having the class
         * explicitly mix the state in the one and only `getInitialState` method.
         *
         * @return {object} State object to be placed inside of
         * `this.state.touchable`.
         */
        touchableGetInitialState: function touchableGetInitialState() {
          return {
            touchable: { touchState: undefined, responderID: null },
          }
        },

        // ==== Hooks to Gesture Responder system ====
        /**
         * Must return true if embedded in a native platform scroll view.
         */
        touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest() {
          return !this.props.rejectResponderTermination
        },

        /**
         * Must return true to start the process of `Touchable`.
         */
        touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder() {
          return !this.props.disabled
        },

        /**
         * Return true to cancel press on long press.
         */
        touchableLongPressCancelsPress: function touchableLongPressCancelsPress() {
          return true
        },

        /**
         * Place as callback for a DOM element's `onResponderGrant` event.
         */
        touchableHandleResponderGrant: function touchableHandleResponderGrant(
          e
        ) {
          var dispatchID = e.currentTarget
          // Since e is used in a callback invoked on another event loop
          // (as in setTimeout etc), we need to call e.persist() on the
          // event to make sure it doesn't get reused in the event object pool.
          e.persist()
          this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout)
          this.pressOutDelayTimeout = null

          this.state.touchable.touchState = States.NOT_RESPONDER
          this.state.touchable.responderID = dispatchID
          this._receiveSignal(Signals.RESPONDER_GRANT, e)
          var delayMS =
            this.touchableGetHighlightDelayMS !== undefined
              ? Math.max(this.touchableGetHighlightDelayMS(), 0)
              : HIGHLIGHT_DELAY_MS
          delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS
          if (delayMS !== 0) {
            this.touchableDelayTimeout = setTimeout(
              this._handleDelay.bind(this, e),
              delayMS
            )
          } else {
            this.state.touchable.positionOnActivate = null
            this._handleDelay(e)
          }

          var longDelayMS =
            this.touchableGetLongPressDelayMS !== undefined
              ? Math.max(this.touchableGetLongPressDelayMS(), 10)
              : LONG_PRESS_DELAY_MS
          longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS
          this.longPressDelayTimeout = setTimeout(
            this._handleLongDelay.bind(this, e),
            longDelayMS + delayMS
          )
        },

        /**
         * Place as callback for a DOM element's `onResponderRelease` event.
         */
        touchableHandleResponderRelease: function touchableHandleResponderRelease(
          e
        ) {
          this._receiveSignal(Signals.RESPONDER_RELEASE, e)
        },

        /**
         * Place as callback for a DOM element's `onResponderTerminate` event.
         */
        touchableHandleResponderTerminate: function touchableHandleResponderTerminate(
          e
        ) {
          this._receiveSignal(Signals.RESPONDER_TERMINATED, e)
        },

        /**
         * Place as callback for a DOM element's `onResponderMove` event.
         */
        touchableHandleResponderMove: function touchableHandleResponderMove(e) {
          // Not enough time elapsed yet, wait for highlight -
          // this is just a perf optimization.
          if (
            this.state.touchable.touchState ===
            States.RESPONDER_INACTIVE_PRESS_IN
          ) {
            return
          }

          // Measurement may not have returned yet.
          if (!this.state.touchable.positionOnActivate) {
            return
          }

          var positionOnActivate = this.state.touchable.positionOnActivate
          var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate
          var pressRectOffset = this.touchableGetPressRectOffset
            ? this.touchableGetPressRectOffset()
            : {
                left: PRESS_EXPAND_PX,
                right: PRESS_EXPAND_PX,
                top: PRESS_EXPAND_PX,
                bottom: PRESS_EXPAND_PX,
              }

          var pressExpandLeft = pressRectOffset.left
          var pressExpandTop = pressRectOffset.top
          var pressExpandRight = pressRectOffset.right
          var pressExpandBottom = pressRectOffset.bottom

          var hitSlop = this.touchableGetHitSlop
            ? this.touchableGetHitSlop()
            : null

          if (hitSlop) {
            pressExpandLeft += hitSlop.left
            pressExpandTop += hitSlop.top
            pressExpandRight += hitSlop.right
            pressExpandBottom += hitSlop.bottom
          }

          var touch = _TouchEventUtils2.default.extractSingleTouch(
            e.nativeEvent
          )
          var pageX = touch && touch.pageX
          var pageY = touch && touch.pageY

          if (this.pressInLocation) {
            var movedDistance = this._getDistanceBetweenPoints(
              pageX,
              pageY,
              this.pressInLocation.pageX,
              this.pressInLocation.pageY
            )
            if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {
              this._cancelLongPressDelayTimeout()
            }
          }

          var isTouchWithinActive =
            pageX > positionOnActivate.left - pressExpandLeft &&
            pageY > positionOnActivate.top - pressExpandTop &&
            pageX <
              positionOnActivate.left +
                dimensionsOnActivate.width +
                pressExpandRight &&
            pageY <
              positionOnActivate.top +
                dimensionsOnActivate.height +
                pressExpandBottom
          if (isTouchWithinActive) {
            this._receiveSignal(Signals.ENTER_PRESS_RECT, e)
            var curState = this.state.touchable.touchState
            if (curState === States.RESPONDER_INACTIVE_PRESS_IN) {
              // fix for t7967420
              this._cancelLongPressDelayTimeout()
            }
          } else {
            this._cancelLongPressDelayTimeout()
            this._receiveSignal(Signals.LEAVE_PRESS_RECT, e)
          }
        },

        // ==== Abstract Application Callbacks ====

        /**
         * Invoked when the item should be highlighted. Mixers should implement this
         * to visually distinguish the `VisualRect` so that the user knows that
         * releasing a touch will result in a "selection" (analog to click).
         *
         * @abstract
         * touchableHandleActivePressIn: function,
         */

        /**
         * Invoked when the item is "active" (in that it is still eligible to become
         * a "select") but the touch has left the `PressRect`. Usually the mixer will
         * want to unhighlight the `VisualRect`. If the user (while pressing) moves
         * back into the `PressRect` `touchableHandleActivePressIn` will be invoked
         * again and the mixer should probably highlight the `VisualRect` again. This
         * event will not fire on an `touchEnd/mouseUp` event, only move events while
         * the user is depressing the mouse/touch.
         *
         * @abstract
         * touchableHandleActivePressOut: function
         */

        /**
         * Invoked when the item is "selected" - meaning the interaction ended by
         * letting up while the item was either in the state
         * `RESPONDER_ACTIVE_PRESS_IN` or `RESPONDER_INACTIVE_PRESS_IN`.
         *
         * @abstract
         * touchableHandlePress: function
         */

        /**
         * Invoked when the item is long pressed - meaning the interaction ended by
         * letting up while the item was in `RESPONDER_ACTIVE_LONG_PRESS_IN`. If
         * `touchableHandleLongPress` is *not* provided, `touchableHandlePress` will
         * be called as it normally is. If `touchableHandleLongPress` is provided, by
         * default any `touchableHandlePress` callback will not be invoked. To
         * override this default behavior, override `touchableLongPressCancelsPress`
         * to return false. As a result, `touchableHandlePress` will be called when
         * lifting up, even if `touchableHandleLongPress` has also been called.
         *
         * @abstract
         * touchableHandleLongPress: function
         */

        /**
         * Returns the number of millis to wait before triggering a highlight.
         *
         * @abstract
         * touchableGetHighlightDelayMS: function
         */

        /**
         * Returns the amount to extend the `HitRect` into the `PressRect`. Positive
         * numbers mean the size expands outwards.
         *
         * @abstract
         * touchableGetPressRectOffset: function
         */

        // ==== Internal Logic ====

        /**
         * Measures the `HitRect` node on activation. The Bounding rectangle is with
         * respect to viewport - not page, so adding the `pageXOffset/pageYOffset`
         * should result in points that are in the same coordinate system as an
         * event's `globalX/globalY` data values.
         *
         * - Consider caching this for the lifetime of the component, or possibly
         *   being able to share this cache between any `ScrollMap` view.
         *
         * @sideeffects
         * @private
         */
        _remeasureMetricsOnActivation: function _remeasureMetricsOnActivation() {
          var tag = this.state.touchable.responderID
          if (tag == null) {
            return
          }

          _UIManager2.default.measure(tag, this._handleQueryLayout)
        },

        _handleQueryLayout: function _handleQueryLayout(
          x,
          y,
          width,
          height,
          globalX,
          globalY
        ) {
          // don't do anything if UIManager failed to measure node
          if (!x && !y && !width && !height && !globalX && !globalY) {
            return
          }
          this.state.touchable.positionOnActivate &&
            _Position2.default.release(this.state.touchable.positionOnActivate)
          this.state.touchable.dimensionsOnActivate &&
            // $FlowFixMe
            _BoundingDimensions2.default.release(
              this.state.touchable.dimensionsOnActivate
            )
          this.state.touchable.positionOnActivate = _Position2.default.getPooled(
            globalX,
            globalY
          )
          // $FlowFixMe
          this.state.touchable.dimensionsOnActivate = _BoundingDimensions2.default.getPooled(
            width,
            height
          )
        },

        _handleDelay: function _handleDelay(e) {
          this.touchableDelayTimeout = null
          this._receiveSignal(Signals.DELAY, e)
        },

        _handleLongDelay: function _handleLongDelay(e) {
          this.longPressDelayTimeout = null
          var curState = this.state.touchable.touchState
          if (
            curState !== States.RESPONDER_ACTIVE_PRESS_IN &&
            curState !== States.RESPONDER_ACTIVE_LONG_PRESS_IN
          ) {
            console.error(
              'Attempted to transition from state `' +
                curState +
                '` to `' +
                States.RESPONDER_ACTIVE_LONG_PRESS_IN +
                '`, which is not supported. This is ' +
                'most likely due to `Touchable.longPressDelayTimeout` not being cancelled.'
            )
          } else {
            this._receiveSignal(Signals.LONG_PRESS_DETECTED, e)
          }
        },

        /**
         * Receives a state machine signal, performs side effects of the transition
         * and stores the new state. Validates the transition as well.
         *
         * @param {Signals} signal State machine signal.
         * @throws Error if invalid state transition or unrecognized signal.
         * @sideeffects
         */
        _receiveSignal: function _receiveSignal(signal, e) {
          var responderID = this.state.touchable.responderID
          var curState = this.state.touchable.touchState
          var nextState = Transitions[curState] && Transitions[curState][signal]
          if (!responderID && signal === Signals.RESPONDER_RELEASE) {
            return
          }
          if (!nextState) {
            throw new Error(
              'Unrecognized signal `' +
                signal +
                '` or state `' +
                curState +
                '` for Touchable responder `' +
                responderID +
                '`'
            )
          }
          if (nextState === States.ERROR) {
            throw new Error(
              'Touchable cannot transition from `' +
                curState +
                '` to `' +
                signal +
                '` for responder `' +
                responderID +
                '`'
            )
          }
          if (curState !== nextState) {
            this._performSideEffectsForTransition(
              curState,
              nextState,
              signal,
              e
            )
            this.state.touchable.touchState = nextState
          }
        },

        _cancelLongPressDelayTimeout: function _cancelLongPressDelayTimeout() {
          this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout)
          this.longPressDelayTimeout = null
        },

        _isHighlight: function _isHighlight(state) {
          return (
            state === States.RESPONDER_ACTIVE_PRESS_IN ||
            state === States.RESPONDER_ACTIVE_LONG_PRESS_IN
          )
        },

        _savePressInLocation: function _savePressInLocation(e) {
          var touch = _TouchEventUtils2.default.extractSingleTouch(
            e.nativeEvent
          )
          var pageX = touch && touch.pageX
          var pageY = touch && touch.pageY
          var locationX = touch && touch.locationX
          var locationY = touch && touch.locationY
          this.pressInLocation = {
            pageX: pageX,
            pageY: pageY,
            locationX: locationX,
            locationY: locationY,
          }
        },

        _getDistanceBetweenPoints: function _getDistanceBetweenPoints(
          aX,
          aY,
          bX,
          bY
        ) {
          var deltaX = aX - bX
          var deltaY = aY - bY
          return Math.sqrt(deltaX * deltaX + deltaY * deltaY)
        },

        /**
         * Will perform a transition between touchable states, and identify any
         * highlighting or unhighlighting that must be performed for this particular
         * transition.
         *
         * @param {States} curState Current Touchable state.
         * @param {States} nextState Next Touchable state.
         * @param {Signal} signal Signal that triggered the transition.
         * @param {Event} e Native event.
         * @sideeffects
         */
        _performSideEffectsForTransition: function _performSideEffectsForTransition(
          curState,
          nextState,
          signal,
          e
        ) {
          var curIsHighlight = this._isHighlight(curState)
          var newIsHighlight = this._isHighlight(nextState)

          var isFinalSignal =
            signal === Signals.RESPONDER_TERMINATED ||
            signal === Signals.RESPONDER_RELEASE

          if (isFinalSignal) {
            this._cancelLongPressDelayTimeout()
          }

          if (!IsActive[curState] && IsActive[nextState]) {
            this._remeasureMetricsOnActivation()
          }

          if (
            IsPressingIn[curState] &&
            signal === Signals.LONG_PRESS_DETECTED
          ) {
            this.touchableHandleLongPress && this.touchableHandleLongPress(e)
          }

          if (newIsHighlight && !curIsHighlight) {
            this._startHighlight(e)
          } else if (!newIsHighlight && curIsHighlight) {
            this._endHighlight(e)
          }

          if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {
            var hasLongPressHandler = !!this.props.onLongPress
            var pressIsLongButStillCallOnPress =
              IsLongPressingIn[curState] && // We *are* long pressing..
              (!hasLongPressHandler || // But either has no long handler
                !this.touchableLongPressCancelsPress()) // or we're told to ignore it.

            var shouldInvokePress =
              !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress
            if (shouldInvokePress && this.touchableHandlePress) {
              if (!newIsHighlight && !curIsHighlight) {
                // we never highlighted because of delay, but we should highlight now
                this._startHighlight(e)
                this._endHighlight(e)
              }
              this.touchableHandlePress(e)
            }
          }

          this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout)
          this.touchableDelayTimeout = null
        },

        _startHighlight: function _startHighlight(e) {
          this._savePressInLocation(e)
          this.touchableHandleActivePressIn &&
            this.touchableHandleActivePressIn(e)
        },

        _endHighlight: function _endHighlight(e) {
          var _this2 = this

          if (this.touchableHandleActivePressOut) {
            if (
              this.touchableGetPressOutDelayMS &&
              this.touchableGetPressOutDelayMS()
            ) {
              this.pressOutDelayTimeout = setTimeout(function() {
                _this2.touchableHandleActivePressOut(e)
              }, this.touchableGetPressOutDelayMS())
            } else {
              this.touchableHandleActivePressOut(e)
            }
          }
        },

        // HACK (part 2): basic support for touchable interactions using a keyboard (including
        // delays and longPress)
        touchableHandleKeyEvent: function touchableHandleKeyEvent(e) {
          var ENTER = 13
          var SPACE = 32
          var type = e.type,
            which = e.which

          if (which === ENTER || which === SPACE) {
            if (type === 'keydown') {
              if (!this._isTouchableKeyboardActive) {
                if (
                  !this.state.touchable.touchState ||
                  this.state.touchable.touchState === States.NOT_RESPONDER
                ) {
                  this.touchableHandleResponderGrant(e)
                  this._isTouchableKeyboardActive = true
                }
              }
            } else if (type === 'keyup') {
              if (this._isTouchableKeyboardActive) {
                if (
                  this.state.touchable.touchState &&
                  this.state.touchable.touchState !== States.NOT_RESPONDER
                ) {
                  this.touchableHandleResponderRelease(e)
                  this._isTouchableKeyboardActive = false
                }
              }
            }
            e.stopPropagation()
            // prevent the default behaviour unless the Touchable functions as a link
            // and Enter is pressed
            if (
              !(
                which === ENTER &&
                _AccessibilityUtil2.default.propsToAriaRole(this.props) ===
                  'link'
              )
            ) {
              e.preventDefault()
            }
          }
        },
      }

      var Touchable = {
        Mixin: TouchableMixin,
        TOUCH_TARGET_DEBUG: false, // Highlights all touchable targets. Toggle with Inspector.
        /**
         * Renders a debugging overlay to visualize touch target with hitSlop (might not work on Android).
         */
        renderDebugView: function renderDebugView(_ref) {
          var color = _ref.color,
            hitSlop = _ref.hitSlop

          if (true) {
            if (!Touchable.TOUCH_TARGET_DEBUG) {
              return null
            }
            var debugHitSlopStyle = {}
            hitSlop = hitSlop || { top: 0, bottom: 0, left: 0, right: 0 }
            for (var key in hitSlop) {
              debugHitSlopStyle[key] = -hitSlop[key]
            }
            var hexColor =
              '#' +
              (
                '00000000' +
                (0, _normalizeCssColor2.default)(color).toString(16)
              ).substr(-8)
            return _react2.default.createElement(_View2.default, {
              pointerEvents: 'none',
              style: Object.assign(
                {
                  position: 'absolute',
                  borderColor: hexColor.slice(0, -2) + '55', // More opaque
                  borderWidth: 1,
                  borderStyle: 'dashed',
                  backgroundColor: hexColor.slice(0, -2) + '0F',
                },
                debugHitSlopStyle
              ),
            })
          }
        },
      }

      exports.default = Touchable

      /***/
    },
    /* 89 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _invariant = __webpack_require__(4)

      var _invariant2 = _interopRequireDefault(_invariant)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
        var Klass = this
        if (Klass.instancePool.length) {
          var instance = Klass.instancePool.pop()
          Klass.call(instance, a1, a2)
          return instance
        } else {
          return new Klass(a1, a2)
        }
      } /* eslint-disable */

      /**
       * Copyright 2013-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * From React 16.0.0
       */

      var standardReleaser = function standardReleaser(instance) {
        var Klass = this
        instance.destructor()
        if (Klass.instancePool.length < Klass.poolSize) {
          Klass.instancePool.push(instance)
        }
      }

      var DEFAULT_POOL_SIZE = 10
      var DEFAULT_POOLER = twoArgumentPooler

      /**
       * Augments `CopyConstructor` to be a poolable class, augmenting only the class
       * itself (statically) not adding any prototypical fields. Any CopyConstructor
       * you give this may have a `poolSize` property, and will look for a
       * prototypical `destructor` on instances.
       *
       * @param {Function} CopyConstructor Constructor that can be used to reset.
       * @param {Function} pooler Customizable pooler.
       */
      var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
        // Casting as any so that flow ignores the actual implementation and trusts
        // it to match the type we declared
        var NewKlass = CopyConstructor
        NewKlass.instancePool = []
        NewKlass.getPooled = pooler || DEFAULT_POOLER
        if (!NewKlass.poolSize) {
          NewKlass.poolSize = DEFAULT_POOL_SIZE
        }
        NewKlass.release = standardReleaser
        return NewKlass
      }

      var PooledClass = {
        addPoolingTo: addPoolingTo,
        twoArgumentPooler: twoArgumentPooler,
      }

      exports.default = PooledClass

      /***/
    },
    /* 90 */
    /***/ function(module, exports, __webpack_require__) {
      var _jsxFileName = '/Users/glodon/glodon/react/testReact/index.web.js'
      var _react = __webpack_require__(1)
      var _react2 = _interopRequireDefault(_react)
      var _reactDom = __webpack_require__(15)
      var _App = __webpack_require__(103)
      var _App2 = _interopRequireDefault(_App)
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }
      ;(0, _reactDom.render)(
        _react2.default.createElement(_App2.default, {
          __source: { fileName: _jsxFileName, lineNumber: 7 },
        }),
        document.getElementById('root')
      )

      /***/
    },
    /* 91 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'
      /** @license React v16.2.0
       * react.development.js
       *
       * Copyright (c) 2013-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       */

      if (true) {
        ;(function() {
          'use strict'

          var _assign = __webpack_require__(10)
          var emptyObject = __webpack_require__(20)
          var invariant = __webpack_require__(4)
          var warning = __webpack_require__(6)
          var emptyFunction = __webpack_require__(8)
          var checkPropTypes = __webpack_require__(21)

          // TODO: this is special because it gets imported during build.

          var ReactVersion = '16.2.0'

          // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
          // nor polyfill, then a plain number is used for performance.
          var hasSymbol = typeof Symbol === 'function' && Symbol['for']

          var REACT_ELEMENT_TYPE = hasSymbol
            ? Symbol['for']('react.element')
            : 0xeac7
          var REACT_CALL_TYPE = hasSymbol ? Symbol['for']('react.call') : 0xeac8
          var REACT_RETURN_TYPE = hasSymbol
            ? Symbol['for']('react.return')
            : 0xeac9
          var REACT_PORTAL_TYPE = hasSymbol
            ? Symbol['for']('react.portal')
            : 0xeaca
          var REACT_FRAGMENT_TYPE = hasSymbol
            ? Symbol['for']('react.fragment')
            : 0xeacb

          var MAYBE_ITERATOR_SYMBOL =
            typeof Symbol === 'function' && Symbol.iterator
          var FAUX_ITERATOR_SYMBOL = '@@iterator'

          function getIteratorFn(maybeIterable) {
            if (
              maybeIterable === null ||
              typeof maybeIterable === 'undefined'
            ) {
              return null
            }
            var maybeIterator =
              (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
              maybeIterable[FAUX_ITERATOR_SYMBOL]
            if (typeof maybeIterator === 'function') {
              return maybeIterator
            }
            return null
          }

          /**
           * WARNING: DO NOT manually require this module.
           * This is a replacement for `invariant(...)` used by the error code system
           * and will _only_ be required by the corresponding babel pass.
           * It always throws.
           */

          /**
           * Forked from fbjs/warning:
           * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
           *
           * Only change is we use console.warn instead of console.error,
           * and do nothing when 'console' is not supported.
           * This really simplifies the code.
           * ---
           * Similar to invariant but only logs a warning if the condition is not met.
           * This can be used to log issues in development environments in critical
           * paths. Removing the logging code for production environments will keep the
           * same logic and follow the same code paths.
           */

          var lowPriorityWarning = function() {}

          {
            var printWarning = function(format) {
              for (
                var _len = arguments.length,
                  args = Array(_len > 1 ? _len - 1 : 0),
                  _key = 1;
                _key < _len;
                _key++
              ) {
                args[_key - 1] = arguments[_key]
              }

              var argIndex = 0
              var message =
                'Warning: ' +
                format.replace(/%s/g, function() {
                  return args[argIndex++]
                })
              if (typeof console !== 'undefined') {
                console.warn(message)
              }
              try {
                // --- Welcome to debugging React ---
                // This error was thrown as a convenience so that you can use this stack
                // to find the callsite that caused this warning to fire.
                throw new Error(message)
              } catch (x) {}
            }

            lowPriorityWarning = function(condition, format) {
              if (format === undefined) {
                throw new Error(
                  '`warning(condition, format, ...args)` requires a warning ' +
                    'message argument'
                )
              }
              if (!condition) {
                for (
                  var _len2 = arguments.length,
                    args = Array(_len2 > 2 ? _len2 - 2 : 0),
                    _key2 = 2;
                  _key2 < _len2;
                  _key2++
                ) {
                  args[_key2 - 2] = arguments[_key2]
                }

                printWarning.apply(undefined, [format].concat(args))
              }
            }
          }

          var lowPriorityWarning$1 = lowPriorityWarning

          var didWarnStateUpdateForUnmountedComponent = {}

          function warnNoop(publicInstance, callerName) {
            {
              var constructor = publicInstance.constructor
              var componentName =
                (constructor &&
                  (constructor.displayName || constructor.name)) ||
                'ReactClass'
              var warningKey = componentName + '.' + callerName
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return
              }
              warning(
                false,
                '%s(...): Can only update a mounted or mounting component. ' +
                  'This usually means you called %s() on an unmounted component. ' +
                  'This is a no-op.\n\nPlease check the code for the %s component.',
                callerName,
                callerName,
                componentName
              )
              didWarnStateUpdateForUnmountedComponent[warningKey] = true
            }
          }

          /**
           * This is the abstract API for an update queue.
           */
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false
            },

            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, 'forceUpdate')
            },

            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(
              publicInstance,
              completeState,
              callback,
              callerName
            ) {
              warnNoop(publicInstance, 'replaceState')
            },

            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(
              publicInstance,
              partialState,
              callback,
              callerName
            ) {
              warnNoop(publicInstance, 'setState')
            },
          }

          /**
           * Base class helpers for the updating state of a component.
           */
          function Component(props, context, updater) {
            this.props = props
            this.context = context
            this.refs = emptyObject
            // We initialize the default updater but the real one gets injected by the
            // renderer.
            this.updater = updater || ReactNoopUpdateQueue
          }

          Component.prototype.isReactComponent = {}

          /**
           * Sets a subset of the state. Always use this to mutate
           * state. You should treat `this.state` as immutable.
           *
           * There is no guarantee that `this.state` will be immediately updated, so
           * accessing `this.state` after calling this method may return the old value.
           *
           * There is no guarantee that calls to `setState` will run synchronously,
           * as they may eventually be batched together.  You can provide an optional
           * callback that will be executed when the call to setState is actually
           * completed.
           *
           * When a function is provided to setState, it will be called at some point in
           * the future (not synchronously). It will be called with the up to date
           * component arguments (state, props, context). These values can be different
           * from this.* because your function may be called after receiveProps but before
           * shouldComponentUpdate, and this new state, props, and context will not yet be
           * assigned to this.
           *
           * @param {object|function} partialState Next partial state or function to
           *        produce next partial state to be merged with current state.
           * @param {?function} callback Called after state is updated.
           * @final
           * @protected
           */
          Component.prototype.setState = function(partialState, callback) {
            !(
              typeof partialState === 'object' ||
              typeof partialState === 'function' ||
              partialState == null
            )
              ? invariant(
                  false,
                  'setState(...): takes an object of state variables to update or a function which returns an object of state variables.'
                )
              : void 0
            this.updater.enqueueSetState(
              this,
              partialState,
              callback,
              'setState'
            )
          }

          /**
           * Forces an update. This should only be invoked when it is known with
           * certainty that we are **not** in a DOM transaction.
           *
           * You may want to call this when you know that some deeper aspect of the
           * component's state has changed but `setState` was not called.
           *
           * This will not invoke `shouldComponentUpdate`, but it will invoke
           * `componentWillUpdate` and `componentDidUpdate`.
           *
           * @param {?function} callback Called after update is complete.
           * @final
           * @protected
           */
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, 'forceUpdate')
          }

          /**
           * Deprecated APIs. These APIs used to exist on classic React classes but since
           * we would like to deprecate them, we're not going to move them over to this
           * modern base class. Instead, we define a getter that warns if it's accessed.
           */
          {
            var deprecatedAPIs = {
              isMounted: [
                'isMounted',
                'Instead, make sure to clean up subscriptions and pending requests in ' +
                  'componentWillUnmount to prevent memory leaks.',
              ],
              replaceState: [
                'replaceState',
                'Refactor your code to use setState instead (see ' +
                  'https://github.com/facebook/react/issues/3236).',
              ],
            }
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  lowPriorityWarning$1(
                    false,
                    '%s(...) is deprecated in plain JavaScript React classes. %s',
                    info[0],
                    info[1]
                  )
                  return undefined
                },
              })
            }
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName])
              }
            }
          }

          /**
           * Base class helpers for the updating state of a component.
           */
          function PureComponent(props, context, updater) {
            // Duplicated from Component.
            this.props = props
            this.context = context
            this.refs = emptyObject
            // We initialize the default updater but the real one gets injected by the
            // renderer.
            this.updater = updater || ReactNoopUpdateQueue
          }

          function ComponentDummy() {}
          ComponentDummy.prototype = Component.prototype
          var pureComponentPrototype = (PureComponent.prototype = new ComponentDummy())
          pureComponentPrototype.constructor = PureComponent
          // Avoid an extra prototype jump for these methods.
          _assign(pureComponentPrototype, Component.prototype)
          pureComponentPrototype.isPureReactComponent = true

          function AsyncComponent(props, context, updater) {
            // Duplicated from Component.
            this.props = props
            this.context = context
            this.refs = emptyObject
            // We initialize the default updater but the real one gets injected by the
            // renderer.
            this.updater = updater || ReactNoopUpdateQueue
          }

          var asyncComponentPrototype = (AsyncComponent.prototype = new ComponentDummy())
          asyncComponentPrototype.constructor = AsyncComponent
          // Avoid an extra prototype jump for these methods.
          _assign(asyncComponentPrototype, Component.prototype)
          asyncComponentPrototype.unstable_isAsyncReactComponent = true
          asyncComponentPrototype.render = function() {
            return this.props.children
          }

          /**
           * Keeps track of the current owner.
           *
           * The current owner is the component who should own any components that are
           * currently being constructed.
           */
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null,
          }

          var hasOwnProperty = Object.prototype.hasOwnProperty

          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true,
          }

          var specialPropKeyWarningShown
          var specialPropRefWarningShown

          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, 'ref')) {
                var getter = Object.getOwnPropertyDescriptor(config, 'ref').get
                if (getter && getter.isReactWarning) {
                  return false
                }
              }
            }
            return config.ref !== undefined
          }

          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, 'key')) {
                var getter = Object.getOwnPropertyDescriptor(config, 'key').get
                if (getter && getter.isReactWarning) {
                  return false
                }
              }
            }
            return config.key !== undefined
          }

          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true
                warning(
                  false,
                  '%s: `key` is not a prop. Trying to access it will result ' +
                    'in `undefined` being returned. If you need to access the same ' +
                    'value within the child component, you should pass it as a different ' +
                    'prop. (https://fb.me/react-special-props)',
                  displayName
                )
              }
            }
            warnAboutAccessingKey.isReactWarning = true
            Object.defineProperty(props, 'key', {
              get: warnAboutAccessingKey,
              configurable: true,
            })
          }

          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true
                warning(
                  false,
                  '%s: `ref` is not a prop. Trying to access it will result ' +
                    'in `undefined` being returned. If you need to access the same ' +
                    'value within the child component, you should pass it as a different ' +
                    'prop. (https://fb.me/react-special-props)',
                  displayName
                )
              }
            }
            warnAboutAccessingRef.isReactWarning = true
            Object.defineProperty(props, 'ref', {
              get: warnAboutAccessingRef,
              configurable: true,
            })
          }

          /**
           * Factory method to create a new React element. This no longer adheres to
           * the class pattern, so do not use new to call it. Also, no instanceof check
           * will work. Instead test $$typeof field against Symbol.for('react.element') to check
           * if something is a React Element.
           *
           * @param {*} type
           * @param {*} key
           * @param {string|object} ref
           * @param {*} self A *temporary* helper to detect places where `this` is
           * different from the `owner` when React.createElement is called, so that we
           * can warn. We want to get rid of owner and replace string `ref`s with arrow
           * functions, and as long as `this` and owner are the same, there will be no
           * change in behavior.
           * @param {*} source An annotation object (added by a transpiler or otherwise)
           * indicating filename, line number, and/or other information.
           * @param {*} owner
           * @param {*} props
           * @internal
           */
          var ReactElement = function(
            type,
            key,
            ref,
            self,
            source,
            owner,
            props
          ) {
            var element = {
              // This tag allow us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,

              // Built-in properties that belong on the element
              type: type,
              key: key,
              ref: ref,
              props: props,

              // Record the component responsible for creating this element.
              _owner: owner,
            }

            {
              // The validation flag is currently mutative. We put it on
              // an external backing store so that we can freeze the whole object.
              // This can be replaced with a WeakMap once they are implemented in
              // commonly used development environments.
              element._store = {}

              // To make comparing ReactElements easier for testing purposes, we make
              // the validation flag non-enumerable (where possible, which should
              // include every environment we run tests in), so the test framework
              // ignores it.
              Object.defineProperty(element._store, 'validated', {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false,
              })
              // self and source are DEV only properties.
              Object.defineProperty(element, '_self', {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self,
              })
              // Two elements created in two different places should be considered
              // equal for testing purposes and therefore we hide it from enumeration.
              Object.defineProperty(element, '_source', {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source,
              })
              if (Object.freeze) {
                Object.freeze(element.props)
                Object.freeze(element)
              }
            }

            return element
          }

          /**
           * Create and return a new ReactElement of the given type.
           * See https://reactjs.org/docs/react-api.html#createelement
           */
          function createElement(type, config, children) {
            var propName

            // Reserved names are extracted
            var props = {}

            var key = null
            var ref = null
            var self = null
            var source = null

            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref
              }
              if (hasValidKey(config)) {
                key = '' + config.key
              }

              self = config.__self === undefined ? null : config.__self
              source = config.__source === undefined ? null : config.__source
              // Remaining properties are added to a new props object
              for (propName in config) {
                if (
                  hasOwnProperty.call(config, propName) &&
                  !RESERVED_PROPS.hasOwnProperty(propName)
                ) {
                  props[propName] = config[propName]
                }
              }
            }

            // Children can be more than one argument, and those are transferred onto
            // the newly allocated props object.
            var childrenLength = arguments.length - 2
            if (childrenLength === 1) {
              props.children = children
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength)
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2]
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray)
                }
              }
              props.children = childArray
            }

            // Resolve default props
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps
              for (propName in defaultProps) {
                if (props[propName] === undefined) {
                  props[propName] = defaultProps[propName]
                }
              }
            }
            {
              if (key || ref) {
                if (
                  typeof props.$$typeof === 'undefined' ||
                  props.$$typeof !== REACT_ELEMENT_TYPE
                ) {
                  var displayName =
                    typeof type === 'function'
                      ? type.displayName || type.name || 'Unknown'
                      : type
                  if (key) {
                    defineKeyPropWarningGetter(props, displayName)
                  }
                  if (ref) {
                    defineRefPropWarningGetter(props, displayName)
                  }
                }
              }
            }
            return ReactElement(
              type,
              key,
              ref,
              self,
              source,
              ReactCurrentOwner.current,
              props
            )
          }

          /**
           * Return a function that produces ReactElements of a given type.
           * See https://reactjs.org/docs/react-api.html#createfactory
           */

          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(
              oldElement.type,
              newKey,
              oldElement.ref,
              oldElement._self,
              oldElement._source,
              oldElement._owner,
              oldElement.props
            )

            return newElement
          }

          /**
           * Clone and return a new ReactElement using element as the starting point.
           * See https://reactjs.org/docs/react-api.html#cloneelement
           */
          function cloneElement(element, config, children) {
            var propName

            // Original props are copied
            var props = _assign({}, element.props)

            // Reserved names are extracted
            var key = element.key
            var ref = element.ref
            // Self is preserved since the owner is preserved.
            var self = element._self
            // Source is preserved since cloneElement is unlikely to be targeted by a
            // transpiler, and the original source is probably a better indicator of the
            // true owner.
            var source = element._source

            // Owner will be preserved, unless ref is overridden
            var owner = element._owner

            if (config != null) {
              if (hasValidRef(config)) {
                // Silently steal the ref from the parent.
                ref = config.ref
                owner = ReactCurrentOwner.current
              }
              if (hasValidKey(config)) {
                key = '' + config.key
              }

              // Remaining properties override existing props
              var defaultProps
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps
              }
              for (propName in config) {
                if (
                  hasOwnProperty.call(config, propName) &&
                  !RESERVED_PROPS.hasOwnProperty(propName)
                ) {
                  if (
                    config[propName] === undefined &&
                    defaultProps !== undefined
                  ) {
                    // Resolve default props
                    props[propName] = defaultProps[propName]
                  } else {
                    props[propName] = config[propName]
                  }
                }
              }
            }

            // Children can be more than one argument, and those are transferred onto
            // the newly allocated props object.
            var childrenLength = arguments.length - 2
            if (childrenLength === 1) {
              props.children = children
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength)
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2]
              }
              props.children = childArray
            }

            return ReactElement(
              element.type,
              key,
              ref,
              self,
              source,
              owner,
              props
            )
          }

          /**
           * Verifies the object is a ReactElement.
           * See https://reactjs.org/docs/react-api.html#isvalidelement
           * @param {?object} object
           * @return {boolean} True if `object` is a valid component.
           * @final
           */
          function isValidElement(object) {
            return (
              typeof object === 'object' &&
              object !== null &&
              object.$$typeof === REACT_ELEMENT_TYPE
            )
          }

          var ReactDebugCurrentFrame = {}

          {
            // Component that is being worked on
            ReactDebugCurrentFrame.getCurrentStack = null

            ReactDebugCurrentFrame.getStackAddendum = function() {
              var impl = ReactDebugCurrentFrame.getCurrentStack
              if (impl) {
                return impl()
              }
              return null
            }
          }

          var SEPARATOR = '.'
          var SUBSEPARATOR = ':'

          /**
           * Escape and wrap key so it is safe to use as a reactid
           *
           * @param {string} key to be escaped.
           * @return {string} the escaped key.
           */
          function escape(key) {
            var escapeRegex = /[=:]/g
            var escaperLookup = {
              '=': '=0',
              ':': '=2',
            }
            var escapedString = ('' + key).replace(escapeRegex, function(
              match
            ) {
              return escaperLookup[match]
            })

            return '$' + escapedString
          }

          /**
           * TODO: Test that a single child and an array with one item have the same key
           * pattern.
           */

          var didWarnAboutMaps = false

          var userProvidedKeyEscapeRegex = /\/+/g
          function escapeUserProvidedKey(text) {
            return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/')
          }

          var POOL_SIZE = 10
          var traverseContextPool = []
          function getPooledTraverseContext(
            mapResult,
            keyPrefix,
            mapFunction,
            mapContext
          ) {
            if (traverseContextPool.length) {
              var traverseContext = traverseContextPool.pop()
              traverseContext.result = mapResult
              traverseContext.keyPrefix = keyPrefix
              traverseContext.func = mapFunction
              traverseContext.context = mapContext
              traverseContext.count = 0
              return traverseContext
            } else {
              return {
                result: mapResult,
                keyPrefix: keyPrefix,
                func: mapFunction,
                context: mapContext,
                count: 0,
              }
            }
          }

          function releaseTraverseContext(traverseContext) {
            traverseContext.result = null
            traverseContext.keyPrefix = null
            traverseContext.func = null
            traverseContext.context = null
            traverseContext.count = 0
            if (traverseContextPool.length < POOL_SIZE) {
              traverseContextPool.push(traverseContext)
            }
          }

          /**
           * @param {?*} children Children tree container.
           * @param {!string} nameSoFar Name of the key path so far.
           * @param {!function} callback Callback to invoke with each child found.
           * @param {?*} traverseContext Used to pass information throughout the traversal
           * process.
           * @return {!number} The number of children in this subtree.
           */
          function traverseAllChildrenImpl(
            children,
            nameSoFar,
            callback,
            traverseContext
          ) {
            var type = typeof children

            if (type === 'undefined' || type === 'boolean') {
              // All of the above are perceived as null.
              children = null
            }

            var invokeCallback = false

            if (children === null) {
              invokeCallback = true
            } else {
              switch (type) {
                case 'string':
                case 'number':
                  invokeCallback = true
                  break
                case 'object':
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_CALL_TYPE:
                    case REACT_RETURN_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true
                  }
              }
            }

            if (invokeCallback) {
              callback(
                traverseContext,
                children,
                // If it's the only child, treat the name as if it was wrapped in an array
                // so that it's consistent if the number of children grows.
                nameSoFar === ''
                  ? SEPARATOR + getComponentKey(children, 0)
                  : nameSoFar
              )
              return 1
            }

            var child
            var nextName
            var subtreeCount = 0 // Count of children found in the current subtree.
            var nextNamePrefix =
              nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR

            if (Array.isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i]
                nextName = nextNamePrefix + getComponentKey(child, i)
                subtreeCount += traverseAllChildrenImpl(
                  child,
                  nextName,
                  callback,
                  traverseContext
                )
              }
            } else {
              var iteratorFn = getIteratorFn(children)
              if (typeof iteratorFn === 'function') {
                {
                  // Warn about using Maps as children
                  if (iteratorFn === children.entries) {
                    warning(
                      didWarnAboutMaps,
                      'Using Maps as children is unsupported and will likely yield ' +
                        'unexpected results. Convert it to a sequence/iterable of keyed ' +
                        'ReactElements instead.%s',
                      ReactDebugCurrentFrame.getStackAddendum()
                    )
                    didWarnAboutMaps = true
                  }
                }

                var iterator = iteratorFn.call(children)
                var step
                var ii = 0
                while (!(step = iterator.next()).done) {
                  child = step.value
                  nextName = nextNamePrefix + getComponentKey(child, ii++)
                  subtreeCount += traverseAllChildrenImpl(
                    child,
                    nextName,
                    callback,
                    traverseContext
                  )
                }
              } else if (type === 'object') {
                var addendum = ''
                {
                  addendum =
                    ' If you meant to render a collection of children, use an array ' +
                    'instead.' +
                    ReactDebugCurrentFrame.getStackAddendum()
                }
                var childrenString = '' + children
                invariant(
                  false,
                  'Objects are not valid as a React child (found: %s).%s',
                  childrenString === '[object Object]'
                    ? 'object with keys {' +
                      Object.keys(children).join(', ') +
                      '}'
                    : childrenString,
                  addendum
                )
              }
            }

            return subtreeCount
          }

          /**
           * Traverses children that are typically specified as `props.children`, but
           * might also be specified through attributes:
           *
           * - `traverseAllChildren(this.props.children, ...)`
           * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
           *
           * The `traverseContext` is an optional argument that is passed through the
           * entire traversal. It can be used to store accumulations or anything else that
           * the callback might find relevant.
           *
           * @param {?*} children Children tree object.
           * @param {!function} callback To invoke upon traversing each child.
           * @param {?*} traverseContext Context for traversal.
           * @return {!number} The number of children in this subtree.
           */
          function traverseAllChildren(children, callback, traverseContext) {
            if (children == null) {
              return 0
            }

            return traverseAllChildrenImpl(
              children,
              '',
              callback,
              traverseContext
            )
          }

          /**
           * Generate a key string that identifies a component within a set.
           *
           * @param {*} component A component that could contain a manual key.
           * @param {number} index Index that is used if a manual key is not provided.
           * @return {string}
           */
          function getComponentKey(component, index) {
            // Do some typechecking here since we call this blindly. We want to ensure
            // that we don't block potential future ES APIs.
            if (
              typeof component === 'object' &&
              component !== null &&
              component.key != null
            ) {
              // Explicit key
              return escape(component.key)
            }
            // Implicit key determined by the index in the set
            return index.toString(36)
          }

          function forEachSingleChild(bookKeeping, child, name) {
            var func = bookKeeping.func,
              context = bookKeeping.context

            func.call(context, child, bookKeeping.count++)
          }

          /**
           * Iterates through children that are typically specified as `props.children`.
           *
           * See https://reactjs.org/docs/react-api.html#react.children.foreach
           *
           * The provided forEachFunc(child, index) will be called for each
           * leaf child.
           *
           * @param {?*} children Children tree container.
           * @param {function(*, int)} forEachFunc
           * @param {*} forEachContext Context for forEachContext.
           */
          function forEachChildren(children, forEachFunc, forEachContext) {
            if (children == null) {
              return children
            }
            var traverseContext = getPooledTraverseContext(
              null,
              null,
              forEachFunc,
              forEachContext
            )
            traverseAllChildren(children, forEachSingleChild, traverseContext)
            releaseTraverseContext(traverseContext)
          }

          function mapSingleChildIntoContext(bookKeeping, child, childKey) {
            var result = bookKeeping.result,
              keyPrefix = bookKeeping.keyPrefix,
              func = bookKeeping.func,
              context = bookKeeping.context

            var mappedChild = func.call(context, child, bookKeeping.count++)
            if (Array.isArray(mappedChild)) {
              mapIntoWithKeyPrefixInternal(
                mappedChild,
                result,
                childKey,
                emptyFunction.thatReturnsArgument
              )
            } else if (mappedChild != null) {
              if (isValidElement(mappedChild)) {
                mappedChild = cloneAndReplaceKey(
                  mappedChild,
                  // Keep both the (mapped) and old keys if they differ, just as
                  // traverseAllChildren used to do for objects as children
                  keyPrefix +
                    (mappedChild.key &&
                    (!child || child.key !== mappedChild.key)
                      ? escapeUserProvidedKey(mappedChild.key) + '/'
                      : '') +
                    childKey
                )
              }
              result.push(mappedChild)
            }
          }

          function mapIntoWithKeyPrefixInternal(
            children,
            array,
            prefix,
            func,
            context
          ) {
            var escapedPrefix = ''
            if (prefix != null) {
              escapedPrefix = escapeUserProvidedKey(prefix) + '/'
            }
            var traverseContext = getPooledTraverseContext(
              array,
              escapedPrefix,
              func,
              context
            )
            traverseAllChildren(
              children,
              mapSingleChildIntoContext,
              traverseContext
            )
            releaseTraverseContext(traverseContext)
          }

          /**
           * Maps children that are typically specified as `props.children`.
           *
           * See https://reactjs.org/docs/react-api.html#react.children.map
           *
           * The provided mapFunction(child, key, index) will be called for each
           * leaf child.
           *
           * @param {?*} children Children tree container.
           * @param {function(*, int)} func The map function.
           * @param {*} context Context for mapFunction.
           * @return {object} Object containing the ordered map of results.
           */
          function mapChildren(children, func, context) {
            if (children == null) {
              return children
            }
            var result = []
            mapIntoWithKeyPrefixInternal(children, result, null, func, context)
            return result
          }

          /**
           * Count the number of children that are typically specified as
           * `props.children`.
           *
           * See https://reactjs.org/docs/react-api.html#react.children.count
           *
           * @param {?*} children Children tree container.
           * @return {number} The number of children.
           */
          function countChildren(children, context) {
            return traverseAllChildren(
              children,
              emptyFunction.thatReturnsNull,
              null
            )
          }

          /**
           * Flatten a children object (typically specified as `props.children`) and
           * return an array with appropriately re-keyed children.
           *
           * See https://reactjs.org/docs/react-api.html#react.children.toarray
           */
          function toArray(children) {
            var result = []
            mapIntoWithKeyPrefixInternal(
              children,
              result,
              null,
              emptyFunction.thatReturnsArgument
            )
            return result
          }

          /**
           * Returns the first child in a collection of children and verifies that there
           * is only one child in the collection.
           *
           * See https://reactjs.org/docs/react-api.html#react.children.only
           *
           * The current implementation of this function assumes that a single child gets
           * passed without a wrapper, but the purpose of this helper function is to
           * abstract away the particular structure of children.
           *
           * @param {?object} children Child collection structure.
           * @return {ReactElement} The first and only `ReactElement` contained in the
           * structure.
           */
          function onlyChild(children) {
            !isValidElement(children)
              ? invariant(
                  false,
                  'React.Children.only expected to receive a single React element child.'
                )
              : void 0
            return children
          }

          var describeComponentFrame = function(name, source, ownerName) {
            return (
              '\n    in ' +
              (name || 'Unknown') +
              (source
                ? ' (at ' +
                  source.fileName.replace(/^.*[\\\/]/, '') +
                  ':' +
                  source.lineNumber +
                  ')'
                : ownerName ? ' (created by ' + ownerName + ')' : '')
            )
          }

          function getComponentName(fiber) {
            var type = fiber.type

            if (typeof type === 'string') {
              return type
            }
            if (typeof type === 'function') {
              return type.displayName || type.name
            }
            return null
          }

          /**
           * ReactElementValidator provides a wrapper around a element factory
           * which validates the props passed to the element. This is intended to be
           * used only in DEV and could be replaced by a static type checker for languages
           * that support it.
           */

          {
            var currentlyValidatingElement = null

            var propTypesMisspellWarningShown = false

            var getDisplayName = function(element) {
              if (element == null) {
                return '#empty'
              } else if (
                typeof element === 'string' ||
                typeof element === 'number'
              ) {
                return '#text'
              } else if (typeof element.type === 'string') {
                return element.type
              } else if (element.type === REACT_FRAGMENT_TYPE) {
                return 'React.Fragment'
              } else {
                return (
                  element.type.displayName || element.type.name || 'Unknown'
                )
              }
            }

            var getStackAddendum = function() {
              var stack = ''
              if (currentlyValidatingElement) {
                var name = getDisplayName(currentlyValidatingElement)
                var owner = currentlyValidatingElement._owner
                stack += describeComponentFrame(
                  name,
                  currentlyValidatingElement._source,
                  owner && getComponentName(owner)
                )
              }
              stack += ReactDebugCurrentFrame.getStackAddendum() || ''
              return stack
            }

            var VALID_FRAGMENT_PROPS = new Map([
              ['children', true],
              ['key', true],
            ])
          }

          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentName(ReactCurrentOwner.current)
              if (name) {
                return '\n\nCheck the render method of `' + name + '`.'
              }
            }
            return ''
          }

          function getSourceInfoErrorAddendum(elementProps) {
            if (
              elementProps !== null &&
              elementProps !== undefined &&
              elementProps.__source !== undefined
            ) {
              var source = elementProps.__source
              var fileName = source.fileName.replace(/^.*[\\\/]/, '')
              var lineNumber = source.lineNumber
              return (
                '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.'
              )
            }
            return ''
          }

          /**
           * Warn if there's no key explicitly set on dynamic arrays of children or
           * object keys are not valid. This allows us to keep track of children between
           * updates.
           */
          var ownerHasKeyUseWarning = {}

          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum()

            if (!info) {
              var parentName =
                typeof parentType === 'string'
                  ? parentType
                  : parentType.displayName || parentType.name
              if (parentName) {
                info =
                  '\n\nCheck the top-level render call using <' +
                  parentName +
                  '>.'
              }
            }
            return info
          }

          /**
           * Warn if the element doesn't have an explicit key assigned to it.
           * This element is in an array. The array could grow and shrink or be
           * reordered. All children that haven't already been validated are required to
           * have a "key" property assigned to it. Error statuses are cached so a warning
           * will only be shown once.
           *
           * @internal
           * @param {ReactElement} element Element that requires a key.
           * @param {*} parentType element's parent's type.
           */
          function validateExplicitKey(element, parentType) {
            if (
              !element._store ||
              element._store.validated ||
              element.key != null
            ) {
              return
            }
            element._store.validated = true

            var currentComponentErrorInfo = getCurrentComponentErrorInfo(
              parentType
            )
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true

            // Usually the current owner is the offender, but if it accepts children as a
            // property, it may be the creator of the child that's responsible for
            // assigning it a key.
            var childOwner = ''
            if (
              element &&
              element._owner &&
              element._owner !== ReactCurrentOwner.current
            ) {
              // Give the component that originally created this child.
              childOwner =
                ' It was passed a child from ' +
                getComponentName(element._owner) +
                '.'
            }

            currentlyValidatingElement = element
            {
              warning(
                false,
                'Each child in an array or iterator should have a unique "key" prop.' +
                  '%s%s See https://fb.me/react-warning-keys for more information.%s',
                currentComponentErrorInfo,
                childOwner,
                getStackAddendum()
              )
            }
            currentlyValidatingElement = null
          }

          /**
           * Ensure that every element either is passed in a static location, in an
           * array with an explicit keys property defined, or in an object literal
           * with valid key property.
           *
           * @internal
           * @param {ReactNode} node Statically passed child of any type.
           * @param {*} parentType node's parent's type.
           */
          function validateChildKeys(node, parentType) {
            if (typeof node !== 'object') {
              return
            }
            if (Array.isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i]
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType)
                }
              }
            } else if (isValidElement(node)) {
              // This element was passed in a valid location.
              if (node._store) {
                node._store.validated = true
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node)
              if (typeof iteratorFn === 'function') {
                // Entry iterators used to provide implicit keys,
                // but now we print a separate warning for them later.
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node)
                  var step
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType)
                    }
                  }
                }
              }
            }
          }

          /**
           * Given an element, validate that its props follow the propTypes definition,
           * provided by the type.
           *
           * @param {ReactElement} element
           */
          function validatePropTypes(element) {
            var componentClass = element.type
            if (typeof componentClass !== 'function') {
              return
            }
            var name = componentClass.displayName || componentClass.name
            var propTypes = componentClass.propTypes
            if (propTypes) {
              currentlyValidatingElement = element
              checkPropTypes(
                propTypes,
                element.props,
                'prop',
                name,
                getStackAddendum
              )
              currentlyValidatingElement = null
            } else if (
              componentClass.PropTypes !== undefined &&
              !propTypesMisspellWarningShown
            ) {
              propTypesMisspellWarningShown = true
              warning(
                false,
                'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?',
                name || 'Unknown'
              )
            }
            if (typeof componentClass.getDefaultProps === 'function') {
              warning(
                componentClass.getDefaultProps.isReactClassApproved,
                'getDefaultProps is only used on classic React.createClass ' +
                  'definitions. Use a static property named `defaultProps` instead.'
              )
            }
          }

          /**
           * Given a fragment, validate that it can only be provided with fragment props
           * @param {ReactElement} fragment
           */
          function validateFragmentProps(fragment) {
            currentlyValidatingElement = fragment

            var _iteratorNormalCompletion = true
            var _didIteratorError = false
            var _iteratorError = undefined

            try {
              for (
                var _iterator = Object.keys(fragment.props)[Symbol.iterator](),
                  _step;
                !(_iteratorNormalCompletion = (_step = _iterator.next()).done);
                _iteratorNormalCompletion = true
              ) {
                var key = _step.value

                if (!VALID_FRAGMENT_PROPS.has(key)) {
                  warning(
                    false,
                    'Invalid prop `%s` supplied to `React.Fragment`. ' +
                      'React.Fragment can only have `key` and `children` props.%s',
                    key,
                    getStackAddendum()
                  )
                  break
                }
              }
            } catch (err) {
              _didIteratorError = true
              _iteratorError = err
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator['return']) {
                  _iterator['return']()
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError
                }
              }
            }

            if (fragment.ref !== null) {
              warning(
                false,
                'Invalid attribute `ref` supplied to `React.Fragment`.%s',
                getStackAddendum()
              )
            }

            currentlyValidatingElement = null
          }

          function createElementWithValidation(type, props, children) {
            var validType =
              typeof type === 'string' ||
              typeof type === 'function' ||
              typeof type === 'symbol' ||
              typeof type === 'number'
            // We warn in this case but don't throw. We expect the element creation to
            // succeed and there will likely be errors in render.
            if (!validType) {
              var info = ''
              if (
                type === undefined ||
                (typeof type === 'object' &&
                  type !== null &&
                  Object.keys(type).length === 0)
              ) {
                info +=
                  ' You likely forgot to export your component from the file ' +
                  "it's defined in, or you might have mixed up default and named imports."
              }

              var sourceInfo = getSourceInfoErrorAddendum(props)
              if (sourceInfo) {
                info += sourceInfo
              } else {
                info += getDeclarationErrorAddendum()
              }

              info += getStackAddendum() || ''

              warning(
                false,
                'React.createElement: type is invalid -- expected a string (for ' +
                  'built-in components) or a class/function (for composite ' +
                  'components) but got: %s.%s',
                type == null ? type : typeof type,
                info
              )
            }

            var element = createElement.apply(this, arguments)

            // The result can be nullish if a mock or a custom function is used.
            // TODO: Drop this when these are no longer allowed as the type argument.
            if (element == null) {
              return element
            }

            // Skip key warning if the type isn't valid since our key validation logic
            // doesn't expect a non-string/function type and can throw confusing errors.
            // We don't want exception behavior to differ between dev and prod.
            // (Rendering will throw with a helpful message and as soon as the type is
            // fixed, the key warnings will appear.)
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type)
              }
            }

            if (typeof type === 'symbol' && type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element)
            } else {
              validatePropTypes(element)
            }

            return element
          }

          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type)
            // Legacy hook TODO: Warn if this is accessed
            validatedFactory.type = type

            {
              Object.defineProperty(validatedFactory, 'type', {
                enumerable: false,
                get: function() {
                  lowPriorityWarning$1(
                    false,
                    'Factory.type is deprecated. Access the class directly ' +
                      'before passing it to createFactory.'
                  )
                  Object.defineProperty(this, 'type', {
                    value: type,
                  })
                  return type
                },
              })
            }

            return validatedFactory
          }

          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments)
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type)
            }
            validatePropTypes(newElement)
            return newElement
          }

          var React = {
            Children: {
              map: mapChildren,
              forEach: forEachChildren,
              count: countChildren,
              toArray: toArray,
              only: onlyChild,
            },

            Component: Component,
            PureComponent: PureComponent,
            unstable_AsyncComponent: AsyncComponent,

            Fragment: REACT_FRAGMENT_TYPE,

            createElement: createElementWithValidation,
            cloneElement: cloneElementWithValidation,
            createFactory: createFactoryWithValidation,
            isValidElement: isValidElement,

            version: ReactVersion,

            __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
              ReactCurrentOwner: ReactCurrentOwner,
              // Used by renderers to avoid bundling object-assign twice in UMD bundles:
              assign: _assign,
            },
          }

          {
            _assign(React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {
              // These should not be included in production.
              ReactDebugCurrentFrame: ReactDebugCurrentFrame,
              // Shim for React DOM 16.0.0 which still destructured (but not used) this.
              // TODO: remove in React 17.0.
              ReactComponentTreeHook: {},
            })
          }

          var React$2 = Object.freeze({
            default: React,
          })

          var React$3 = (React$2 && React) || React$2

          // TODO: decide on the top-level export form.
          // This is hacky but makes it work with both Rollup and Jest.
          var react = React$3['default'] ? React$3['default'] : React$3

          module.exports = react
        })()
      }

      /***/
    },
    /* 92 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'
      /** @license React v16.2.0
       * react-dom.development.js
       *
       * Copyright (c) 2013-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       */

      if (true) {
        ;(function() {
          'use strict'

          var React = __webpack_require__(1)
          var invariant = __webpack_require__(4)
          var warning = __webpack_require__(6)
          var ExecutionEnvironment = __webpack_require__(9)
          var _assign = __webpack_require__(10)
          var emptyFunction = __webpack_require__(8)
          var EventListener = __webpack_require__(93)
          var getActiveElement = __webpack_require__(94)
          var shallowEqual = __webpack_require__(95)
          var containsNode = __webpack_require__(96)
          var focusNode = __webpack_require__(99)
          var emptyObject = __webpack_require__(20)
          var checkPropTypes = __webpack_require__(21)
          var hyphenateStyleName = __webpack_require__(100)
          var camelizeStyleName = __webpack_require__(38)

          /**
           * WARNING: DO NOT manually require this module.
           * This is a replacement for `invariant(...)` used by the error code system
           * and will _only_ be required by the corresponding babel pass.
           * It always throws.
           */

          !React
            ? invariant(
                false,
                'ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.'
              )
            : void 0

          // These attributes should be all lowercase to allow for
          // case insensitive checks
          var RESERVED_PROPS = {
            children: true,
            dangerouslySetInnerHTML: true,
            defaultValue: true,
            defaultChecked: true,
            innerHTML: true,
            suppressContentEditableWarning: true,
            suppressHydrationWarning: true,
            style: true,
          }

          function checkMask(value, bitmask) {
            return (value & bitmask) === bitmask
          }

          var DOMPropertyInjection = {
            /**
             * Mapping from normalized, camelcased property names to a configuration that
             * specifies how the associated DOM property should be accessed or rendered.
             */
            MUST_USE_PROPERTY: 0x1,
            HAS_BOOLEAN_VALUE: 0x4,
            HAS_NUMERIC_VALUE: 0x8,
            HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
            HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,
            HAS_STRING_BOOLEAN_VALUE: 0x40,

            /**
             * Inject some specialized knowledge about the DOM. This takes a config object
             * with the following properties:
             *
             * Properties: object mapping DOM property name to one of the
             * DOMPropertyInjection constants or null. If your attribute isn't in here,
             * it won't get written to the DOM.
             *
             * DOMAttributeNames: object mapping React attribute name to the DOM
             * attribute name. Attribute names not specified use the **lowercase**
             * normalized name.
             *
             * DOMAttributeNamespaces: object mapping React attribute name to the DOM
             * attribute namespace URL. (Attribute names not specified use no namespace.)
             *
             * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
             * Property names not specified use the normalized name.
             *
             * DOMMutationMethods: Properties that require special mutation methods. If
             * `value` is undefined, the mutation method should unset the property.
             *
             * @param {object} domPropertyConfig the config as described above.
             */
            injectDOMPropertyConfig: function(domPropertyConfig) {
              var Injection = DOMPropertyInjection
              var Properties = domPropertyConfig.Properties || {}
              var DOMAttributeNamespaces =
                domPropertyConfig.DOMAttributeNamespaces || {}
              var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {}
              var DOMMutationMethods =
                domPropertyConfig.DOMMutationMethods || {}

              for (var propName in Properties) {
                !!properties.hasOwnProperty(propName)
                  ? invariant(
                      false,
                      "injectDOMPropertyConfig(...): You're trying to inject DOM property '%s' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.",
                      propName
                    )
                  : void 0

                var lowerCased = propName.toLowerCase()
                var propConfig = Properties[propName]

                var propertyInfo = {
                  attributeName: lowerCased,
                  attributeNamespace: null,
                  propertyName: propName,
                  mutationMethod: null,

                  mustUseProperty: checkMask(
                    propConfig,
                    Injection.MUST_USE_PROPERTY
                  ),
                  hasBooleanValue: checkMask(
                    propConfig,
                    Injection.HAS_BOOLEAN_VALUE
                  ),
                  hasNumericValue: checkMask(
                    propConfig,
                    Injection.HAS_NUMERIC_VALUE
                  ),
                  hasPositiveNumericValue: checkMask(
                    propConfig,
                    Injection.HAS_POSITIVE_NUMERIC_VALUE
                  ),
                  hasOverloadedBooleanValue: checkMask(
                    propConfig,
                    Injection.HAS_OVERLOADED_BOOLEAN_VALUE
                  ),
                  hasStringBooleanValue: checkMask(
                    propConfig,
                    Injection.HAS_STRING_BOOLEAN_VALUE
                  ),
                }
                !(
                  propertyInfo.hasBooleanValue +
                    propertyInfo.hasNumericValue +
                    propertyInfo.hasOverloadedBooleanValue <=
                  1
                )
                  ? invariant(
                      false,
                      'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s',
                      propName
                    )
                  : void 0

                if (DOMAttributeNames.hasOwnProperty(propName)) {
                  var attributeName = DOMAttributeNames[propName]

                  propertyInfo.attributeName = attributeName
                }

                if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
                  propertyInfo.attributeNamespace =
                    DOMAttributeNamespaces[propName]
                }

                if (DOMMutationMethods.hasOwnProperty(propName)) {
                  propertyInfo.mutationMethod = DOMMutationMethods[propName]
                }

                // Downcase references to whitelist properties to check for membership
                // without case-sensitivity. This allows the whitelist to pick up
                // `allowfullscreen`, which should be written using the property configuration
                // for `allowFullscreen`
                properties[propName] = propertyInfo
              }
            },
          }

          /* eslint-disable max-len */
          var ATTRIBUTE_NAME_START_CHAR =
            ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD'
          /* eslint-enable max-len */
          var ATTRIBUTE_NAME_CHAR =
            ATTRIBUTE_NAME_START_CHAR +
            '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040'

          var ROOT_ATTRIBUTE_NAME = 'data-reactroot'

          /**
           * Map from property "standard name" to an object with info about how to set
           * the property in the DOM. Each object contains:
           *
           * attributeName:
           *   Used when rendering markup or with `*Attribute()`.
           * attributeNamespace
           * propertyName:
           *   Used on DOM node instances. (This includes properties that mutate due to
           *   external factors.)
           * mutationMethod:
           *   If non-null, used instead of the property or `setAttribute()` after
           *   initial render.
           * mustUseProperty:
           *   Whether the property must be accessed and mutated as an object property.
           * hasBooleanValue:
           *   Whether the property should be removed when set to a falsey value.
           * hasNumericValue:
           *   Whether the property must be numeric or parse as a numeric and should be
           *   removed when set to a falsey value.
           * hasPositiveNumericValue:
           *   Whether the property must be positive numeric or parse as a positive
           *   numeric and should be removed when set to a falsey value.
           * hasOverloadedBooleanValue:
           *   Whether the property can be used as a flag as well as with a value.
           *   Removed when strictly equal to false; present without a value when
           *   strictly equal to true; present with a value otherwise.
           */
          var properties = {}

          /**
           * Checks whether a property name is a writeable attribute.
           * @method
           */
          function shouldSetAttribute(name, value) {
            if (isReservedProp(name)) {
              return false
            }
            if (
              name.length > 2 &&
              (name[0] === 'o' || name[0] === 'O') &&
              (name[1] === 'n' || name[1] === 'N')
            ) {
              return false
            }
            if (value === null) {
              return true
            }
            switch (typeof value) {
              case 'boolean':
                return shouldAttributeAcceptBooleanValue(name)
              case 'undefined':
              case 'number':
              case 'string':
              case 'object':
                return true
              default:
                // function, symbol
                return false
            }
          }

          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null
          }

          function shouldAttributeAcceptBooleanValue(name) {
            if (isReservedProp(name)) {
              return true
            }
            var propertyInfo = getPropertyInfo(name)
            if (propertyInfo) {
              return (
                propertyInfo.hasBooleanValue ||
                propertyInfo.hasStringBooleanValue ||
                propertyInfo.hasOverloadedBooleanValue
              )
            }
            var prefix = name.toLowerCase().slice(0, 5)
            return prefix === 'data-' || prefix === 'aria-'
          }

          /**
           * Checks to see if a property name is within the list of properties
           * reserved for internal React operations. These properties should
           * not be set on an HTML element.
           *
           * @private
           * @param {string} name
           * @return {boolean} If the name is within reserved props
           */
          function isReservedProp(name) {
            return RESERVED_PROPS.hasOwnProperty(name)
          }

          var injection = DOMPropertyInjection

          var MUST_USE_PROPERTY = injection.MUST_USE_PROPERTY
          var HAS_BOOLEAN_VALUE = injection.HAS_BOOLEAN_VALUE
          var HAS_NUMERIC_VALUE = injection.HAS_NUMERIC_VALUE
          var HAS_POSITIVE_NUMERIC_VALUE = injection.HAS_POSITIVE_NUMERIC_VALUE
          var HAS_OVERLOADED_BOOLEAN_VALUE =
            injection.HAS_OVERLOADED_BOOLEAN_VALUE
          var HAS_STRING_BOOLEAN_VALUE = injection.HAS_STRING_BOOLEAN_VALUE

          var HTMLDOMPropertyConfig = {
            // When adding attributes to this list, be sure to also add them to
            // the `possibleStandardNames` module to ensure casing and incorrect
            // name warnings.
            Properties: {
              allowFullScreen: HAS_BOOLEAN_VALUE,
              // specifies target context for links with `preload` type
              async: HAS_BOOLEAN_VALUE,
              // Note: there is a special case that prevents it from being written to the DOM
              // on the client side because the browsers are inconsistent. Instead we call focus().
              autoFocus: HAS_BOOLEAN_VALUE,
              autoPlay: HAS_BOOLEAN_VALUE,
              capture: HAS_OVERLOADED_BOOLEAN_VALUE,
              checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
              cols: HAS_POSITIVE_NUMERIC_VALUE,
              contentEditable: HAS_STRING_BOOLEAN_VALUE,
              controls: HAS_BOOLEAN_VALUE,
              default: HAS_BOOLEAN_VALUE,
              defer: HAS_BOOLEAN_VALUE,
              disabled: HAS_BOOLEAN_VALUE,
              download: HAS_OVERLOADED_BOOLEAN_VALUE,
              draggable: HAS_STRING_BOOLEAN_VALUE,
              formNoValidate: HAS_BOOLEAN_VALUE,
              hidden: HAS_BOOLEAN_VALUE,
              loop: HAS_BOOLEAN_VALUE,
              // Caution; `option.selected` is not updated if `select.multiple` is
              // disabled with `removeAttribute`.
              multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
              muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
              noValidate: HAS_BOOLEAN_VALUE,
              open: HAS_BOOLEAN_VALUE,
              playsInline: HAS_BOOLEAN_VALUE,
              readOnly: HAS_BOOLEAN_VALUE,
              required: HAS_BOOLEAN_VALUE,
              reversed: HAS_BOOLEAN_VALUE,
              rows: HAS_POSITIVE_NUMERIC_VALUE,
              rowSpan: HAS_NUMERIC_VALUE,
              scoped: HAS_BOOLEAN_VALUE,
              seamless: HAS_BOOLEAN_VALUE,
              selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
              size: HAS_POSITIVE_NUMERIC_VALUE,
              start: HAS_NUMERIC_VALUE,
              // support for projecting regular DOM Elements via V1 named slots ( shadow dom )
              span: HAS_POSITIVE_NUMERIC_VALUE,
              spellCheck: HAS_STRING_BOOLEAN_VALUE,
              // Style must be explicitly set in the attribute list. React components
              // expect a style object
              style: 0,
              // Keep it in the whitelist because it is case-sensitive for SVG.
              tabIndex: 0,
              // itemScope is for for Microdata support.
              // See http://schema.org/docs/gs.html
              itemScope: HAS_BOOLEAN_VALUE,
              // These attributes must stay in the white-list because they have
              // different attribute names (see DOMAttributeNames below)
              acceptCharset: 0,
              className: 0,
              htmlFor: 0,
              httpEquiv: 0,
              // Attributes with mutation methods must be specified in the whitelist
              // Set the string boolean flag to allow the behavior
              value: HAS_STRING_BOOLEAN_VALUE,
            },
            DOMAttributeNames: {
              acceptCharset: 'accept-charset',
              className: 'class',
              htmlFor: 'for',
              httpEquiv: 'http-equiv',
            },
            DOMMutationMethods: {
              value: function(node, value) {
                if (value == null) {
                  return node.removeAttribute('value')
                }

                // Number inputs get special treatment due to some edge cases in
                // Chrome. Let everything else assign the value attribute as normal.
                // https://github.com/facebook/react/issues/7253#issuecomment-236074326
                if (
                  node.type !== 'number' ||
                  node.hasAttribute('value') === false
                ) {
                  node.setAttribute('value', '' + value)
                } else if (
                  node.validity &&
                  !node.validity.badInput &&
                  node.ownerDocument.activeElement !== node
                ) {
                  // Don't assign an attribute if validation reports bad
                  // input. Chrome will clear the value. Additionally, don't
                  // operate on inputs that have focus, otherwise Chrome might
                  // strip off trailing decimal places and cause the user's
                  // cursor position to jump to the beginning of the input.
                  //
                  // In ReactDOMInput, we have an onBlur event that will trigger
                  // this function again when focus is lost.
                  node.setAttribute('value', '' + value)
                }
              },
            },
          }

          var HAS_STRING_BOOLEAN_VALUE$1 = injection.HAS_STRING_BOOLEAN_VALUE

          var NS = {
            xlink: 'http://www.w3.org/1999/xlink',
            xml: 'http://www.w3.org/XML/1998/namespace',
          }

          /**
           * This is a list of all SVG attributes that need special casing,
           * namespacing, or boolean value assignment.
           *
           * When adding attributes to this list, be sure to also add them to
           * the `possibleStandardNames` module to ensure casing and incorrect
           * name warnings.
           *
           * SVG Attributes List:
           * https://www.w3.org/TR/SVG/attindex.html
           * SMIL Spec:
           * https://www.w3.org/TR/smil
           */
          var ATTRS = [
            'accent-height',
            'alignment-baseline',
            'arabic-form',
            'baseline-shift',
            'cap-height',
            'clip-path',
            'clip-rule',
            'color-interpolation',
            'color-interpolation-filters',
            'color-profile',
            'color-rendering',
            'dominant-baseline',
            'enable-background',
            'fill-opacity',
            'fill-rule',
            'flood-color',
            'flood-opacity',
            'font-family',
            'font-size',
            'font-size-adjust',
            'font-stretch',
            'font-style',
            'font-variant',
            'font-weight',
            'glyph-name',
            'glyph-orientation-horizontal',
            'glyph-orientation-vertical',
            'horiz-adv-x',
            'horiz-origin-x',
            'image-rendering',
            'letter-spacing',
            'lighting-color',
            'marker-end',
            'marker-mid',
            'marker-start',
            'overline-position',
            'overline-thickness',
            'paint-order',
            'panose-1',
            'pointer-events',
            'rendering-intent',
            'shape-rendering',
            'stop-color',
            'stop-opacity',
            'strikethrough-position',
            'strikethrough-thickness',
            'stroke-dasharray',
            'stroke-dashoffset',
            'stroke-linecap',
            'stroke-linejoin',
            'stroke-miterlimit',
            'stroke-opacity',
            'stroke-width',
            'text-anchor',
            'text-decoration',
            'text-rendering',
            'underline-position',
            'underline-thickness',
            'unicode-bidi',
            'unicode-range',
            'units-per-em',
            'v-alphabetic',
            'v-hanging',
            'v-ideographic',
            'v-mathematical',
            'vector-effect',
            'vert-adv-y',
            'vert-origin-x',
            'vert-origin-y',
            'word-spacing',
            'writing-mode',
            'x-height',
            'xlink:actuate',
            'xlink:arcrole',
            'xlink:href',
            'xlink:role',
            'xlink:show',
            'xlink:title',
            'xlink:type',
            'xml:base',
            'xmlns:xlink',
            'xml:lang',
            'xml:space',
          ]

          var SVGDOMPropertyConfig = {
            Properties: {
              autoReverse: HAS_STRING_BOOLEAN_VALUE$1,
              externalResourcesRequired: HAS_STRING_BOOLEAN_VALUE$1,
              preserveAlpha: HAS_STRING_BOOLEAN_VALUE$1,
            },
            DOMAttributeNames: {
              autoReverse: 'autoReverse',
              externalResourcesRequired: 'externalResourcesRequired',
              preserveAlpha: 'preserveAlpha',
            },
            DOMAttributeNamespaces: {
              xlinkActuate: NS.xlink,
              xlinkArcrole: NS.xlink,
              xlinkHref: NS.xlink,
              xlinkRole: NS.xlink,
              xlinkShow: NS.xlink,
              xlinkTitle: NS.xlink,
              xlinkType: NS.xlink,
              xmlBase: NS.xml,
              xmlLang: NS.xml,
              xmlSpace: NS.xml,
            },
          }

          var CAMELIZE = /[\-\:]([a-z])/g
          var capitalize = function(token) {
            return token[1].toUpperCase()
          }

          ATTRS.forEach(function(original) {
            var reactName = original.replace(CAMELIZE, capitalize)

            SVGDOMPropertyConfig.Properties[reactName] = 0
            SVGDOMPropertyConfig.DOMAttributeNames[reactName] = original
          })

          injection.injectDOMPropertyConfig(HTMLDOMPropertyConfig)
          injection.injectDOMPropertyConfig(SVGDOMPropertyConfig)

          var ReactErrorUtils = {
            // Used by Fiber to simulate a try-catch.
            _caughtError: null,
            _hasCaughtError: false,

            // Used by event system to capture/rethrow the first error.
            _rethrowError: null,
            _hasRethrowError: false,

            injection: {
              injectErrorUtils: function(injectedErrorUtils) {
                !(
                  typeof injectedErrorUtils.invokeGuardedCallback === 'function'
                )
                  ? invariant(
                      false,
                      'Injected invokeGuardedCallback() must be a function.'
                    )
                  : void 0
                invokeGuardedCallback = injectedErrorUtils.invokeGuardedCallback
              },
            },

            /**
             * Call a function while guarding against errors that happens within it.
             * Returns an error if it throws, otherwise null.
             *
             * In production, this is implemented using a try-catch. The reason we don't
             * use a try-catch directly is so that we can swap out a different
             * implementation in DEV mode.
             *
             * @param {String} name of the guard to use for logging or debugging
             * @param {Function} func The function to invoke
             * @param {*} context The context to use when calling the function
             * @param {...*} args Arguments for function
             */
            invokeGuardedCallback: function(
              name,
              func,
              context,
              a,
              b,
              c,
              d,
              e,
              f
            ) {
              invokeGuardedCallback.apply(ReactErrorUtils, arguments)
            },

            /**
             * Same as invokeGuardedCallback, but instead of returning an error, it stores
             * it in a global so it can be rethrown by `rethrowCaughtError` later.
             * TODO: See if _caughtError and _rethrowError can be unified.
             *
             * @param {String} name of the guard to use for logging or debugging
             * @param {Function} func The function to invoke
             * @param {*} context The context to use when calling the function
             * @param {...*} args Arguments for function
             */
            invokeGuardedCallbackAndCatchFirstError: function(
              name,
              func,
              context,
              a,
              b,
              c,
              d,
              e,
              f
            ) {
              ReactErrorUtils.invokeGuardedCallback.apply(this, arguments)
              if (ReactErrorUtils.hasCaughtError()) {
                var error = ReactErrorUtils.clearCaughtError()
                if (!ReactErrorUtils._hasRethrowError) {
                  ReactErrorUtils._hasRethrowError = true
                  ReactErrorUtils._rethrowError = error
                }
              }
            },

            /**
             * During execution of guarded functions we will capture the first error which
             * we will rethrow to be handled by the top level error handler.
             */
            rethrowCaughtError: function() {
              return rethrowCaughtError.apply(ReactErrorUtils, arguments)
            },

            hasCaughtError: function() {
              return ReactErrorUtils._hasCaughtError
            },

            clearCaughtError: function() {
              if (ReactErrorUtils._hasCaughtError) {
                var error = ReactErrorUtils._caughtError
                ReactErrorUtils._caughtError = null
                ReactErrorUtils._hasCaughtError = false
                return error
              } else {
                invariant(
                  false,
                  'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.'
                )
              }
            },
          }

          var invokeGuardedCallback = function(
            name,
            func,
            context,
            a,
            b,
            c,
            d,
            e,
            f
          ) {
            ReactErrorUtils._hasCaughtError = false
            ReactErrorUtils._caughtError = null
            var funcArgs = Array.prototype.slice.call(arguments, 3)
            try {
              func.apply(context, funcArgs)
            } catch (error) {
              ReactErrorUtils._caughtError = error
              ReactErrorUtils._hasCaughtError = true
            }
          }

          {
            // In DEV mode, we swap out invokeGuardedCallback for a special version
            // that plays more nicely with the browser's DevTools. The idea is to preserve
            // "Pause on exceptions" behavior. Because React wraps all user-provided
            // functions in invokeGuardedCallback, and the production version of
            // invokeGuardedCallback uses a try-catch, all user exceptions are treated
            // like caught exceptions, and the DevTools won't pause unless the developer
            // takes the extra step of enabling pause on caught exceptions. This is
            // untintuitive, though, because even though React has caught the error, from
            // the developer's perspective, the error is uncaught.
            //
            // To preserve the expected "Pause on exceptions" behavior, we don't use a
            // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
            // DOM node, and call the user-provided callback from inside an event handler
            // for that fake event. If the callback throws, the error is "captured" using
            // a global event handler. But because the error happens in a different
            // event loop context, it does not interrupt the normal program flow.
            // Effectively, this gives us try-catch behavior without actually using
            // try-catch. Neat!

            // Check that the browser supports the APIs we need to implement our special
            // DEV version of invokeGuardedCallback
            if (
              typeof window !== 'undefined' &&
              typeof window.dispatchEvent === 'function' &&
              typeof document !== 'undefined' &&
              typeof document.createEvent === 'function'
            ) {
              var fakeNode = document.createElement('react')

              var invokeGuardedCallbackDev = function(
                name,
                func,
                context,
                a,
                b,
                c,
                d,
                e,
                f
              ) {
                // Keeps track of whether the user-provided callback threw an error. We
                // set this to true at the beginning, then set it to false right after
                // calling the function. If the function errors, `didError` will never be
                // set to false. This strategy works even if the browser is flaky and
                // fails to call our global error handler, because it doesn't rely on
                // the error event at all.
                var didError = true

                // Create an event handler for our fake event. We will synchronously
                // dispatch our fake event using `dispatchEvent`. Inside the handler, we
                // call the user-provided callback.
                var funcArgs = Array.prototype.slice.call(arguments, 3)
                function callCallback() {
                  // We immediately remove the callback from event listeners so that
                  // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
                  // nested call would trigger the fake event handlers of any call higher
                  // in the stack.
                  fakeNode.removeEventListener(evtType, callCallback, false)
                  func.apply(context, funcArgs)
                  didError = false
                }

                // Create a global error event handler. We use this to capture the value
                // that was thrown. It's possible that this error handler will fire more
                // than once; for example, if non-React code also calls `dispatchEvent`
                // and a handler for that event throws. We should be resilient to most of
                // those cases. Even if our error event handler fires more than once, the
                // last error event is always used. If the callback actually does error,
                // we know that the last error event is the correct one, because it's not
                // possible for anything else to have happened in between our callback
                // erroring and the code that follows the `dispatchEvent` call below. If
                // the callback doesn't error, but the error event was fired, we know to
                // ignore it because `didError` will be false, as described above.
                var error = void 0
                // Use this to track whether the error event is ever called.
                var didSetError = false
                var isCrossOriginError = false

                function onError(event) {
                  error = event.error
                  didSetError = true
                  if (
                    error === null &&
                    event.colno === 0 &&
                    event.lineno === 0
                  ) {
                    isCrossOriginError = true
                  }
                }

                // Create a fake event type.
                var evtType = 'react-' + (name ? name : 'invokeguardedcallback')

                // Attach our event handlers
                window.addEventListener('error', onError)
                fakeNode.addEventListener(evtType, callCallback, false)

                // Synchronously dispatch our fake event. If the user-provided function
                // errors, it will trigger our global error handler.
                var evt = document.createEvent('Event')
                evt.initEvent(evtType, false, false)
                fakeNode.dispatchEvent(evt)

                if (didError) {
                  if (!didSetError) {
                    // The callback errored, but the error event never fired.
                    error = new Error(
                      'An error was thrown inside one of your components, but React ' +
                        "doesn't know what it was. This is likely due to browser " +
                        'flakiness. React does its best to preserve the "Pause on ' +
                        'exceptions" behavior of the DevTools, which requires some ' +
                        "DEV-mode only tricks. It's possible that these don't work in " +
                        'your browser. Try triggering the error in production mode, ' +
                        'or switching to a modern browser. If you suspect that this is ' +
                        'actually an issue with React, please file an issue.'
                    )
                  } else if (isCrossOriginError) {
                    error = new Error(
                      "A cross-origin error was thrown. React doesn't have access to " +
                        'the actual error object in development. ' +
                        'See https://fb.me/react-crossorigin-error for more information.'
                    )
                  }
                  ReactErrorUtils._hasCaughtError = true
                  ReactErrorUtils._caughtError = error
                } else {
                  ReactErrorUtils._hasCaughtError = false
                  ReactErrorUtils._caughtError = null
                }

                // Remove our event listeners
                window.removeEventListener('error', onError)
              }

              invokeGuardedCallback = invokeGuardedCallbackDev
            }
          }

          var rethrowCaughtError = function() {
            if (ReactErrorUtils._hasRethrowError) {
              var error = ReactErrorUtils._rethrowError
              ReactErrorUtils._rethrowError = null
              ReactErrorUtils._hasRethrowError = false
              throw error
            }
          }

          /**
           * Injectable ordering of event plugins.
           */
          var eventPluginOrder = null

          /**
           * Injectable mapping from names to event plugin modules.
           */
          var namesToPlugins = {}

          /**
           * Recomputes the plugin list using the injected plugins and plugin ordering.
           *
           * @private
           */
          function recomputePluginOrdering() {
            if (!eventPluginOrder) {
              // Wait until an `eventPluginOrder` is injected.
              return
            }
            for (var pluginName in namesToPlugins) {
              var pluginModule = namesToPlugins[pluginName]
              var pluginIndex = eventPluginOrder.indexOf(pluginName)
              !(pluginIndex > -1)
                ? invariant(
                    false,
                    'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.',
                    pluginName
                  )
                : void 0
              if (plugins[pluginIndex]) {
                continue
              }
              !pluginModule.extractEvents
                ? invariant(
                    false,
                    'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.',
                    pluginName
                  )
                : void 0
              plugins[pluginIndex] = pluginModule
              var publishedEvents = pluginModule.eventTypes
              for (var eventName in publishedEvents) {
                !publishEventForPlugin(
                  publishedEvents[eventName],
                  pluginModule,
                  eventName
                )
                  ? invariant(
                      false,
                      'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
                      eventName,
                      pluginName
                    )
                  : void 0
              }
            }
          }

          /**
           * Publishes an event so that it can be dispatched by the supplied plugin.
           *
           * @param {object} dispatchConfig Dispatch configuration for the event.
           * @param {object} PluginModule Plugin publishing the event.
           * @return {boolean} True if the event was successfully published.
           * @private
           */
          function publishEventForPlugin(
            dispatchConfig,
            pluginModule,
            eventName
          ) {
            !!eventNameDispatchConfigs.hasOwnProperty(eventName)
              ? invariant(
                  false,
                  'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.',
                  eventName
                )
              : void 0
            eventNameDispatchConfigs[eventName] = dispatchConfig

            var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames
            if (phasedRegistrationNames) {
              for (var phaseName in phasedRegistrationNames) {
                if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
                  var phasedRegistrationName =
                    phasedRegistrationNames[phaseName]
                  publishRegistrationName(
                    phasedRegistrationName,
                    pluginModule,
                    eventName
                  )
                }
              }
              return true
            } else if (dispatchConfig.registrationName) {
              publishRegistrationName(
                dispatchConfig.registrationName,
                pluginModule,
                eventName
              )
              return true
            }
            return false
          }

          /**
           * Publishes a registration name that is used to identify dispatched events.
           *
           * @param {string} registrationName Registration name to add.
           * @param {object} PluginModule Plugin publishing the event.
           * @private
           */
          function publishRegistrationName(
            registrationName,
            pluginModule,
            eventName
          ) {
            !!registrationNameModules[registrationName]
              ? invariant(
                  false,
                  'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.',
                  registrationName
                )
              : void 0
            registrationNameModules[registrationName] = pluginModule
            registrationNameDependencies[registrationName] =
              pluginModule.eventTypes[eventName].dependencies

            {
              var lowerCasedName = registrationName.toLowerCase()
              possibleRegistrationNames[lowerCasedName] = registrationName

              if (registrationName === 'onDoubleClick') {
                possibleRegistrationNames.ondblclick = registrationName
              }
            }
          }

          /**
           * Registers plugins so that they can extract and dispatch events.
           *
           * @see {EventPluginHub}
           */

          /**
           * Ordered list of injected plugins.
           */
          var plugins = []

          /**
           * Mapping from event name to dispatch config
           */
          var eventNameDispatchConfigs = {}

          /**
           * Mapping from registration name to plugin module
           */
          var registrationNameModules = {}

          /**
           * Mapping from registration name to event name
           */
          var registrationNameDependencies = {}

          /**
           * Mapping from lowercase registration names to the properly cased version,
           * used to warn in the case of missing event handlers. Available
           * only in true.
           * @type {Object}
           */
          var possibleRegistrationNames = {}
          // Trust the developer to only use possibleRegistrationNames in true

          /**
           * Injects an ordering of plugins (by plugin name). This allows the ordering
           * to be decoupled from injection of the actual plugins so that ordering is
           * always deterministic regardless of packaging, on-the-fly injection, etc.
           *
           * @param {array} InjectedEventPluginOrder
           * @internal
           * @see {EventPluginHub.injection.injectEventPluginOrder}
           */
          function injectEventPluginOrder(injectedEventPluginOrder) {
            !!eventPluginOrder
              ? invariant(
                  false,
                  'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.'
                )
              : void 0
            // Clone the ordering so it cannot be dynamically mutated.
            eventPluginOrder = Array.prototype.slice.call(
              injectedEventPluginOrder
            )
            recomputePluginOrdering()
          }

          /**
           * Injects plugins to be used by `EventPluginHub`. The plugin names must be
           * in the ordering injected by `injectEventPluginOrder`.
           *
           * Plugins can be injected as part of page initialization or on-the-fly.
           *
           * @param {object} injectedNamesToPlugins Map from names to plugin modules.
           * @internal
           * @see {EventPluginHub.injection.injectEventPluginsByName}
           */
          function injectEventPluginsByName(injectedNamesToPlugins) {
            var isOrderingDirty = false
            for (var pluginName in injectedNamesToPlugins) {
              if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
                continue
              }
              var pluginModule = injectedNamesToPlugins[pluginName]
              if (
                !namesToPlugins.hasOwnProperty(pluginName) ||
                namesToPlugins[pluginName] !== pluginModule
              ) {
                !!namesToPlugins[pluginName]
                  ? invariant(
                      false,
                      'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.',
                      pluginName
                    )
                  : void 0
                namesToPlugins[pluginName] = pluginModule
                isOrderingDirty = true
              }
            }
            if (isOrderingDirty) {
              recomputePluginOrdering()
            }
          }

          var EventPluginRegistry = Object.freeze({
            plugins: plugins,
            eventNameDispatchConfigs: eventNameDispatchConfigs,
            registrationNameModules: registrationNameModules,
            registrationNameDependencies: registrationNameDependencies,
            possibleRegistrationNames: possibleRegistrationNames,
            injectEventPluginOrder: injectEventPluginOrder,
            injectEventPluginsByName: injectEventPluginsByName,
          })

          var getFiberCurrentPropsFromNode = null
          var getInstanceFromNode = null
          var getNodeFromInstance = null

          var injection$2 = {
            injectComponentTree: function(Injected) {
              getFiberCurrentPropsFromNode =
                Injected.getFiberCurrentPropsFromNode
              getInstanceFromNode = Injected.getInstanceFromNode
              getNodeFromInstance = Injected.getNodeFromInstance

              {
                warning(
                  getNodeFromInstance && getInstanceFromNode,
                  'EventPluginUtils.injection.injectComponentTree(...): Injected ' +
                    'module is missing getNodeFromInstance or getInstanceFromNode.'
                )
              }
            },
          }

          var validateEventDispatches
          {
            validateEventDispatches = function(event) {
              var dispatchListeners = event._dispatchListeners
              var dispatchInstances = event._dispatchInstances

              var listenersIsArr = Array.isArray(dispatchListeners)
              var listenersLen = listenersIsArr
                ? dispatchListeners.length
                : dispatchListeners ? 1 : 0

              var instancesIsArr = Array.isArray(dispatchInstances)
              var instancesLen = instancesIsArr
                ? dispatchInstances.length
                : dispatchInstances ? 1 : 0

              warning(
                instancesIsArr === listenersIsArr &&
                  instancesLen === listenersLen,
                'EventPluginUtils: Invalid `event`.'
              )
            }
          }

          /**
           * Dispatch the event to the listener.
           * @param {SyntheticEvent} event SyntheticEvent to handle
           * @param {boolean} simulated If the event is simulated (changes exn behavior)
           * @param {function} listener Application-level callback
           * @param {*} inst Internal component instance
           */
          function executeDispatch(event, simulated, listener, inst) {
            var type = event.type || 'unknown-event'
            event.currentTarget = getNodeFromInstance(inst)
            ReactErrorUtils.invokeGuardedCallbackAndCatchFirstError(
              type,
              listener,
              undefined,
              event
            )
            event.currentTarget = null
          }

          /**
           * Standard/simple iteration through an event's collected dispatches.
           */
          function executeDispatchesInOrder(event, simulated) {
            var dispatchListeners = event._dispatchListeners
            var dispatchInstances = event._dispatchInstances
            {
              validateEventDispatches(event)
            }
            if (Array.isArray(dispatchListeners)) {
              for (var i = 0; i < dispatchListeners.length; i++) {
                if (event.isPropagationStopped()) {
                  break
                }
                // Listeners and Instances are two parallel arrays that are always in sync.
                executeDispatch(
                  event,
                  simulated,
                  dispatchListeners[i],
                  dispatchInstances[i]
                )
              }
            } else if (dispatchListeners) {
              executeDispatch(
                event,
                simulated,
                dispatchListeners,
                dispatchInstances
              )
            }
            event._dispatchListeners = null
            event._dispatchInstances = null
          }

          /**
           * @see executeDispatchesInOrderStopAtTrueImpl
           */

          /**
           * Execution of a "direct" dispatch - there must be at most one dispatch
           * accumulated on the event or it is considered an error. It doesn't really make
           * sense for an event with multiple dispatches (bubbled) to keep track of the
           * return values at each dispatch execution, but it does tend to make sense when
           * dealing with "direct" dispatches.
           *
           * @return {*} The return value of executing the single dispatch.
           */

          /**
           * @param {SyntheticEvent} event
           * @return {boolean} True iff number of dispatches accumulated is greater than 0.
           */

          /**
           * Accumulates items that must not be null or undefined into the first one. This
           * is used to conserve memory by avoiding array allocations, and thus sacrifices
           * API cleanness. Since `current` can be null before being passed in and not
           * null after this function, make sure to assign it back to `current`:
           *
           * `a = accumulateInto(a, b);`
           *
           * This API should be sparingly used. Try `accumulate` for something cleaner.
           *
           * @return {*|array<*>} An accumulation of items.
           */

          function accumulateInto(current, next) {
            !(next != null)
              ? invariant(
                  false,
                  'accumulateInto(...): Accumulated items must not be null or undefined.'
                )
              : void 0

            if (current == null) {
              return next
            }

            // Both are not empty. Warning: Never call x.concat(y) when you are not
            // certain that x is an Array (x could be a string with concat method).
            if (Array.isArray(current)) {
              if (Array.isArray(next)) {
                current.push.apply(current, next)
                return current
              }
              current.push(next)
              return current
            }

            if (Array.isArray(next)) {
              // A bit too dangerous to mutate `next`.
              return [current].concat(next)
            }

            return [current, next]
          }

          /**
           * @param {array} arr an "accumulation" of items which is either an Array or
           * a single item. Useful when paired with the `accumulate` module. This is a
           * simple utility that allows us to reason about a collection of items, but
           * handling the case when there is exactly one item (and we do not need to
           * allocate an array).
           * @param {function} cb Callback invoked with each element or a collection.
           * @param {?} [scope] Scope used as `this` in a callback.
           */
          function forEachAccumulated(arr, cb, scope) {
            if (Array.isArray(arr)) {
              arr.forEach(cb, scope)
            } else if (arr) {
              cb.call(scope, arr)
            }
          }

          /**
           * Internal queue of events that have accumulated their dispatches and are
           * waiting to have their dispatches executed.
           */
          var eventQueue = null

          /**
           * Dispatches an event and releases it back into the pool, unless persistent.
           *
           * @param {?object} event Synthetic event to be dispatched.
           * @param {boolean} simulated If the event is simulated (changes exn behavior)
           * @private
           */
          var executeDispatchesAndRelease = function(event, simulated) {
            if (event) {
              executeDispatchesInOrder(event, simulated)

              if (!event.isPersistent()) {
                event.constructor.release(event)
              }
            }
          }
          var executeDispatchesAndReleaseSimulated = function(e) {
            return executeDispatchesAndRelease(e, true)
          }
          var executeDispatchesAndReleaseTopLevel = function(e) {
            return executeDispatchesAndRelease(e, false)
          }

          function isInteractive(tag) {
            return (
              tag === 'button' ||
              tag === 'input' ||
              tag === 'select' ||
              tag === 'textarea'
            )
          }

          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case 'onClick':
              case 'onClickCapture':
              case 'onDoubleClick':
              case 'onDoubleClickCapture':
              case 'onMouseDown':
              case 'onMouseDownCapture':
              case 'onMouseMove':
              case 'onMouseMoveCapture':
              case 'onMouseUp':
              case 'onMouseUpCapture':
                return !!(props.disabled && isInteractive(type))
              default:
                return false
            }
          }

          /**
           * This is a unified interface for event plugins to be installed and configured.
           *
           * Event plugins can implement the following properties:
           *
           *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
           *     Required. When a top-level event is fired, this method is expected to
           *     extract synthetic events that will in turn be queued and dispatched.
           *
           *   `eventTypes` {object}
           *     Optional, plugins that fire events must publish a mapping of registration
           *     names that are used to register listeners. Values of this mapping must
           *     be objects that contain `registrationName` or `phasedRegistrationNames`.
           *
           *   `executeDispatch` {function(object, function, string)}
           *     Optional, allows plugins to override how an event gets dispatched. By
           *     default, the listener is simply invoked.
           *
           * Each plugin that is injected into `EventsPluginHub` is immediately operable.
           *
           * @public
           */

          /**
           * Methods for injecting dependencies.
           */
          var injection$1 = {
            /**
             * @param {array} InjectedEventPluginOrder
             * @public
             */
            injectEventPluginOrder: injectEventPluginOrder,

            /**
             * @param {object} injectedNamesToPlugins Map from names to plugin modules.
             */
            injectEventPluginsByName: injectEventPluginsByName,
          }

          /**
           * @param {object} inst The instance, which is the source of events.
           * @param {string} registrationName Name of listener (e.g. `onClick`).
           * @return {?function} The stored callback.
           */
          function getListener(inst, registrationName) {
            var listener

            // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
            // live here; needs to be moved to a better place soon
            var stateNode = inst.stateNode
            if (!stateNode) {
              // Work in progress (ex: onload events in incremental mode).
              return null
            }
            var props = getFiberCurrentPropsFromNode(stateNode)
            if (!props) {
              // Work in progress.
              return null
            }
            listener = props[registrationName]
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null
            }
            !(!listener || typeof listener === 'function')
              ? invariant(
                  false,
                  'Expected `%s` listener to be a function, instead got a value of `%s` type.',
                  registrationName,
                  typeof listener
                )
              : void 0
            return listener
          }

          /**
           * Allows registered plugins an opportunity to extract events from top-level
           * native browser events.
           *
           * @return {*} An accumulation of synthetic events.
           * @internal
           */
          function extractEvents(
            topLevelType,
            targetInst,
            nativeEvent,
            nativeEventTarget
          ) {
            var events
            for (var i = 0; i < plugins.length; i++) {
              // Not every plugin in the ordering may be loaded at runtime.
              var possiblePlugin = plugins[i]
              if (possiblePlugin) {
                var extractedEvents = possiblePlugin.extractEvents(
                  topLevelType,
                  targetInst,
                  nativeEvent,
                  nativeEventTarget
                )
                if (extractedEvents) {
                  events = accumulateInto(events, extractedEvents)
                }
              }
            }
            return events
          }

          /**
           * Enqueues a synthetic event that should be dispatched when
           * `processEventQueue` is invoked.
           *
           * @param {*} events An accumulation of synthetic events.
           * @internal
           */
          function enqueueEvents(events) {
            if (events) {
              eventQueue = accumulateInto(eventQueue, events)
            }
          }

          /**
           * Dispatches all synthetic events on the event queue.
           *
           * @internal
           */
          function processEventQueue(simulated) {
            // Set `eventQueue` to null before processing it so that we can tell if more
            // events get enqueued while processing.
            var processingEventQueue = eventQueue
            eventQueue = null

            if (!processingEventQueue) {
              return
            }

            if (simulated) {
              forEachAccumulated(
                processingEventQueue,
                executeDispatchesAndReleaseSimulated
              )
            } else {
              forEachAccumulated(
                processingEventQueue,
                executeDispatchesAndReleaseTopLevel
              )
            }
            !!eventQueue
              ? invariant(
                  false,
                  'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.'
                )
              : void 0
            // This would be a good time to rethrow if any of the event handlers threw.
            ReactErrorUtils.rethrowCaughtError()
          }

          var EventPluginHub = Object.freeze({
            injection: injection$1,
            getListener: getListener,
            extractEvents: extractEvents,
            enqueueEvents: enqueueEvents,
            processEventQueue: processEventQueue,
          })

          var IndeterminateComponent = 0 // Before we know whether it is functional or class
          var FunctionalComponent = 1
          var ClassComponent = 2
          var HostRoot = 3 // Root of a host tree. Could be nested inside another node.
          var HostPortal = 4 // A subtree. Could be an entry point to a different renderer.
          var HostComponent = 5
          var HostText = 6
          var CallComponent = 7
          var CallHandlerPhase = 8
          var ReturnComponent = 9
          var Fragment = 10

          var randomKey = Math.random()
            .toString(36)
            .slice(2)
          var internalInstanceKey = '__reactInternalInstance$' + randomKey
          var internalEventHandlersKey = '__reactEventHandlers$' + randomKey

          function precacheFiberNode$1(hostInst, node) {
            node[internalInstanceKey] = hostInst
          }

          /**
           * Given a DOM node, return the closest ReactDOMComponent or
           * ReactDOMTextComponent instance ancestor.
           */
          function getClosestInstanceFromNode(node) {
            if (node[internalInstanceKey]) {
              return node[internalInstanceKey]
            }

            // Walk up the tree until we find an ancestor whose instance we have cached.
            var parents = []
            while (!node[internalInstanceKey]) {
              parents.push(node)
              if (node.parentNode) {
                node = node.parentNode
              } else {
                // Top of the tree. This node must not be part of a React tree (or is
                // unmounted, potentially).
                return null
              }
            }

            var closest = void 0
            var inst = node[internalInstanceKey]
            if (inst.tag === HostComponent || inst.tag === HostText) {
              // In Fiber, this will always be the deepest root.
              return inst
            }
            for (
              ;
              node && (inst = node[internalInstanceKey]);
              node = parents.pop()
            ) {
              closest = inst
            }

            return closest
          }

          /**
           * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
           * instance, or null if the node was not rendered by this React.
           */
          function getInstanceFromNode$1(node) {
            var inst = node[internalInstanceKey]
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText) {
                return inst
              } else {
                return null
              }
            }
            return null
          }

          /**
           * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
           * DOM node.
           */
          function getNodeFromInstance$1(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              // In Fiber this, is just the state node right now. We assume it will be
              // a host component or host text.
              return inst.stateNode
            }

            // Without this first invariant, passing a non-DOM-component triggers the next
            // invariant for a missing parent, which is super confusing.
            invariant(false, 'getNodeFromInstance: Invalid argument.')
          }

          function getFiberCurrentPropsFromNode$1(node) {
            return node[internalEventHandlersKey] || null
          }

          function updateFiberProps$1(node, props) {
            node[internalEventHandlersKey] = props
          }

          var ReactDOMComponentTree = Object.freeze({
            precacheFiberNode: precacheFiberNode$1,
            getClosestInstanceFromNode: getClosestInstanceFromNode,
            getInstanceFromNode: getInstanceFromNode$1,
            getNodeFromInstance: getNodeFromInstance$1,
            getFiberCurrentPropsFromNode: getFiberCurrentPropsFromNode$1,
            updateFiberProps: updateFiberProps$1,
          })

          function getParent(inst) {
            do {
              inst = inst['return']
              // TODO: If this is a HostRoot we might want to bail out.
              // That is depending on if we want nested subtrees (layers) to bubble
              // events to their parent. We could also go through parentNode on the
              // host node but that wouldn't work for React Native and doesn't let us
              // do the portal feature.
            } while (inst && inst.tag !== HostComponent)
            if (inst) {
              return inst
            }
            return null
          }

          /**
           * Return the lowest common ancestor of A and B, or null if they are in
           * different trees.
           */
          function getLowestCommonAncestor(instA, instB) {
            var depthA = 0
            for (var tempA = instA; tempA; tempA = getParent(tempA)) {
              depthA++
            }
            var depthB = 0
            for (var tempB = instB; tempB; tempB = getParent(tempB)) {
              depthB++
            }

            // If A is deeper, crawl up.
            while (depthA - depthB > 0) {
              instA = getParent(instA)
              depthA--
            }

            // If B is deeper, crawl up.
            while (depthB - depthA > 0) {
              instB = getParent(instB)
              depthB--
            }

            // Walk in lockstep until we find a match.
            var depth = depthA
            while (depth--) {
              if (instA === instB || instA === instB.alternate) {
                return instA
              }
              instA = getParent(instA)
              instB = getParent(instB)
            }
            return null
          }

          /**
           * Return if A is an ancestor of B.
           */

          /**
           * Return the parent instance of the passed-in instance.
           */
          function getParentInstance(inst) {
            return getParent(inst)
          }

          /**
           * Simulates the traversal of a two-phase, capture/bubble event dispatch.
           */
          function traverseTwoPhase(inst, fn, arg) {
            var path = []
            while (inst) {
              path.push(inst)
              inst = getParent(inst)
            }
            var i
            for (i = path.length; i-- > 0; ) {
              fn(path[i], 'captured', arg)
            }
            for (i = 0; i < path.length; i++) {
              fn(path[i], 'bubbled', arg)
            }
          }

          /**
           * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
           * should would receive a `mouseEnter` or `mouseLeave` event.
           *
           * Does not invoke the callback on the nearest common ancestor because nothing
           * "entered" or "left" that element.
           */
          function traverseEnterLeave(from, to, fn, argFrom, argTo) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null
            var pathFrom = []
            while (true) {
              if (!from) {
                break
              }
              if (from === common) {
                break
              }
              var alternate = from.alternate
              if (alternate !== null && alternate === common) {
                break
              }
              pathFrom.push(from)
              from = getParent(from)
            }
            var pathTo = []
            while (true) {
              if (!to) {
                break
              }
              if (to === common) {
                break
              }
              var _alternate = to.alternate
              if (_alternate !== null && _alternate === common) {
                break
              }
              pathTo.push(to)
              to = getParent(to)
            }
            for (var i = 0; i < pathFrom.length; i++) {
              fn(pathFrom[i], 'bubbled', argFrom)
            }
            for (var _i = pathTo.length; _i-- > 0; ) {
              fn(pathTo[_i], 'captured', argTo)
            }
          }

          /**
           * Some event types have a notion of different registration names for different
           * "phases" of propagation. This finds listeners by a given phase.
           */
          function listenerAtPhase(inst, event, propagationPhase) {
            var registrationName =
              event.dispatchConfig.phasedRegistrationNames[propagationPhase]
            return getListener(inst, registrationName)
          }

          /**
           * A small set of propagation patterns, each of which will accept a small amount
           * of information, and generate a set of "dispatch ready event objects" - which
           * are sets of events that have already been annotated with a set of dispatched
           * listener functions/ids. The API is designed this way to discourage these
           * propagation strategies from actually executing the dispatches, since we
           * always want to collect the entire set of dispatches before executing even a
           * single one.
           */

          /**
           * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
           * here, allows us to not have to bind or create functions for each event.
           * Mutating the event's members allows us to not have to create a wrapping
           * "dispatch" object that pairs the event with the listener.
           */
          function accumulateDirectionalDispatches(inst, phase, event) {
            {
              warning(inst, 'Dispatching inst must not be null')
            }
            var listener = listenerAtPhase(inst, event, phase)
            if (listener) {
              event._dispatchListeners = accumulateInto(
                event._dispatchListeners,
                listener
              )
              event._dispatchInstances = accumulateInto(
                event._dispatchInstances,
                inst
              )
            }
          }

          /**
           * Collect dispatches (must be entirely collected before dispatching - see unit
           * tests). Lazily allocate the array to conserve memory.  We must loop through
           * each event and perform the traversal for each one. We cannot perform a
           * single traversal for the entire collection of events because each event may
           * have a different target.
           */
          function accumulateTwoPhaseDispatchesSingle(event) {
            if (event && event.dispatchConfig.phasedRegistrationNames) {
              traverseTwoPhase(
                event._targetInst,
                accumulateDirectionalDispatches,
                event
              )
            }
          }

          /**
           * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
           */
          function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
            if (event && event.dispatchConfig.phasedRegistrationNames) {
              var targetInst = event._targetInst
              var parentInst = targetInst ? getParentInstance(targetInst) : null
              traverseTwoPhase(
                parentInst,
                accumulateDirectionalDispatches,
                event
              )
            }
          }

          /**
           * Accumulates without regard to direction, does not look for phased
           * registration names. Same as `accumulateDirectDispatchesSingle` but without
           * requiring that the `dispatchMarker` be the same as the dispatched ID.
           */
          function accumulateDispatches(inst, ignoredDirection, event) {
            if (inst && event && event.dispatchConfig.registrationName) {
              var registrationName = event.dispatchConfig.registrationName
              var listener = getListener(inst, registrationName)
              if (listener) {
                event._dispatchListeners = accumulateInto(
                  event._dispatchListeners,
                  listener
                )
                event._dispatchInstances = accumulateInto(
                  event._dispatchInstances,
                  inst
                )
              }
            }
          }

          /**
           * Accumulates dispatches on an `SyntheticEvent`, but only for the
           * `dispatchMarker`.
           * @param {SyntheticEvent} event
           */
          function accumulateDirectDispatchesSingle(event) {
            if (event && event.dispatchConfig.registrationName) {
              accumulateDispatches(event._targetInst, null, event)
            }
          }

          function accumulateTwoPhaseDispatches(events) {
            forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle)
          }

          function accumulateTwoPhaseDispatchesSkipTarget(events) {
            forEachAccumulated(
              events,
              accumulateTwoPhaseDispatchesSingleSkipTarget
            )
          }

          function accumulateEnterLeaveDispatches(leave, enter, from, to) {
            traverseEnterLeave(from, to, accumulateDispatches, leave, enter)
          }

          function accumulateDirectDispatches(events) {
            forEachAccumulated(events, accumulateDirectDispatchesSingle)
          }

          var EventPropagators = Object.freeze({
            accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
            accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
            accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches,
            accumulateDirectDispatches: accumulateDirectDispatches,
          })

          var contentKey = null

          /**
           * Gets the key used to access text content on a DOM node.
           *
           * @return {?string} Key used to access text content.
           * @internal
           */
          function getTextContentAccessor() {
            if (!contentKey && ExecutionEnvironment.canUseDOM) {
              // Prefer textContent to innerText because many browsers support both but
              // SVG <text> elements don't support innerText even when <div> does.
              contentKey =
                'textContent' in document.documentElement
                  ? 'textContent'
                  : 'innerText'
            }
            return contentKey
          }

          /**
           * This helper object stores information about text content of a target node,
           * allowing comparison of content before and after a given event.
           *
           * Identify the node where selection currently begins, then observe
           * both its text content and its current position in the DOM. Since the
           * browser may natively replace the target node during composition, we can
           * use its position to find its replacement.
           *
           *
           */
          var compositionState = {
            _root: null,
            _startText: null,
            _fallbackText: null,
          }

          function initialize(nativeEventTarget) {
            compositionState._root = nativeEventTarget
            compositionState._startText = getText()
            return true
          }

          function reset() {
            compositionState._root = null
            compositionState._startText = null
            compositionState._fallbackText = null
          }

          function getData() {
            if (compositionState._fallbackText) {
              return compositionState._fallbackText
            }

            var start
            var startValue = compositionState._startText
            var startLength = startValue.length
            var end
            var endValue = getText()
            var endLength = endValue.length

            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break
              }
            }

            var minEnd = startLength - start
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break
              }
            }

            var sliceTail = end > 1 ? 1 - end : undefined
            compositionState._fallbackText = endValue.slice(start, sliceTail)
            return compositionState._fallbackText
          }

          function getText() {
            if ('value' in compositionState._root) {
              return compositionState._root.value
            }
            return compositionState._root[getTextContentAccessor()]
          }

          /* eslint valid-typeof: 0 */

          var didWarnForAddedNewProperty = false
          var isProxySupported = typeof Proxy === 'function'
          var EVENT_POOL_SIZE = 10

          var shouldBeReleasedProperties = [
            'dispatchConfig',
            '_targetInst',
            'nativeEvent',
            'isDefaultPrevented',
            'isPropagationStopped',
            '_dispatchListeners',
            '_dispatchInstances',
          ]

          /**
           * @interface Event
           * @see http://www.w3.org/TR/DOM-Level-3-Events/
           */
          var EventInterface = {
            type: null,
            target: null,
            // currentTarget is set when dispatching; no use in copying it here
            currentTarget: emptyFunction.thatReturnsNull,
            eventPhase: null,
            bubbles: null,
            cancelable: null,
            timeStamp: function(event) {
              return event.timeStamp || Date.now()
            },
            defaultPrevented: null,
            isTrusted: null,
          }

          /**
           * Synthetic events are dispatched by event plugins, typically in response to a
           * top-level event delegation handler.
           *
           * These systems should generally use pooling to reduce the frequency of garbage
           * collection. The system should check `isPersistent` to determine whether the
           * event should be released into the pool after being dispatched. Users that
           * need a persisted event should invoke `persist`.
           *
           * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
           * normalizing browser quirks. Subclasses do not necessarily have to implement a
           * DOM interface; custom application-specific events can also subclass this.
           *
           * @param {object} dispatchConfig Configuration used to dispatch this event.
           * @param {*} targetInst Marker identifying the event target.
           * @param {object} nativeEvent Native browser event.
           * @param {DOMEventTarget} nativeEventTarget Target node.
           */
          function SyntheticEvent(
            dispatchConfig,
            targetInst,
            nativeEvent,
            nativeEventTarget
          ) {
            {
              // these have a getter/setter for warnings
              delete this.nativeEvent
              delete this.preventDefault
              delete this.stopPropagation
            }

            this.dispatchConfig = dispatchConfig
            this._targetInst = targetInst
            this.nativeEvent = nativeEvent

            var Interface = this.constructor.Interface
            for (var propName in Interface) {
              if (!Interface.hasOwnProperty(propName)) {
                continue
              }
              {
                delete this[propName] // this has a getter/setter for warnings
              }
              var normalize = Interface[propName]
              if (normalize) {
                this[propName] = normalize(nativeEvent)
              } else {
                if (propName === 'target') {
                  this.target = nativeEventTarget
                } else {
                  this[propName] = nativeEvent[propName]
                }
              }
            }

            var defaultPrevented =
              nativeEvent.defaultPrevented != null
                ? nativeEvent.defaultPrevented
                : nativeEvent.returnValue === false
            if (defaultPrevented) {
              this.isDefaultPrevented = emptyFunction.thatReturnsTrue
            } else {
              this.isDefaultPrevented = emptyFunction.thatReturnsFalse
            }
            this.isPropagationStopped = emptyFunction.thatReturnsFalse
            return this
          }

          _assign(SyntheticEvent.prototype, {
            preventDefault: function() {
              this.defaultPrevented = true
              var event = this.nativeEvent
              if (!event) {
                return
              }

              if (event.preventDefault) {
                event.preventDefault()
              } else if (typeof event.returnValue !== 'unknown') {
                event.returnValue = false
              }
              this.isDefaultPrevented = emptyFunction.thatReturnsTrue
            },

            stopPropagation: function() {
              var event = this.nativeEvent
              if (!event) {
                return
              }

              if (event.stopPropagation) {
                event.stopPropagation()
              } else if (typeof event.cancelBubble !== 'unknown') {
                // The ChangeEventPlugin registers a "propertychange" event for
                // IE. This event does not support bubbling or cancelling, and
                // any references to cancelBubble throw "Member not found".  A
                // typeof check of "unknown" circumvents this issue (and is also
                // IE specific).
                event.cancelBubble = true
              }

              this.isPropagationStopped = emptyFunction.thatReturnsTrue
            },

            /**
             * We release all dispatched `SyntheticEvent`s after each event loop, adding
             * them back into the pool. This allows a way to hold onto a reference that
             * won't be added back into the pool.
             */
            persist: function() {
              this.isPersistent = emptyFunction.thatReturnsTrue
            },

            /**
             * Checks if this event should be released back into the pool.
             *
             * @return {boolean} True if this should not be released, false otherwise.
             */
            isPersistent: emptyFunction.thatReturnsFalse,

            /**
             * `PooledClass` looks for `destructor` on each instance it releases.
             */
            destructor: function() {
              var Interface = this.constructor.Interface
              for (var propName in Interface) {
                {
                  Object.defineProperty(
                    this,
                    propName,
                    getPooledWarningPropertyDefinition(
                      propName,
                      Interface[propName]
                    )
                  )
                }
              }
              for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
                this[shouldBeReleasedProperties[i]] = null
              }
              {
                Object.defineProperty(
                  this,
                  'nativeEvent',
                  getPooledWarningPropertyDefinition('nativeEvent', null)
                )
                Object.defineProperty(
                  this,
                  'preventDefault',
                  getPooledWarningPropertyDefinition(
                    'preventDefault',
                    emptyFunction
                  )
                )
                Object.defineProperty(
                  this,
                  'stopPropagation',
                  getPooledWarningPropertyDefinition(
                    'stopPropagation',
                    emptyFunction
                  )
                )
              }
            },
          })

          SyntheticEvent.Interface = EventInterface

          /**
           * Helper to reduce boilerplate when creating subclasses.
           *
           * @param {function} Class
           * @param {?object} Interface
           */
          SyntheticEvent.augmentClass = function(Class, Interface) {
            var Super = this

            var E = function() {}
            E.prototype = Super.prototype
            var prototype = new E()

            _assign(prototype, Class.prototype)
            Class.prototype = prototype
            Class.prototype.constructor = Class

            Class.Interface = _assign({}, Super.Interface, Interface)
            Class.augmentClass = Super.augmentClass
            addEventPoolingTo(Class)
          }

          /** Proxying after everything set on SyntheticEvent
           * to resolve Proxy issue on some WebKit browsers
           * in which some Event properties are set to undefined (GH#10010)
           */
          {
            if (isProxySupported) {
              /*eslint-disable no-func-assign */
              SyntheticEvent = new Proxy(SyntheticEvent, {
                construct: function(target, args) {
                  return this.apply(
                    target,
                    Object.create(target.prototype),
                    args
                  )
                },
                apply: function(constructor, that, args) {
                  return new Proxy(constructor.apply(that, args), {
                    set: function(target, prop, value) {
                      if (
                        prop !== 'isPersistent' &&
                        !target.constructor.Interface.hasOwnProperty(prop) &&
                        shouldBeReleasedProperties.indexOf(prop) === -1
                      ) {
                        warning(
                          didWarnForAddedNewProperty || target.isPersistent(),
                          "This synthetic event is reused for performance reasons. If you're " +
                            "seeing this, you're adding a new property in the synthetic event object. " +
                            'The property is never released. See ' +
                            'https://fb.me/react-event-pooling for more information.'
                        )
                        didWarnForAddedNewProperty = true
                      }
                      target[prop] = value
                      return true
                    },
                  })
                },
              })
              /*eslint-enable no-func-assign */
            }
          }

          addEventPoolingTo(SyntheticEvent)

          /**
           * Helper to nullify syntheticEvent instance properties when destructing
           *
           * @param {String} propName
           * @param {?object} getVal
           * @return {object} defineProperty object
           */
          function getPooledWarningPropertyDefinition(propName, getVal) {
            var isFunction = typeof getVal === 'function'
            return {
              configurable: true,
              set: set,
              get: get,
            }

            function set(val) {
              var action = isFunction
                ? 'setting the method'
                : 'setting the property'
              warn(action, 'This is effectively a no-op')
              return val
            }

            function get() {
              var action = isFunction
                ? 'accessing the method'
                : 'accessing the property'
              var result = isFunction
                ? 'This is a no-op function'
                : 'This is set to null'
              warn(action, result)
              return getVal
            }

            function warn(action, result) {
              var warningCondition = false
              warning(
                warningCondition,
                "This synthetic event is reused for performance reasons. If you're seeing this, " +
                  "you're %s `%s` on a released/nullified synthetic event. %s. " +
                  'If you must keep the original synthetic event around, use event.persist(). ' +
                  'See https://fb.me/react-event-pooling for more information.',
                action,
                propName,
                result
              )
            }
          }

          function getPooledEvent(
            dispatchConfig,
            targetInst,
            nativeEvent,
            nativeInst
          ) {
            var EventConstructor = this
            if (EventConstructor.eventPool.length) {
              var instance = EventConstructor.eventPool.pop()
              EventConstructor.call(
                instance,
                dispatchConfig,
                targetInst,
                nativeEvent,
                nativeInst
              )
              return instance
            }
            return new EventConstructor(
              dispatchConfig,
              targetInst,
              nativeEvent,
              nativeInst
            )
          }

          function releasePooledEvent(event) {
            var EventConstructor = this
            !(event instanceof EventConstructor)
              ? invariant(
                  false,
                  'Trying to release an event instance  into a pool of a different type.'
                )
              : void 0
            event.destructor()
            if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
              EventConstructor.eventPool.push(event)
            }
          }

          function addEventPoolingTo(EventConstructor) {
            EventConstructor.eventPool = []
            EventConstructor.getPooled = getPooledEvent
            EventConstructor.release = releasePooledEvent
          }

          var SyntheticEvent$1 = SyntheticEvent

          /**
           * @interface Event
           * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
           */
          var CompositionEventInterface = {
            data: null,
          }

          /**
           * @param {object} dispatchConfig Configuration used to dispatch this event.
           * @param {string} dispatchMarker Marker identifying the event target.
           * @param {object} nativeEvent Native browser event.
           * @extends {SyntheticEvent}
           */
          function SyntheticCompositionEvent(
            dispatchConfig,
            dispatchMarker,
            nativeEvent,
            nativeEventTarget
          ) {
            return SyntheticEvent$1.call(
              this,
              dispatchConfig,
              dispatchMarker,
              nativeEvent,
              nativeEventTarget
            )
          }

          SyntheticEvent$1.augmentClass(
            SyntheticCompositionEvent,
            CompositionEventInterface
          )

          /**
           * @interface Event
           * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
           *      /#events-inputevents
           */
          var InputEventInterface = {
            data: null,
          }

          /**
           * @param {object} dispatchConfig Configuration used to dispatch this event.
           * @param {string} dispatchMarker Marker identifying the event target.
           * @param {object} nativeEvent Native browser event.
           * @extends {SyntheticEvent}
           */
          function SyntheticInputEvent(
            dispatchConfig,
            dispatchMarker,
            nativeEvent,
            nativeEventTarget
          ) {
            return SyntheticEvent$1.call(
              this,
              dispatchConfig,
              dispatchMarker,
              nativeEvent,
              nativeEventTarget
            )
          }

          SyntheticEvent$1.augmentClass(
            SyntheticInputEvent,
            InputEventInterface
          )

          var END_KEYCODES = [9, 13, 27, 32] // Tab, Return, Esc, Space
          var START_KEYCODE = 229

          var canUseCompositionEvent =
            ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window

          var documentMode = null
          if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
            documentMode = document.documentMode
          }

          // Webkit offers a very useful `textInput` event that can be used to
          // directly represent `beforeInput`. The IE `textinput` event is not as
          // useful, so we don't use it.
          var canUseTextInputEvent =
            ExecutionEnvironment.canUseDOM &&
            'TextEvent' in window &&
            !documentMode &&
            !isPresto()

          // In IE9+, we have access to composition events, but the data supplied
          // by the native compositionend event may be incorrect. Japanese ideographic
          // spaces, for instance (\u3000) are not recorded correctly.
          var useFallbackCompositionData =
            ExecutionEnvironment.canUseDOM &&
            (!canUseCompositionEvent ||
              (documentMode && documentMode > 8 && documentMode <= 11))

          /**
           * Opera <= 12 includes TextEvent in window, but does not fire
           * text input events. Rely on keypress instead.
           */
          function isPresto() {
            var opera = window.opera
            return (
              typeof opera === 'object' &&
              typeof opera.version === 'function' &&
              parseInt(opera.version(), 10) <= 12
            )
          }

          var SPACEBAR_CODE = 32
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE)

          // Events and their corresponding property names.
          var eventTypes = {
            beforeInput: {
              phasedRegistrationNames: {
                bubbled: 'onBeforeInput',
                captured: 'onBeforeInputCapture',
              },
              dependencies: [
                'topCompositionEnd',
                'topKeyPress',
                'topTextInput',
                'topPaste',
              ],
            },
            compositionEnd: {
              phasedRegistrationNames: {
                bubbled: 'onCompositionEnd',
                captured: 'onCompositionEndCapture',
              },
              dependencies: [
                'topBlur',
                'topCompositionEnd',
                'topKeyDown',
                'topKeyPress',
                'topKeyUp',
                'topMouseDown',
              ],
            },
            compositionStart: {
              phasedRegistrationNames: {
                bubbled: 'onCompositionStart',
                captured: 'onCompositionStartCapture',
              },
              dependencies: [
                'topBlur',
                'topCompositionStart',
                'topKeyDown',
                'topKeyPress',
                'topKeyUp',
                'topMouseDown',
              ],
            },
            compositionUpdate: {
              phasedRegistrationNames: {
                bubbled: 'onCompositionUpdate',
                captured: 'onCompositionUpdateCapture',
              },
              dependencies: [
                'topBlur',
                'topCompositionUpdate',
                'topKeyDown',
                'topKeyPress',
                'topKeyUp',
                'topMouseDown',
              ],
            },
          }

          // Track whether we've ever handled a keypress on the space key.
          var hasSpaceKeypress = false

          /**
           * Return whether a native keypress event is assumed to be a command.
           * This is required because Firefox fires `keypress` events for key commands
           * (cut, copy, select-all, etc.) even though no character is inserted.
           */
          function isKeypressCommand(nativeEvent) {
            return (
              (nativeEvent.ctrlKey ||
                nativeEvent.altKey ||
                nativeEvent.metaKey) &&
              // ctrlKey && altKey is equivalent to AltGr, and is not a command.
              !(nativeEvent.ctrlKey && nativeEvent.altKey)
            )
          }

          /**
           * Translate native top level events into event types.
           *
           * @param {string} topLevelType
           * @return {object}
           */
          function getCompositionEventType(topLevelType) {
            switch (topLevelType) {
              case 'topCompositionStart':
                return eventTypes.compositionStart
              case 'topCompositionEnd':
                return eventTypes.compositionEnd
              case 'topCompositionUpdate':
                return eventTypes.compositionUpdate
            }
          }

          /**
           * Does our fallback best-guess model think this event signifies that
           * composition has begun?
           *
           * @param {string} topLevelType
           * @param {object} nativeEvent
           * @return {boolean}
           */
          function isFallbackCompositionStart(topLevelType, nativeEvent) {
            return (
              topLevelType === 'topKeyDown' &&
              nativeEvent.keyCode === START_KEYCODE
            )
          }

          /**
           * Does our fallback mode think that this event is the end of composition?
           *
           * @param {string} topLevelType
           * @param {object} nativeEvent
           * @return {boolean}
           */
          function isFallbackCompositionEnd(topLevelType, nativeEvent) {
            switch (topLevelType) {
              case 'topKeyUp':
                // Command keys insert or clear IME input.
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1
              case 'topKeyDown':
                // Expect IME keyCode on each keydown. If we get any other
                // code we must have exited earlier.
                return nativeEvent.keyCode !== START_KEYCODE
              case 'topKeyPress':
              case 'topMouseDown':
              case 'topBlur':
                // Events are not possible without cancelling IME.
                return true
              default:
                return false
            }
          }

          /**
           * Google Input Tools provides composition data via a CustomEvent,
           * with the `data` property populated in the `detail` object. If this
           * is available on the event object, use it. If not, this is a plain
           * composition event and we have nothing special to extract.
           *
           * @param {object} nativeEvent
           * @return {?string}
           */
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail
            if (typeof detail === 'object' && 'data' in detail) {
              return detail.data
            }
            return null
          }

          // Track the current IME composition status, if any.
          var isComposing = false

          /**
           * @return {?object} A SyntheticCompositionEvent.
           */
          function extractCompositionEvent(
            topLevelType,
            targetInst,
            nativeEvent,
            nativeEventTarget
          ) {
            var eventType
            var fallbackData

            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(topLevelType)
            } else if (!isComposing) {
              if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
                eventType = eventTypes.compositionStart
              }
            } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
              eventType = eventTypes.compositionEnd
            }

            if (!eventType) {
              return null
            }

            if (useFallbackCompositionData) {
              // The current composition is stored statically and must not be
              // overwritten while composition continues.
              if (!isComposing && eventType === eventTypes.compositionStart) {
                isComposing = initialize(nativeEventTarget)
              } else if (eventType === eventTypes.compositionEnd) {
                if (isComposing) {
                  fallbackData = getData()
                }
              }
            }

            var event = SyntheticCompositionEvent.getPooled(
              eventType,
              targetInst,
              nativeEvent,
              nativeEventTarget
            )

            if (fallbackData) {
              // Inject data generated from fallback path into the synthetic event.
              // This matches the property of native CompositionEventInterface.
              event.data = fallbackData
            } else {
              var customData = getDataFromCustomEvent(nativeEvent)
              if (customData !== null) {
                event.data = customData
              }
            }

            accumulateTwoPhaseDispatches(event)
            return event
          }

          /**
           * @param {TopLevelTypes} topLevelType Record from `BrowserEventConstants`.
           * @param {object} nativeEvent Native browser event.
           * @return {?string} The string corresponding to this `beforeInput` event.
           */
          function getNativeBeforeInputChars(topLevelType, nativeEvent) {
            switch (topLevelType) {
              case 'topCompositionEnd':
                return getDataFromCustomEvent(nativeEvent)
              case 'topKeyPress':
                /**
                 * If native `textInput` events are available, our goal is to make
                 * use of them. However, there is a special case: the spacebar key.
                 * In Webkit, preventing default on a spacebar `textInput` event
                 * cancels character insertion, but it *also* causes the browser
                 * to fall back to its default spacebar behavior of scrolling the
                 * page.
                 *
                 * Tracking at:
                 * https://code.google.com/p/chromium/issues/detail?id=355103
                 *
                 * To avoid this issue, use the keypress event as if no `textInput`
                 * event is available.
                 */
                var which = nativeEvent.which
                if (which !== SPACEBAR_CODE) {
                  return null
                }

                hasSpaceKeypress = true
                return SPACEBAR_CHAR

              case 'topTextInput':
                // Record the characters to be added to the DOM.
                var chars = nativeEvent.data

                // If it's a spacebar character, assume that we have already handled
                // it at the keypress level and bail immediately. Android Chrome
                // doesn't give us keycodes, so we need to blacklist it.
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null
                }

                return chars

              default:
                // For other native event types, do nothing.
                return null
            }
          }

          /**
           * For browsers that do not provide the `textInput` event, extract the
           * appropriate string to use for SyntheticInputEvent.
           *
           * @param {string} topLevelType Record from `BrowserEventConstants`.
           * @param {object} nativeEvent Native browser event.
           * @return {?string} The fallback string for this `beforeInput` event.
           */
          function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
            // If we are currently composing (IME) and using a fallback to do so,
            // try to extract the composed characters from the fallback object.
            // If composition event is available, we extract a string only at
            // compositionevent, otherwise extract it at fallback events.
            if (isComposing) {
              if (
                topLevelType === 'topCompositionEnd' ||
                (!canUseCompositionEvent &&
                  isFallbackCompositionEnd(topLevelType, nativeEvent))
              ) {
                var chars = getData()
                reset()
                isComposing = false
                return chars
              }
              return null
            }

            switch (topLevelType) {
              case 'topPaste':
                // If a paste event occurs after a keypress, throw out the input
                // chars. Paste events should not lead to BeforeInput events.
                return null
              case 'topKeyPress':
                /**
                 * As of v27, Firefox may fire keypress events even when no character
                 * will be inserted. A few possibilities:
                 *
                 * - `which` is `0`. Arrow keys, Esc key, etc.
                 *
                 * - `which` is the pressed key code, but no char is available.
                 *   Ex: 'AltGr + d` in Polish. There is no modified character for
                 *   this key combination and no character is inserted into the
                 *   document, but FF fires the keypress for char code `100` anyway.
                 *   No `input` event will occur.
                 *
                 * - `which` is the pressed key code, but a command combination is
                 *   being used. Ex: `Cmd+C`. No character is inserted, and no
                 *   `input` event will occur.
                 */
                if (!isKeypressCommand(nativeEvent)) {
                  // IE fires the `keypress` event when a user types an emoji via
                  // Touch keyboard of Windows.  In such a case, the `char` property
                  // holds an emoji character like `\uD83D\uDE0A`.  Because its length
                  // is 2, the property `which` does not represent an emoji correctly.
                  // In such a case, we directly return the `char` property instead of
                  // using `which`.
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which)
                  }
                }
                return null
              case 'topCompositionEnd':
                return useFallbackCompositionData ? null : nativeEvent.data
              default:
                return null
            }
          }

          /**
           * Extract a SyntheticInputEvent for `beforeInput`, based on either native
           * `textInput` or fallback behavior.
           *
           * @return {?object} A SyntheticInputEvent.
           */
          function extractBeforeInputEvent(
            topLevelType,
            targetInst,
            nativeEvent,
            nativeEventTarget
          ) {
            var chars

            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(topLevelType, nativeEvent)
            } else {
              chars = getFallbackBeforeInputChars(topLevelType, nativeEvent)
            }

            // If no characters are being inserted, no BeforeInput event should
            // be fired.
            if (!chars) {
              return null
            }

            var event = SyntheticInputEvent.getPooled(
              eventTypes.beforeInput,
              targetInst,
              nativeEvent,
              nativeEventTarget
            )

            event.data = chars
            accumulateTwoPhaseDispatches(event)
            return event
          }

          /**
           * Create an `onBeforeInput` event to match
           * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
           *
           * This event plugin is based on the native `textInput` event
           * available in Chrome, Safari, Opera, and IE. This event fires after
           * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
           *
           * `beforeInput` is spec'd but not implemented in any browsers, and
           * the `input` event does not provide any useful information about what has
           * actually been added, contrary to the spec. Thus, `textInput` is the best
           * available event to identify the characters that have actually been inserted
           * into the target node.
           *
           * This plugin is also responsible for emitting `composition` events, thus
           * allowing us to share composition fallback code for both `beforeInput` and
           * `composition` event types.
           */
          var BeforeInputEventPlugin = {
            eventTypes: eventTypes,

            extractEvents: function(
              topLevelType,
              targetInst,
              nativeEvent,
              nativeEventTarget
            ) {
              return [
                extractCompositionEvent(
                  topLevelType,
                  targetInst,
                  nativeEvent,
                  nativeEventTarget
                ),
                extractBeforeInputEvent(
                  topLevelType,
                  targetInst,
                  nativeEvent,
                  nativeEventTarget
                ),
              ]
            },
          }

          // Use to restore controlled state after a change event has fired.

          var fiberHostComponent = null

          var ReactControlledComponentInjection = {
            injectFiberControlledHostComponent: function(hostComponentImpl) {
              // The fiber implementation doesn't use dynamic dispatch so we need to
              // inject the implementation.
              fiberHostComponent = hostComponentImpl
            },
          }

          var restoreTarget = null
          var restoreQueue = null

          function restoreStateOfTarget(target) {
            // We perform this translation at the end of the event loop so that we
            // always receive the correct fiber here
            var internalInstance = getInstanceFromNode(target)
            if (!internalInstance) {
              // Unmounted
              return
            }
            !(
              fiberHostComponent &&
              typeof fiberHostComponent.restoreControlledState === 'function'
            )
              ? invariant(
                  false,
                  'Fiber needs to be injected to handle a fiber target for controlled events. This error is likely caused by a bug in React. Please file an issue.'
                )
              : void 0
            var props = getFiberCurrentPropsFromNode(internalInstance.stateNode)
            fiberHostComponent.restoreControlledState(
              internalInstance.stateNode,
              internalInstance.type,
              props
            )
          }

          var injection$3 = ReactControlledComponentInjection

          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target)
              } else {
                restoreQueue = [target]
              }
            } else {
              restoreTarget = target
            }
          }

          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return
            }
            var target = restoreTarget
            var queuedTargets = restoreQueue
            restoreTarget = null
            restoreQueue = null

            restoreStateOfTarget(target)
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i])
              }
            }
          }

          var ReactControlledComponent = Object.freeze({
            injection: injection$3,
            enqueueStateRestore: enqueueStateRestore,
            restoreStateIfNeeded: restoreStateIfNeeded,
          })

          // Used as a way to call batchedUpdates when we don't have a reference to
          // the renderer. Such as when we're dispatching events or if third party
          // libraries need to call batchedUpdates. Eventually, this API will go away when
          // everything is batched by default. We'll then have a similar API to opt-out of
          // scheduled work and instead do synchronous work.

          // Defaults
          var fiberBatchedUpdates = function(fn, bookkeeping) {
            return fn(bookkeeping)
          }

          var isNestingBatched = false
          function batchedUpdates(fn, bookkeeping) {
            if (isNestingBatched) {
              // If we are currently inside another batch, we need to wait until it
              // fully completes before restoring state. Therefore, we add the target to
              // a queue of work.
              return fiberBatchedUpdates(fn, bookkeeping)
            }
            isNestingBatched = true
            try {
              return fiberBatchedUpdates(fn, bookkeeping)
            } finally {
              // Here we wait until all updates have propagated, which is important
              // when using controlled components within layers:
              // https://github.com/facebook/react/issues/1698
              // Then we restore state of any controlled component.
              isNestingBatched = false
              restoreStateIfNeeded()
            }
          }

          var ReactGenericBatchingInjection = {
            injectFiberBatchedUpdates: function(_batchedUpdates) {
              fiberBatchedUpdates = _batchedUpdates
            },
          }

          var injection$4 = ReactGenericBatchingInjection

          /**
           * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
           */
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            'datetime-local': true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true,
          }

          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase()

            if (nodeName === 'input') {
              return !!supportedInputTypes[elem.type]
            }

            if (nodeName === 'textarea') {
              return true
            }

            return false
          }

          /**
           * HTML nodeType values that represent the type of the node
           */

          var ELEMENT_NODE = 1
          var TEXT_NODE = 3
          var COMMENT_NODE = 8
          var DOCUMENT_NODE = 9
          var DOCUMENT_FRAGMENT_NODE = 11

          /**
           * Gets the target node from a native browser event by accounting for
           * inconsistencies in browser DOM APIs.
           *
           * @param {object} nativeEvent Native browser event.
           * @return {DOMEventTarget} Target node.
           */
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window

            // Normalize SVG <use> element events #4963
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement
            }

            // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
            // @see http://www.quirksmode.org/js/events_properties.html
            return target.nodeType === TEXT_NODE ? target.parentNode : target
          }

          var useHasFeature
          if (ExecutionEnvironment.canUseDOM) {
            useHasFeature =
              document.implementation &&
              document.implementation.hasFeature &&
              // always returns true in newer browsers as per the standard.
              // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
              document.implementation.hasFeature('', '') !== true
          }

          /**
           * Checks if an event is supported in the current execution environment.
           *
           * NOTE: This will not work correctly for non-generic events such as `change`,
           * `reset`, `load`, `error`, and `select`.
           *
           * Borrows from Modernizr.
           *
           * @param {string} eventNameSuffix Event name, e.g. "click".
           * @param {?boolean} capture Check if the capture phase is supported.
           * @return {boolean} True if the event is supported.
           * @internal
           * @license Modernizr 3.0.0pre (Custom Build) | MIT
           */
          function isEventSupported(eventNameSuffix, capture) {
            if (
              !ExecutionEnvironment.canUseDOM ||
              (capture && !('addEventListener' in document))
            ) {
              return false
            }

            var eventName = 'on' + eventNameSuffix
            var isSupported = eventName in document

            if (!isSupported) {
              var element = document.createElement('div')
              element.setAttribute(eventName, 'return;')
              isSupported = typeof element[eventName] === 'function'
            }

            if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
              // This is the only way to test support for the `wheel` event in IE9+.
              isSupported = document.implementation.hasFeature(
                'Events.wheel',
                '3.0'
              )
            }

            return isSupported
          }

          function isCheckable(elem) {
            var type = elem.type
            var nodeName = elem.nodeName
            return (
              nodeName &&
              nodeName.toLowerCase() === 'input' &&
              (type === 'checkbox' || type === 'radio')
            )
          }

          function getTracker(node) {
            return node._valueTracker
          }

          function detachTracker(node) {
            node._valueTracker = null
          }

          function getValueFromNode(node) {
            var value = ''
            if (!node) {
              return value
            }

            if (isCheckable(node)) {
              value = node.checked ? 'true' : 'false'
            } else {
              value = node.value
            }

            return value
          }

          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? 'checked' : 'value'
            var descriptor = Object.getOwnPropertyDescriptor(
              node.constructor.prototype,
              valueField
            )

            var currentValue = '' + node[valueField]

            // if someone has already defined a value or Safari, then bail
            // and don't track value will cause over reporting of changes,
            // but it's better then a hard failure
            // (needed for certain tests that spyOn input values and Safari)
            if (
              node.hasOwnProperty(valueField) ||
              typeof descriptor.get !== 'function' ||
              typeof descriptor.set !== 'function'
            ) {
              return
            }

            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable,
              configurable: true,
              get: function() {
                return descriptor.get.call(this)
              },
              set: function(value) {
                currentValue = '' + value
                descriptor.set.call(this, value)
              },
            })

            var tracker = {
              getValue: function() {
                return currentValue
              },
              setValue: function(value) {
                currentValue = '' + value
              },
              stopTracking: function() {
                detachTracker(node)
                delete node[valueField]
              },
            }
            return tracker
          }

          function track(node) {
            if (getTracker(node)) {
              return
            }

            // TODO: Once it's just Fiber we can move this to node._wrapperState
            node._valueTracker = trackValueOnNode(node)
          }

          function updateValueIfChanged(node) {
            if (!node) {
              return false
            }

            var tracker = getTracker(node)
            // if there is no tracker at this point it's unlikely
            // that trying again will succeed
            if (!tracker) {
              return true
            }

            var lastValue = tracker.getValue()
            var nextValue = getValueFromNode(node)
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue)
              return true
            }
            return false
          }

          var eventTypes$1 = {
            change: {
              phasedRegistrationNames: {
                bubbled: 'onChange',
                captured: 'onChangeCapture',
              },
              dependencies: [
                'topBlur',
                'topChange',
                'topClick',
                'topFocus',
                'topInput',
                'topKeyDown',
                'topKeyUp',
                'topSelectionChange',
              ],
            },
          }

          function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
            var event = SyntheticEvent$1.getPooled(
              eventTypes$1.change,
              inst,
              nativeEvent,
              target
            )
            event.type = 'change'
            // Flag this event loop as needing state restore.
            enqueueStateRestore(target)
            accumulateTwoPhaseDispatches(event)
            return event
          }
          /**
           * For IE shims
           */
          var activeElement = null
          var activeElementInst = null

          /**
           * SECTION: handle `change` event
           */
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase()
            return (
              nodeName === 'select' ||
              (nodeName === 'input' && elem.type === 'file')
            )
          }

          function manualDispatchChangeEvent(nativeEvent) {
            var event = createAndAccumulateChangeEvent(
              activeElementInst,
              nativeEvent,
              getEventTarget(nativeEvent)
            )

            // If change and propertychange bubbled, we'd just bind to it like all the
            // other events and have it go through ReactBrowserEventEmitter. Since it
            // doesn't, we manually listen for the events and so we have to enqueue and
            // process the abstract event manually.
            //
            // Batching is necessary here in order to ensure that all event handlers run
            // before the next rerender (including event handlers attached to ancestor
            // elements instead of directly on the input). Without this, controlled
            // components don't work properly in conjunction with event bubbling because
            // the component is rerendered and the value reverted before all the event
            // handlers can run. See https://github.com/facebook/react/issues/708.
            batchedUpdates(runEventInBatch, event)
          }

          function runEventInBatch(event) {
            enqueueEvents(event)
            processEventQueue(false)
          }

          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance$1(targetInst)
            if (updateValueIfChanged(targetNode)) {
              return targetInst
            }
          }

          function getTargetInstForChangeEvent(topLevelType, targetInst) {
            if (topLevelType === 'topChange') {
              return targetInst
            }
          }

          /**
           * SECTION: handle `input` event
           */
          var isInputEventSupported = false
          if (ExecutionEnvironment.canUseDOM) {
            // IE9 claims to support the input event but fails to trigger it when
            // deleting text, so we ignore its input events.
            isInputEventSupported =
              isEventSupported('input') &&
              (!document.documentMode || document.documentMode > 9)
          }

          /**
           * (For IE <=9) Starts tracking propertychange events on the passed-in element
           * and override the value property so that we can distinguish user events from
           * value changes in JS.
           */
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target
            activeElementInst = targetInst
            activeElement.attachEvent('onpropertychange', handlePropertyChange)
          }

          /**
           * (For IE <=9) Removes the event listeners from the currently-tracked element,
           * if any exists.
           */
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return
            }
            activeElement.detachEvent('onpropertychange', handlePropertyChange)
            activeElement = null
            activeElementInst = null
          }

          /**
           * (For IE <=9) Handles a propertychange event, sending a `change` event if
           * the value of the active element has changed.
           */
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== 'value') {
              return
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent)
            }
          }

          function handleEventsForInputEventPolyfill(
            topLevelType,
            target,
            targetInst
          ) {
            if (topLevelType === 'topFocus') {
              // In IE9, propertychange fires for most input events but is buggy and
              // doesn't fire when text is deleted, but conveniently, selectionchange
              // appears to fire in all of the remaining cases so we catch those and
              // forward the event if the value has changed
              // In either case, we don't want to call the event handler if the value
              // is changed from JS so we redefine a setter for `.value` that updates
              // our activeElementValue variable, allowing us to ignore those changes
              //
              // stopWatching() should be a noop here but we call it just in case we
              // missed a blur event somehow.
              stopWatchingForValueChange()
              startWatchingForValueChange(target, targetInst)
            } else if (topLevelType === 'topBlur') {
              stopWatchingForValueChange()
            }
          }

          // For IE8 and IE9.
          function getTargetInstForInputEventPolyfill(
            topLevelType,
            targetInst
          ) {
            if (
              topLevelType === 'topSelectionChange' ||
              topLevelType === 'topKeyUp' ||
              topLevelType === 'topKeyDown'
            ) {
              // On the selectionchange event, the target is just document which isn't
              // helpful for us so just check activeElement instead.
              //
              // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
              // propertychange on the first input event after setting `value` from a
              // script and fires only keydown, keypress, keyup. Catching keyup usually
              // gets it and catching keydown lets us fire an event for the first
              // keystroke if user does a key repeat (it'll be a little delayed: right
              // before the second keystroke). Other input methods (e.g., paste) seem to
              // fire selectionchange normally.
              return getInstIfValueChanged(activeElementInst)
            }
          }

          /**
           * SECTION: handle `click` event
           */
          function shouldUseClickEvent(elem) {
            // Use the `click` event to detect changes to checkbox and radio inputs.
            // This approach works across all browsers, whereas `change` does not fire
            // until `blur` in IE8.
            var nodeName = elem.nodeName
            return (
              nodeName &&
              nodeName.toLowerCase() === 'input' &&
              (elem.type === 'checkbox' || elem.type === 'radio')
            )
          }

          function getTargetInstForClickEvent(topLevelType, targetInst) {
            if (topLevelType === 'topClick') {
              return getInstIfValueChanged(targetInst)
            }
          }

          function getTargetInstForInputOrChangeEvent(
            topLevelType,
            targetInst
          ) {
            if (topLevelType === 'topInput' || topLevelType === 'topChange') {
              return getInstIfValueChanged(targetInst)
            }
          }

          function handleControlledInputBlur(inst, node) {
            // TODO: In IE, inst is occasionally null. Why?
            if (inst == null) {
              return
            }

            // Fiber and ReactDOM keep wrapper state in separate places
            var state = inst._wrapperState || node._wrapperState

            if (!state || !state.controlled || node.type !== 'number') {
              return
            }

            // If controlled, assign the value attribute to the current value on blur
            var value = '' + node.value
            if (node.getAttribute('value') !== value) {
              node.setAttribute('value', value)
            }
          }

          /**
           * This plugin creates an `onChange` event that normalizes change events
           * across form elements. This event fires at a time when it's possible to
           * change the element's value without seeing a flicker.
           *
           * Supported elements are:
           * - input (see `isTextInputElement`)
           * - textarea
           * - select
           */
          var ChangeEventPlugin = {
            eventTypes: eventTypes$1,

            _isInputEventSupported: isInputEventSupported,

            extractEvents: function(
              topLevelType,
              targetInst,
              nativeEvent,
              nativeEventTarget
            ) {
              var targetNode = targetInst
                ? getNodeFromInstance$1(targetInst)
                : window

              var getTargetInstFunc, handleEventFunc
              if (shouldUseChangeEvent(targetNode)) {
                getTargetInstFunc = getTargetInstForChangeEvent
              } else if (isTextInputElement(targetNode)) {
                if (isInputEventSupported) {
                  getTargetInstFunc = getTargetInstForInputOrChangeEvent
                } else {
                  getTargetInstFunc = getTargetInstForInputEventPolyfill
                  handleEventFunc = handleEventsForInputEventPolyfill
                }
              } else if (shouldUseClickEvent(targetNode)) {
                getTargetInstFunc = getTargetInstForClickEvent
              }

              if (getTargetInstFunc) {
                var inst = getTargetInstFunc(topLevelType, targetInst)
                if (inst) {
                  var event = createAndAccumulateChangeEvent(
                    inst,
                    nativeEvent,
                    nativeEventTarget
                  )
                  return event
                }
              }

              if (handleEventFunc) {
                handleEventFunc(topLevelType, targetNode, targetInst)
              }

              // When blurring, set the value attribute for number inputs
              if (topLevelType === 'topBlur') {
                handleControlledInputBlur(targetInst, targetNode)
              }
            },
          }

          /**
           * Module that is injectable into `EventPluginHub`, that specifies a
           * deterministic ordering of `EventPlugin`s. A convenient way to reason about
           * plugins, without having to package every one of them. This is better than
           * having plugins be ordered in the same order that they are injected because
           * that ordering would be influenced by the packaging order.
           * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
           * preventing default on events is convenient in `SimpleEventPlugin` handlers.
           */
          var DOMEventPluginOrder = [
            'ResponderEventPlugin',
            'SimpleEventPlugin',
            'TapEventPlugin',
            'EnterLeaveEventPlugin',
            'ChangeEventPlugin',
            'SelectEventPlugin',
            'BeforeInputEventPlugin',
          ]

          /**
           * @interface UIEvent
           * @see http://www.w3.org/TR/DOM-Level-3-Events/
           */
          var UIEventInterface = {
            view: null,
            detail: null,
          }

          /**
           * @param {object} dispatchConfig Configuration used to dispatch this event.
           * @param {string} dispatchMarker Marker identifying the event target.
           * @param {object} nativeEvent Native browser event.
           * @extends {SyntheticEvent}
           */
          function SyntheticUIEvent(
            dispatchConfig,
            dispatchMarker,
            nativeEvent,
            nativeEventTarget
          ) {
            return SyntheticEvent$1.call(
              this,
              dispatchConfig,
              dispatchMarker,
              nativeEvent,
              nativeEventTarget
            )
          }

          SyntheticEvent$1.augmentClass(SyntheticUIEvent, UIEventInterface)

          /**
           * Translation from modifier key to the associated property in the event.
           * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
           */

          var modifierKeyToProp = {
            Alt: 'altKey',
            Control: 'ctrlKey',
            Meta: 'metaKey',
            Shift: 'shiftKey',
          }

          // IE8 does not implement getModifierState so we simply map it to the only
          // modifier keys exposed by the event itself, does not support Lock-keys.
          // Currently, all major browsers except Chrome seems to support Lock-keys.
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this
            var nativeEvent = syntheticEvent.nativeEvent
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg)
            }
            var keyProp = modifierKeyToProp[keyArg]
            return keyProp ? !!nativeEvent[keyProp] : false
          }

          function getEventModifierState(nativeEvent) {
            return modifierStateGetter
          }

          /**
           * @interface MouseEvent
           * @see http://www.w3.org/TR/DOM-Level-3-Events/
           */
          var MouseEventInterface = {
            screenX: null,
            screenY: null,
            clientX: null,
            clientY: null,
            pageX: null,
            pageY: null,
            ctrlKey: null,
            shiftKey: null,
            altKey: null,
            metaKey: null,
            getModifierState: getEventModifierState,
            button: null,
            buttons: null,
            relatedTarget: function(event) {
              return (
                event.relatedTarget ||
                (event.fromElement === event.srcElement
                  ? event.toElement
                  : event.fromElement)
              )
            },
          }

          /**
           * @param {object} dispatchConfig Configuration used to dispatch this event.
           * @param {string} dispatchMarker Marker identifying the event target.
           * @param {object} nativeEvent Native browser event.
           * @extends {SyntheticUIEvent}
           */
          function SyntheticMouseEvent(
            dispatchConfig,
            dispatchMarker,
            nativeEvent,
            nativeEventTarget
          ) {
            return SyntheticUIEvent.call(
              this,
              dispatchConfig,
              dispatchMarker,
              nativeEvent,
              nativeEventTarget
            )
          }

          SyntheticUIEvent.augmentClass(
            SyntheticMouseEvent,
            MouseEventInterface
          )

          var eventTypes$2 = {
            mouseEnter: {
              registrationName: 'onMouseEnter',
              dependencies: ['topMouseOut', 'topMouseOver'],
            },
            mouseLeave: {
              registrationName: 'onMouseLeave',
              dependencies: ['topMouseOut', 'topMouseOver'],
            },
          }

          var EnterLeaveEventPlugin = {
            eventTypes: eventTypes$2,

            /**
             * For almost every interaction we care about, there will be both a top-level
             * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
             * we do not extract duplicate events. However, moving the mouse into the
             * browser from outside will not fire a `mouseout` event. In this case, we use
             * the `mouseover` top-level event.
             */
            extractEvents: function(
              topLevelType,
              targetInst,
              nativeEvent,
              nativeEventTarget
            ) {
              if (
                topLevelType === 'topMouseOver' &&
                (nativeEvent.relatedTarget || nativeEvent.fromElement)
              ) {
                return null
              }
              if (
                topLevelType !== 'topMouseOut' &&
                topLevelType !== 'topMouseOver'
              ) {
                // Must not be a mouse in or mouse out - ignoring.
                return null
              }

              var win
              if (nativeEventTarget.window === nativeEventTarget) {
                // `nativeEventTarget` is probably a window object.
                win = nativeEventTarget
              } else {
                // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
                var doc = nativeEventTarget.ownerDocument
                if (doc) {
                  win = doc.defaultView || doc.parentWindow
                } else {
                  win = window
                }
              }

              var from
              var to
              if (topLevelType === 'topMouseOut') {
                from = targetInst
                var related = nativeEvent.relatedTarget || nativeEvent.toElement
                to = related ? getClosestInstanceFromNode(related) : null
              } else {
                // Moving to a node from outside the window.
                from = null
                to = targetInst
              }

              if (from === to) {
                // Nothing pertains to our managed components.
                return null
              }

              var fromNode = from == null ? win : getNodeFromInstance$1(from)
              var toNode = to == null ? win : getNodeFromInstance$1(to)

              var leave = SyntheticMouseEvent.getPooled(
                eventTypes$2.mouseLeave,
                from,
                nativeEvent,
                nativeEventTarget
              )
              leave.type = 'mouseleave'
              leave.target = fromNode
              leave.relatedTarget = toNode

              var enter = SyntheticMouseEvent.getPooled(
                eventTypes$2.mouseEnter,
                to,
                nativeEvent,
                nativeEventTarget
              )
              enter.type = 'mouseenter'
              enter.target = toNode
              enter.relatedTarget = fromNode

              accumulateEnterLeaveDispatches(leave, enter, from, to)

              return [leave, enter]
            },
          }

          /**
           * `ReactInstanceMap` maintains a mapping from a public facing stateful
           * instance (key) and the internal representation (value). This allows public
           * methods to accept the user facing instance as an argument and map them back
           * to internal methods.
           *
           * Note that this module is currently shared and assumed to be stateless.
           * If this becomes an actual Map, that will break.
           */

          /**
           * This API should be called `delete` but we'd have to make sure to always
           * transform these to strings for IE support. When this transform is fully
           * supported we can rename it.
           */

          function get(key) {
            return key._reactInternalFiber
          }

          function has(key) {
            return key._reactInternalFiber !== undefined
          }

          function set(key, value) {
            key._reactInternalFiber = value
          }

          var ReactInternals =
            React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED

          var ReactCurrentOwner = ReactInternals.ReactCurrentOwner
          var ReactDebugCurrentFrame = ReactInternals.ReactDebugCurrentFrame

          function getComponentName(fiber) {
            var type = fiber.type

            if (typeof type === 'string') {
              return type
            }
            if (typeof type === 'function') {
              return type.displayName || type.name
            }
            return null
          }

          // Don't change these two values:
          var NoEffect = 0 //           0b00000000
          var PerformedWork = 1 //      0b00000001

          // You can change the rest (and add more).
          var Placement = 2 //          0b00000010
          var Update = 4 //             0b00000100
          var PlacementAndUpdate = 6 // 0b00000110
          var Deletion = 8 //           0b00001000
          var ContentReset = 16 //      0b00010000
          var Callback = 32 //          0b00100000
          var Err = 64 //               0b01000000
          var Ref = 128 //              0b10000000

          var MOUNTING = 1
          var MOUNTED = 2
          var UNMOUNTED = 3

          function isFiberMountedImpl(fiber) {
            var node = fiber
            if (!fiber.alternate) {
              // If there is no alternate, this might be a new tree that isn't inserted
              // yet. If it is, then it will have a pending insertion effect on it.
              if ((node.effectTag & Placement) !== NoEffect) {
                return MOUNTING
              }
              while (node['return']) {
                node = node['return']
                if ((node.effectTag & Placement) !== NoEffect) {
                  return MOUNTING
                }
              }
            } else {
              while (node['return']) {
                node = node['return']
              }
            }
            if (node.tag === HostRoot) {
              // TODO: Check if this was a nested HostRoot when used with
              // renderContainerIntoSubtree.
              return MOUNTED
            }
            // If we didn't hit the root, that means that we're in an disconnected tree
            // that has been unmounted.
            return UNMOUNTED
          }

          function isFiberMounted(fiber) {
            return isFiberMountedImpl(fiber) === MOUNTED
          }

          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner
                var instance = ownerFiber.stateNode
                warning(
                  instance._warnedAboutRefsInRender,
                  '%s is accessing isMounted inside its render() function. ' +
                    'render() should be a pure function of props and state. It should ' +
                    'never access something that requires stale data from the previous ' +
                    'render, such as refs. Move this logic to componentDidMount and ' +
                    'componentDidUpdate instead.',
                  getComponentName(ownerFiber) || 'A component'
                )
                instance._warnedAboutRefsInRender = true
              }
            }

            var fiber = get(component)
            if (!fiber) {
              return false
            }
            return isFiberMountedImpl(fiber) === MOUNTED
          }

          function assertIsMounted(fiber) {
            !(isFiberMountedImpl(fiber) === MOUNTED)
              ? invariant(
                  false,
                  'Unable to find node on an unmounted component.'
                )
              : void 0
          }

          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate
            if (!alternate) {
              // If there is no alternate, then we only need to check if it is mounted.
              var state = isFiberMountedImpl(fiber)
              !(state !== UNMOUNTED)
                ? invariant(
                    false,
                    'Unable to find node on an unmounted component.'
                  )
                : void 0
              if (state === MOUNTING) {
                return null
              }
              return fiber
            }
            // If we have two possible branches, we'll walk backwards up to the root
            // to see what path the root points to. On the way we may hit one of the
            // special cases and we'll deal with them.
            var a = fiber
            var b = alternate
            while (true) {
              var parentA = a['return']
              var parentB = parentA ? parentA.alternate : null
              if (!parentA || !parentB) {
                // We're at the root.
                break
              }

              // If both copies of the parent fiber point to the same child, we can
              // assume that the child is current. This happens when we bailout on low
              // priority: the bailed out fiber's child reuses the current child.
              if (parentA.child === parentB.child) {
                var child = parentA.child
                while (child) {
                  if (child === a) {
                    // We've determined that A is the current branch.
                    assertIsMounted(parentA)
                    return fiber
                  }
                  if (child === b) {
                    // We've determined that B is the current branch.
                    assertIsMounted(parentA)
                    return alternate
                  }
                  child = child.sibling
                }
                // We should never have an alternate for any mounting node. So the only
                // way this could possibly happen is if this was unmounted, if at all.
                invariant(
                  false,
                  'Unable to find node on an unmounted component.'
                )
              }

              if (a['return'] !== b['return']) {
                // The return pointer of A and the return pointer of B point to different
                // fibers. We assume that return pointers never criss-cross, so A must
                // belong to the child set of A.return, and B must belong to the child
                // set of B.return.
                a = parentA
                b = parentB
              } else {
                // The return pointers point to the same fiber. We'll have to use the
                // default, slow path: scan the child sets of each parent alternate to see
                // which child belongs to which set.
                //
                // Search parent A's child set
                var didFindChild = false
                var _child = parentA.child
                while (_child) {
                  if (_child === a) {
                    didFindChild = true
                    a = parentA
                    b = parentB
                    break
                  }
                  if (_child === b) {
                    didFindChild = true
                    b = parentA
                    a = parentB
                    break
                  }
                  _child = _child.sibling
                }
                if (!didFindChild) {
                  // Search parent B's child set
                  _child = parentB.child
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true
                      a = parentB
                      b = parentA
                      break
                    }
                    if (_child === b) {
                      didFindChild = true
                      b = parentB
                      a = parentA
                      break
                    }
                    _child = _child.sibling
                  }
                  !didFindChild
                    ? invariant(
                        false,
                        'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.'
                      )
                    : void 0
                }
              }

              !(a.alternate === b)
                ? invariant(
                    false,
                    "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue."
                  )
                : void 0
            }
            // If the root is not a host container, we're in a disconnected tree. I.e.
            // unmounted.
            !(a.tag === HostRoot)
              ? invariant(
                  false,
                  'Unable to find node on an unmounted component.'
                )
              : void 0
            if (a.stateNode.current === a) {
              // We've determined that A is the current branch.
              return fiber
            }
            // Otherwise B has to be current branch.
            return alternate
          }

          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent)
            if (!currentParent) {
              return null
            }

            // Next we'll drill down this component to find the first HostComponent/Text.
            var node = currentParent
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText) {
                return node
              } else if (node.child) {
                node.child['return'] = node
                node = node.child
                continue
              }
              if (node === currentParent) {
                return null
              }
              while (!node.sibling) {
                if (!node['return'] || node['return'] === currentParent) {
                  return null
                }
                node = node['return']
              }
              node.sibling['return'] = node['return']
              node = node.sibling
            }
            // Flow needs the return null here, but ESLint complains about it.
            // eslint-disable-next-line no-unreachable
            return null
          }

          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent)
            if (!currentParent) {
              return null
            }

            // Next we'll drill down this component to find the first HostComponent/Text.
            var node = currentParent
            while (true) {
              if (node.tag === HostComponent || node.tag === HostText) {
                return node
              } else if (node.child && node.tag !== HostPortal) {
                node.child['return'] = node
                node = node.child
                continue
              }
              if (node === currentParent) {
                return null
              }
              while (!node.sibling) {
                if (!node['return'] || node['return'] === currentParent) {
                  return null
                }
                node = node['return']
              }
              node.sibling['return'] = node['return']
              node = node.sibling
            }
            // Flow needs the return null here, but ESLint complains about it.
            // eslint-disable-next-line no-unreachable
            return null
          }

          var CALLBACK_BOOKKEEPING_POOL_SIZE = 10
          var callbackBookkeepingPool = []

          /**
           * Find the deepest React component completely containing the root of the
           * passed-in instance (for use when entire React trees are nested within each
           * other). If React trees are not nested, returns null.
           */
          function findRootContainerNode(inst) {
            // TODO: It may be a good idea to cache this to prevent unnecessary DOM
            // traversal, but caching is difficult to do correctly without using a
            // mutation observer to listen for all DOM changes.
            while (inst['return']) {
              inst = inst['return']
            }
            if (inst.tag !== HostRoot) {
              // This can happen if we're in a detached tree.
              return null
            }
            return inst.stateNode.containerInfo
          }

          // Used to store ancestor hierarchy in top level callback
          function getTopLevelCallbackBookKeeping(
            topLevelType,
            nativeEvent,
            targetInst
          ) {
            if (callbackBookkeepingPool.length) {
              var instance = callbackBookkeepingPool.pop()
              instance.topLevelType = topLevelType
              instance.nativeEvent = nativeEvent
              instance.targetInst = targetInst
              return instance
            }
            return {
              topLevelType: topLevelType,
              nativeEvent: nativeEvent,
              targetInst: targetInst,
              ancestors: [],
            }
          }

          function releaseTopLevelCallbackBookKeeping(instance) {
            instance.topLevelType = null
            instance.nativeEvent = null
            instance.targetInst = null
            instance.ancestors.length = 0
            if (
              callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE
            ) {
              callbackBookkeepingPool.push(instance)
            }
          }

          function handleTopLevelImpl(bookKeeping) {
            var targetInst = bookKeeping.targetInst

            // Loop through the hierarchy, in case there's any nested components.
            // It's important that we build the array of ancestors before calling any
            // event handlers, because event handlers can modify the DOM, leading to
            // inconsistencies with ReactMount's node cache. See #1105.
            var ancestor = targetInst
            do {
              if (!ancestor) {
                bookKeeping.ancestors.push(ancestor)
                break
              }
              var root = findRootContainerNode(ancestor)
              if (!root) {
                break
              }
              bookKeeping.ancestors.push(ancestor)
              ancestor = getClosestInstanceFromNode(root)
            } while (ancestor)

            for (var i = 0; i < bookKeeping.ancestors.length; i++) {
              targetInst = bookKeeping.ancestors[i]
              _handleTopLevel(
                bookKeeping.topLevelType,
                targetInst,
                bookKeeping.nativeEvent,
                getEventTarget(bookKeeping.nativeEvent)
              )
            }
          }

          // TODO: can we stop exporting these?
          var _enabled = true
          var _handleTopLevel = void 0

          function setHandleTopLevel(handleTopLevel) {
            _handleTopLevel = handleTopLevel
          }

          function setEnabled(enabled) {
            _enabled = !!enabled
          }

          function isEnabled() {
            return _enabled
          }

          /**
           * Traps top-level events by using event bubbling.
           *
           * @param {string} topLevelType Record from `BrowserEventConstants`.
           * @param {string} handlerBaseName Event name (e.g. "click").
           * @param {object} element Element on which to attach listener.
           * @return {?object} An object with a remove function which will forcefully
           *                  remove the listener.
           * @internal
           */
          function trapBubbledEvent(topLevelType, handlerBaseName, element) {
            if (!element) {
              return null
            }
            return EventListener.listen(
              element,
              handlerBaseName,
              dispatchEvent.bind(null, topLevelType)
            )
          }

          /**
           * Traps a top-level event by using event capturing.
           *
           * @param {string} topLevelType Record from `BrowserEventConstants`.
           * @param {string} handlerBaseName Event name (e.g. "click").
           * @param {object} element Element on which to attach listener.
           * @return {?object} An object with a remove function which will forcefully
           *                  remove the listener.
           * @internal
           */
          function trapCapturedEvent(topLevelType, handlerBaseName, element) {
            if (!element) {
              return null
            }
            return EventListener.capture(
              element,
              handlerBaseName,
              dispatchEvent.bind(null, topLevelType)
            )
          }

          function dispatchEvent(topLevelType, nativeEvent) {
            if (!_enabled) {
              return
            }

            var nativeEventTarget = getEventTarget(nativeEvent)
            var targetInst = getClosestInstanceFromNode(nativeEventTarget)
            if (
              targetInst !== null &&
              typeof targetInst.tag === 'number' &&
              !isFiberMounted(targetInst)
            ) {
              // If we get an event (ex: img onload) before committing that
              // component's mount, ignore it for now (that is, treat it as if it was an
              // event on a non-React tree). We might also consider queueing events and
              // dispatching them after the mount.
              targetInst = null
            }

            var bookKeeping = getTopLevelCallbackBookKeeping(
              topLevelType,
              nativeEvent,
              targetInst
            )

            try {
              // Event queue being processed in the same cycle allows
              // `preventDefault`.
              batchedUpdates(handleTopLevelImpl, bookKeeping)
            } finally {
              releaseTopLevelCallbackBookKeeping(bookKeeping)
            }
          }

          var ReactDOMEventListener = Object.freeze({
            get _enabled() {
              return _enabled
            },
            get _handleTopLevel() {
              return _handleTopLevel
            },
            setHandleTopLevel: setHandleTopLevel,
            setEnabled: setEnabled,
            isEnabled: isEnabled,
            trapBubbledEvent: trapBubbledEvent,
            trapCapturedEvent: trapCapturedEvent,
            dispatchEvent: dispatchEvent,
          })

          /**
           * Generate a mapping of standard vendor prefixes using the defined style property and event name.
           *
           * @param {string} styleProp
           * @param {string} eventName
           * @returns {object}
           */
          function makePrefixMap(styleProp, eventName) {
            var prefixes = {}

            prefixes[styleProp.toLowerCase()] = eventName.toLowerCase()
            prefixes['Webkit' + styleProp] = 'webkit' + eventName
            prefixes['Moz' + styleProp] = 'moz' + eventName
            prefixes['ms' + styleProp] = 'MS' + eventName
            prefixes['O' + styleProp] = 'o' + eventName.toLowerCase()

            return prefixes
          }

          /**
           * A list of event names to a configurable list of vendor prefixes.
           */
          var vendorPrefixes = {
            animationend: makePrefixMap('Animation', 'AnimationEnd'),
            animationiteration: makePrefixMap(
              'Animation',
              'AnimationIteration'
            ),
            animationstart: makePrefixMap('Animation', 'AnimationStart'),
            transitionend: makePrefixMap('Transition', 'TransitionEnd'),
          }

          /**
           * Event names that have already been detected and prefixed (if applicable).
           */
          var prefixedEventNames = {}

          /**
           * Element to check for prefixes on.
           */
          var style = {}

          /**
           * Bootstrap if a DOM exists.
           */
          if (ExecutionEnvironment.canUseDOM) {
            style = document.createElement('div').style

            // On some platforms, in particular some releases of Android 4.x,
            // the un-prefixed "animation" and "transition" properties are defined on the
            // style object but the events that fire will still be prefixed, so we need
            // to check if the un-prefixed events are usable, and if not remove them from the map.
            if (!('AnimationEvent' in window)) {
              delete vendorPrefixes.animationend.animation
              delete vendorPrefixes.animationiteration.animation
              delete vendorPrefixes.animationstart.animation
            }

            // Same as above
            if (!('TransitionEvent' in window)) {
              delete vendorPrefixes.transitionend.transition
            }
          }

          /**
           * Attempts to determine the correct vendor prefixed event name.
           *
           * @param {string} eventName
           * @returns {string}
           */
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName]
            } else if (!vendorPrefixes[eventName]) {
              return eventName
            }

            var prefixMap = vendorPrefixes[eventName]

            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return (prefixedEventNames[eventName] = prefixMap[styleProp])
              }
            }

            return ''
          }

          /**
           * Types of raw signals from the browser caught at the top level.
           *
           * For events like 'submit' which don't consistently bubble (which we
           * trap at a lower node than `document`), binding at `document` would
           * cause duplicate events so we don't include them here.
           */
          var topLevelTypes$1 = {
            topAbort: 'abort',
            topAnimationEnd:
              getVendorPrefixedEventName('animationend') || 'animationend',
            topAnimationIteration:
              getVendorPrefixedEventName('animationiteration') ||
              'animationiteration',
            topAnimationStart:
              getVendorPrefixedEventName('animationstart') || 'animationstart',
            topBlur: 'blur',
            topCancel: 'cancel',
            topCanPlay: 'canplay',
            topCanPlayThrough: 'canplaythrough',
            topChange: 'change',
            topClick: 'click',
            topClose: 'close',
            topCompositionEnd: 'compositionend',
            topCompositionStart: 'compositionstart',
            topCompositionUpdate: 'compositionupdate',
            topContextMenu: 'contextmenu',
            topCopy: 'copy',
            topCut: 'cut',
            topDoubleClick: 'dblclick',
            topDrag: 'drag',
            topDragEnd: 'dragend',
            topDragEnter: 'dragenter',
            topDragExit: 'dragexit',
            topDragLeave: 'dragleave',
            topDragOver: 'dragover',
            topDragStart: 'dragstart',
            topDrop: 'drop',
            topDurationChange: 'durationchange',
            topEmptied: 'emptied',
            topEncrypted: 'encrypted',
            topEnded: 'ended',
            topError: 'error',
            topFocus: 'focus',
            topInput: 'input',
            topKeyDown: 'keydown',
            topKeyPress: 'keypress',
            topKeyUp: 'keyup',
            topLoadedData: 'loadeddata',
            topLoad: 'load',
            topLoadedMetadata: 'loadedmetadata',
            topLoadStart: 'loadstart',
            topMouseDown: 'mousedown',
            topMouseMove: 'mousemove',
            topMouseOut: 'mouseout',
            topMouseOver: 'mouseover',
            topMouseUp: 'mouseup',
            topPaste: 'paste',
            topPause: 'pause',
            topPlay: 'play',
            topPlaying: 'playing',
            topProgress: 'progress',
            topRateChange: 'ratechange',
            topScroll: 'scroll',
            topSeeked: 'seeked',
            topSeeking: 'seeking',
            topSelectionChange: 'selectionchange',
            topStalled: 'stalled',
            topSuspend: 'suspend',
            topTextInput: 'textInput',
            topTimeUpdate: 'timeupdate',
            topToggle: 'toggle',
            topTouchCancel: 'touchcancel',
            topTouchEnd: 'touchend',
            topTouchMove: 'touchmove',
            topTouchStart: 'touchstart',
            topTransitionEnd:
              getVendorPrefixedEventName('transitionend') || 'transitionend',
            topVolumeChange: 'volumechange',
            topWaiting: 'waiting',
            topWheel: 'wheel',
          }

          var BrowserEventConstants = {
            topLevelTypes: topLevelTypes$1,
          }

          function runEventQueueInBatch(events) {
            enqueueEvents(events)
            processEventQueue(false)
          }

          /**
           * Streams a fired top-level event to `EventPluginHub` where plugins have the
           * opportunity to create `ReactEvent`s to be dispatched.
           */
          function handleTopLevel(
            topLevelType,
            targetInst,
            nativeEvent,
            nativeEventTarget
          ) {
            var events = extractEvents(
              topLevelType,
              targetInst,
              nativeEvent,
              nativeEventTarget
            )
            runEventQueueInBatch(events)
          }

          var topLevelTypes = BrowserEventConstants.topLevelTypes

          /**
           * Summary of `ReactBrowserEventEmitter` event handling:
           *
           *  - Top-level delegation is used to trap most native browser events. This
           *    may only occur in the main thread and is the responsibility of
           *    ReactDOMEventListener, which is injected and can therefore support
           *    pluggable event sources. This is the only work that occurs in the main
           *    thread.
           *
           *  - We normalize and de-duplicate events to account for browser quirks. This
           *    may be done in the worker thread.
           *
           *  - Forward these native events (with the associated top-level type used to
           *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
           *    to extract any synthetic events.
           *
           *  - The `EventPluginHub` will then process each event by annotating them with
           *    "dispatches", a sequence of listeners and IDs that care about that event.
           *
           *  - The `EventPluginHub` then dispatches the events.
           *
           * Overview of React and the event system:
           *
           * +------------+    .
           * |    DOM     |    .
           * +------------+    .
           *       |           .
           *       v           .
           * +------------+    .
           * | ReactEvent |    .
           * |  Listener  |    .
           * +------------+    .                         +-----------+
           *       |           .               +--------+|SimpleEvent|
           *       |           .               |         |Plugin     |
           * +-----|------+    .               v         +-----------+
           * |     |      |    .    +--------------+                    +------------+
           * |     +-----------.--->|EventPluginHub|                    |    Event   |
           * |            |    .    |              |     +-----------+  | Propagators|
           * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
           * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
           * |            |    .    |              |     +-----------+  |  utilities |
           * |     +-----------.--->|              |                    +------------+
           * |     |      |    .    +--------------+
           * +-----|------+    .                ^        +-----------+
           *       |           .                |        |Enter/Leave|
           *       +           .                +-------+|Plugin     |
           * +-------------+   .                         +-----------+
           * | application |   .
           * |-------------|   .
           * |             |   .
           * |             |   .
           * +-------------+   .
           *                   .
           *    React Core     .  General Purpose Event Plugin System
           */

          var alreadyListeningTo = {}
          var reactTopListenersCounter = 0

          /**
           * To ensure no conflicts with other potential React instances on the page
           */
          var topListenersIDKey =
            '_reactListenersID' + ('' + Math.random()).slice(2)

          function getListeningForDocument(mountAt) {
            // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
            // directly.
            if (
              !Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)
            ) {
              mountAt[topListenersIDKey] = reactTopListenersCounter++
              alreadyListeningTo[mountAt[topListenersIDKey]] = {}
            }
            return alreadyListeningTo[mountAt[topListenersIDKey]]
          }

          /**
           * We listen for bubbled touch events on the document object.
           *
           * Firefox v8.01 (and possibly others) exhibited strange behavior when
           * mounting `onmousemove` events at some node that was not the document
           * element. The symptoms were that if your mouse is not moving over something
           * contained within that mount point (for example on the background) the
           * top-level listeners for `onmousemove` won't be called. However, if you
           * register the `mousemove` on the document object, then it will of course
           * catch all `mousemove`s. This along with iOS quirks, justifies restricting
           * top-level listeners to the document object only, at least for these
           * movement types of events and possibly all events.
           *
           * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
           *
           * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
           * they bubble to document.
           *
           * @param {string} registrationName Name of listener (e.g. `onClick`).
           * @param {object} contentDocumentHandle Document which owns the container
           */
          function listenTo(registrationName, contentDocumentHandle) {
            var mountAt = contentDocumentHandle
            var isListening = getListeningForDocument(mountAt)
            var dependencies = registrationNameDependencies[registrationName]

            for (var i = 0; i < dependencies.length; i++) {
              var dependency = dependencies[i]
              if (
                !(
                  isListening.hasOwnProperty(dependency) &&
                  isListening[dependency]
                )
              ) {
                if (dependency === 'topScroll') {
                  trapCapturedEvent('topScroll', 'scroll', mountAt)
                } else if (
                  dependency === 'topFocus' ||
                  dependency === 'topBlur'
                ) {
                  trapCapturedEvent('topFocus', 'focus', mountAt)
                  trapCapturedEvent('topBlur', 'blur', mountAt)

                  // to make sure blur and focus event listeners are only attached once
                  isListening.topBlur = true
                  isListening.topFocus = true
                } else if (dependency === 'topCancel') {
                  if (isEventSupported('cancel', true)) {
                    trapCapturedEvent('topCancel', 'cancel', mountAt)
                  }
                  isListening.topCancel = true
                } else if (dependency === 'topClose') {
                  if (isEventSupported('close', true)) {
                    trapCapturedEvent('topClose', 'close', mountAt)
                  }
                  isListening.topClose = true
                } else if (topLevelTypes.hasOwnProperty(dependency)) {
                  trapBubbledEvent(
                    dependency,
                    topLevelTypes[dependency],
                    mountAt
                  )
                }

                isListening[dependency] = true
              }
            }
          }

          function isListeningToAllDependencies(registrationName, mountAt) {
            var isListening = getListeningForDocument(mountAt)
            var dependencies = registrationNameDependencies[registrationName]
            for (var i = 0; i < dependencies.length; i++) {
              var dependency = dependencies[i]
              if (
                !(
                  isListening.hasOwnProperty(dependency) &&
                  isListening[dependency]
                )
              ) {
                return false
              }
            }
            return true
          }

          /**
           * Given any node return the first leaf node without children.
           *
           * @param {DOMElement|DOMTextNode} node
           * @return {DOMElement|DOMTextNode}
           */
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild
            }
            return node
          }

          /**
           * Get the next sibling within a container. This will walk up the
           * DOM if a node's siblings have been exhausted.
           *
           * @param {DOMElement|DOMTextNode} node
           * @return {?DOMElement|DOMTextNode}
           */
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling
              }
              node = node.parentNode
            }
          }

          /**
           * Get object describing the nodes which contain characters at offset.
           *
           * @param {DOMElement|DOMTextNode} root
           * @param {number} offset
           * @return {?object}
           */
          function getNodeForCharacterOffset(root, offset) {
            var node = getLeafNode(root)
            var nodeStart = 0
            var nodeEnd = 0

            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length

                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node: node,
                    offset: offset - nodeStart,
                  }
                }

                nodeStart = nodeEnd
              }

              node = getLeafNode(getSiblingNode(node))
            }
          }

          /**
           * @param {DOMElement} outerNode
           * @return {?object}
           */
          function getOffsets(outerNode) {
            var selection = window.getSelection && window.getSelection()

            if (!selection || selection.rangeCount === 0) {
              return null
            }

            var anchorNode = selection.anchorNode,
              anchorOffset = selection.anchorOffset,
              focusNode$$1 = selection.focusNode,
              focusOffset = selection.focusOffset

            // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
            // up/down buttons on an <input type="number">. Anonymous divs do not seem to
            // expose properties, triggering a "Permission denied error" if any of its
            // properties are accessed. The only seemingly possible way to avoid erroring
            // is to access a property that typically works for non-anonymous divs and
            // catch any error that may otherwise arise. See
            // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

            try {
              /* eslint-disable no-unused-expressions */
              anchorNode.nodeType
              focusNode$$1.nodeType
              /* eslint-enable no-unused-expressions */
            } catch (e) {
              return null
            }

            return getModernOffsetsFromPoints(
              outerNode,
              anchorNode,
              anchorOffset,
              focusNode$$1,
              focusOffset
            )
          }

          /**
           * Returns {start, end} where `start` is the character/codepoint index of
           * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
           * `end` is the index of (focusNode, focusOffset).
           *
           * Returns null if you pass in garbage input but we should probably just crash.
           *
           * Exported only for testing.
           */
          function getModernOffsetsFromPoints(
            outerNode,
            anchorNode,
            anchorOffset,
            focusNode$$1,
            focusOffset
          ) {
            var length = 0
            var start = -1
            var end = -1
            var indexWithinAnchor = 0
            var indexWithinFocus = 0
            var node = outerNode
            var parentNode = null

            outer: while (true) {
              var next = null

              while (true) {
                if (
                  node === anchorNode &&
                  (anchorOffset === 0 || node.nodeType === TEXT_NODE)
                ) {
                  start = length + anchorOffset
                }
                if (
                  node === focusNode$$1 &&
                  (focusOffset === 0 || node.nodeType === TEXT_NODE)
                ) {
                  end = length + focusOffset
                }

                if (node.nodeType === TEXT_NODE) {
                  length += node.nodeValue.length
                }

                if ((next = node.firstChild) === null) {
                  break
                }
                // Moving from `node` to its first child `next`.
                parentNode = node
                node = next
              }

              while (true) {
                if (node === outerNode) {
                  // If `outerNode` has children, this is always the second time visiting
                  // it. If it has no children, this is still the first loop, and the only
                  // valid selection is anchorNode and focusNode both equal to this node
                  // and both offsets 0, in which case we will have handled above.
                  break outer
                }
                if (
                  parentNode === anchorNode &&
                  ++indexWithinAnchor === anchorOffset
                ) {
                  start = length
                }
                if (
                  parentNode === focusNode$$1 &&
                  ++indexWithinFocus === focusOffset
                ) {
                  end = length
                }
                if ((next = node.nextSibling) !== null) {
                  break
                }
                node = parentNode
                parentNode = node.parentNode
              }

              // Moving from `node` to its next sibling `next`.
              node = next
            }

            if (start === -1 || end === -1) {
              // This should never happen. (Would happen if the anchor/focus nodes aren't
              // actually inside the passed-in node.)
              return null
            }

            return {
              start: start,
              end: end,
            }
          }

          /**
           * In modern non-IE browsers, we can support both forward and backward
           * selections.
           *
           * Note: IE10+ supports the Selection object, but it does not support
           * the `extend` method, which means that even in modern IE, it's not possible
           * to programmatically create a backward selection. Thus, for all IE
           * versions, we use the old IE API to create our selections.
           *
           * @param {DOMElement|DOMTextNode} node
           * @param {object} offsets
           */
          function setOffsets(node, offsets) {
            if (!window.getSelection) {
              return
            }

            var selection = window.getSelection()
            var length = node[getTextContentAccessor()].length
            var start = Math.min(offsets.start, length)
            var end =
              offsets.end === undefined ? start : Math.min(offsets.end, length)

            // IE 11 uses modern selection, but doesn't support the extend method.
            // Flip backward selections, so we can set with a single range.
            if (!selection.extend && start > end) {
              var temp = end
              end = start
              start = temp
            }

            var startMarker = getNodeForCharacterOffset(node, start)
            var endMarker = getNodeForCharacterOffset(node, end)

            if (startMarker && endMarker) {
              if (
                selection.rangeCount === 1 &&
                selection.anchorNode === startMarker.node &&
                selection.anchorOffset === startMarker.offset &&
                selection.focusNode === endMarker.node &&
                selection.focusOffset === endMarker.offset
              ) {
                return
              }
              var range = document.createRange()
              range.setStart(startMarker.node, startMarker.offset)
              selection.removeAllRanges()

              if (start > end) {
                selection.addRange(range)
                selection.extend(endMarker.node, endMarker.offset)
              } else {
                range.setEnd(endMarker.node, endMarker.offset)
                selection.addRange(range)
              }
            }
          }

          function isInDocument(node) {
            return containsNode(document.documentElement, node)
          }

          /**
           * @ReactInputSelection: React input selection module. Based on Selection.js,
           * but modified to be suitable for react and has a couple of bug fixes (doesn't
           * assume buttons have range selections allowed).
           * Input selection module for React.
           */

          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase()
            return (
              nodeName &&
              ((nodeName === 'input' && elem.type === 'text') ||
                nodeName === 'textarea' ||
                elem.contentEditable === 'true')
            )
          }

          function getSelectionInformation() {
            var focusedElem = getActiveElement()
            return {
              focusedElem: focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem)
                ? getSelection$1(focusedElem)
                : null,
            }
          }

          /**
           * @restoreSelection: If any selection information was potentially lost,
           * restore it. This is useful when performing operations that could remove dom
           * nodes and place them back in, resulting in focus being lost.
           */
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElement()
            var priorFocusedElem = priorSelectionInformation.focusedElem
            var priorSelectionRange = priorSelectionInformation.selectionRange
            if (
              curFocusedElem !== priorFocusedElem &&
              isInDocument(priorFocusedElem)
            ) {
              if (hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange)
              }

              // Focusing a node can change the scroll position, which is undesirable
              var ancestors = []
              var ancestor = priorFocusedElem
              while ((ancestor = ancestor.parentNode)) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop,
                  })
                }
              }

              focusNode(priorFocusedElem)

              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i]
                info.element.scrollLeft = info.left
                info.element.scrollTop = info.top
              }
            }
          }

          /**
           * @getSelection: Gets the selection bounds of a focused textarea, input or
           * contentEditable node.
           * -@input: Look up selection bounds of this input
           * -@return {start: selectionStart, end: selectionEnd}
           */
          function getSelection$1(input) {
            var selection = void 0

            if ('selectionStart' in input) {
              // Modern browser with input or textarea.
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd,
              }
            } else {
              // Content editable or old IE textarea.
              selection = getOffsets(input)
            }

            return selection || { start: 0, end: 0 }
          }

          /**
           * @setSelection: Sets the selection bounds of a textarea or input and focuses
           * the input.
           * -@input     Set selection bounds of this input or textarea
           * -@offsets   Object of same form that is returned from get*
           */
          function setSelection(input, offsets) {
            var start = offsets.start,
              end = offsets.end

            if (end === undefined) {
              end = start
            }

            if ('selectionStart' in input) {
              input.selectionStart = start
              input.selectionEnd = Math.min(end, input.value.length)
            } else {
              setOffsets(input, offsets)
            }
          }

          var skipSelectionChangeEvent =
            ExecutionEnvironment.canUseDOM &&
            'documentMode' in document &&
            document.documentMode <= 11

          var eventTypes$3 = {
            select: {
              phasedRegistrationNames: {
                bubbled: 'onSelect',
                captured: 'onSelectCapture',
              },
              dependencies: [
                'topBlur',
                'topContextMenu',
                'topFocus',
                'topKeyDown',
                'topKeyUp',
                'topMouseDown',
                'topMouseUp',
                'topSelectionChange',
              ],
            },
          }

          var activeElement$1 = null
          var activeElementInst$1 = null
          var lastSelection = null
          var mouseDown = false

          /**
           * Get an object which is a unique representation of the current selection.
           *
           * The return value will not be consistent across nodes or browsers, but
           * two identical selections on the same node will return identical objects.
           *
           * @param {DOMElement} node
           * @return {object}
           */
          function getSelection(node) {
            if ('selectionStart' in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd,
              }
            } else if (window.getSelection) {
              var selection = window.getSelection()
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset,
              }
            }
          }

          /**
           * Poll selection to see whether it's changed.
           *
           * @param {object} nativeEvent
           * @return {?SyntheticEvent}
           */
          function constructSelectEvent(nativeEvent, nativeEventTarget) {
            // Ensure we have the right element, and that the user is not dragging a
            // selection (this matches native `select` event behavior). In HTML5, select
            // fires only on input and textarea thus if there's no focused element we
            // won't dispatch.
            if (
              mouseDown ||
              activeElement$1 == null ||
              activeElement$1 !== getActiveElement()
            ) {
              return null
            }

            // Only fire when selection has actually changed.
            var currentSelection = getSelection(activeElement$1)
            if (
              !lastSelection ||
              !shallowEqual(lastSelection, currentSelection)
            ) {
              lastSelection = currentSelection

              var syntheticEvent = SyntheticEvent$1.getPooled(
                eventTypes$3.select,
                activeElementInst$1,
                nativeEvent,
                nativeEventTarget
              )

              syntheticEvent.type = 'select'
              syntheticEvent.target = activeElement$1

              accumulateTwoPhaseDispatches(syntheticEvent)

              return syntheticEvent
            }

            return null
          }

          /**
           * This plugin creates an `onSelect` event that normalizes select events
           * across form elements.
           *
           * Supported elements are:
           * - input (see `isTextInputElement`)
           * - textarea
           * - contentEditable
           *
           * This differs from native browser implementations in the following ways:
           * - Fires on contentEditable fields as well as inputs.
           * - Fires for collapsed selection.
           * - Fires after user input.
           */
          var SelectEventPlugin = {
            eventTypes: eventTypes$3,

            extractEvents: function(
              topLevelType,
              targetInst,
              nativeEvent,
              nativeEventTarget
            ) {
              var doc =
                nativeEventTarget.window === nativeEventTarget
                  ? nativeEventTarget.document
                  : nativeEventTarget.nodeType === DOCUMENT_NODE
                    ? nativeEventTarget
                    : nativeEventTarget.ownerDocument
              // Track whether all listeners exists for this plugin. If none exist, we do
              // not extract events. See #3639.
              if (!doc || !isListeningToAllDependencies('onSelect', doc)) {
                return null
              }

              var targetNode = targetInst
                ? getNodeFromInstance$1(targetInst)
                : window

              switch (topLevelType) {
                // Track the input node that has focus.
                case 'topFocus':
                  if (
                    isTextInputElement(targetNode) ||
                    targetNode.contentEditable === 'true'
                  ) {
                    activeElement$1 = targetNode
                    activeElementInst$1 = targetInst
                    lastSelection = null
                  }
                  break
                case 'topBlur':
                  activeElement$1 = null
                  activeElementInst$1 = null
                  lastSelection = null
                  break
                // Don't fire the event while the user is dragging. This matches the
                // semantics of the native select event.
                case 'topMouseDown':
                  mouseDown = true
                  break
                case 'topContextMenu':
                case 'topMouseUp':
                  mouseDown = false
                  return constructSelectEvent(nativeEvent, nativeEventTarget)
                // Chrome and IE fire non-standard event when selection is changed (and
                // sometimes when it hasn't). IE's event fires out of order with respect
                // to key and input events on deletion, so we discard it.
                //
                // Firefox doesn't support selectionchange, so check selection status
                // after each key entry. The selection changes after keydown and before
                // keyup, but we check on keydown as well in the case of holding down a
                // key, when multiple keydown events are fired but only one keyup is.
                // This is also our approach for IE handling, for the reason above.
                case 'topSelectionChange':
                  if (skipSelectionChangeEvent) {
                    break
                  }
                // falls through
                case 'topKeyDown':
                case 'topKeyUp':
                  return constructSelectEvent(nativeEvent, nativeEventTarget)
              }

              return null
            },
          }

          /**
           * @interface Event
           * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
           * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
           */
          var AnimationEventInterface = {
            animationName: null,
            elapsedTime: null,
            pseudoElement: null,
          }

          /**
           * @param {object} dispatchConfig Configuration used to dispatch this event.
           * @param {string} dispatchMarker Marker identifying the event target.
           * @param {object} nativeEvent Native browser event.
           * @extends {SyntheticEvent}
           */
          function SyntheticAnimationEvent(
            dispatchConfig,
            dispatchMarker,
            nativeEvent,
            nativeEventTarget
          ) {
            return SyntheticEvent$1.call(
              this,
              dispatchConfig,
              dispatchMarker,
              nativeEvent,
              nativeEventTarget
            )
          }

          SyntheticEvent$1.augmentClass(
            SyntheticAnimationEvent,
            AnimationEventInterface
          )

          /**
           * @interface Event
           * @see http://www.w3.org/TR/clipboard-apis/
           */
          var ClipboardEventInterface = {
            clipboardData: function(event) {
              return 'clipboardData' in event
                ? event.clipboardData
                : window.clipboardData
            },
          }

          /**
           * @param {object} dispatchConfig Configuration used to dispatch this event.
           * @param {string} dispatchMarker Marker identifying the event target.
           * @param {object} nativeEvent Native browser event.
           * @extends {SyntheticEvent}
           */
          function SyntheticClipboardEvent(
            dispatchConfig,
            dispatchMarker,
            nativeEvent,
            nativeEventTarget
          ) {
            return SyntheticEvent$1.call(
              this,
              dispatchConfig,
              dispatchMarker,
              nativeEvent,
              nativeEventTarget
            )
          }

          SyntheticEvent$1.augmentClass(
            SyntheticClipboardEvent,
            ClipboardEventInterface
          )

          /**
           * @interface FocusEvent
           * @see http://www.w3.org/TR/DOM-Level-3-Events/
           */
          var FocusEventInterface = {
            relatedTarget: null,
          }

          /**
           * @param {object} dispatchConfig Configuration used to dispatch this event.
           * @param {string} dispatchMarker Marker identifying the event target.
           * @param {object} nativeEvent Native browser event.
           * @extends {SyntheticUIEvent}
           */
          function SyntheticFocusEvent(
            dispatchConfig,
            dispatchMarker,
            nativeEvent,
            nativeEventTarget
          ) {
            return SyntheticUIEvent.call(
              this,
              dispatchConfig,
              dispatchMarker,
              nativeEvent,
              nativeEventTarget
            )
          }

          SyntheticUIEvent.augmentClass(
            SyntheticFocusEvent,
            FocusEventInterface
          )

          /**
           * `charCode` represents the actual "character code" and is safe to use with
           * `String.fromCharCode`. As such, only keys that correspond to printable
           * characters produce a valid `charCode`, the only exception to this is Enter.
           * The Tab-key is considered non-printable and does not have a `charCode`,
           * presumably because it does not produce a tab-character in browsers.
           *
           * @param {object} nativeEvent Native browser event.
           * @return {number} Normalized `charCode` property.
           */
          function getEventCharCode(nativeEvent) {
            var charCode
            var keyCode = nativeEvent.keyCode

            if ('charCode' in nativeEvent) {
              charCode = nativeEvent.charCode

              // FF does not set `charCode` for the Enter-key, check against `keyCode`.
              if (charCode === 0 && keyCode === 13) {
                charCode = 13
              }
            } else {
              // IE8 does not implement `charCode`, but `keyCode` has the correct value.
              charCode = keyCode
            }

            // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
            // Must not discard the (non-)printable Enter-key.
            if (charCode >= 32 || charCode === 13) {
              return charCode
            }

            return 0
          }

          /**
           * Normalization of deprecated HTML5 `key` values
           * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
           */
          var normalizeKey = {
            Esc: 'Escape',
            Spacebar: ' ',
            Left: 'ArrowLeft',
            Up: 'ArrowUp',
            Right: 'ArrowRight',
            Down: 'ArrowDown',
            Del: 'Delete',
            Win: 'OS',
            Menu: 'ContextMenu',
            Apps: 'ContextMenu',
            Scroll: 'ScrollLock',
            MozPrintableKey: 'Unidentified',
          }

          /**
           * Translation from legacy `keyCode` to HTML5 `key`
           * Only special keys supported, all others depend on keyboard layout or browser
           * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
           */
          var translateToKey = {
            '8': 'Backspace',
            '9': 'Tab',
            '12': 'Clear',
            '13': 'Enter',
            '16': 'Shift',
            '17': 'Control',
            '18': 'Alt',
            '19': 'Pause',
            '20': 'CapsLock',
            '27': 'Escape',
            '32': ' ',
            '33': 'PageUp',
            '34': 'PageDown',
            '35': 'End',
            '36': 'Home',
            '37': 'ArrowLeft',
            '38': 'ArrowUp',
            '39': 'ArrowRight',
            '40': 'ArrowDown',
            '45': 'Insert',
            '46': 'Delete',
            '112': 'F1',
            '113': 'F2',
            '114': 'F3',
            '115': 'F4',
            '116': 'F5',
            '117': 'F6',
            '118': 'F7',
            '119': 'F8',
            '120': 'F9',
            '121': 'F10',
            '122': 'F11',
            '123': 'F12',
            '144': 'NumLock',
            '145': 'ScrollLock',
            '224': 'Meta',
          }

          /**
           * @param {object} nativeEvent Native browser event.
           * @return {string} Normalized `key` property.
           */
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              // Normalize inconsistent values reported by browsers due to
              // implementations of a working draft specification.

              // FireFox implements `key` but returns `MozPrintableKey` for all
              // printable characters (normalized to `Unidentified`), ignore it.
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key
              if (key !== 'Unidentified') {
                return key
              }
            }

            // Browser does not implement `key`, polyfill as much of it as we can.
            if (nativeEvent.type === 'keypress') {
              var charCode = getEventCharCode(nativeEvent)

              // The enter-key is technically both printable and non-printable and can
              // thus be captured by `keypress`, no other non-printable key should.
              return charCode === 13 ? 'Enter' : String.fromCharCode(charCode)
            }
            if (
              nativeEvent.type === 'keydown' ||
              nativeEvent.type === 'keyup'
            ) {
              // While user keyboard layout determines the actual meaning of each
              // `keyCode` value, almost all function keys have a universal value.
              return translateToKey[nativeEvent.keyCode] || 'Unidentified'
            }
            return ''
          }

          /**
           * @interface KeyboardEvent
           * @see http://www.w3.org/TR/DOM-Level-3-Events/
           */
          var KeyboardEventInterface = {
            key: getEventKey,
            location: null,
            ctrlKey: null,
            shiftKey: null,
            altKey: null,
            metaKey: null,
            repeat: null,
            locale: null,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              // `charCode` is the result of a KeyPress event and represents the value of
              // the actual printable character.

              // KeyPress is deprecated, but its replacement is not yet final and not
              // implemented in any major browser. Only KeyPress has charCode.
              if (event.type === 'keypress') {
                return getEventCharCode(event)
              }
              return 0
            },
            keyCode: function(event) {
              // `keyCode` is the result of a KeyDown/Up event and represents the value of
              // physical keyboard key.

              // The actual meaning of the value depends on the users' keyboard layout
              // which cannot be detected. Assuming that it is a US keyboard layout
              // provides a surprisingly accurate mapping for US and European users.
              // Due to this, it is left to the user to implement at this time.
              if (event.type === 'keydown' || event.type === 'keyup') {
                return event.keyCode
              }
              return 0
            },
            which: function(event) {
              // `which` is an alias for either `keyCode` or `charCode` depending on the
              // type of the event.
              if (event.type === 'keypress') {
                return getEventCharCode(event)
              }
              if (event.type === 'keydown' || event.type === 'keyup') {
                return event.keyCode
              }
              return 0
            },
          }

          /**
           * @param {object} dispatchConfig Configuration used to dispatch this event.
           * @param {string} dispatchMarker Marker identifying the event target.
           * @param {object} nativeEvent Native browser event.
           * @extends {SyntheticUIEvent}
           */
          function SyntheticKeyboardEvent(
            dispatchConfig,
            dispatchMarker,
            nativeEvent,
            nativeEventTarget
          ) {
            return SyntheticUIEvent.call(
              this,
              dispatchConfig,
              dispatchMarker,
              nativeEvent,
              nativeEventTarget
            )
          }

          SyntheticUIEvent.augmentClass(
            SyntheticKeyboardEvent,
            KeyboardEventInterface
          )

          /**
           * @interface DragEvent
           * @see http://www.w3.org/TR/DOM-Level-3-Events/
           */
          var DragEventInterface = {
            dataTransfer: null,
          }

          /**
           * @param {object} dispatchConfig Configuration used to dispatch this event.
           * @param {string} dispatchMarker Marker identifying the event target.
           * @param {object} nativeEvent Native browser event.
           * @extends {SyntheticMouseEvent}
           */
          function SyntheticDragEvent(
            dispatchConfig,
            dispatchMarker,
            nativeEvent,
            nativeEventTarget
          ) {
            return SyntheticMouseEvent.call(
              this,
              dispatchConfig,
              dispatchMarker,
              nativeEvent,
              nativeEventTarget
            )
          }

          SyntheticMouseEvent.augmentClass(
            SyntheticDragEvent,
            DragEventInterface
          )

          /**
           * @interface TouchEvent
           * @see http://www.w3.org/TR/touch-events/
           */
          var TouchEventInterface = {
            touches: null,
            targetTouches: null,
            changedTouches: null,
            altKey: null,
            metaKey: null,
            ctrlKey: null,
            shiftKey: null,
            getModifierState: getEventModifierState,
          }

          /**
           * @param {object} dispatchConfig Configuration used to dispatch this event.
           * @param {string} dispatchMarker Marker identifying the event target.
           * @param {object} nativeEvent Native browser event.
           * @extends {SyntheticUIEvent}
           */
          function SyntheticTouchEvent(
            dispatchConfig,
            dispatchMarker,
            nativeEvent,
            nativeEventTarget
          ) {
            return SyntheticUIEvent.call(
              this,
              dispatchConfig,
              dispatchMarker,
              nativeEvent,
              nativeEventTarget
            )
          }

          SyntheticUIEvent.augmentClass(
            SyntheticTouchEvent,
            TouchEventInterface
          )

          /**
           * @interface Event
           * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
           * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
           */
          var TransitionEventInterface = {
            propertyName: null,
            elapsedTime: null,
            pseudoElement: null,
          }

          /**
           * @param {object} dispatchConfig Configuration used to dispatch this event.
           * @param {string} dispatchMarker Marker identifying the event target.
           * @param {object} nativeEvent Native browser event.
           * @extends {SyntheticEvent}
           */
          function SyntheticTransitionEvent(
            dispatchConfig,
            dispatchMarker,
            nativeEvent,
            nativeEventTarget
          ) {
            return SyntheticEvent$1.call(
              this,
              dispatchConfig,
              dispatchMarker,
              nativeEvent,
              nativeEventTarget
            )
          }

          SyntheticEvent$1.augmentClass(
            SyntheticTransitionEvent,
            TransitionEventInterface
          )

          /**
           * @interface WheelEvent
           * @see http://www.w3.org/TR/DOM-Level-3-Events/
           */
          var WheelEventInterface = {
            deltaX: function(event) {
              return 'deltaX' in event
                ? event.deltaX // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                : 'wheelDeltaX' in event ? -event.wheelDeltaX : 0
            },
            deltaY: function(event) {
              return 'deltaY' in event
                ? event.deltaY // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                : 'wheelDeltaY' in event
                  ? -event.wheelDeltaY // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  : 'wheelDelta' in event ? -event.wheelDelta : 0
            },
            deltaZ: null,

            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: null,
          }

          /**
           * @param {object} dispatchConfig Configuration used to dispatch this event.
           * @param {string} dispatchMarker Marker identifying the event target.
           * @param {object} nativeEvent Native browser event.
           * @extends {SyntheticMouseEvent}
           */
          function SyntheticWheelEvent(
            dispatchConfig,
            dispatchMarker,
            nativeEvent,
            nativeEventTarget
          ) {
            return SyntheticMouseEvent.call(
              this,
              dispatchConfig,
              dispatchMarker,
              nativeEvent,
              nativeEventTarget
            )
          }

          SyntheticMouseEvent.augmentClass(
            SyntheticWheelEvent,
            WheelEventInterface
          )

          /**
           * Turns
           * ['abort', ...]
           * into
           * eventTypes = {
           *   'abort': {
           *     phasedRegistrationNames: {
           *       bubbled: 'onAbort',
           *       captured: 'onAbortCapture',
           *     },
           *     dependencies: ['topAbort'],
           *   },
           *   ...
           * };
           * topLevelEventsToDispatchConfig = {
           *   'topAbort': { sameConfig }
           * };
           */
          var eventTypes$4 = {}
          var topLevelEventsToDispatchConfig = {}
          ;[
            'abort',
            'animationEnd',
            'animationIteration',
            'animationStart',
            'blur',
            'cancel',
            'canPlay',
            'canPlayThrough',
            'click',
            'close',
            'contextMenu',
            'copy',
            'cut',
            'doubleClick',
            'drag',
            'dragEnd',
            'dragEnter',
            'dragExit',
            'dragLeave',
            'dragOver',
            'dragStart',
            'drop',
            'durationChange',
            'emptied',
            'encrypted',
            'ended',
            'error',
            'focus',
            'input',
            'invalid',
            'keyDown',
            'keyPress',
            'keyUp',
            'load',
            'loadedData',
            'loadedMetadata',
            'loadStart',
            'mouseDown',
            'mouseMove',
            'mouseOut',
            'mouseOver',
            'mouseUp',
            'paste',
            'pause',
            'play',
            'playing',
            'progress',
            'rateChange',
            'reset',
            'scroll',
            'seeked',
            'seeking',
            'stalled',
            'submit',
            'suspend',
            'timeUpdate',
            'toggle',
            'touchCancel',
            'touchEnd',
            'touchMove',
            'touchStart',
            'transitionEnd',
            'volumeChange',
            'waiting',
            'wheel',
          ].forEach(function(event) {
            var capitalizedEvent = event[0].toUpperCase() + event.slice(1)
            var onEvent = 'on' + capitalizedEvent
            var topEvent = 'top' + capitalizedEvent

            var type = {
              phasedRegistrationNames: {
                bubbled: onEvent,
                captured: onEvent + 'Capture',
              },
              dependencies: [topEvent],
            }
            eventTypes$4[event] = type
            topLevelEventsToDispatchConfig[topEvent] = type
          })

          // Only used in DEV for exhaustiveness validation.
          var knownHTMLTopLevelTypes = [
            'topAbort',
            'topCancel',
            'topCanPlay',
            'topCanPlayThrough',
            'topClose',
            'topDurationChange',
            'topEmptied',
            'topEncrypted',
            'topEnded',
            'topError',
            'topInput',
            'topInvalid',
            'topLoad',
            'topLoadedData',
            'topLoadedMetadata',
            'topLoadStart',
            'topPause',
            'topPlay',
            'topPlaying',
            'topProgress',
            'topRateChange',
            'topReset',
            'topSeeked',
            'topSeeking',
            'topStalled',
            'topSubmit',
            'topSuspend',
            'topTimeUpdate',
            'topToggle',
            'topVolumeChange',
            'topWaiting',
          ]

          var SimpleEventPlugin = {
            eventTypes: eventTypes$4,

            extractEvents: function(
              topLevelType,
              targetInst,
              nativeEvent,
              nativeEventTarget
            ) {
              var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType]
              if (!dispatchConfig) {
                return null
              }
              var EventConstructor
              switch (topLevelType) {
                case 'topKeyPress':
                  // Firefox creates a keypress event for function keys too. This removes
                  // the unwanted keypress events. Enter is however both printable and
                  // non-printable. One would expect Tab to be as well (but it isn't).
                  if (getEventCharCode(nativeEvent) === 0) {
                    return null
                  }
                /* falls through */
                case 'topKeyDown':
                case 'topKeyUp':
                  EventConstructor = SyntheticKeyboardEvent
                  break
                case 'topBlur':
                case 'topFocus':
                  EventConstructor = SyntheticFocusEvent
                  break
                case 'topClick':
                  // Firefox creates a click event on right mouse clicks. This removes the
                  // unwanted click events.
                  if (nativeEvent.button === 2) {
                    return null
                  }
                /* falls through */
                case 'topDoubleClick':
                case 'topMouseDown':
                case 'topMouseMove':
                case 'topMouseUp':
                // TODO: Disabled elements should not respond to mouse events
                /* falls through */
                case 'topMouseOut':
                case 'topMouseOver':
                case 'topContextMenu':
                  EventConstructor = SyntheticMouseEvent
                  break
                case 'topDrag':
                case 'topDragEnd':
                case 'topDragEnter':
                case 'topDragExit':
                case 'topDragLeave':
                case 'topDragOver':
                case 'topDragStart':
                case 'topDrop':
                  EventConstructor = SyntheticDragEvent
                  break
                case 'topTouchCancel':
                case 'topTouchEnd':
                case 'topTouchMove':
                case 'topTouchStart':
                  EventConstructor = SyntheticTouchEvent
                  break
                case 'topAnimationEnd':
                case 'topAnimationIteration':
                case 'topAnimationStart':
                  EventConstructor = SyntheticAnimationEvent
                  break
                case 'topTransitionEnd':
                  EventConstructor = SyntheticTransitionEvent
                  break
                case 'topScroll':
                  EventConstructor = SyntheticUIEvent
                  break
                case 'topWheel':
                  EventConstructor = SyntheticWheelEvent
                  break
                case 'topCopy':
                case 'topCut':
                case 'topPaste':
                  EventConstructor = SyntheticClipboardEvent
                  break
                default:
                  {
                    if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
                      warning(
                        false,
                        'SimpleEventPlugin: Unhandled event type, `%s`. This warning ' +
                          'is likely caused by a bug in React. Please file an issue.',
                        topLevelType
                      )
                    }
                  }
                  // HTML Events
                  // @see http://www.w3.org/TR/html5/index.html#events-0
                  EventConstructor = SyntheticEvent$1
                  break
              }
              var event = EventConstructor.getPooled(
                dispatchConfig,
                targetInst,
                nativeEvent,
                nativeEventTarget
              )
              accumulateTwoPhaseDispatches(event)
              return event
            },
          }

          setHandleTopLevel(handleTopLevel)

          /**
           * Inject modules for resolving DOM hierarchy and plugin ordering.
           */
          injection$1.injectEventPluginOrder(DOMEventPluginOrder)
          injection$2.injectComponentTree(ReactDOMComponentTree)

          /**
           * Some important event plugins included by default (without having to require
           * them).
           */
          injection$1.injectEventPluginsByName({
            SimpleEventPlugin: SimpleEventPlugin,
            EnterLeaveEventPlugin: EnterLeaveEventPlugin,
            ChangeEventPlugin: ChangeEventPlugin,
            SelectEventPlugin: SelectEventPlugin,
            BeforeInputEventPlugin: BeforeInputEventPlugin,
          })

          var enableAsyncSubtreeAPI = true
          var enableAsyncSchedulingByDefaultInReactDOM = false
          // Exports ReactDOM.createRoot
          var enableCreateRoot = false
          var enableUserTimingAPI = true

          // Mutating mode (React DOM, React ART, React Native):
          var enableMutatingReconciler = true
          // Experimental noop mode (currently unused):
          var enableNoopReconciler = false
          // Experimental persistent mode (CS):
          var enablePersistentReconciler = false

          // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
          var debugRenderPhaseSideEffects = false

          // Only used in www builds.

          var valueStack = []

          {
            var fiberStack = []
          }

          var index = -1

          function createCursor(defaultValue) {
            return {
              current: defaultValue,
            }
          }

          function pop(cursor, fiber) {
            if (index < 0) {
              {
                warning(false, 'Unexpected pop.')
              }
              return
            }

            {
              if (fiber !== fiberStack[index]) {
                warning(false, 'Unexpected Fiber popped.')
              }
            }

            cursor.current = valueStack[index]

            valueStack[index] = null

            {
              fiberStack[index] = null
            }

            index--
          }

          function push(cursor, value, fiber) {
            index++

            valueStack[index] = cursor.current

            {
              fiberStack[index] = fiber
            }

            cursor.current = value
          }

          function reset$1() {
            while (index > -1) {
              valueStack[index] = null

              {
                fiberStack[index] = null
              }

              index--
            }
          }

          var describeComponentFrame = function(name, source, ownerName) {
            return (
              '\n    in ' +
              (name || 'Unknown') +
              (source
                ? ' (at ' +
                  source.fileName.replace(/^.*[\\\/]/, '') +
                  ':' +
                  source.lineNumber +
                  ')'
                : ownerName ? ' (created by ' + ownerName + ')' : '')
            )
          }

          function describeFiber(fiber) {
            switch (fiber.tag) {
              case IndeterminateComponent:
              case FunctionalComponent:
              case ClassComponent:
              case HostComponent:
                var owner = fiber._debugOwner
                var source = fiber._debugSource
                var name = getComponentName(fiber)
                var ownerName = null
                if (owner) {
                  ownerName = getComponentName(owner)
                }
                return describeComponentFrame(name, source, ownerName)
              default:
                return ''
            }
          }

          // This function can only be called with a work-in-progress fiber and
          // only during begin or complete phase. Do not call it under any other
          // circumstances.
          function getStackAddendumByWorkInProgressFiber(workInProgress) {
            var info = ''
            var node = workInProgress
            do {
              info += describeFiber(node)
              // Otherwise this return pointer might point to the wrong tree:
              node = node['return']
            } while (node)
            return info
          }

          function getCurrentFiberOwnerName() {
            {
              var fiber = ReactDebugCurrentFiber.current
              if (fiber === null) {
                return null
              }
              var owner = fiber._debugOwner
              if (owner !== null && typeof owner !== 'undefined') {
                return getComponentName(owner)
              }
            }
            return null
          }

          function getCurrentFiberStackAddendum() {
            {
              var fiber = ReactDebugCurrentFiber.current
              if (fiber === null) {
                return null
              }
              // Safe because if current fiber exists, we are reconciling,
              // and it is guaranteed to be the work-in-progress version.
              return getStackAddendumByWorkInProgressFiber(fiber)
            }
            return null
          }

          function resetCurrentFiber() {
            ReactDebugCurrentFrame.getCurrentStack = null
            ReactDebugCurrentFiber.current = null
            ReactDebugCurrentFiber.phase = null
          }

          function setCurrentFiber(fiber) {
            ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackAddendum
            ReactDebugCurrentFiber.current = fiber
            ReactDebugCurrentFiber.phase = null
          }

          function setCurrentPhase(phase) {
            ReactDebugCurrentFiber.phase = phase
          }

          var ReactDebugCurrentFiber = {
            current: null,
            phase: null,
            resetCurrentFiber: resetCurrentFiber,
            setCurrentFiber: setCurrentFiber,
            setCurrentPhase: setCurrentPhase,
            getCurrentFiberOwnerName: getCurrentFiberOwnerName,
            getCurrentFiberStackAddendum: getCurrentFiberStackAddendum,
          }

          // Prefix measurements so that it's possible to filter them.
          // Longer prefixes are hard to read in DevTools.
          var reactEmoji = '\u269B'
          var warningEmoji = '\u26D4'
          var supportsUserTiming =
            typeof performance !== 'undefined' &&
            typeof performance.mark === 'function' &&
            typeof performance.clearMarks === 'function' &&
            typeof performance.measure === 'function' &&
            typeof performance.clearMeasures === 'function'

          // Keep track of current fiber so that we know the path to unwind on pause.
          // TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?
          var currentFiber = null
          // If we're in the middle of user code, which fiber and method is it?
          // Reusing `currentFiber` would be confusing for this because user code fiber
          // can change during commit phase too, but we don't need to unwind it (since
          // lifecycles in the commit phase don't resemble a tree).
          var currentPhase = null
          var currentPhaseFiber = null
          // Did lifecycle hook schedule an update? This is often a performance problem,
          // so we will keep track of it, and include it in the report.
          // Track commits caused by cascading updates.
          var isCommitting = false
          var hasScheduledUpdateInCurrentCommit = false
          var hasScheduledUpdateInCurrentPhase = false
          var commitCountInCurrentWorkLoop = 0
          var effectCountInCurrentCommit = 0
          var isWaitingForCallback = false
          // During commits, we only show a measurement once per method name
          // to avoid stretch the commit phase with measurement overhead.
          var labelsInCurrentCommit = new Set()

          var formatMarkName = function(markName) {
            return reactEmoji + ' ' + markName
          }

          var formatLabel = function(label, warning$$1) {
            var prefix = warning$$1 ? warningEmoji + ' ' : reactEmoji + ' '
            var suffix = warning$$1 ? ' Warning: ' + warning$$1 : ''
            return '' + prefix + label + suffix
          }

          var beginMark = function(markName) {
            performance.mark(formatMarkName(markName))
          }

          var clearMark = function(markName) {
            performance.clearMarks(formatMarkName(markName))
          }

          var endMark = function(label, markName, warning$$1) {
            var formattedMarkName = formatMarkName(markName)
            var formattedLabel = formatLabel(label, warning$$1)
            try {
              performance.measure(formattedLabel, formattedMarkName)
            } catch (err) {}
            // If previous mark was missing for some reason, this will throw.
            // This could only happen if React crashed in an unexpected place earlier.
            // Don't pile on with more errors.

            // Clear marks immediately to avoid growing buffer.
            performance.clearMarks(formattedMarkName)
            performance.clearMeasures(formattedLabel)
          }

          var getFiberMarkName = function(label, debugID) {
            return label + ' (#' + debugID + ')'
          }

          var getFiberLabel = function(componentName, isMounted, phase) {
            if (phase === null) {
              // These are composite component total time measurements.
              return (
                componentName + ' [' + (isMounted ? 'update' : 'mount') + ']'
              )
            } else {
              // Composite component methods.
              return componentName + '.' + phase
            }
          }

          var beginFiberMark = function(fiber, phase) {
            var componentName = getComponentName(fiber) || 'Unknown'
            var debugID = fiber._debugID
            var isMounted = fiber.alternate !== null
            var label = getFiberLabel(componentName, isMounted, phase)

            if (isCommitting && labelsInCurrentCommit.has(label)) {
              // During the commit phase, we don't show duplicate labels because
              // there is a fixed overhead for every measurement, and we don't
              // want to stretch the commit phase beyond necessary.
              return false
            }
            labelsInCurrentCommit.add(label)

            var markName = getFiberMarkName(label, debugID)
            beginMark(markName)
            return true
          }

          var clearFiberMark = function(fiber, phase) {
            var componentName = getComponentName(fiber) || 'Unknown'
            var debugID = fiber._debugID
            var isMounted = fiber.alternate !== null
            var label = getFiberLabel(componentName, isMounted, phase)
            var markName = getFiberMarkName(label, debugID)
            clearMark(markName)
          }

          var endFiberMark = function(fiber, phase, warning$$1) {
            var componentName = getComponentName(fiber) || 'Unknown'
            var debugID = fiber._debugID
            var isMounted = fiber.alternate !== null
            var label = getFiberLabel(componentName, isMounted, phase)
            var markName = getFiberMarkName(label, debugID)
            endMark(label, markName, warning$$1)
          }

          var shouldIgnoreFiber = function(fiber) {
            // Host components should be skipped in the timeline.
            // We could check typeof fiber.type, but does this work with RN?
            switch (fiber.tag) {
              case HostRoot:
              case HostComponent:
              case HostText:
              case HostPortal:
              case ReturnComponent:
              case Fragment:
                return true
              default:
                return false
            }
          }

          var clearPendingPhaseMeasurement = function() {
            if (currentPhase !== null && currentPhaseFiber !== null) {
              clearFiberMark(currentPhaseFiber, currentPhase)
            }
            currentPhaseFiber = null
            currentPhase = null
            hasScheduledUpdateInCurrentPhase = false
          }

          var pauseTimers = function() {
            // Stops all currently active measurements so that they can be resumed
            // if we continue in a later deferred loop from the same unit of work.
            var fiber = currentFiber
            while (fiber) {
              if (fiber._debugIsCurrentlyTiming) {
                endFiberMark(fiber, null, null)
              }
              fiber = fiber['return']
            }
          }

          var resumeTimersRecursively = function(fiber) {
            if (fiber['return'] !== null) {
              resumeTimersRecursively(fiber['return'])
            }
            if (fiber._debugIsCurrentlyTiming) {
              beginFiberMark(fiber, null)
            }
          }

          var resumeTimers = function() {
            // Resumes all measurements that were active during the last deferred loop.
            if (currentFiber !== null) {
              resumeTimersRecursively(currentFiber)
            }
          }

          function recordEffect() {
            if (enableUserTimingAPI) {
              effectCountInCurrentCommit++
            }
          }

          function recordScheduleUpdate() {
            if (enableUserTimingAPI) {
              if (isCommitting) {
                hasScheduledUpdateInCurrentCommit = true
              }
              if (
                currentPhase !== null &&
                currentPhase !== 'componentWillMount' &&
                currentPhase !== 'componentWillReceiveProps'
              ) {
                hasScheduledUpdateInCurrentPhase = true
              }
            }
          }

          function startRequestCallbackTimer() {
            if (enableUserTimingAPI) {
              if (supportsUserTiming && !isWaitingForCallback) {
                isWaitingForCallback = true
                beginMark('(Waiting for async callback...)')
              }
            }
          }

          function stopRequestCallbackTimer(didExpire) {
            if (enableUserTimingAPI) {
              if (supportsUserTiming) {
                isWaitingForCallback = false
                var warning$$1 = didExpire
                  ? 'React was blocked by main thread'
                  : null
                endMark(
                  '(Waiting for async callback...)',
                  '(Waiting for async callback...)',
                  warning$$1
                )
              }
            }
          }

          function startWorkTimer(fiber) {
            if (enableUserTimingAPI) {
              if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                return
              }
              // If we pause, this is the fiber to unwind from.
              currentFiber = fiber
              if (!beginFiberMark(fiber, null)) {
                return
              }
              fiber._debugIsCurrentlyTiming = true
            }
          }

          function cancelWorkTimer(fiber) {
            if (enableUserTimingAPI) {
              if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                return
              }
              // Remember we shouldn't complete measurement for this fiber.
              // Otherwise flamechart will be deep even for small updates.
              fiber._debugIsCurrentlyTiming = false
              clearFiberMark(fiber, null)
            }
          }

          function stopWorkTimer(fiber) {
            if (enableUserTimingAPI) {
              if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                return
              }
              // If we pause, its parent is the fiber to unwind from.
              currentFiber = fiber['return']
              if (!fiber._debugIsCurrentlyTiming) {
                return
              }
              fiber._debugIsCurrentlyTiming = false
              endFiberMark(fiber, null, null)
            }
          }

          function stopFailedWorkTimer(fiber) {
            if (enableUserTimingAPI) {
              if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
                return
              }
              // If we pause, its parent is the fiber to unwind from.
              currentFiber = fiber['return']
              if (!fiber._debugIsCurrentlyTiming) {
                return
              }
              fiber._debugIsCurrentlyTiming = false
              var warning$$1 = 'An error was thrown inside this error boundary'
              endFiberMark(fiber, null, warning$$1)
            }
          }

          function startPhaseTimer(fiber, phase) {
            if (enableUserTimingAPI) {
              if (!supportsUserTiming) {
                return
              }
              clearPendingPhaseMeasurement()
              if (!beginFiberMark(fiber, phase)) {
                return
              }
              currentPhaseFiber = fiber
              currentPhase = phase
            }
          }

          function stopPhaseTimer() {
            if (enableUserTimingAPI) {
              if (!supportsUserTiming) {
                return
              }
              if (currentPhase !== null && currentPhaseFiber !== null) {
                var warning$$1 = hasScheduledUpdateInCurrentPhase
                  ? 'Scheduled a cascading update'
                  : null
                endFiberMark(currentPhaseFiber, currentPhase, warning$$1)
              }
              currentPhase = null
              currentPhaseFiber = null
            }
          }

          function startWorkLoopTimer(nextUnitOfWork) {
            if (enableUserTimingAPI) {
              currentFiber = nextUnitOfWork
              if (!supportsUserTiming) {
                return
              }
              commitCountInCurrentWorkLoop = 0
              // This is top level call.
              // Any other measurements are performed within.
              beginMark('(React Tree Reconciliation)')
              // Resume any measurements that were in progress during the last loop.
              resumeTimers()
            }
          }

          function stopWorkLoopTimer(interruptedBy) {
            if (enableUserTimingAPI) {
              if (!supportsUserTiming) {
                return
              }
              var warning$$1 = null
              if (interruptedBy !== null) {
                if (interruptedBy.tag === HostRoot) {
                  warning$$1 =
                    'A top-level update interrupted the previous render'
                } else {
                  var componentName =
                    getComponentName(interruptedBy) || 'Unknown'
                  warning$$1 =
                    'An update to ' +
                    componentName +
                    ' interrupted the previous render'
                }
              } else if (commitCountInCurrentWorkLoop > 1) {
                warning$$1 = 'There were cascading updates'
              }
              commitCountInCurrentWorkLoop = 0
              // Pause any measurements until the next loop.
              pauseTimers()
              endMark(
                '(React Tree Reconciliation)',
                '(React Tree Reconciliation)',
                warning$$1
              )
            }
          }

          function startCommitTimer() {
            if (enableUserTimingAPI) {
              if (!supportsUserTiming) {
                return
              }
              isCommitting = true
              hasScheduledUpdateInCurrentCommit = false
              labelsInCurrentCommit.clear()
              beginMark('(Committing Changes)')
            }
          }

          function stopCommitTimer() {
            if (enableUserTimingAPI) {
              if (!supportsUserTiming) {
                return
              }

              var warning$$1 = null
              if (hasScheduledUpdateInCurrentCommit) {
                warning$$1 = 'Lifecycle hook scheduled a cascading update'
              } else if (commitCountInCurrentWorkLoop > 0) {
                warning$$1 = 'Caused by a cascading update in earlier commit'
              }
              hasScheduledUpdateInCurrentCommit = false
              commitCountInCurrentWorkLoop++
              isCommitting = false
              labelsInCurrentCommit.clear()

              endMark(
                '(Committing Changes)',
                '(Committing Changes)',
                warning$$1
              )
            }
          }

          function startCommitHostEffectsTimer() {
            if (enableUserTimingAPI) {
              if (!supportsUserTiming) {
                return
              }
              effectCountInCurrentCommit = 0
              beginMark('(Committing Host Effects)')
            }
          }

          function stopCommitHostEffectsTimer() {
            if (enableUserTimingAPI) {
              if (!supportsUserTiming) {
                return
              }
              var count = effectCountInCurrentCommit
              effectCountInCurrentCommit = 0
              endMark(
                '(Committing Host Effects: ' + count + ' Total)',
                '(Committing Host Effects)',
                null
              )
            }
          }

          function startCommitLifeCyclesTimer() {
            if (enableUserTimingAPI) {
              if (!supportsUserTiming) {
                return
              }
              effectCountInCurrentCommit = 0
              beginMark('(Calling Lifecycle Methods)')
            }
          }

          function stopCommitLifeCyclesTimer() {
            if (enableUserTimingAPI) {
              if (!supportsUserTiming) {
                return
              }
              var count = effectCountInCurrentCommit
              effectCountInCurrentCommit = 0
              endMark(
                '(Calling Lifecycle Methods: ' + count + ' Total)',
                '(Calling Lifecycle Methods)',
                null
              )
            }
          }

          {
            var warnedAboutMissingGetChildContext = {}
          }

          // A cursor to the current merged context object on the stack.
          var contextStackCursor = createCursor(emptyObject)
          // A cursor to a boolean indicating whether the context has changed.
          var didPerformWorkStackCursor = createCursor(false)
          // Keep track of the previous context object that was on the stack.
          // We use this to get access to the parent context after we have already
          // pushed the next context provider, and now need to merge their contexts.
          var previousContext = emptyObject

          function getUnmaskedContext(workInProgress) {
            var hasOwnContext = isContextProvider(workInProgress)
            if (hasOwnContext) {
              // If the fiber is a context provider itself, when we read its context
              // we have already pushed its own child context on the stack. A context
              // provider should not "see" its own child context. Therefore we read the
              // previous (parent) context instead for a context provider.
              return previousContext
            }
            return contextStackCursor.current
          }

          function cacheContext(
            workInProgress,
            unmaskedContext,
            maskedContext
          ) {
            var instance = workInProgress.stateNode
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext
          }

          function getMaskedContext(workInProgress, unmaskedContext) {
            var type = workInProgress.type
            var contextTypes = type.contextTypes
            if (!contextTypes) {
              return emptyObject
            }

            // Avoid recreating masked context unless unmasked context has changed.
            // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
            // This may trigger infinite loops if componentWillReceiveProps calls setState.
            var instance = workInProgress.stateNode
            if (
              instance &&
              instance.__reactInternalMemoizedUnmaskedChildContext ===
                unmaskedContext
            ) {
              return instance.__reactInternalMemoizedMaskedChildContext
            }

            var context = {}
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key]
            }

            {
              var name = getComponentName(workInProgress) || 'Unknown'
              checkPropTypes(
                contextTypes,
                context,
                'context',
                name,
                ReactDebugCurrentFiber.getCurrentFiberStackAddendum
              )
            }

            // Cache unmasked context so we can avoid recreating masked context unless necessary.
            // Context is created before the class component is instantiated so check for instance.
            if (instance) {
              cacheContext(workInProgress, unmaskedContext, context)
            }

            return context
          }

          function hasContextChanged() {
            return didPerformWorkStackCursor.current
          }

          function isContextConsumer(fiber) {
            return (
              fiber.tag === ClassComponent && fiber.type.contextTypes != null
            )
          }

          function isContextProvider(fiber) {
            return (
              fiber.tag === ClassComponent &&
              fiber.type.childContextTypes != null
            )
          }

          function popContextProvider(fiber) {
            if (!isContextProvider(fiber)) {
              return
            }

            pop(didPerformWorkStackCursor, fiber)
            pop(contextStackCursor, fiber)
          }

          function popTopLevelContextObject(fiber) {
            pop(didPerformWorkStackCursor, fiber)
            pop(contextStackCursor, fiber)
          }

          function pushTopLevelContextObject(fiber, context, didChange) {
            !(contextStackCursor.cursor == null)
              ? invariant(
                  false,
                  'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.'
                )
              : void 0

            push(contextStackCursor, context, fiber)
            push(didPerformWorkStackCursor, didChange, fiber)
          }

          function processChildContext(fiber, parentContext) {
            var instance = fiber.stateNode
            var childContextTypes = fiber.type.childContextTypes

            // TODO (bvaughn) Replace this behavior with an invariant() in the future.
            // It has only been added in Fiber to match the (unintentional) behavior in Stack.
            if (typeof instance.getChildContext !== 'function') {
              {
                var componentName = getComponentName(fiber) || 'Unknown'

                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true
                  warning(
                    false,
                    '%s.childContextTypes is specified but there is no getChildContext() method ' +
                      'on the instance. You can either define getChildContext() on %s or remove ' +
                      'childContextTypes from it.',
                    componentName,
                    componentName
                  )
                }
              }
              return parentContext
            }

            var childContext = void 0
            {
              ReactDebugCurrentFiber.setCurrentPhase('getChildContext')
            }
            startPhaseTimer(fiber, 'getChildContext')
            childContext = instance.getChildContext()
            stopPhaseTimer()
            {
              ReactDebugCurrentFiber.setCurrentPhase(null)
            }
            for (var contextKey in childContext) {
              !(contextKey in childContextTypes)
                ? invariant(
                    false,
                    '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
                    getComponentName(fiber) || 'Unknown',
                    contextKey
                  )
                : void 0
            }
            {
              var name = getComponentName(fiber) || 'Unknown'
              checkPropTypes(
                childContextTypes,
                childContext,
                'child context',
                name,
                // In practice, there is one case in which we won't get a stack. It's when
                // somebody calls unstable_renderSubtreeIntoContainer() and we process
                // context from the parent component instance. The stack will be missing
                // because it's outside of the reconciliation, and so the pointer has not
                // been set. This is rare and doesn't matter. We'll also remove that API.
                ReactDebugCurrentFiber.getCurrentFiberStackAddendum
              )
            }

            return _assign({}, parentContext, childContext)
          }

          function pushContextProvider(workInProgress) {
            if (!isContextProvider(workInProgress)) {
              return false
            }

            var instance = workInProgress.stateNode
            // We push the context as early as possible to ensure stack integrity.
            // If the instance does not exist yet, we will push null at first,
            // and replace it on the stack later when invalidating the context.
            var memoizedMergedChildContext =
              (instance &&
                instance.__reactInternalMemoizedMergedChildContext) ||
              emptyObject

            // Remember the parent context so we can merge with it later.
            // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
            previousContext = contextStackCursor.current
            push(contextStackCursor, memoizedMergedChildContext, workInProgress)
            push(
              didPerformWorkStackCursor,
              didPerformWorkStackCursor.current,
              workInProgress
            )

            return true
          }

          function invalidateContextProvider(workInProgress, didChange) {
            var instance = workInProgress.stateNode
            !instance
              ? invariant(
                  false,
                  'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.'
                )
              : void 0

            if (didChange) {
              // Merge parent and own context.
              // Skip this if we're not updating due to sCU.
              // This avoids unnecessarily recomputing memoized values.
              var mergedContext = processChildContext(
                workInProgress,
                previousContext
              )
              instance.__reactInternalMemoizedMergedChildContext = mergedContext

              // Replace the old (or empty) context with the new one.
              // It is important to unwind the context in the reverse order.
              pop(didPerformWorkStackCursor, workInProgress)
              pop(contextStackCursor, workInProgress)
              // Now push the new context and mark that it has changed.
              push(contextStackCursor, mergedContext, workInProgress)
              push(didPerformWorkStackCursor, didChange, workInProgress)
            } else {
              pop(didPerformWorkStackCursor, workInProgress)
              push(didPerformWorkStackCursor, didChange, workInProgress)
            }
          }

          function resetContext() {
            previousContext = emptyObject
            contextStackCursor.current = emptyObject
            didPerformWorkStackCursor.current = false
          }

          function findCurrentUnmaskedContext(fiber) {
            // Currently this is only used with renderSubtreeIntoContainer; not sure if it
            // makes sense elsewhere
            !(isFiberMounted(fiber) && fiber.tag === ClassComponent)
              ? invariant(
                  false,
                  'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.'
                )
              : void 0

            var node = fiber
            while (node.tag !== HostRoot) {
              if (isContextProvider(node)) {
                return node.stateNode.__reactInternalMemoizedMergedChildContext
              }
              var parent = node['return']
              !parent
                ? invariant(
                    false,
                    'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.'
                  )
                : void 0
              node = parent
            }
            return node.stateNode.context
          }

          var NoWork = 0 // TODO: Use an opaque type once ESLint et al support the syntax

          var Sync = 1
          var Never = 2147483647 // Max int32: Math.pow(2, 31) - 1

          var UNIT_SIZE = 10
          var MAGIC_NUMBER_OFFSET = 2

          // 1 unit of expiration time represents 10ms.
          function msToExpirationTime(ms) {
            // Always add an offset so that we don't clash with the magic number for NoWork.
            return ((ms / UNIT_SIZE) | 0) + MAGIC_NUMBER_OFFSET
          }

          function expirationTimeToMs(expirationTime) {
            return (expirationTime - MAGIC_NUMBER_OFFSET) * UNIT_SIZE
          }

          function ceiling(num, precision) {
            return (((num / precision) | 0) + 1) * precision
          }

          function computeExpirationBucket(
            currentTime,
            expirationInMs,
            bucketSizeMs
          ) {
            return ceiling(
              currentTime + expirationInMs / UNIT_SIZE,
              bucketSizeMs / UNIT_SIZE
            )
          }

          var NoContext = 0
          var AsyncUpdates = 1

          {
            var hasBadMapPolyfill = false
            try {
              var nonExtensibleObject = Object.preventExtensions({})
              /* eslint-disable no-new */

              /* eslint-enable no-new */
            } catch (e) {
              // TODO: Consider warning about bad polyfills
              hasBadMapPolyfill = true
            }
          }

          // A Fiber is work on a Component that needs to be done or was done. There can
          // be more than one per component.

          {
            var debugCounter = 1
          }

          function FiberNode(tag, key, internalContextTag) {
            // Instance
            this.tag = tag
            this.key = key
            this.type = null
            this.stateNode = null

            // Fiber
            this['return'] = null
            this.child = null
            this.sibling = null
            this.index = 0

            this.ref = null

            this.pendingProps = null
            this.memoizedProps = null
            this.updateQueue = null
            this.memoizedState = null

            this.internalContextTag = internalContextTag

            // Effects
            this.effectTag = NoEffect
            this.nextEffect = null

            this.firstEffect = null
            this.lastEffect = null

            this.expirationTime = NoWork

            this.alternate = null

            {
              this._debugID = debugCounter++
              this._debugSource = null
              this._debugOwner = null
              this._debugIsCurrentlyTiming = false
              if (
                !hasBadMapPolyfill &&
                typeof Object.preventExtensions === 'function'
              ) {
                Object.preventExtensions(this)
              }
            }
          }

          // This is a constructor function, rather than a POJO constructor, still
          // please ensure we do the following:
          // 1) Nobody should add any instance methods on this. Instance methods can be
          //    more difficult to predict when they get optimized and they are almost
          //    never inlined properly in static compilers.
          // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
          //    always know when it is a fiber.
          // 3) We might want to experiment with using numeric keys since they are easier
          //    to optimize in a non-JIT environment.
          // 4) We can easily go from a constructor to a createFiber object literal if that
          //    is faster.
          // 5) It should be easy to port this to a C struct and keep a C implementation
          //    compatible.
          var createFiber = function(tag, key, internalContextTag) {
            // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
            return new FiberNode(tag, key, internalContextTag)
          }

          function shouldConstruct(Component) {
            return !!(
              Component.prototype && Component.prototype.isReactComponent
            )
          }

          // This is used to create an alternate fiber to do work on.
          function createWorkInProgress(current, pendingProps, expirationTime) {
            var workInProgress = current.alternate
            if (workInProgress === null) {
              // We use a double buffering pooling technique because we know that we'll
              // only ever need at most two versions of a tree. We pool the "other" unused
              // node that we're free to reuse. This is lazily created to avoid allocating
              // extra objects for things that are never updated. It also allow us to
              // reclaim the extra memory if needed.
              workInProgress = createFiber(
                current.tag,
                current.key,
                current.internalContextTag
              )
              workInProgress.type = current.type
              workInProgress.stateNode = current.stateNode

              {
                // DEV-only fields
                workInProgress._debugID = current._debugID
                workInProgress._debugSource = current._debugSource
                workInProgress._debugOwner = current._debugOwner
              }

              workInProgress.alternate = current
              current.alternate = workInProgress
            } else {
              // We already have an alternate.
              // Reset the effect tag.
              workInProgress.effectTag = NoEffect

              // The effect list is no longer valid.
              workInProgress.nextEffect = null
              workInProgress.firstEffect = null
              workInProgress.lastEffect = null
            }

            workInProgress.expirationTime = expirationTime
            workInProgress.pendingProps = pendingProps

            workInProgress.child = current.child
            workInProgress.memoizedProps = current.memoizedProps
            workInProgress.memoizedState = current.memoizedState
            workInProgress.updateQueue = current.updateQueue

            // These will be overridden during the parent's reconciliation
            workInProgress.sibling = current.sibling
            workInProgress.index = current.index
            workInProgress.ref = current.ref

            return workInProgress
          }

          function createHostRootFiber() {
            var fiber = createFiber(HostRoot, null, NoContext)
            return fiber
          }

          function createFiberFromElement(
            element,
            internalContextTag,
            expirationTime
          ) {
            var owner = null
            {
              owner = element._owner
            }

            var fiber = void 0
            var type = element.type,
              key = element.key

            if (typeof type === 'function') {
              fiber = shouldConstruct(type)
                ? createFiber(ClassComponent, key, internalContextTag)
                : createFiber(IndeterminateComponent, key, internalContextTag)
              fiber.type = type
              fiber.pendingProps = element.props
            } else if (typeof type === 'string') {
              fiber = createFiber(HostComponent, key, internalContextTag)
              fiber.type = type
              fiber.pendingProps = element.props
            } else if (
              typeof type === 'object' &&
              type !== null &&
              typeof type.tag === 'number'
            ) {
              // Currently assumed to be a continuation and therefore is a fiber already.
              // TODO: The yield system is currently broken for updates in some cases.
              // The reified yield stores a fiber, but we don't know which fiber that is;
              // the current or a workInProgress? When the continuation gets rendered here
              // we don't know if we can reuse that fiber or if we need to clone it.
              // There is probably a clever way to restructure this.
              fiber = type
              fiber.pendingProps = element.props
            } else {
              var info = ''
              {
                if (
                  type === undefined ||
                  (typeof type === 'object' &&
                    type !== null &&
                    Object.keys(type).length === 0)
                ) {
                  info +=
                    ' You likely forgot to export your component from the file ' +
                    "it's defined in, or you might have mixed up default and named imports."
                }
                var ownerName = owner ? getComponentName(owner) : null
                if (ownerName) {
                  info += '\n\nCheck the render method of `' + ownerName + '`.'
                }
              }
              invariant(
                false,
                'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s',
                type == null ? type : typeof type,
                info
              )
            }

            {
              fiber._debugSource = element._source
              fiber._debugOwner = element._owner
            }

            fiber.expirationTime = expirationTime

            return fiber
          }

          function createFiberFromFragment(
            elements,
            internalContextTag,
            expirationTime,
            key
          ) {
            var fiber = createFiber(Fragment, key, internalContextTag)
            fiber.pendingProps = elements
            fiber.expirationTime = expirationTime
            return fiber
          }

          function createFiberFromText(
            content,
            internalContextTag,
            expirationTime
          ) {
            var fiber = createFiber(HostText, null, internalContextTag)
            fiber.pendingProps = content
            fiber.expirationTime = expirationTime
            return fiber
          }

          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, NoContext)
            fiber.type = 'DELETED'
            return fiber
          }

          function createFiberFromCall(
            call,
            internalContextTag,
            expirationTime
          ) {
            var fiber = createFiber(CallComponent, call.key, internalContextTag)
            fiber.type = call.handler
            fiber.pendingProps = call
            fiber.expirationTime = expirationTime
            return fiber
          }

          function createFiberFromReturn(
            returnNode,
            internalContextTag,
            expirationTime
          ) {
            var fiber = createFiber(ReturnComponent, null, internalContextTag)
            fiber.expirationTime = expirationTime
            return fiber
          }

          function createFiberFromPortal(
            portal,
            internalContextTag,
            expirationTime
          ) {
            var fiber = createFiber(HostPortal, portal.key, internalContextTag)
            fiber.pendingProps = portal.children || []
            fiber.expirationTime = expirationTime
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null, // Used by persistent updates
              implementation: portal.implementation,
            }
            return fiber
          }

          function createFiberRoot(containerInfo, hydrate) {
            // Cyclic construction. This cheats the type system right now because
            // stateNode is any.
            var uninitializedFiber = createHostRootFiber()
            var root = {
              current: uninitializedFiber,
              containerInfo: containerInfo,
              pendingChildren: null,
              remainingExpirationTime: NoWork,
              isReadyForCommit: false,
              finishedWork: null,
              context: null,
              pendingContext: null,
              hydrate: hydrate,
              nextScheduledRoot: null,
            }
            uninitializedFiber.stateNode = root
            return root
          }

          var onCommitFiberRoot = null
          var onCommitFiberUnmount = null
          var hasLoggedError = false

          function catchErrors(fn) {
            return function(arg) {
              try {
                return fn(arg)
              } catch (err) {
                if (true && !hasLoggedError) {
                  hasLoggedError = true
                  warning(false, 'React DevTools encountered an error: %s', err)
                }
              }
            }
          }

          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
              // No DevTools
              return false
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__
            if (hook.isDisabled) {
              // This isn't a real property on the hook, but it can be set to opt out
              // of DevTools integration and associated warnings and logs.
              // https://github.com/facebook/react/issues/3877
              return true
            }
            if (!hook.supportsFiber) {
              {
                warning(
                  false,
                  'The installed version of React DevTools is too old and will not work ' +
                    'with the current version of React. Please update React DevTools. ' +
                    'https://fb.me/react-devtools'
                )
              }
              // DevTools exists, even though it doesn't support Fiber.
              return true
            }
            try {
              var rendererID = hook.inject(internals)
              // We have successfully injected, so now it is safe to set up hooks.
              onCommitFiberRoot = catchErrors(function(root) {
                return hook.onCommitFiberRoot(rendererID, root)
              })
              onCommitFiberUnmount = catchErrors(function(fiber) {
                return hook.onCommitFiberUnmount(rendererID, fiber)
              })
            } catch (err) {
              // Catch all errors because it is unsafe to throw during initialization.
              {
                warning(false, 'React DevTools encountered an error: %s.', err)
              }
            }
            // DevTools exists
            return true
          }

          function onCommitRoot(root) {
            if (typeof onCommitFiberRoot === 'function') {
              onCommitFiberRoot(root)
            }
          }

          function onCommitUnmount(fiber) {
            if (typeof onCommitFiberUnmount === 'function') {
              onCommitFiberUnmount(fiber)
            }
          }

          {
            var didWarnUpdateInsideUpdate = false
          }

          // Callbacks are not validated until invocation

          // Singly linked-list of updates. When an update is scheduled, it is added to
          // the queue of the current fiber and the work-in-progress fiber. The two queues
          // are separate but they share a persistent structure.
          //
          // During reconciliation, updates are removed from the work-in-progress fiber,
          // but they remain on the current fiber. That ensures that if a work-in-progress
          // is aborted, the aborted updates are recovered by cloning from current.
          //
          // The work-in-progress queue is always a subset of the current queue.
          //
          // When the tree is committed, the work-in-progress becomes the current.

          function createUpdateQueue(baseState) {
            var queue = {
              baseState: baseState,
              expirationTime: NoWork,
              first: null,
              last: null,
              callbackList: null,
              hasForceUpdate: false,
              isInitialized: false,
            }
            {
              queue.isProcessing = false
            }
            return queue
          }

          function insertUpdateIntoQueue(queue, update) {
            // Append the update to the end of the list.
            if (queue.last === null) {
              // Queue is empty
              queue.first = queue.last = update
            } else {
              queue.last.next = update
              queue.last = update
            }
            if (
              queue.expirationTime === NoWork ||
              queue.expirationTime > update.expirationTime
            ) {
              queue.expirationTime = update.expirationTime
            }
          }

          function insertUpdateIntoFiber(fiber, update) {
            // We'll have at least one and at most two distinct update queues.
            var alternateFiber = fiber.alternate
            var queue1 = fiber.updateQueue
            if (queue1 === null) {
              // TODO: We don't know what the base state will be until we begin work.
              // It depends on which fiber is the next current. Initialize with an empty
              // base state, then set to the memoizedState when rendering. Not super
              // happy with this approach.
              queue1 = fiber.updateQueue = createUpdateQueue(null)
            }

            var queue2 = void 0
            if (alternateFiber !== null) {
              queue2 = alternateFiber.updateQueue
              if (queue2 === null) {
                queue2 = alternateFiber.updateQueue = createUpdateQueue(null)
              }
            } else {
              queue2 = null
            }
            queue2 = queue2 !== queue1 ? queue2 : null

            // Warn if an update is scheduled from inside an updater function.
            {
              if (
                (queue1.isProcessing ||
                  (queue2 !== null && queue2.isProcessing)) &&
                !didWarnUpdateInsideUpdate
              ) {
                warning(
                  false,
                  'An update (setState, replaceState, or forceUpdate) was scheduled ' +
                    'from inside an update function. Update functions should be pure, ' +
                    'with zero side-effects. Consider using componentDidUpdate or a ' +
                    'callback.'
                )
                didWarnUpdateInsideUpdate = true
              }
            }

            // If there's only one queue, add the update to that queue and exit.
            if (queue2 === null) {
              insertUpdateIntoQueue(queue1, update)
              return
            }

            // If either queue is empty, we need to add to both queues.
            if (queue1.last === null || queue2.last === null) {
              insertUpdateIntoQueue(queue1, update)
              insertUpdateIntoQueue(queue2, update)
              return
            }

            // If both lists are not empty, the last update is the same for both lists
            // because of structural sharing. So, we should only append to one of
            // the lists.
            insertUpdateIntoQueue(queue1, update)
            // But we still need to update the `last` pointer of queue2.
            queue2.last = update
          }

          function getUpdateExpirationTime(fiber) {
            if (fiber.tag !== ClassComponent && fiber.tag !== HostRoot) {
              return NoWork
            }
            var updateQueue = fiber.updateQueue
            if (updateQueue === null) {
              return NoWork
            }
            return updateQueue.expirationTime
          }

          function getStateFromUpdate(update, instance, prevState, props) {
            var partialState = update.partialState
            if (typeof partialState === 'function') {
              var updateFn = partialState

              // Invoke setState callback an extra time to help detect side-effects.
              if (debugRenderPhaseSideEffects) {
                updateFn.call(instance, prevState, props)
              }

              return updateFn.call(instance, prevState, props)
            } else {
              return partialState
            }
          }

          function processUpdateQueue(
            current,
            workInProgress,
            queue,
            instance,
            props,
            renderExpirationTime
          ) {
            if (current !== null && current.updateQueue === queue) {
              // We need to create a work-in-progress queue, by cloning the current queue.
              var currentQueue = queue
              queue = workInProgress.updateQueue = {
                baseState: currentQueue.baseState,
                expirationTime: currentQueue.expirationTime,
                first: currentQueue.first,
                last: currentQueue.last,
                isInitialized: currentQueue.isInitialized,
                // These fields are no longer valid because they were already committed.
                // Reset them.
                callbackList: null,
                hasForceUpdate: false,
              }
            }

            {
              // Set this flag so we can warn if setState is called inside the update
              // function of another setState.
              queue.isProcessing = true
            }

            // Reset the remaining expiration time. If we skip over any updates, we'll
            // increase this accordingly.
            queue.expirationTime = NoWork

            // TODO: We don't know what the base state will be until we begin work.
            // It depends on which fiber is the next current. Initialize with an empty
            // base state, then set to the memoizedState when rendering. Not super
            // happy with this approach.
            var state = void 0
            if (queue.isInitialized) {
              state = queue.baseState
            } else {
              state = queue.baseState = workInProgress.memoizedState
              queue.isInitialized = true
            }
            var dontMutatePrevState = true
            var update = queue.first
            var didSkip = false
            while (update !== null) {
              var updateExpirationTime = update.expirationTime
              if (updateExpirationTime > renderExpirationTime) {
                // This update does not have sufficient priority. Skip it.
                var remainingExpirationTime = queue.expirationTime
                if (
                  remainingExpirationTime === NoWork ||
                  remainingExpirationTime > updateExpirationTime
                ) {
                  // Update the remaining expiration time.
                  queue.expirationTime = updateExpirationTime
                }
                if (!didSkip) {
                  didSkip = true
                  queue.baseState = state
                }
                // Continue to the next update.
                update = update.next
                continue
              }

              // This update does have sufficient priority.

              // If no previous updates were skipped, drop this update from the queue by
              // advancing the head of the list.
              if (!didSkip) {
                queue.first = update.next
                if (queue.first === null) {
                  queue.last = null
                }
              }

              // Process the update
              var _partialState = void 0
              if (update.isReplace) {
                state = getStateFromUpdate(update, instance, state, props)
                dontMutatePrevState = true
              } else {
                _partialState = getStateFromUpdate(
                  update,
                  instance,
                  state,
                  props
                )
                if (_partialState) {
                  if (dontMutatePrevState) {
                    // $FlowFixMe: Idk how to type this properly.
                    state = _assign({}, state, _partialState)
                  } else {
                    state = _assign(state, _partialState)
                  }
                  dontMutatePrevState = false
                }
              }
              if (update.isForced) {
                queue.hasForceUpdate = true
              }
              if (update.callback !== null) {
                // Append to list of callbacks.
                var _callbackList = queue.callbackList
                if (_callbackList === null) {
                  _callbackList = queue.callbackList = []
                }
                _callbackList.push(update)
              }
              update = update.next
            }

            if (queue.callbackList !== null) {
              workInProgress.effectTag |= Callback
            } else if (queue.first === null && !queue.hasForceUpdate) {
              // The queue is empty. We can reset it.
              workInProgress.updateQueue = null
            }

            if (!didSkip) {
              didSkip = true
              queue.baseState = state
            }

            {
              // No longer processing.
              queue.isProcessing = false
            }

            return state
          }

          function commitCallbacks(queue, context) {
            var callbackList = queue.callbackList
            if (callbackList === null) {
              return
            }
            // Set the list to null to make sure they don't get called more than once.
            queue.callbackList = null
            for (var i = 0; i < callbackList.length; i++) {
              var update = callbackList[i]
              var _callback = update.callback
              // This update might be processed again. Clear the callback so it's only
              // called once.
              update.callback = null
              !(typeof _callback === 'function')
                ? invariant(
                    false,
                    'Invalid argument passed as callback. Expected a function. Instead received: %s',
                    _callback
                  )
                : void 0
              _callback.call(context)
            }
          }

          var fakeInternalInstance = {}
          var isArray = Array.isArray

          {
            var didWarnAboutStateAssignmentForComponent = {}

            var warnOnInvalidCallback = function(callback, callerName) {
              warning(
                callback === null || typeof callback === 'function',
                '%s(...): Expected the last optional `callback` argument to be a ' +
                  'function. Instead received: %s.',
                callerName,
                callback
              )
            }

            // This is so gross but it's at least non-critical and can be removed if
            // it causes problems. This is meant to give a nicer error message for
            // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
            // ...)) which otherwise throws a "_processChildContext is not a function"
            // exception.
            Object.defineProperty(
              fakeInternalInstance,
              '_processChildContext',
              {
                enumerable: false,
                value: function() {
                  invariant(
                    false,
                    "_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal)."
                  )
                },
              }
            )
            Object.freeze(fakeInternalInstance)
          }

          var ReactFiberClassComponent = function(
            scheduleWork,
            computeExpirationForFiber,
            memoizeProps,
            memoizeState
          ) {
            // Class component state updater
            var updater = {
              isMounted: isMounted,
              enqueueSetState: function(instance, partialState, callback) {
                var fiber = get(instance)
                callback = callback === undefined ? null : callback
                {
                  warnOnInvalidCallback(callback, 'setState')
                }
                var expirationTime = computeExpirationForFiber(fiber)
                var update = {
                  expirationTime: expirationTime,
                  partialState: partialState,
                  callback: callback,
                  isReplace: false,
                  isForced: false,
                  nextCallback: null,
                  next: null,
                }
                insertUpdateIntoFiber(fiber, update)
                scheduleWork(fiber, expirationTime)
              },
              enqueueReplaceState: function(instance, state, callback) {
                var fiber = get(instance)
                callback = callback === undefined ? null : callback
                {
                  warnOnInvalidCallback(callback, 'replaceState')
                }
                var expirationTime = computeExpirationForFiber(fiber)
                var update = {
                  expirationTime: expirationTime,
                  partialState: state,
                  callback: callback,
                  isReplace: true,
                  isForced: false,
                  nextCallback: null,
                  next: null,
                }
                insertUpdateIntoFiber(fiber, update)
                scheduleWork(fiber, expirationTime)
              },
              enqueueForceUpdate: function(instance, callback) {
                var fiber = get(instance)
                callback = callback === undefined ? null : callback
                {
                  warnOnInvalidCallback(callback, 'forceUpdate')
                }
                var expirationTime = computeExpirationForFiber(fiber)
                var update = {
                  expirationTime: expirationTime,
                  partialState: null,
                  callback: callback,
                  isReplace: false,
                  isForced: true,
                  nextCallback: null,
                  next: null,
                }
                insertUpdateIntoFiber(fiber, update)
                scheduleWork(fiber, expirationTime)
              },
            }

            function checkShouldComponentUpdate(
              workInProgress,
              oldProps,
              newProps,
              oldState,
              newState,
              newContext
            ) {
              if (
                oldProps === null ||
                (workInProgress.updateQueue !== null &&
                  workInProgress.updateQueue.hasForceUpdate)
              ) {
                // If the workInProgress already has an Update effect, return true
                return true
              }

              var instance = workInProgress.stateNode
              var type = workInProgress.type
              if (typeof instance.shouldComponentUpdate === 'function') {
                startPhaseTimer(workInProgress, 'shouldComponentUpdate')
                var shouldUpdate = instance.shouldComponentUpdate(
                  newProps,
                  newState,
                  newContext
                )
                stopPhaseTimer()

                // Simulate an async bailout/interruption by invoking lifecycle twice.
                if (debugRenderPhaseSideEffects) {
                  instance.shouldComponentUpdate(newProps, newState, newContext)
                }

                {
                  warning(
                    shouldUpdate !== undefined,
                    '%s.shouldComponentUpdate(): Returned undefined instead of a ' +
                      'boolean value. Make sure to return true or false.',
                    getComponentName(workInProgress) || 'Unknown'
                  )
                }

                return shouldUpdate
              }

              if (type.prototype && type.prototype.isPureReactComponent) {
                return (
                  !shallowEqual(oldProps, newProps) ||
                  !shallowEqual(oldState, newState)
                )
              }

              return true
            }

            function checkClassInstance(workInProgress) {
              var instance = workInProgress.stateNode
              var type = workInProgress.type
              {
                var name = getComponentName(workInProgress)
                var renderPresent = instance.render

                if (!renderPresent) {
                  if (
                    type.prototype &&
                    typeof type.prototype.render === 'function'
                  ) {
                    warning(
                      false,
                      '%s(...): No `render` method found on the returned component ' +
                        'instance: did you accidentally return an object from the constructor?',
                      name
                    )
                  } else {
                    warning(
                      false,
                      '%s(...): No `render` method found on the returned component ' +
                        'instance: you may have forgotten to define `render`.',
                      name
                    )
                  }
                }

                var noGetInitialStateOnES6 =
                  !instance.getInitialState ||
                  instance.getInitialState.isReactClassApproved ||
                  instance.state
                warning(
                  noGetInitialStateOnES6,
                  'getInitialState was defined on %s, a plain JavaScript class. ' +
                    'This is only supported for classes created using React.createClass. ' +
                    'Did you mean to define a state property instead?',
                  name
                )
                var noGetDefaultPropsOnES6 =
                  !instance.getDefaultProps ||
                  instance.getDefaultProps.isReactClassApproved
                warning(
                  noGetDefaultPropsOnES6,
                  'getDefaultProps was defined on %s, a plain JavaScript class. ' +
                    'This is only supported for classes created using React.createClass. ' +
                    'Use a static property to define defaultProps instead.',
                  name
                )
                var noInstancePropTypes = !instance.propTypes
                warning(
                  noInstancePropTypes,
                  'propTypes was defined as an instance property on %s. Use a static ' +
                    'property to define propTypes instead.',
                  name
                )
                var noInstanceContextTypes = !instance.contextTypes
                warning(
                  noInstanceContextTypes,
                  'contextTypes was defined as an instance property on %s. Use a static ' +
                    'property to define contextTypes instead.',
                  name
                )
                var noComponentShouldUpdate =
                  typeof instance.componentShouldUpdate !== 'function'
                warning(
                  noComponentShouldUpdate,
                  '%s has a method called ' +
                    'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
                    'The name is phrased as a question because the function is ' +
                    'expected to return a value.',
                  name
                )
                if (
                  type.prototype &&
                  type.prototype.isPureReactComponent &&
                  typeof instance.shouldComponentUpdate !== 'undefined'
                ) {
                  warning(
                    false,
                    '%s has a method called shouldComponentUpdate(). ' +
                      'shouldComponentUpdate should not be used when extending React.PureComponent. ' +
                      'Please extend React.Component if shouldComponentUpdate is used.',
                    getComponentName(workInProgress) || 'A pure component'
                  )
                }
                var noComponentDidUnmount =
                  typeof instance.componentDidUnmount !== 'function'
                warning(
                  noComponentDidUnmount,
                  '%s has a method called ' +
                    'componentDidUnmount(). But there is no such lifecycle method. ' +
                    'Did you mean componentWillUnmount()?',
                  name
                )
                var noComponentDidReceiveProps =
                  typeof instance.componentDidReceiveProps !== 'function'
                warning(
                  noComponentDidReceiveProps,
                  '%s has a method called ' +
                    'componentDidReceiveProps(). But there is no such lifecycle method. ' +
                    'If you meant to update the state in response to changing props, ' +
                    'use componentWillReceiveProps(). If you meant to fetch data or ' +
                    'run side-effects or mutations after React has updated the UI, use componentDidUpdate().',
                  name
                )
                var noComponentWillRecieveProps =
                  typeof instance.componentWillRecieveProps !== 'function'
                warning(
                  noComponentWillRecieveProps,
                  '%s has a method called ' +
                    'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
                  name
                )
                var hasMutatedProps =
                  instance.props !== workInProgress.pendingProps
                warning(
                  instance.props === undefined || !hasMutatedProps,
                  '%s(...): When calling super() in `%s`, make sure to pass ' +
                    "up the same props that your component's constructor was passed.",
                  name,
                  name
                )
                var noInstanceDefaultProps = !instance.defaultProps
                warning(
                  noInstanceDefaultProps,
                  'Setting defaultProps as an instance property on %s is not supported and will be ignored.' +
                    ' Instead, define defaultProps as a static property on %s.',
                  name,
                  name
                )
              }

              var state = instance.state
              if (state && (typeof state !== 'object' || isArray(state))) {
                warning(
                  false,
                  '%s.state: must be set to an object or null',
                  getComponentName(workInProgress)
                )
              }
              if (typeof instance.getChildContext === 'function') {
                warning(
                  typeof workInProgress.type.childContextTypes === 'object',
                  '%s.getChildContext(): childContextTypes must be defined in order to ' +
                    'use getChildContext().',
                  getComponentName(workInProgress)
                )
              }
            }

            function resetInputPointers(workInProgress, instance) {
              instance.props = workInProgress.memoizedProps
              instance.state = workInProgress.memoizedState
            }

            function adoptClassInstance(workInProgress, instance) {
              instance.updater = updater
              workInProgress.stateNode = instance
              // The instance needs access to the fiber so that it can schedule updates
              set(instance, workInProgress)
              {
                instance._reactInternalInstance = fakeInternalInstance
              }
            }

            function constructClassInstance(workInProgress, props) {
              var ctor = workInProgress.type
              var unmaskedContext = getUnmaskedContext(workInProgress)
              var needsContext = isContextConsumer(workInProgress)
              var context = needsContext
                ? getMaskedContext(workInProgress, unmaskedContext)
                : emptyObject
              var instance = new ctor(props, context)
              adoptClassInstance(workInProgress, instance)

              // Cache unmasked context so we can avoid recreating masked context unless necessary.
              // ReactFiberContext usually updates this cache but can't for newly-created instances.
              if (needsContext) {
                cacheContext(workInProgress, unmaskedContext, context)
              }

              return instance
            }

            function callComponentWillMount(workInProgress, instance) {
              startPhaseTimer(workInProgress, 'componentWillMount')
              var oldState = instance.state
              instance.componentWillMount()
              stopPhaseTimer()

              // Simulate an async bailout/interruption by invoking lifecycle twice.
              if (debugRenderPhaseSideEffects) {
                instance.componentWillMount()
              }

              if (oldState !== instance.state) {
                {
                  warning(
                    false,
                    '%s.componentWillMount(): Assigning directly to this.state is ' +
                      "deprecated (except inside a component's " +
                      'constructor). Use setState instead.',
                    getComponentName(workInProgress)
                  )
                }
                updater.enqueueReplaceState(instance, instance.state, null)
              }
            }

            function callComponentWillReceiveProps(
              workInProgress,
              instance,
              newProps,
              newContext
            ) {
              startPhaseTimer(workInProgress, 'componentWillReceiveProps')
              var oldState = instance.state
              instance.componentWillReceiveProps(newProps, newContext)
              stopPhaseTimer()

              // Simulate an async bailout/interruption by invoking lifecycle twice.
              if (debugRenderPhaseSideEffects) {
                instance.componentWillReceiveProps(newProps, newContext)
              }

              if (instance.state !== oldState) {
                {
                  var componentName =
                    getComponentName(workInProgress) || 'Component'
                  if (!didWarnAboutStateAssignmentForComponent[componentName]) {
                    warning(
                      false,
                      '%s.componentWillReceiveProps(): Assigning directly to ' +
                        "this.state is deprecated (except inside a component's " +
                        'constructor). Use setState instead.',
                      componentName
                    )
                    didWarnAboutStateAssignmentForComponent[
                      componentName
                    ] = true
                  }
                }
                updater.enqueueReplaceState(instance, instance.state, null)
              }
            }

            // Invokes the mount life-cycles on a previously never rendered instance.
            function mountClassInstance(workInProgress, renderExpirationTime) {
              var current = workInProgress.alternate

              {
                checkClassInstance(workInProgress)
              }

              var instance = workInProgress.stateNode
              var state = instance.state || null

              var props = workInProgress.pendingProps
              !props
                ? invariant(
                    false,
                    'There must be pending props for an initial mount. This error is likely caused by a bug in React. Please file an issue.'
                  )
                : void 0

              var unmaskedContext = getUnmaskedContext(workInProgress)

              instance.props = props
              instance.state = workInProgress.memoizedState = state
              instance.refs = emptyObject
              instance.context = getMaskedContext(
                workInProgress,
                unmaskedContext
              )

              if (
                enableAsyncSubtreeAPI &&
                workInProgress.type != null &&
                workInProgress.type.prototype != null &&
                workInProgress.type.prototype.unstable_isAsyncReactComponent ===
                  true
              ) {
                workInProgress.internalContextTag |= AsyncUpdates
              }

              if (typeof instance.componentWillMount === 'function') {
                callComponentWillMount(workInProgress, instance)
                // If we had additional state updates during this life-cycle, let's
                // process them now.
                var updateQueue = workInProgress.updateQueue
                if (updateQueue !== null) {
                  instance.state = processUpdateQueue(
                    current,
                    workInProgress,
                    updateQueue,
                    instance,
                    props,
                    renderExpirationTime
                  )
                }
              }
              if (typeof instance.componentDidMount === 'function') {
                workInProgress.effectTag |= Update
              }
            }

            // Called on a preexisting class instance. Returns false if a resumed render
            // could be reused.
            // function resumeMountClassInstance(
            //   workInProgress: Fiber,
            //   priorityLevel: PriorityLevel,
            // ): boolean {
            //   const instance = workInProgress.stateNode;
            //   resetInputPointers(workInProgress, instance);

            //   let newState = workInProgress.memoizedState;
            //   let newProps = workInProgress.pendingProps;
            //   if (!newProps) {
            //     // If there isn't any new props, then we'll reuse the memoized props.
            //     // This could be from already completed work.
            //     newProps = workInProgress.memoizedProps;
            //     invariant(
            //       newProps != null,
            //       'There should always be pending or memoized props. This error is ' +
            //         'likely caused by a bug in React. Please file an issue.',
            //     );
            //   }
            //   const newUnmaskedContext = getUnmaskedContext(workInProgress);
            //   const newContext = getMaskedContext(workInProgress, newUnmaskedContext);

            //   const oldContext = instance.context;
            //   const oldProps = workInProgress.memoizedProps;

            //   if (
            //     typeof instance.componentWillReceiveProps === 'function' &&
            //     (oldProps !== newProps || oldContext !== newContext)
            //   ) {
            //     callComponentWillReceiveProps(
            //       workInProgress,
            //       instance,
            //       newProps,
            //       newContext,
            //     );
            //   }

            //   // Process the update queue before calling shouldComponentUpdate
            //   const updateQueue = workInProgress.updateQueue;
            //   if (updateQueue !== null) {
            //     newState = processUpdateQueue(
            //       workInProgress,
            //       updateQueue,
            //       instance,
            //       newState,
            //       newProps,
            //       priorityLevel,
            //     );
            //   }

            //   // TODO: Should we deal with a setState that happened after the last
            //   // componentWillMount and before this componentWillMount? Probably
            //   // unsupported anyway.

            //   if (
            //     !checkShouldComponentUpdate(
            //       workInProgress,
            //       workInProgress.memoizedProps,
            //       newProps,
            //       workInProgress.memoizedState,
            //       newState,
            //       newContext,
            //     )
            //   ) {
            //     // Update the existing instance's state, props, and context pointers even
            //     // though we're bailing out.
            //     instance.props = newProps;
            //     instance.state = newState;
            //     instance.context = newContext;
            //     return false;
            //   }

            //   // Update the input pointers now so that they are correct when we call
            //   // componentWillMount
            //   instance.props = newProps;
            //   instance.state = newState;
            //   instance.context = newContext;

            //   if (typeof instance.componentWillMount === 'function') {
            //     callComponentWillMount(workInProgress, instance);
            //     // componentWillMount may have called setState. Process the update queue.
            //     const newUpdateQueue = workInProgress.updateQueue;
            //     if (newUpdateQueue !== null) {
            //       newState = processUpdateQueue(
            //         workInProgress,
            //         newUpdateQueue,
            //         instance,
            //         newState,
            //         newProps,
            //         priorityLevel,
            //       );
            //     }
            //   }

            //   if (typeof instance.componentDidMount === 'function') {
            //     workInProgress.effectTag |= Update;
            //   }

            //   instance.state = newState;

            //   return true;
            // }

            // Invokes the update life-cycles and returns false if it shouldn't rerender.
            function updateClassInstance(
              current,
              workInProgress,
              renderExpirationTime
            ) {
              var instance = workInProgress.stateNode
              resetInputPointers(workInProgress, instance)

              var oldProps = workInProgress.memoizedProps
              var newProps = workInProgress.pendingProps
              if (!newProps) {
                // If there aren't any new props, then we'll reuse the memoized props.
                // This could be from already completed work.
                newProps = oldProps
                !(newProps != null)
                  ? invariant(
                      false,
                      'There should always be pending or memoized props. This error is likely caused by a bug in React. Please file an issue.'
                    )
                  : void 0
              }
              var oldContext = instance.context
              var newUnmaskedContext = getUnmaskedContext(workInProgress)
              var newContext = getMaskedContext(
                workInProgress,
                newUnmaskedContext
              )

              // Note: During these life-cycles, instance.props/instance.state are what
              // ever the previously attempted to render - not the "current". However,
              // during componentDidUpdate we pass the "current" props.

              if (
                typeof instance.componentWillReceiveProps === 'function' &&
                (oldProps !== newProps || oldContext !== newContext)
              ) {
                callComponentWillReceiveProps(
                  workInProgress,
                  instance,
                  newProps,
                  newContext
                )
              }

              // Compute the next state using the memoized state and the update queue.
              var oldState = workInProgress.memoizedState
              // TODO: Previous state can be null.
              var newState = void 0
              if (workInProgress.updateQueue !== null) {
                newState = processUpdateQueue(
                  current,
                  workInProgress,
                  workInProgress.updateQueue,
                  instance,
                  newProps,
                  renderExpirationTime
                )
              } else {
                newState = oldState
              }

              if (
                oldProps === newProps &&
                oldState === newState &&
                !hasContextChanged() &&
                !(
                  workInProgress.updateQueue !== null &&
                  workInProgress.updateQueue.hasForceUpdate
                )
              ) {
                // If an update was already in progress, we should schedule an Update
                // effect even though we're bailing out, so that cWU/cDU are called.
                if (typeof instance.componentDidUpdate === 'function') {
                  if (
                    oldProps !== current.memoizedProps ||
                    oldState !== current.memoizedState
                  ) {
                    workInProgress.effectTag |= Update
                  }
                }
                return false
              }

              var shouldUpdate = checkShouldComponentUpdate(
                workInProgress,
                oldProps,
                newProps,
                oldState,
                newState,
                newContext
              )

              if (shouldUpdate) {
                if (typeof instance.componentWillUpdate === 'function') {
                  startPhaseTimer(workInProgress, 'componentWillUpdate')
                  instance.componentWillUpdate(newProps, newState, newContext)
                  stopPhaseTimer()

                  // Simulate an async bailout/interruption by invoking lifecycle twice.
                  if (debugRenderPhaseSideEffects) {
                    instance.componentWillUpdate(newProps, newState, newContext)
                  }
                }
                if (typeof instance.componentDidUpdate === 'function') {
                  workInProgress.effectTag |= Update
                }
              } else {
                // If an update was already in progress, we should schedule an Update
                // effect even though we're bailing out, so that cWU/cDU are called.
                if (typeof instance.componentDidUpdate === 'function') {
                  if (
                    oldProps !== current.memoizedProps ||
                    oldState !== current.memoizedState
                  ) {
                    workInProgress.effectTag |= Update
                  }
                }

                // If shouldComponentUpdate returned false, we should still update the
                // memoized props/state to indicate that this work can be reused.
                memoizeProps(workInProgress, newProps)
                memoizeState(workInProgress, newState)
              }

              // Update the existing instance's state, props, and context pointers even
              // if shouldComponentUpdate returns false.
              instance.props = newProps
              instance.state = newState
              instance.context = newContext

              return shouldUpdate
            }

            return {
              adoptClassInstance: adoptClassInstance,
              constructClassInstance: constructClassInstance,
              mountClassInstance: mountClassInstance,
              // resumeMountClassInstance,
              updateClassInstance: updateClassInstance,
            }
          }

          // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
          // nor polyfill, then a plain number is used for performance.
          var hasSymbol = typeof Symbol === 'function' && Symbol['for']

          var REACT_ELEMENT_TYPE = hasSymbol
            ? Symbol['for']('react.element')
            : 0xeac7
          var REACT_CALL_TYPE = hasSymbol ? Symbol['for']('react.call') : 0xeac8
          var REACT_RETURN_TYPE = hasSymbol
            ? Symbol['for']('react.return')
            : 0xeac9
          var REACT_PORTAL_TYPE = hasSymbol
            ? Symbol['for']('react.portal')
            : 0xeaca
          var REACT_FRAGMENT_TYPE = hasSymbol
            ? Symbol['for']('react.fragment')
            : 0xeacb

          var MAYBE_ITERATOR_SYMBOL =
            typeof Symbol === 'function' && Symbol.iterator
          var FAUX_ITERATOR_SYMBOL = '@@iterator'

          function getIteratorFn(maybeIterable) {
            if (
              maybeIterable === null ||
              typeof maybeIterable === 'undefined'
            ) {
              return null
            }
            var maybeIterator =
              (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
              maybeIterable[FAUX_ITERATOR_SYMBOL]
            if (typeof maybeIterator === 'function') {
              return maybeIterator
            }
            return null
          }

          var getCurrentFiberStackAddendum$1 =
            ReactDebugCurrentFiber.getCurrentFiberStackAddendum

          {
            var didWarnAboutMaps = false
            /**
             * Warn if there's no key explicitly set on dynamic arrays of children or
             * object keys are not valid. This allows us to keep track of children between
             * updates.
             */
            var ownerHasKeyUseWarning = {}
            var ownerHasFunctionTypeWarning = {}

            var warnForMissingKey = function(child) {
              if (child === null || typeof child !== 'object') {
                return
              }
              if (
                !child._store ||
                child._store.validated ||
                child.key != null
              ) {
                return
              }
              !(typeof child._store === 'object')
                ? invariant(
                    false,
                    'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.'
                  )
                : void 0
              child._store.validated = true

              var currentComponentErrorInfo =
                'Each child in an array or iterator should have a unique ' +
                '"key" prop. See https://fb.me/react-warning-keys for ' +
                'more information.' +
                (getCurrentFiberStackAddendum$1() || '')
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true

              warning(
                false,
                'Each child in an array or iterator should have a unique ' +
                  '"key" prop. See https://fb.me/react-warning-keys for ' +
                  'more information.%s',
                getCurrentFiberStackAddendum$1()
              )
            }
          }

          var isArray$1 = Array.isArray

          function coerceRef(current, element) {
            var mixedRef = element.ref
            if (mixedRef !== null && typeof mixedRef !== 'function') {
              if (element._owner) {
                var owner = element._owner
                var inst = void 0
                if (owner) {
                  var ownerFiber = owner
                  !(ownerFiber.tag === ClassComponent)
                    ? invariant(
                        false,
                        'Stateless function components cannot have refs.'
                      )
                    : void 0
                  inst = ownerFiber.stateNode
                }
                !inst
                  ? invariant(
                      false,
                      'Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.',
                      mixedRef
                    )
                  : void 0
                var stringRef = '' + mixedRef
                // Check if previous string ref matches new string ref
                if (
                  current !== null &&
                  current.ref !== null &&
                  current.ref._stringRef === stringRef
                ) {
                  return current.ref
                }
                var ref = function(value) {
                  var refs =
                    inst.refs === emptyObject ? (inst.refs = {}) : inst.refs
                  if (value === null) {
                    delete refs[stringRef]
                  } else {
                    refs[stringRef] = value
                  }
                }
                ref._stringRef = stringRef
                return ref
              } else {
                !(typeof mixedRef === 'string')
                  ? invariant(
                      false,
                      'Expected ref to be a function or a string.'
                    )
                  : void 0
                !element._owner
                  ? invariant(
                      false,
                      'Element ref was specified as a string (%s) but no owner was set. You may have multiple copies of React loaded. (details: https://fb.me/react-refs-must-have-owner).',
                      mixedRef
                    )
                  : void 0
              }
            }
            return mixedRef
          }

          function throwOnInvalidObjectType(returnFiber, newChild) {
            if (returnFiber.type !== 'textarea') {
              var addendum = ''
              {
                addendum =
                  ' If you meant to render a collection of children, use an array ' +
                  'instead.' +
                  (getCurrentFiberStackAddendum$1() || '')
              }
              invariant(
                false,
                'Objects are not valid as a React child (found: %s).%s',
                Object.prototype.toString.call(newChild) === '[object Object]'
                  ? 'object with keys {' +
                    Object.keys(newChild).join(', ') +
                    '}'
                  : newChild,
                addendum
              )
            }
          }

          function warnOnFunctionType() {
            var currentComponentErrorInfo =
              'Functions are not valid as a React child. This may happen if ' +
              'you return a Component instead of <Component /> from render. ' +
              'Or maybe you meant to call this function rather than return it.' +
              (getCurrentFiberStackAddendum$1() || '')

            if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
              return
            }
            ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true

            warning(
              false,
              'Functions are not valid as a React child. This may happen if ' +
                'you return a Component instead of <Component /> from render. ' +
                'Or maybe you meant to call this function rather than return it.%s',
              getCurrentFiberStackAddendum$1() || ''
            )
          }

          // This wrapper function exists because I expect to clone the code in each path
          // to be able to optimize each path individually by branching early. This needs
          // a compiler or we can do it manually. Helpers that don't need this branching
          // live outside of this function.
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                // Noop.
                return
              }
              // Deletions are added in reversed order so we add it to the front.
              // At this point, the return fiber's effect list is empty except for
              // deletions, so we can just append the deletion to the list. The remaining
              // effects aren't added until the complete phase. Once we implement
              // resuming, this may not be true.
              var last = returnFiber.lastEffect
              if (last !== null) {
                last.nextEffect = childToDelete
                returnFiber.lastEffect = childToDelete
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = childToDelete
              }
              childToDelete.nextEffect = null
              childToDelete.effectTag = Deletion
            }

            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                // Noop.
                return null
              }

              // TODO: For the shouldClone case, this could be micro-optimized a bit by
              // assuming that after the first child we've already added everything.
              var childToDelete = currentFirstChild
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete)
                childToDelete = childToDelete.sibling
              }
              return null
            }

            function mapRemainingChildren(returnFiber, currentFirstChild) {
              // Add the remaining children to a temporary map so that we can find them by
              // keys quickly. Implicit (null) keys get added to this set with their index
              var existingChildren = new Map()

              var existingChild = currentFirstChild
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild)
                } else {
                  existingChildren.set(existingChild.index, existingChild)
                }
                existingChild = existingChild.sibling
              }
              return existingChildren
            }

            function useFiber(fiber, pendingProps, expirationTime) {
              // We currently set sibling to null and index to 0 here because it is easy
              // to forget to do before returning it. E.g. for the single child case.
              var clone = createWorkInProgress(
                fiber,
                pendingProps,
                expirationTime
              )
              clone.index = 0
              clone.sibling = null
              return clone
            }

            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex
              if (!shouldTrackSideEffects) {
                // Noop.
                return lastPlacedIndex
              }
              var current = newFiber.alternate
              if (current !== null) {
                var oldIndex = current.index
                if (oldIndex < lastPlacedIndex) {
                  // This is a move.
                  newFiber.effectTag = Placement
                  return lastPlacedIndex
                } else {
                  // This item can stay in place.
                  return oldIndex
                }
              } else {
                // This is an insertion.
                newFiber.effectTag = Placement
                return lastPlacedIndex
              }
            }

            function placeSingleChild(newFiber) {
              // This is simpler for the single child case. We only need to do a
              // placement for inserting new children.
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.effectTag = Placement
              }
              return newFiber
            }

            function updateTextNode(
              returnFiber,
              current,
              textContent,
              expirationTime
            ) {
              if (current === null || current.tag !== HostText) {
                // Insert
                var created = createFiberFromText(
                  textContent,
                  returnFiber.internalContextTag,
                  expirationTime
                )
                created['return'] = returnFiber
                return created
              } else {
                // Update
                var existing = useFiber(current, textContent, expirationTime)
                existing['return'] = returnFiber
                return existing
              }
            }

            function updateElement(
              returnFiber,
              current,
              element,
              expirationTime
            ) {
              if (current !== null && current.type === element.type) {
                // Move based on index
                var existing = useFiber(current, element.props, expirationTime)
                existing.ref = coerceRef(current, element)
                existing['return'] = returnFiber
                {
                  existing._debugSource = element._source
                  existing._debugOwner = element._owner
                }
                return existing
              } else {
                // Insert
                var created = createFiberFromElement(
                  element,
                  returnFiber.internalContextTag,
                  expirationTime
                )
                created.ref = coerceRef(current, element)
                created['return'] = returnFiber
                return created
              }
            }

            function updateCall(returnFiber, current, call, expirationTime) {
              // TODO: Should this also compare handler to determine whether to reuse?
              if (current === null || current.tag !== CallComponent) {
                // Insert
                var created = createFiberFromCall(
                  call,
                  returnFiber.internalContextTag,
                  expirationTime
                )
                created['return'] = returnFiber
                return created
              } else {
                // Move based on index
                var existing = useFiber(current, call, expirationTime)
                existing['return'] = returnFiber
                return existing
              }
            }

            function updateReturn(
              returnFiber,
              current,
              returnNode,
              expirationTime
            ) {
              if (current === null || current.tag !== ReturnComponent) {
                // Insert
                var created = createFiberFromReturn(
                  returnNode,
                  returnFiber.internalContextTag,
                  expirationTime
                )
                created.type = returnNode.value
                created['return'] = returnFiber
                return created
              } else {
                // Move based on index
                var existing = useFiber(current, null, expirationTime)
                existing.type = returnNode.value
                existing['return'] = returnFiber
                return existing
              }
            }

            function updatePortal(
              returnFiber,
              current,
              portal,
              expirationTime
            ) {
              if (
                current === null ||
                current.tag !== HostPortal ||
                current.stateNode.containerInfo !== portal.containerInfo ||
                current.stateNode.implementation !== portal.implementation
              ) {
                // Insert
                var created = createFiberFromPortal(
                  portal,
                  returnFiber.internalContextTag,
                  expirationTime
                )
                created['return'] = returnFiber
                return created
              } else {
                // Update
                var existing = useFiber(
                  current,
                  portal.children || [],
                  expirationTime
                )
                existing['return'] = returnFiber
                return existing
              }
            }

            function updateFragment(
              returnFiber,
              current,
              fragment,
              expirationTime,
              key
            ) {
              if (current === null || current.tag !== Fragment) {
                // Insert
                var created = createFiberFromFragment(
                  fragment,
                  returnFiber.internalContextTag,
                  expirationTime,
                  key
                )
                created['return'] = returnFiber
                return created
              } else {
                // Update
                var existing = useFiber(current, fragment, expirationTime)
                existing['return'] = returnFiber
                return existing
              }
            }

            function createChild(returnFiber, newChild, expirationTime) {
              if (
                typeof newChild === 'string' ||
                typeof newChild === 'number'
              ) {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                var created = createFiberFromText(
                  '' + newChild,
                  returnFiber.internalContextTag,
                  expirationTime
                )
                created['return'] = returnFiber
                return created
              }

              if (typeof newChild === 'object' && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      var _created = createFiberFromFragment(
                        newChild.props.children,
                        returnFiber.internalContextTag,
                        expirationTime,
                        newChild.key
                      )
                      _created['return'] = returnFiber
                      return _created
                    } else {
                      var _created2 = createFiberFromElement(
                        newChild,
                        returnFiber.internalContextTag,
                        expirationTime
                      )
                      _created2.ref = coerceRef(null, newChild)
                      _created2['return'] = returnFiber
                      return _created2
                    }
                  }

                  case REACT_CALL_TYPE: {
                    var _created3 = createFiberFromCall(
                      newChild,
                      returnFiber.internalContextTag,
                      expirationTime
                    )
                    _created3['return'] = returnFiber
                    return _created3
                  }

                  case REACT_RETURN_TYPE: {
                    var _created4 = createFiberFromReturn(
                      newChild,
                      returnFiber.internalContextTag,
                      expirationTime
                    )
                    _created4.type = newChild.value
                    _created4['return'] = returnFiber
                    return _created4
                  }

                  case REACT_PORTAL_TYPE: {
                    var _created5 = createFiberFromPortal(
                      newChild,
                      returnFiber.internalContextTag,
                      expirationTime
                    )
                    _created5['return'] = returnFiber
                    return _created5
                  }
                }

                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _created6 = createFiberFromFragment(
                    newChild,
                    returnFiber.internalContextTag,
                    expirationTime,
                    null
                  )
                  _created6['return'] = returnFiber
                  return _created6
                }

                throwOnInvalidObjectType(returnFiber, newChild)
              }

              {
                if (typeof newChild === 'function') {
                  warnOnFunctionType()
                }
              }

              return null
            }

            function updateSlot(
              returnFiber,
              oldFiber,
              newChild,
              expirationTime
            ) {
              // Update the fiber if the keys match, otherwise return null.

              var key = oldFiber !== null ? oldFiber.key : null

              if (
                typeof newChild === 'string' ||
                typeof newChild === 'number'
              ) {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                if (key !== null) {
                  return null
                }
                return updateTextNode(
                  returnFiber,
                  oldFiber,
                  '' + newChild,
                  expirationTime
                )
              }

              if (typeof newChild === 'object' && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      if (newChild.type === REACT_FRAGMENT_TYPE) {
                        return updateFragment(
                          returnFiber,
                          oldFiber,
                          newChild.props.children,
                          expirationTime,
                          key
                        )
                      }
                      return updateElement(
                        returnFiber,
                        oldFiber,
                        newChild,
                        expirationTime
                      )
                    } else {
                      return null
                    }
                  }

                  case REACT_CALL_TYPE: {
                    if (newChild.key === key) {
                      return updateCall(
                        returnFiber,
                        oldFiber,
                        newChild,
                        expirationTime
                      )
                    } else {
                      return null
                    }
                  }

                  case REACT_RETURN_TYPE: {
                    // Returns don't have keys. If the previous node is implicitly keyed
                    // we can continue to replace it without aborting even if it is not a
                    // yield.
                    if (key === null) {
                      return updateReturn(
                        returnFiber,
                        oldFiber,
                        newChild,
                        expirationTime
                      )
                    } else {
                      return null
                    }
                  }

                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(
                        returnFiber,
                        oldFiber,
                        newChild,
                        expirationTime
                      )
                    } else {
                      return null
                    }
                  }
                }

                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null
                  }

                  return updateFragment(
                    returnFiber,
                    oldFiber,
                    newChild,
                    expirationTime,
                    null
                  )
                }

                throwOnInvalidObjectType(returnFiber, newChild)
              }

              {
                if (typeof newChild === 'function') {
                  warnOnFunctionType()
                }
              }

              return null
            }

            function updateFromMap(
              existingChildren,
              returnFiber,
              newIdx,
              newChild,
              expirationTime
            ) {
              if (
                typeof newChild === 'string' ||
                typeof newChild === 'number'
              ) {
                // Text nodes don't have keys, so we neither have to check the old nor
                // new node for the key. If both are text nodes, they match.
                var matchedFiber = existingChildren.get(newIdx) || null
                return updateTextNode(
                  returnFiber,
                  matchedFiber,
                  '' + newChild,
                  expirationTime
                )
              }

              if (typeof newChild === 'object' && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber =
                      existingChildren.get(
                        newChild.key === null ? newIdx : newChild.key
                      ) || null
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment(
                        returnFiber,
                        _matchedFiber,
                        newChild.props.children,
                        expirationTime,
                        newChild.key
                      )
                    }
                    return updateElement(
                      returnFiber,
                      _matchedFiber,
                      newChild,
                      expirationTime
                    )
                  }

                  case REACT_CALL_TYPE: {
                    var _matchedFiber2 =
                      existingChildren.get(
                        newChild.key === null ? newIdx : newChild.key
                      ) || null
                    return updateCall(
                      returnFiber,
                      _matchedFiber2,
                      newChild,
                      expirationTime
                    )
                  }

                  case REACT_RETURN_TYPE: {
                    // Returns don't have keys, so we neither have to check the old nor
                    // new node for the key. If both are returns, they match.
                    var _matchedFiber3 = existingChildren.get(newIdx) || null
                    return updateReturn(
                      returnFiber,
                      _matchedFiber3,
                      newChild,
                      expirationTime
                    )
                  }

                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber4 =
                      existingChildren.get(
                        newChild.key === null ? newIdx : newChild.key
                      ) || null
                    return updatePortal(
                      returnFiber,
                      _matchedFiber4,
                      newChild,
                      expirationTime
                    )
                  }
                }

                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber5 = existingChildren.get(newIdx) || null
                  return updateFragment(
                    returnFiber,
                    _matchedFiber5,
                    newChild,
                    expirationTime,
                    null
                  )
                }

                throwOnInvalidObjectType(returnFiber, newChild)
              }

              {
                if (typeof newChild === 'function') {
                  warnOnFunctionType()
                }
              }

              return null
            }

            /**
             * Warns if there is a duplicate or missing key
             */
            function warnOnInvalidKey(child, knownKeys) {
              {
                if (typeof child !== 'object' || child === null) {
                  return knownKeys
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_CALL_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child)
                    var key = child.key
                    if (typeof key !== 'string') {
                      break
                    }
                    if (knownKeys === null) {
                      knownKeys = new Set()
                      knownKeys.add(key)
                      break
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key)
                      break
                    }
                    warning(
                      false,
                      'Encountered two children with the same key, `%s`. ' +
                        'Keys should be unique so that components maintain their identity ' +
                        'across updates. Non-unique keys may cause children to be ' +
                        'duplicated and/or omitted — the behavior is unsupported and ' +
                        'could change in a future version.%s',
                      key,
                      getCurrentFiberStackAddendum$1()
                    )
                    break
                  default:
                    break
                }
              }
              return knownKeys
            }

            function reconcileChildrenArray(
              returnFiber,
              currentFirstChild,
              newChildren,
              expirationTime
            ) {
              // This algorithm can't optimize by searching from boths ends since we
              // don't have backpointers on fibers. I'm trying to see how far we can get
              // with that model. If it ends up not being worth the tradeoffs, we can
              // add it later.

              // Even with a two ended optimization, we'd want to optimize for the case
              // where there are few changes and brute force the comparison instead of
              // going for the Map. It'd like to explore hitting that path first in
              // forward-only mode and only go for the Map once we notice that we need
              // lots of look ahead. This doesn't handle reversal as well as two ended
              // search but that's unusual. Besides, for the two ended optimization to
              // work on Iterables, we'd need to copy the whole set.

              // In this first iteration, we'll just live with hitting the bad case
              // (adding everything to a Map) in for every insert/move.

              // If you change this code, also update reconcileChildrenIterator() which
              // uses the same algorithm.

              {
                // First, validate keys.
                var knownKeys = null
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i]
                  knownKeys = warnOnInvalidKey(child, knownKeys)
                }
              }

              var resultingFirstChild = null
              var previousNewFiber = null

              var oldFiber = currentFirstChild
              var lastPlacedIndex = 0
              var newIdx = 0
              var nextOldFiber = null
              for (
                ;
                oldFiber !== null && newIdx < newChildren.length;
                newIdx++
              ) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber
                  oldFiber = null
                } else {
                  nextOldFiber = oldFiber.sibling
                }
                var newFiber = updateSlot(
                  returnFiber,
                  oldFiber,
                  newChildren[newIdx],
                  expirationTime
                )
                if (newFiber === null) {
                  // TODO: This breaks on empty slots like null children. That's
                  // unfortunate because it triggers the slow path all the time. We need
                  // a better way to communicate whether this was a miss or null,
                  // boolean, undefined, etc.
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber
                  }
                  break
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber)
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx)
                if (previousNewFiber === null) {
                  // TODO: Move out of the loop. This only happens for the first run.
                  resultingFirstChild = newFiber
                } else {
                  // TODO: Defer siblings if we're not at the right index for this slot.
                  // I.e. if we had null values before, then we want to defer this
                  // for each null value. However, we also don't want to call updateSlot
                  // with the previous one.
                  previousNewFiber.sibling = newFiber
                }
                previousNewFiber = newFiber
                oldFiber = nextOldFiber
              }

              if (newIdx === newChildren.length) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber)
                return resultingFirstChild
              }

              if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(
                    returnFiber,
                    newChildren[newIdx],
                    expirationTime
                  )
                  if (!_newFiber) {
                    continue
                  }
                  lastPlacedIndex = placeChild(
                    _newFiber,
                    lastPlacedIndex,
                    newIdx
                  )
                  if (previousNewFiber === null) {
                    // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber
                  } else {
                    previousNewFiber.sibling = _newFiber
                  }
                  previousNewFiber = _newFiber
                }
                return resultingFirstChild
              }

              // Add all children to a key map for quick lookups.
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber)

              // Keep scanning and use the map to restore deleted items as moves.
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(
                  existingChildren,
                  returnFiber,
                  newIdx,
                  newChildren[newIdx],
                  expirationTime
                )
                if (_newFiber2) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      // The new fiber is a work in progress, but if there exists a
                      // current, that means that we reused the fiber. We need to delete
                      // it from the child list so that we don't add it to the deletion
                      // list.
                      existingChildren['delete'](
                        _newFiber2.key === null ? newIdx : _newFiber2.key
                      )
                    }
                  }
                  lastPlacedIndex = placeChild(
                    _newFiber2,
                    lastPlacedIndex,
                    newIdx
                  )
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2
                  } else {
                    previousNewFiber.sibling = _newFiber2
                  }
                  previousNewFiber = _newFiber2
                }
              }

              if (shouldTrackSideEffects) {
                // Any existing children that weren't consumed above were deleted. We need
                // to add them to the deletion list.
                existingChildren.forEach(function(child) {
                  return deleteChild(returnFiber, child)
                })
              }

              return resultingFirstChild
            }

            function reconcileChildrenIterator(
              returnFiber,
              currentFirstChild,
              newChildrenIterable,
              expirationTime
            ) {
              // This is the same implementation as reconcileChildrenArray(),
              // but using the iterator instead.

              var iteratorFn = getIteratorFn(newChildrenIterable)
              !(typeof iteratorFn === 'function')
                ? invariant(
                    false,
                    'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.'
                  )
                : void 0

              {
                // Warn about using Maps as children
                if (typeof newChildrenIterable.entries === 'function') {
                  var possibleMap = newChildrenIterable
                  if (possibleMap.entries === iteratorFn) {
                    warning(
                      didWarnAboutMaps,
                      'Using Maps as children is unsupported and will likely yield ' +
                        'unexpected results. Convert it to a sequence/iterable of keyed ' +
                        'ReactElements instead.%s',
                      getCurrentFiberStackAddendum$1()
                    )
                    didWarnAboutMaps = true
                  }
                }

                // First, validate keys.
                // We'll get a different iterator later for the main pass.
                var _newChildren = iteratorFn.call(newChildrenIterable)
                if (_newChildren) {
                  var knownKeys = null
                  var _step = _newChildren.next()
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value
                    knownKeys = warnOnInvalidKey(child, knownKeys)
                  }
                }
              }

              var newChildren = iteratorFn.call(newChildrenIterable)
              !(newChildren != null)
                ? invariant(false, 'An iterable object provided no iterator.')
                : void 0

              var resultingFirstChild = null
              var previousNewFiber = null

              var oldFiber = currentFirstChild
              var lastPlacedIndex = 0
              var newIdx = 0
              var nextOldFiber = null

              var step = newChildren.next()
              for (
                ;
                oldFiber !== null && !step.done;
                newIdx++, step = newChildren.next()
              ) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber
                  oldFiber = null
                } else {
                  nextOldFiber = oldFiber.sibling
                }
                var newFiber = updateSlot(
                  returnFiber,
                  oldFiber,
                  step.value,
                  expirationTime
                )
                if (newFiber === null) {
                  // TODO: This breaks on empty slots like null children. That's
                  // unfortunate because it triggers the slow path all the time. We need
                  // a better way to communicate whether this was a miss or null,
                  // boolean, undefined, etc.
                  if (!oldFiber) {
                    oldFiber = nextOldFiber
                  }
                  break
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber)
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx)
                if (previousNewFiber === null) {
                  // TODO: Move out of the loop. This only happens for the first run.
                  resultingFirstChild = newFiber
                } else {
                  // TODO: Defer siblings if we're not at the right index for this slot.
                  // I.e. if we had null values before, then we want to defer this
                  // for each null value. However, we also don't want to call updateSlot
                  // with the previous one.
                  previousNewFiber.sibling = newFiber
                }
                previousNewFiber = newFiber
                oldFiber = nextOldFiber
              }

              if (step.done) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber)
                return resultingFirstChild
              }

              if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(
                    returnFiber,
                    step.value,
                    expirationTime
                  )
                  if (_newFiber3 === null) {
                    continue
                  }
                  lastPlacedIndex = placeChild(
                    _newFiber3,
                    lastPlacedIndex,
                    newIdx
                  )
                  if (previousNewFiber === null) {
                    // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber3
                  } else {
                    previousNewFiber.sibling = _newFiber3
                  }
                  previousNewFiber = _newFiber3
                }
                return resultingFirstChild
              }

              // Add all children to a key map for quick lookups.
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber)

              // Keep scanning and use the map to restore deleted items as moves.
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(
                  existingChildren,
                  returnFiber,
                  newIdx,
                  step.value,
                  expirationTime
                )
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      // The new fiber is a work in progress, but if there exists a
                      // current, that means that we reused the fiber. We need to delete
                      // it from the child list so that we don't add it to the deletion
                      // list.
                      existingChildren['delete'](
                        _newFiber4.key === null ? newIdx : _newFiber4.key
                      )
                    }
                  }
                  lastPlacedIndex = placeChild(
                    _newFiber4,
                    lastPlacedIndex,
                    newIdx
                  )
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4
                  } else {
                    previousNewFiber.sibling = _newFiber4
                  }
                  previousNewFiber = _newFiber4
                }
              }

              if (shouldTrackSideEffects) {
                // Any existing children that weren't consumed above were deleted. We need
                // to add them to the deletion list.
                existingChildren.forEach(function(child) {
                  return deleteChild(returnFiber, child)
                })
              }

              return resultingFirstChild
            }

            function reconcileSingleTextNode(
              returnFiber,
              currentFirstChild,
              textContent,
              expirationTime
            ) {
              // There's no need to check for keys on text nodes since we don't have a
              // way to define them.
              if (
                currentFirstChild !== null &&
                currentFirstChild.tag === HostText
              ) {
                // We already have an existing node so let's just update it and delete
                // the rest.
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling)
                var existing = useFiber(
                  currentFirstChild,
                  textContent,
                  expirationTime
                )
                existing['return'] = returnFiber
                return existing
              }
              // The existing first child is not a text node so we need to create one
              // and delete the existing ones.
              deleteRemainingChildren(returnFiber, currentFirstChild)
              var created = createFiberFromText(
                textContent,
                returnFiber.internalContextTag,
                expirationTime
              )
              created['return'] = returnFiber
              return created
            }

            function reconcileSingleElement(
              returnFiber,
              currentFirstChild,
              element,
              expirationTime
            ) {
              var key = element.key
              var child = currentFirstChild
              while (child !== null) {
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                  if (
                    child.tag === Fragment
                      ? element.type === REACT_FRAGMENT_TYPE
                      : child.type === element.type
                  ) {
                    deleteRemainingChildren(returnFiber, child.sibling)
                    var existing = useFiber(
                      child,
                      element.type === REACT_FRAGMENT_TYPE
                        ? element.props.children
                        : element.props,
                      expirationTime
                    )
                    existing.ref = coerceRef(child, element)
                    existing['return'] = returnFiber
                    {
                      existing._debugSource = element._source
                      existing._debugOwner = element._owner
                    }
                    return existing
                  } else {
                    deleteRemainingChildren(returnFiber, child)
                    break
                  }
                } else {
                  deleteChild(returnFiber, child)
                }
                child = child.sibling
              }

              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(
                  element.props.children,
                  returnFiber.internalContextTag,
                  expirationTime,
                  element.key
                )
                created['return'] = returnFiber
                return created
              } else {
                var _created7 = createFiberFromElement(
                  element,
                  returnFiber.internalContextTag,
                  expirationTime
                )
                _created7.ref = coerceRef(currentFirstChild, element)
                _created7['return'] = returnFiber
                return _created7
              }
            }

            function reconcileSingleCall(
              returnFiber,
              currentFirstChild,
              call,
              expirationTime
            ) {
              var key = call.key
              var child = currentFirstChild
              while (child !== null) {
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                  if (child.tag === CallComponent) {
                    deleteRemainingChildren(returnFiber, child.sibling)
                    var existing = useFiber(child, call, expirationTime)
                    existing['return'] = returnFiber
                    return existing
                  } else {
                    deleteRemainingChildren(returnFiber, child)
                    break
                  }
                } else {
                  deleteChild(returnFiber, child)
                }
                child = child.sibling
              }

              var created = createFiberFromCall(
                call,
                returnFiber.internalContextTag,
                expirationTime
              )
              created['return'] = returnFiber
              return created
            }

            function reconcileSingleReturn(
              returnFiber,
              currentFirstChild,
              returnNode,
              expirationTime
            ) {
              // There's no need to check for keys on yields since they're stateless.
              var child = currentFirstChild
              if (child !== null) {
                if (child.tag === ReturnComponent) {
                  deleteRemainingChildren(returnFiber, child.sibling)
                  var existing = useFiber(child, null, expirationTime)
                  existing.type = returnNode.value
                  existing['return'] = returnFiber
                  return existing
                } else {
                  deleteRemainingChildren(returnFiber, child)
                }
              }

              var created = createFiberFromReturn(
                returnNode,
                returnFiber.internalContextTag,
                expirationTime
              )
              created.type = returnNode.value
              created['return'] = returnFiber
              return created
            }

            function reconcileSinglePortal(
              returnFiber,
              currentFirstChild,
              portal,
              expirationTime
            ) {
              var key = portal.key
              var child = currentFirstChild
              while (child !== null) {
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                  if (
                    child.tag === HostPortal &&
                    child.stateNode.containerInfo === portal.containerInfo &&
                    child.stateNode.implementation === portal.implementation
                  ) {
                    deleteRemainingChildren(returnFiber, child.sibling)
                    var existing = useFiber(
                      child,
                      portal.children || [],
                      expirationTime
                    )
                    existing['return'] = returnFiber
                    return existing
                  } else {
                    deleteRemainingChildren(returnFiber, child)
                    break
                  }
                } else {
                  deleteChild(returnFiber, child)
                }
                child = child.sibling
              }

              var created = createFiberFromPortal(
                portal,
                returnFiber.internalContextTag,
                expirationTime
              )
              created['return'] = returnFiber
              return created
            }

            // This API will tag the children with the side-effect of the reconciliation
            // itself. They will be added to the side-effect list as we pass through the
            // children and the parent.
            function reconcileChildFibers(
              returnFiber,
              currentFirstChild,
              newChild,
              expirationTime
            ) {
              // This function is not recursive.
              // If the top level item is an array, we treat it as a set of children,
              // not as a fragment. Nested arrays on the other hand will be treated as
              // fragment nodes. Recursion happens at the normal flow.

              // Handle top level unkeyed fragments as if they were arrays.
              // This leads to an ambiguity between <>{[...]}</> and <>...</>.
              // We treat the ambiguous cases above the same.
              if (
                typeof newChild === 'object' &&
                newChild !== null &&
                newChild.type === REACT_FRAGMENT_TYPE &&
                newChild.key === null
              ) {
                newChild = newChild.props.children
              }

              // Handle object types
              var isObject = typeof newChild === 'object' && newChild !== null

              if (isObject) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(
                      reconcileSingleElement(
                        returnFiber,
                        currentFirstChild,
                        newChild,
                        expirationTime
                      )
                    )

                  case REACT_CALL_TYPE:
                    return placeSingleChild(
                      reconcileSingleCall(
                        returnFiber,
                        currentFirstChild,
                        newChild,
                        expirationTime
                      )
                    )
                  case REACT_RETURN_TYPE:
                    return placeSingleChild(
                      reconcileSingleReturn(
                        returnFiber,
                        currentFirstChild,
                        newChild,
                        expirationTime
                      )
                    )
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(
                      reconcileSinglePortal(
                        returnFiber,
                        currentFirstChild,
                        newChild,
                        expirationTime
                      )
                    )
                }
              }

              if (
                typeof newChild === 'string' ||
                typeof newChild === 'number'
              ) {
                return placeSingleChild(
                  reconcileSingleTextNode(
                    returnFiber,
                    currentFirstChild,
                    '' + newChild,
                    expirationTime
                  )
                )
              }

              if (isArray$1(newChild)) {
                return reconcileChildrenArray(
                  returnFiber,
                  currentFirstChild,
                  newChild,
                  expirationTime
                )
              }

              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(
                  returnFiber,
                  currentFirstChild,
                  newChild,
                  expirationTime
                )
              }

              if (isObject) {
                throwOnInvalidObjectType(returnFiber, newChild)
              }

              {
                if (typeof newChild === 'function') {
                  warnOnFunctionType()
                }
              }
              if (typeof newChild === 'undefined') {
                // If the new child is undefined, and the return fiber is a composite
                // component, throw an error. If Fiber return types are disabled,
                // we already threw above.
                switch (returnFiber.tag) {
                  case ClassComponent: {
                    {
                      var instance = returnFiber.stateNode
                      if (instance.render._isMockFunction) {
                        // We allow auto-mocks to proceed as if they're returning null.
                        break
                      }
                    }
                  }
                  // Intentionally fall through to the next case, which handles both
                  // functions and classes
                  // eslint-disable-next-lined no-fallthrough
                  case FunctionalComponent: {
                    var Component = returnFiber.type
                    invariant(
                      false,
                      '%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.',
                      Component.displayName || Component.name || 'Component'
                    )
                  }
                }
              }

              // Remaining cases are all treated as empty.
              return deleteRemainingChildren(returnFiber, currentFirstChild)
            }

            return reconcileChildFibers
          }

          var reconcileChildFibers = ChildReconciler(true)
          var mountChildFibers = ChildReconciler(false)

          function cloneChildFibers(current, workInProgress) {
            !(current === null || workInProgress.child === current.child)
              ? invariant(false, 'Resuming work not yet implemented.')
              : void 0

            if (workInProgress.child === null) {
              return
            }

            var currentChild = workInProgress.child
            var newChild = createWorkInProgress(
              currentChild,
              currentChild.pendingProps,
              currentChild.expirationTime
            )
            workInProgress.child = newChild

            newChild['return'] = workInProgress
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling
              newChild = newChild.sibling = createWorkInProgress(
                currentChild,
                currentChild.pendingProps,
                currentChild.expirationTime
              )
              newChild['return'] = workInProgress
            }
            newChild.sibling = null
          }

          {
            var warnedAboutStatelessRefs = {}
          }

          var ReactFiberBeginWork = function(
            config,
            hostContext,
            hydrationContext,
            scheduleWork,
            computeExpirationForFiber
          ) {
            var shouldSetTextContent = config.shouldSetTextContent,
              useSyncScheduling = config.useSyncScheduling,
              shouldDeprioritizeSubtree = config.shouldDeprioritizeSubtree
            var pushHostContext = hostContext.pushHostContext,
              pushHostContainer = hostContext.pushHostContainer
            var enterHydrationState = hydrationContext.enterHydrationState,
              resetHydrationState = hydrationContext.resetHydrationState,
              tryToClaimNextHydratableInstance =
                hydrationContext.tryToClaimNextHydratableInstance

            var _ReactFiberClassCompo = ReactFiberClassComponent(
                scheduleWork,
                computeExpirationForFiber,
                memoizeProps,
                memoizeState
              ),
              adoptClassInstance = _ReactFiberClassCompo.adoptClassInstance,
              constructClassInstance =
                _ReactFiberClassCompo.constructClassInstance,
              mountClassInstance = _ReactFiberClassCompo.mountClassInstance,
              updateClassInstance = _ReactFiberClassCompo.updateClassInstance

            // TODO: Remove this and use reconcileChildrenAtExpirationTime directly.

            function reconcileChildren(current, workInProgress, nextChildren) {
              reconcileChildrenAtExpirationTime(
                current,
                workInProgress,
                nextChildren,
                workInProgress.expirationTime
              )
            }

            function reconcileChildrenAtExpirationTime(
              current,
              workInProgress,
              nextChildren,
              renderExpirationTime
            ) {
              if (current === null) {
                // If this is a fresh new component that hasn't been rendered yet, we
                // won't update its child set by applying minimal side-effects. Instead,
                // we will add them all to the child before it gets rendered. That means
                // we can optimize this reconciliation pass by not tracking side-effects.
                workInProgress.child = mountChildFibers(
                  workInProgress,
                  null,
                  nextChildren,
                  renderExpirationTime
                )
              } else {
                // If the current child is the same as the work in progress, it means that
                // we haven't yet started any work on these children. Therefore, we use
                // the clone algorithm to create a copy of all the current children.

                // If we had any progressed work already, that is invalid at this point so
                // let's throw it out.
                workInProgress.child = reconcileChildFibers(
                  workInProgress,
                  current.child,
                  nextChildren,
                  renderExpirationTime
                )
              }
            }

            function updateFragment(current, workInProgress) {
              var nextChildren = workInProgress.pendingProps
              if (hasContextChanged()) {
                // Normally we can bail out on props equality but if context has changed
                // we don't do the bailout and we have to reuse existing props instead.
                if (nextChildren === null) {
                  nextChildren = workInProgress.memoizedProps
                }
              } else if (
                nextChildren === null ||
                workInProgress.memoizedProps === nextChildren
              ) {
                return bailoutOnAlreadyFinishedWork(current, workInProgress)
              }
              reconcileChildren(current, workInProgress, nextChildren)
              memoizeProps(workInProgress, nextChildren)
              return workInProgress.child
            }

            function markRef(current, workInProgress) {
              var ref = workInProgress.ref
              if (ref !== null && (!current || current.ref !== ref)) {
                // Schedule a Ref effect
                workInProgress.effectTag |= Ref
              }
            }

            function updateFunctionalComponent(current, workInProgress) {
              var fn = workInProgress.type
              var nextProps = workInProgress.pendingProps

              var memoizedProps = workInProgress.memoizedProps
              if (hasContextChanged()) {
                // Normally we can bail out on props equality but if context has changed
                // we don't do the bailout and we have to reuse existing props instead.
                if (nextProps === null) {
                  nextProps = memoizedProps
                }
              } else {
                if (nextProps === null || memoizedProps === nextProps) {
                  return bailoutOnAlreadyFinishedWork(current, workInProgress)
                }
                // TODO: consider bringing fn.shouldComponentUpdate() back.
                // It used to be here.
              }

              var unmaskedContext = getUnmaskedContext(workInProgress)
              var context = getMaskedContext(workInProgress, unmaskedContext)

              var nextChildren

              {
                ReactCurrentOwner.current = workInProgress
                ReactDebugCurrentFiber.setCurrentPhase('render')
                nextChildren = fn(nextProps, context)
                ReactDebugCurrentFiber.setCurrentPhase(null)
              }
              // React DevTools reads this flag.
              workInProgress.effectTag |= PerformedWork
              reconcileChildren(current, workInProgress, nextChildren)
              memoizeProps(workInProgress, nextProps)
              return workInProgress.child
            }

            function updateClassComponent(
              current,
              workInProgress,
              renderExpirationTime
            ) {
              // Push context providers early to prevent context stack mismatches.
              // During mounting we don't know the child context yet as the instance doesn't exist.
              // We will invalidate the child context in finishClassComponent() right after rendering.
              var hasContext = pushContextProvider(workInProgress)

              var shouldUpdate = void 0
              if (current === null) {
                if (!workInProgress.stateNode) {
                  // In the initial pass we might need to construct the instance.
                  constructClassInstance(
                    workInProgress,
                    workInProgress.pendingProps
                  )
                  mountClassInstance(workInProgress, renderExpirationTime)
                  shouldUpdate = true
                } else {
                  invariant(false, 'Resuming work not yet implemented.')
                  // In a resume, we'll already have an instance we can reuse.
                  // shouldUpdate = resumeMountClassInstance(workInProgress, renderExpirationTime);
                }
              } else {
                shouldUpdate = updateClassInstance(
                  current,
                  workInProgress,
                  renderExpirationTime
                )
              }
              return finishClassComponent(
                current,
                workInProgress,
                shouldUpdate,
                hasContext
              )
            }

            function finishClassComponent(
              current,
              workInProgress,
              shouldUpdate,
              hasContext
            ) {
              // Refs should update even if shouldComponentUpdate returns false
              markRef(current, workInProgress)

              if (!shouldUpdate) {
                // Context providers should defer to sCU for rendering
                if (hasContext) {
                  invalidateContextProvider(workInProgress, false)
                }

                return bailoutOnAlreadyFinishedWork(current, workInProgress)
              }

              var instance = workInProgress.stateNode

              // Rerender
              ReactCurrentOwner.current = workInProgress
              var nextChildren = void 0
              {
                ReactDebugCurrentFiber.setCurrentPhase('render')
                nextChildren = instance.render()
                if (debugRenderPhaseSideEffects) {
                  instance.render()
                }
                ReactDebugCurrentFiber.setCurrentPhase(null)
              }
              // React DevTools reads this flag.
              workInProgress.effectTag |= PerformedWork
              reconcileChildren(current, workInProgress, nextChildren)
              // Memoize props and state using the values we just used to render.
              // TODO: Restructure so we never read values from the instance.
              memoizeState(workInProgress, instance.state)
              memoizeProps(workInProgress, instance.props)

              // The context might have changed so we need to recalculate it.
              if (hasContext) {
                invalidateContextProvider(workInProgress, true)
              }

              return workInProgress.child
            }

            function pushHostRootContext(workInProgress) {
              var root = workInProgress.stateNode
              if (root.pendingContext) {
                pushTopLevelContextObject(
                  workInProgress,
                  root.pendingContext,
                  root.pendingContext !== root.context
                )
              } else if (root.context) {
                // Should always be set
                pushTopLevelContextObject(workInProgress, root.context, false)
              }
              pushHostContainer(workInProgress, root.containerInfo)
            }

            function updateHostRoot(
              current,
              workInProgress,
              renderExpirationTime
            ) {
              pushHostRootContext(workInProgress)
              var updateQueue = workInProgress.updateQueue
              if (updateQueue !== null) {
                var prevState = workInProgress.memoizedState
                var state = processUpdateQueue(
                  current,
                  workInProgress,
                  updateQueue,
                  null,
                  null,
                  renderExpirationTime
                )
                if (prevState === state) {
                  // If the state is the same as before, that's a bailout because we had
                  // no work that expires at this time.
                  resetHydrationState()
                  return bailoutOnAlreadyFinishedWork(current, workInProgress)
                }
                var element = state.element
                var root = workInProgress.stateNode
                if (
                  (current === null || current.child === null) &&
                  root.hydrate &&
                  enterHydrationState(workInProgress)
                ) {
                  // If we don't have any current children this might be the first pass.
                  // We always try to hydrate. If this isn't a hydration pass there won't
                  // be any children to hydrate which is effectively the same thing as
                  // not hydrating.

                  // This is a bit of a hack. We track the host root as a placement to
                  // know that we're currently in a mounting state. That way isMounted
                  // works as expected. We must reset this before committing.
                  // TODO: Delete this when we delete isMounted and findDOMNode.
                  workInProgress.effectTag |= Placement

                  // Ensure that children mount into this root without tracking
                  // side-effects. This ensures that we don't store Placement effects on
                  // nodes that will be hydrated.
                  workInProgress.child = mountChildFibers(
                    workInProgress,
                    null,
                    element,
                    renderExpirationTime
                  )
                } else {
                  // Otherwise reset hydration state in case we aborted and resumed another
                  // root.
                  resetHydrationState()
                  reconcileChildren(current, workInProgress, element)
                }
                memoizeState(workInProgress, state)
                return workInProgress.child
              }
              resetHydrationState()
              // If there is no update queue, that's a bailout because the root has no props.
              return bailoutOnAlreadyFinishedWork(current, workInProgress)
            }

            function updateHostComponent(
              current,
              workInProgress,
              renderExpirationTime
            ) {
              pushHostContext(workInProgress)

              if (current === null) {
                tryToClaimNextHydratableInstance(workInProgress)
              }

              var type = workInProgress.type
              var memoizedProps = workInProgress.memoizedProps
              var nextProps = workInProgress.pendingProps
              if (nextProps === null) {
                nextProps = memoizedProps
                !(nextProps !== null)
                  ? invariant(
                      false,
                      'We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.'
                    )
                  : void 0
              }
              var prevProps = current !== null ? current.memoizedProps : null

              if (hasContextChanged()) {
                // Normally we can bail out on props equality but if context has changed
                // we don't do the bailout and we have to reuse existing props instead.
              } else if (nextProps === null || memoizedProps === nextProps) {
                return bailoutOnAlreadyFinishedWork(current, workInProgress)
              }

              var nextChildren = nextProps.children
              var isDirectTextChild = shouldSetTextContent(type, nextProps)

              if (isDirectTextChild) {
                // We special case a direct text child of a host node. This is a common
                // case. We won't handle it as a reified child. We will instead handle
                // this in the host environment that also have access to this prop. That
                // avoids allocating another HostText fiber and traversing it.
                nextChildren = null
              } else if (prevProps && shouldSetTextContent(type, prevProps)) {
                // If we're switching from a direct text child to a normal child, or to
                // empty, we need to schedule the text content to be reset.
                workInProgress.effectTag |= ContentReset
              }

              markRef(current, workInProgress)

              // Check the host config to see if the children are offscreen/hidden.
              if (
                renderExpirationTime !== Never &&
                !useSyncScheduling &&
                shouldDeprioritizeSubtree(type, nextProps)
              ) {
                // Down-prioritize the children.
                workInProgress.expirationTime = Never
                // Bailout and come back to this fiber later.
                return null
              }

              reconcileChildren(current, workInProgress, nextChildren)
              memoizeProps(workInProgress, nextProps)
              return workInProgress.child
            }

            function updateHostText(current, workInProgress) {
              if (current === null) {
                tryToClaimNextHydratableInstance(workInProgress)
              }
              var nextProps = workInProgress.pendingProps
              if (nextProps === null) {
                nextProps = workInProgress.memoizedProps
              }
              memoizeProps(workInProgress, nextProps)
              // Nothing to do here. This is terminal. We'll do the completion step
              // immediately after.
              return null
            }

            function mountIndeterminateComponent(
              current,
              workInProgress,
              renderExpirationTime
            ) {
              !(current === null)
                ? invariant(
                    false,
                    'An indeterminate component should never have mounted. This error is likely caused by a bug in React. Please file an issue.'
                  )
                : void 0
              var fn = workInProgress.type
              var props = workInProgress.pendingProps
              var unmaskedContext = getUnmaskedContext(workInProgress)
              var context = getMaskedContext(workInProgress, unmaskedContext)

              var value

              {
                if (fn.prototype && typeof fn.prototype.render === 'function') {
                  var componentName = getComponentName(workInProgress)
                  warning(
                    false,
                    "The <%s /> component appears to have a render method, but doesn't extend React.Component. " +
                      'This is likely to cause errors. Change %s to extend React.Component instead.',
                    componentName,
                    componentName
                  )
                }
                ReactCurrentOwner.current = workInProgress
                value = fn(props, context)
              }
              // React DevTools reads this flag.
              workInProgress.effectTag |= PerformedWork

              if (
                typeof value === 'object' &&
                value !== null &&
                typeof value.render === 'function'
              ) {
                // Proceed under the assumption that this is a class instance
                workInProgress.tag = ClassComponent

                // Push context providers early to prevent context stack mismatches.
                // During mounting we don't know the child context yet as the instance doesn't exist.
                // We will invalidate the child context in finishClassComponent() right after rendering.
                var hasContext = pushContextProvider(workInProgress)
                adoptClassInstance(workInProgress, value)
                mountClassInstance(workInProgress, renderExpirationTime)
                return finishClassComponent(
                  current,
                  workInProgress,
                  true,
                  hasContext
                )
              } else {
                // Proceed under the assumption that this is a functional component
                workInProgress.tag = FunctionalComponent
                {
                  var Component = workInProgress.type

                  if (Component) {
                    warning(
                      !Component.childContextTypes,
                      '%s(...): childContextTypes cannot be defined on a functional component.',
                      Component.displayName || Component.name || 'Component'
                    )
                  }
                  if (workInProgress.ref !== null) {
                    var info = ''
                    var ownerName = ReactDebugCurrentFiber.getCurrentFiberOwnerName()
                    if (ownerName) {
                      info +=
                        '\n\nCheck the render method of `' + ownerName + '`.'
                    }

                    var warningKey = ownerName || workInProgress._debugID || ''
                    var debugSource = workInProgress._debugSource
                    if (debugSource) {
                      warningKey =
                        debugSource.fileName + ':' + debugSource.lineNumber
                    }
                    if (!warnedAboutStatelessRefs[warningKey]) {
                      warnedAboutStatelessRefs[warningKey] = true
                      warning(
                        false,
                        'Stateless function components cannot be given refs. ' +
                          'Attempts to access this ref will fail.%s%s',
                        info,
                        ReactDebugCurrentFiber.getCurrentFiberStackAddendum()
                      )
                    }
                  }
                }
                reconcileChildren(current, workInProgress, value)
                memoizeProps(workInProgress, props)
                return workInProgress.child
              }
            }

            function updateCallComponent(
              current,
              workInProgress,
              renderExpirationTime
            ) {
              var nextCall = workInProgress.pendingProps
              if (hasContextChanged()) {
                // Normally we can bail out on props equality but if context has changed
                // we don't do the bailout and we have to reuse existing props instead.
                if (nextCall === null) {
                  nextCall = current && current.memoizedProps
                  !(nextCall !== null)
                    ? invariant(
                        false,
                        'We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.'
                      )
                    : void 0
                }
              } else if (
                nextCall === null ||
                workInProgress.memoizedProps === nextCall
              ) {
                nextCall = workInProgress.memoizedProps
                // TODO: When bailing out, we might need to return the stateNode instead
                // of the child. To check it for work.
                // return bailoutOnAlreadyFinishedWork(current, workInProgress);
              }

              var nextChildren = nextCall.children

              // The following is a fork of reconcileChildrenAtExpirationTime but using
              // stateNode to store the child.
              if (current === null) {
                workInProgress.stateNode = mountChildFibers(
                  workInProgress,
                  workInProgress.stateNode,
                  nextChildren,
                  renderExpirationTime
                )
              } else {
                workInProgress.stateNode = reconcileChildFibers(
                  workInProgress,
                  workInProgress.stateNode,
                  nextChildren,
                  renderExpirationTime
                )
              }

              memoizeProps(workInProgress, nextCall)
              // This doesn't take arbitrary time so we could synchronously just begin
              // eagerly do the work of workInProgress.child as an optimization.
              return workInProgress.stateNode
            }

            function updatePortalComponent(
              current,
              workInProgress,
              renderExpirationTime
            ) {
              pushHostContainer(
                workInProgress,
                workInProgress.stateNode.containerInfo
              )
              var nextChildren = workInProgress.pendingProps
              if (hasContextChanged()) {
                // Normally we can bail out on props equality but if context has changed
                // we don't do the bailout and we have to reuse existing props instead.
                if (nextChildren === null) {
                  nextChildren = current && current.memoizedProps
                  !(nextChildren != null)
                    ? invariant(
                        false,
                        'We should always have pending or current props. This error is likely caused by a bug in React. Please file an issue.'
                      )
                    : void 0
                }
              } else if (
                nextChildren === null ||
                workInProgress.memoizedProps === nextChildren
              ) {
                return bailoutOnAlreadyFinishedWork(current, workInProgress)
              }

              if (current === null) {
                // Portals are special because we don't append the children during mount
                // but at commit. Therefore we need to track insertions which the normal
                // flow doesn't do during mount. This doesn't happen at the root because
                // the root always starts with a "current" with a null child.
                // TODO: Consider unifying this with how the root works.
                workInProgress.child = reconcileChildFibers(
                  workInProgress,
                  null,
                  nextChildren,
                  renderExpirationTime
                )
                memoizeProps(workInProgress, nextChildren)
              } else {
                reconcileChildren(current, workInProgress, nextChildren)
                memoizeProps(workInProgress, nextChildren)
              }
              return workInProgress.child
            }

            /*
  function reuseChildrenEffects(returnFiber : Fiber, firstChild : Fiber) {
    let child = firstChild;
    do {
      // Ensure that the first and last effect of the parent corresponds
      // to the children's first and last effect.
      if (!returnFiber.firstEffect) {
        returnFiber.firstEffect = child.firstEffect;
      }
      if (child.lastEffect) {
        if (returnFiber.lastEffect) {
          returnFiber.lastEffect.nextEffect = child.firstEffect;
        }
        returnFiber.lastEffect = child.lastEffect;
      }
    } while (child = child.sibling);
  }
  */

            function bailoutOnAlreadyFinishedWork(current, workInProgress) {
              cancelWorkTimer(workInProgress)

              // TODO: We should ideally be able to bail out early if the children have no
              // more work to do. However, since we don't have a separation of this
              // Fiber's priority and its children yet - we don't know without doing lots
              // of the same work we do anyway. Once we have that separation we can just
              // bail out here if the children has no more work at this priority level.
              // if (workInProgress.priorityOfChildren <= priorityLevel) {
              //   // If there are side-effects in these children that have not yet been
              //   // committed we need to ensure that they get properly transferred up.
              //   if (current && current.child !== workInProgress.child) {
              //     reuseChildrenEffects(workInProgress, child);
              //   }
              //   return null;
              // }

              cloneChildFibers(current, workInProgress)
              return workInProgress.child
            }

            function bailoutOnLowPriority(current, workInProgress) {
              cancelWorkTimer(workInProgress)

              // TODO: Handle HostComponent tags here as well and call pushHostContext()?
              // See PR 8590 discussion for context
              switch (workInProgress.tag) {
                case HostRoot:
                  pushHostRootContext(workInProgress)
                  break
                case ClassComponent:
                  pushContextProvider(workInProgress)
                  break
                case HostPortal:
                  pushHostContainer(
                    workInProgress,
                    workInProgress.stateNode.containerInfo
                  )
                  break
              }
              // TODO: What if this is currently in progress?
              // How can that happen? How is this not being cloned?
              return null
            }

            // TODO: Delete memoizeProps/State and move to reconcile/bailout instead
            function memoizeProps(workInProgress, nextProps) {
              workInProgress.memoizedProps = nextProps
            }

            function memoizeState(workInProgress, nextState) {
              workInProgress.memoizedState = nextState
              // Don't reset the updateQueue, in case there are pending updates. Resetting
              // is handled by processUpdateQueue.
            }

            function beginWork(current, workInProgress, renderExpirationTime) {
              if (
                workInProgress.expirationTime === NoWork ||
                workInProgress.expirationTime > renderExpirationTime
              ) {
                return bailoutOnLowPriority(current, workInProgress)
              }

              switch (workInProgress.tag) {
                case IndeterminateComponent:
                  return mountIndeterminateComponent(
                    current,
                    workInProgress,
                    renderExpirationTime
                  )
                case FunctionalComponent:
                  return updateFunctionalComponent(current, workInProgress)
                case ClassComponent:
                  return updateClassComponent(
                    current,
                    workInProgress,
                    renderExpirationTime
                  )
                case HostRoot:
                  return updateHostRoot(
                    current,
                    workInProgress,
                    renderExpirationTime
                  )
                case HostComponent:
                  return updateHostComponent(
                    current,
                    workInProgress,
                    renderExpirationTime
                  )
                case HostText:
                  return updateHostText(current, workInProgress)
                case CallHandlerPhase:
                  // This is a restart. Reset the tag to the initial phase.
                  workInProgress.tag = CallComponent
                // Intentionally fall through since this is now the same.
                case CallComponent:
                  return updateCallComponent(
                    current,
                    workInProgress,
                    renderExpirationTime
                  )
                case ReturnComponent:
                  // A return component is just a placeholder, we can just run through the
                  // next one immediately.
                  return null
                case HostPortal:
                  return updatePortalComponent(
                    current,
                    workInProgress,
                    renderExpirationTime
                  )
                case Fragment:
                  return updateFragment(current, workInProgress)
                default:
                  invariant(
                    false,
                    'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.'
                  )
              }
            }

            function beginFailedWork(
              current,
              workInProgress,
              renderExpirationTime
            ) {
              // Push context providers here to avoid a push/pop context mismatch.
              switch (workInProgress.tag) {
                case ClassComponent:
                  pushContextProvider(workInProgress)
                  break
                case HostRoot:
                  pushHostRootContext(workInProgress)
                  break
                default:
                  invariant(
                    false,
                    'Invalid type of work. This error is likely caused by a bug in React. Please file an issue.'
                  )
              }

              // Add an error effect so we can handle the error during the commit phase
              workInProgress.effectTag |= Err

              // This is a weird case where we do "resume" work — work that failed on
              // our first attempt. Because we no longer have a notion of "progressed
              // deletions," reset the child to the current child to make sure we delete
              // it again. TODO: Find a better way to handle this, perhaps during a more
              // general overhaul of error handling.
              if (current === null) {
                workInProgress.child = null
              } else if (workInProgress.child !== current.child) {
                workInProgress.child = current.child
              }

              if (
                workInProgress.expirationTime === NoWork ||
                workInProgress.expirationTime > renderExpirationTime
              ) {
                return bailoutOnLowPriority(current, workInProgress)
              }

              // If we don't bail out, we're going be recomputing our children so we need
              // to drop our effect list.
              workInProgress.firstEffect = null
              workInProgress.lastEffect = null

              // Unmount the current children as if the component rendered null
              var nextChildren = null
              reconcileChildrenAtExpirationTime(
                current,
                workInProgress,
                nextChildren,
                renderExpirationTime
              )

              if (workInProgress.tag === ClassComponent) {
                var instance = workInProgress.stateNode
                workInProgress.memoizedProps = instance.props
                workInProgress.memoizedState = instance.state
              }

              return workInProgress.child
            }

            return {
              beginWork: beginWork,
              beginFailedWork: beginFailedWork,
            }
          }

          var ReactFiberCompleteWork = function(
            config,
            hostContext,
            hydrationContext
          ) {
            var createInstance = config.createInstance,
              createTextInstance = config.createTextInstance,
              appendInitialChild = config.appendInitialChild,
              finalizeInitialChildren = config.finalizeInitialChildren,
              prepareUpdate = config.prepareUpdate,
              mutation = config.mutation,
              persistence = config.persistence
            var getRootHostContainer = hostContext.getRootHostContainer,
              popHostContext = hostContext.popHostContext,
              getHostContext = hostContext.getHostContext,
              popHostContainer = hostContext.popHostContainer
            var prepareToHydrateHostInstance =
                hydrationContext.prepareToHydrateHostInstance,
              prepareToHydrateHostTextInstance =
                hydrationContext.prepareToHydrateHostTextInstance,
              popHydrationState = hydrationContext.popHydrationState

            function markUpdate(workInProgress) {
              // Tag the fiber with an update effect. This turns a Placement into
              // an UpdateAndPlacement.
              workInProgress.effectTag |= Update
            }

            function markRef(workInProgress) {
              workInProgress.effectTag |= Ref
            }

            function appendAllReturns(returns, workInProgress) {
              var node = workInProgress.stateNode
              if (node) {
                node['return'] = workInProgress
              }
              while (node !== null) {
                if (
                  node.tag === HostComponent ||
                  node.tag === HostText ||
                  node.tag === HostPortal
                ) {
                  invariant(
                    false,
                    'A call cannot have host component children.'
                  )
                } else if (node.tag === ReturnComponent) {
                  returns.push(node.type)
                } else if (node.child !== null) {
                  node.child['return'] = node
                  node = node.child
                  continue
                }
                while (node.sibling === null) {
                  if (
                    node['return'] === null ||
                    node['return'] === workInProgress
                  ) {
                    return
                  }
                  node = node['return']
                }
                node.sibling['return'] = node['return']
                node = node.sibling
              }
            }

            function moveCallToHandlerPhase(
              current,
              workInProgress,
              renderExpirationTime
            ) {
              var call = workInProgress.memoizedProps
              !call
                ? invariant(
                    false,
                    'Should be resolved by now. This error is likely caused by a bug in React. Please file an issue.'
                  )
                : void 0

              // First step of the call has completed. Now we need to do the second.
              // TODO: It would be nice to have a multi stage call represented by a
              // single component, or at least tail call optimize nested ones. Currently
              // that requires additional fields that we don't want to add to the fiber.
              // So this requires nested handlers.
              // Note: This doesn't mutate the alternate node. I don't think it needs to
              // since this stage is reset for every pass.
              workInProgress.tag = CallHandlerPhase

              // Build up the returns.
              // TODO: Compare this to a generator or opaque helpers like Children.
              var returns = []
              appendAllReturns(returns, workInProgress)
              var fn = call.handler
              var props = call.props
              var nextChildren = fn(props, returns)

              var currentFirstChild = current !== null ? current.child : null
              workInProgress.child = reconcileChildFibers(
                workInProgress,
                currentFirstChild,
                nextChildren,
                renderExpirationTime
              )
              return workInProgress.child
            }

            function appendAllChildren(parent, workInProgress) {
              // We only have the top Fiber that was created but we need recurse down its
              // children to find all the terminal nodes.
              var node = workInProgress.child
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode)
                } else if (node.tag === HostPortal) {
                  // If we have a portal child, then we don't want to traverse
                  // down its children. Instead, we'll get insertions from each child in
                  // the portal directly.
                } else if (node.child !== null) {
                  node.child['return'] = node
                  node = node.child
                  continue
                }
                if (node === workInProgress) {
                  return
                }
                while (node.sibling === null) {
                  if (
                    node['return'] === null ||
                    node['return'] === workInProgress
                  ) {
                    return
                  }
                  node = node['return']
                }
                node.sibling['return'] = node['return']
                node = node.sibling
              }
            }

            var updateHostContainer = void 0
            var updateHostComponent = void 0
            var updateHostText = void 0
            if (mutation) {
              if (enableMutatingReconciler) {
                // Mutation mode
                updateHostContainer = function(workInProgress) {
                  // Noop
                }
                updateHostComponent = function(
                  current,
                  workInProgress,
                  updatePayload,
                  type,
                  oldProps,
                  newProps,
                  rootContainerInstance
                ) {
                  // TODO: Type this specific to this type of component.
                  workInProgress.updateQueue = updatePayload
                  // If the update payload indicates that there is a change or if there
                  // is a new ref we mark this as an update. All the work is done in commitWork.
                  if (updatePayload) {
                    markUpdate(workInProgress)
                  }
                }
                updateHostText = function(
                  current,
                  workInProgress,
                  oldText,
                  newText
                ) {
                  // If the text differs, mark it as an update. All the work in done in commitWork.
                  if (oldText !== newText) {
                    markUpdate(workInProgress)
                  }
                }
              } else {
                invariant(false, 'Mutating reconciler is disabled.')
              }
            } else if (persistence) {
              if (enablePersistentReconciler) {
                // Persistent host tree mode
                var cloneInstance = persistence.cloneInstance,
                  createContainerChildSet = persistence.createContainerChildSet,
                  appendChildToContainerChildSet =
                    persistence.appendChildToContainerChildSet,
                  finalizeContainerChildren =
                    persistence.finalizeContainerChildren

                // An unfortunate fork of appendAllChildren because we have two different parent types.

                var appendAllChildrenToContainer = function(
                  containerChildSet,
                  workInProgress
                ) {
                  // We only have the top Fiber that was created but we need recurse down its
                  // children to find all the terminal nodes.
                  var node = workInProgress.child
                  while (node !== null) {
                    if (node.tag === HostComponent || node.tag === HostText) {
                      appendChildToContainerChildSet(
                        containerChildSet,
                        node.stateNode
                      )
                    } else if (node.tag === HostPortal) {
                      // If we have a portal child, then we don't want to traverse
                      // down its children. Instead, we'll get insertions from each child in
                      // the portal directly.
                    } else if (node.child !== null) {
                      node.child['return'] = node
                      node = node.child
                      continue
                    }
                    if (node === workInProgress) {
                      return
                    }
                    while (node.sibling === null) {
                      if (
                        node['return'] === null ||
                        node['return'] === workInProgress
                      ) {
                        return
                      }
                      node = node['return']
                    }
                    node.sibling['return'] = node['return']
                    node = node.sibling
                  }
                }
                updateHostContainer = function(workInProgress) {
                  var portalOrRoot = workInProgress.stateNode
                  var childrenUnchanged = workInProgress.firstEffect === null
                  if (childrenUnchanged) {
                    // No changes, just reuse the existing instance.
                  } else {
                    var container = portalOrRoot.containerInfo
                    var newChildSet = createContainerChildSet(container)
                    if (finalizeContainerChildren(container, newChildSet)) {
                      markUpdate(workInProgress)
                    }
                    portalOrRoot.pendingChildren = newChildSet
                    // If children might have changed, we have to add them all to the set.
                    appendAllChildrenToContainer(newChildSet, workInProgress)
                    // Schedule an update on the container to swap out the container.
                    markUpdate(workInProgress)
                  }
                }
                updateHostComponent = function(
                  current,
                  workInProgress,
                  updatePayload,
                  type,
                  oldProps,
                  newProps,
                  rootContainerInstance
                ) {
                  // If there are no effects associated with this node, then none of our children had any updates.
                  // This guarantees that we can reuse all of them.
                  var childrenUnchanged = workInProgress.firstEffect === null
                  var currentInstance = current.stateNode
                  if (childrenUnchanged && updatePayload === null) {
                    // No changes, just reuse the existing instance.
                    // Note that this might release a previous clone.
                    workInProgress.stateNode = currentInstance
                  } else {
                    var recyclableInstance = workInProgress.stateNode
                    var newInstance = cloneInstance(
                      currentInstance,
                      updatePayload,
                      type,
                      oldProps,
                      newProps,
                      workInProgress,
                      childrenUnchanged,
                      recyclableInstance
                    )
                    if (
                      finalizeInitialChildren(
                        newInstance,
                        type,
                        newProps,
                        rootContainerInstance
                      )
                    ) {
                      markUpdate(workInProgress)
                    }
                    workInProgress.stateNode = newInstance
                    if (childrenUnchanged) {
                      // If there are no other effects in this tree, we need to flag this node as having one.
                      // Even though we're not going to use it for anything.
                      // Otherwise parents won't know that there are new children to propagate upwards.
                      markUpdate(workInProgress)
                    } else {
                      // If children might have changed, we have to add them all to the set.
                      appendAllChildren(newInstance, workInProgress)
                    }
                  }
                }
                updateHostText = function(
                  current,
                  workInProgress,
                  oldText,
                  newText
                ) {
                  if (oldText !== newText) {
                    // If the text content differs, we'll create a new text instance for it.
                    var rootContainerInstance = getRootHostContainer()
                    var currentHostContext = getHostContext()
                    workInProgress.stateNode = createTextInstance(
                      newText,
                      rootContainerInstance,
                      currentHostContext,
                      workInProgress
                    )
                    // We'll have to mark it as having an effect, even though we won't use the effect for anything.
                    // This lets the parents know that at least one of their children has changed.
                    markUpdate(workInProgress)
                  }
                }
              } else {
                invariant(false, 'Persistent reconciler is disabled.')
              }
            } else {
              if (enableNoopReconciler) {
                // No host operations
                updateHostContainer = function(workInProgress) {
                  // Noop
                }
                updateHostComponent = function(
                  current,
                  workInProgress,
                  updatePayload,
                  type,
                  oldProps,
                  newProps,
                  rootContainerInstance
                ) {
                  // Noop
                }
                updateHostText = function(
                  current,
                  workInProgress,
                  oldText,
                  newText
                ) {
                  // Noop
                }
              } else {
                invariant(false, 'Noop reconciler is disabled.')
              }
            }

            function completeWork(
              current,
              workInProgress,
              renderExpirationTime
            ) {
              // Get the latest props.
              var newProps = workInProgress.pendingProps
              if (newProps === null) {
                newProps = workInProgress.memoizedProps
              } else if (
                workInProgress.expirationTime !== Never ||
                renderExpirationTime === Never
              ) {
                // Reset the pending props, unless this was a down-prioritization.
                workInProgress.pendingProps = null
              }

              switch (workInProgress.tag) {
                case FunctionalComponent:
                  return null
                case ClassComponent: {
                  // We are leaving this subtree, so pop context if any.
                  popContextProvider(workInProgress)
                  return null
                }
                case HostRoot: {
                  popHostContainer(workInProgress)
                  popTopLevelContextObject(workInProgress)
                  var fiberRoot = workInProgress.stateNode
                  if (fiberRoot.pendingContext) {
                    fiberRoot.context = fiberRoot.pendingContext
                    fiberRoot.pendingContext = null
                  }

                  if (current === null || current.child === null) {
                    // If we hydrated, pop so that we can delete any remaining children
                    // that weren't hydrated.
                    popHydrationState(workInProgress)
                    // This resets the hacky state to fix isMounted before committing.
                    // TODO: Delete this when we delete isMounted and findDOMNode.
                    workInProgress.effectTag &= ~Placement
                  }
                  updateHostContainer(workInProgress)
                  return null
                }
                case HostComponent: {
                  popHostContext(workInProgress)
                  var rootContainerInstance = getRootHostContainer()
                  var type = workInProgress.type
                  if (current !== null && workInProgress.stateNode != null) {
                    // If we have an alternate, that means this is an update and we need to
                    // schedule a side-effect to do the updates.
                    var oldProps = current.memoizedProps
                    // If we get updated because one of our children updated, we don't
                    // have newProps so we'll have to reuse them.
                    // TODO: Split the update API as separate for the props vs. children.
                    // Even better would be if children weren't special cased at all tho.
                    var instance = workInProgress.stateNode
                    var currentHostContext = getHostContext()
                    var updatePayload = prepareUpdate(
                      instance,
                      type,
                      oldProps,
                      newProps,
                      rootContainerInstance,
                      currentHostContext
                    )

                    updateHostComponent(
                      current,
                      workInProgress,
                      updatePayload,
                      type,
                      oldProps,
                      newProps,
                      rootContainerInstance
                    )

                    if (current.ref !== workInProgress.ref) {
                      markRef(workInProgress)
                    }
                  } else {
                    if (!newProps) {
                      !(workInProgress.stateNode !== null)
                        ? invariant(
                            false,
                            'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.'
                          )
                        : void 0
                      // This can happen when we abort work.
                      return null
                    }

                    var _currentHostContext = getHostContext()
                    // TODO: Move createInstance to beginWork and keep it on a context
                    // "stack" as the parent. Then append children as we go in beginWork
                    // or completeWork depending on we want to add then top->down or
                    // bottom->up. Top->down is faster in IE11.
                    var wasHydrated = popHydrationState(workInProgress)
                    if (wasHydrated) {
                      // TODO: Move this and createInstance step into the beginPhase
                      // to consolidate.
                      if (
                        prepareToHydrateHostInstance(
                          workInProgress,
                          rootContainerInstance,
                          _currentHostContext
                        )
                      ) {
                        // If changes to the hydrated node needs to be applied at the
                        // commit-phase we mark this as such.
                        markUpdate(workInProgress)
                      }
                    } else {
                      var _instance = createInstance(
                        type,
                        newProps,
                        rootContainerInstance,
                        _currentHostContext,
                        workInProgress
                      )

                      appendAllChildren(_instance, workInProgress)

                      // Certain renderers require commit-time effects for initial mount.
                      // (eg DOM renderer supports auto-focus for certain elements).
                      // Make sure such renderers get scheduled for later work.
                      if (
                        finalizeInitialChildren(
                          _instance,
                          type,
                          newProps,
                          rootContainerInstance
                        )
                      ) {
                        markUpdate(workInProgress)
                      }
                      workInProgress.stateNode = _instance
                    }

                    if (workInProgress.ref !== null) {
                      // If there is a ref on a host node we need to schedule a callback
                      markRef(workInProgress)
                    }
                  }
                  return null
                }
                case HostText: {
                  var newText = newProps
                  if (current && workInProgress.stateNode != null) {
                    var oldText = current.memoizedProps
                    // If we have an alternate, that means this is an update and we need
                    // to schedule a side-effect to do the updates.
                    updateHostText(current, workInProgress, oldText, newText)
                  } else {
                    if (typeof newText !== 'string') {
                      !(workInProgress.stateNode !== null)
                        ? invariant(
                            false,
                            'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.'
                          )
                        : void 0
                      // This can happen when we abort work.
                      return null
                    }
                    var _rootContainerInstance = getRootHostContainer()
                    var _currentHostContext2 = getHostContext()
                    var _wasHydrated = popHydrationState(workInProgress)
                    if (_wasHydrated) {
                      if (prepareToHydrateHostTextInstance(workInProgress)) {
                        markUpdate(workInProgress)
                      }
                    } else {
                      workInProgress.stateNode = createTextInstance(
                        newText,
                        _rootContainerInstance,
                        _currentHostContext2,
                        workInProgress
                      )
                    }
                  }
                  return null
                }
                case CallComponent:
                  return moveCallToHandlerPhase(
                    current,
                    workInProgress,
                    renderExpirationTime
                  )
                case CallHandlerPhase:
                  // Reset the tag to now be a first phase call.
                  workInProgress.tag = CallComponent
                  return null
                case ReturnComponent:
                  // Does nothing.
                  return null
                case Fragment:
                  return null
                case HostPortal:
                  popHostContainer(workInProgress)
                  updateHostContainer(workInProgress)
                  return null
                // Error cases
                case IndeterminateComponent:
                  invariant(
                    false,
                    'An indeterminate component should have become determinate before completing. This error is likely caused by a bug in React. Please file an issue.'
                  )
                // eslint-disable-next-line no-fallthrough
                default:
                  invariant(
                    false,
                    'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.'
                  )
              }
            }

            return {
              completeWork: completeWork,
            }
          }

          var invokeGuardedCallback$2 = ReactErrorUtils.invokeGuardedCallback
          var hasCaughtError$1 = ReactErrorUtils.hasCaughtError
          var clearCaughtError$1 = ReactErrorUtils.clearCaughtError

          var ReactFiberCommitWork = function(config, captureError) {
            var getPublicInstance = config.getPublicInstance,
              mutation = config.mutation,
              persistence = config.persistence

            var callComponentWillUnmountWithTimer = function(
              current,
              instance
            ) {
              startPhaseTimer(current, 'componentWillUnmount')
              instance.props = current.memoizedProps
              instance.state = current.memoizedState
              instance.componentWillUnmount()
              stopPhaseTimer()
            }

            // Capture errors so they don't interrupt unmounting.
            function safelyCallComponentWillUnmount(current, instance) {
              {
                invokeGuardedCallback$2(
                  null,
                  callComponentWillUnmountWithTimer,
                  null,
                  current,
                  instance
                )
                if (hasCaughtError$1()) {
                  var unmountError = clearCaughtError$1()
                  captureError(current, unmountError)
                }
              }
            }

            function safelyDetachRef(current) {
              var ref = current.ref
              if (ref !== null) {
                {
                  invokeGuardedCallback$2(null, ref, null, null)
                  if (hasCaughtError$1()) {
                    var refError = clearCaughtError$1()
                    captureError(current, refError)
                  }
                }
              }
            }

            function commitLifeCycles(current, finishedWork) {
              switch (finishedWork.tag) {
                case ClassComponent: {
                  var instance = finishedWork.stateNode
                  if (finishedWork.effectTag & Update) {
                    if (current === null) {
                      startPhaseTimer(finishedWork, 'componentDidMount')
                      instance.props = finishedWork.memoizedProps
                      instance.state = finishedWork.memoizedState
                      instance.componentDidMount()
                      stopPhaseTimer()
                    } else {
                      var prevProps = current.memoizedProps
                      var prevState = current.memoizedState
                      startPhaseTimer(finishedWork, 'componentDidUpdate')
                      instance.props = finishedWork.memoizedProps
                      instance.state = finishedWork.memoizedState
                      instance.componentDidUpdate(prevProps, prevState)
                      stopPhaseTimer()
                    }
                  }
                  var updateQueue = finishedWork.updateQueue
                  if (updateQueue !== null) {
                    commitCallbacks(updateQueue, instance)
                  }
                  return
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue
                  if (_updateQueue !== null) {
                    var _instance =
                      finishedWork.child !== null
                        ? finishedWork.child.stateNode
                        : null
                    commitCallbacks(_updateQueue, _instance)
                  }
                  return
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode

                  // Renderers may schedule work to be done after host components are mounted
                  // (eg DOM renderer may schedule auto-focus for inputs and form controls).
                  // These effects should only be committed when components are first mounted,
                  // aka when there is no current/alternate.
                  if (current === null && finishedWork.effectTag & Update) {
                    var type = finishedWork.type
                    var props = finishedWork.memoizedProps
                    commitMount(_instance2, type, props, finishedWork)
                  }

                  return
                }
                case HostText: {
                  // We have no life-cycles associated with text.
                  return
                }
                case HostPortal: {
                  // We have no life-cycles associated with portals.
                  return
                }
                default: {
                  invariant(
                    false,
                    'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.'
                  )
                }
              }
            }

            function commitAttachRef(finishedWork) {
              var ref = finishedWork.ref
              if (ref !== null) {
                var instance = finishedWork.stateNode
                switch (finishedWork.tag) {
                  case HostComponent:
                    ref(getPublicInstance(instance))
                    break
                  default:
                    ref(instance)
                }
              }
            }

            function commitDetachRef(current) {
              var currentRef = current.ref
              if (currentRef !== null) {
                currentRef(null)
              }
            }

            // User-originating errors (lifecycles and refs) should not interrupt
            // deletion, so don't let them throw. Host-originating errors should
            // interrupt deletion, so it's okay
            function commitUnmount(current) {
              if (typeof onCommitUnmount === 'function') {
                onCommitUnmount(current)
              }

              switch (current.tag) {
                case ClassComponent: {
                  safelyDetachRef(current)
                  var instance = current.stateNode
                  if (typeof instance.componentWillUnmount === 'function') {
                    safelyCallComponentWillUnmount(current, instance)
                  }
                  return
                }
                case HostComponent: {
                  safelyDetachRef(current)
                  return
                }
                case CallComponent: {
                  commitNestedUnmounts(current.stateNode)
                  return
                }
                case HostPortal: {
                  // TODO: this is recursive.
                  // We are also not using this parent because
                  // the portal will get pushed immediately.
                  if (enableMutatingReconciler && mutation) {
                    unmountHostComponents(current)
                  } else if (enablePersistentReconciler && persistence) {
                    emptyPortalContainer(current)
                  }
                  return
                }
              }
            }

            function commitNestedUnmounts(root) {
              // While we're inside a removed host node we don't want to call
              // removeChild on the inner nodes because they're removed by the top
              // call anyway. We also want to call componentWillUnmount on all
              // composites before this host node is removed from the tree. Therefore
              var node = root
              while (true) {
                commitUnmount(node)
                // Visit children because they may contain more composite or host nodes.
                // Skip portals because commitUnmount() currently visits them recursively.
                if (
                  node.child !== null &&
                  // If we use mutation we drill down into portals using commitUnmount above.
                  // If we don't use mutation we drill down into portals here instead.
                  (!mutation || node.tag !== HostPortal)
                ) {
                  node.child['return'] = node
                  node = node.child
                  continue
                }
                if (node === root) {
                  return
                }
                while (node.sibling === null) {
                  if (node['return'] === null || node['return'] === root) {
                    return
                  }
                  node = node['return']
                }
                node.sibling['return'] = node['return']
                node = node.sibling
              }
            }

            function detachFiber(current) {
              // Cut off the return pointers to disconnect it from the tree. Ideally, we
              // should clear the child pointer of the parent alternate to let this
              // get GC:ed but we don't know which for sure which parent is the current
              // one so we'll settle for GC:ing the subtree of this child. This child
              // itself will be GC:ed when the parent updates the next time.
              current['return'] = null
              current.child = null
              if (current.alternate) {
                current.alternate.child = null
                current.alternate['return'] = null
              }
            }

            if (!mutation) {
              var commitContainer = void 0
              if (persistence) {
                var replaceContainerChildren =
                    persistence.replaceContainerChildren,
                  createContainerChildSet = persistence.createContainerChildSet

                var emptyPortalContainer = function(current) {
                  var portal = current.stateNode
                  var containerInfo = portal.containerInfo

                  var emptyChildSet = createContainerChildSet(containerInfo)
                  replaceContainerChildren(containerInfo, emptyChildSet)
                }
                commitContainer = function(finishedWork) {
                  switch (finishedWork.tag) {
                    case ClassComponent: {
                      return
                    }
                    case HostComponent: {
                      return
                    }
                    case HostText: {
                      return
                    }
                    case HostRoot:
                    case HostPortal: {
                      var portalOrRoot = finishedWork.stateNode
                      var containerInfo = portalOrRoot.containerInfo,
                        _pendingChildren = portalOrRoot.pendingChildren

                      replaceContainerChildren(containerInfo, _pendingChildren)
                      return
                    }
                    default: {
                      invariant(
                        false,
                        'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.'
                      )
                    }
                  }
                }
              } else {
                commitContainer = function(finishedWork) {
                  // Noop
                }
              }
              if (enablePersistentReconciler || enableNoopReconciler) {
                return {
                  commitResetTextContent: function(finishedWork) {},
                  commitPlacement: function(finishedWork) {},
                  commitDeletion: function(current) {
                    // Detach refs and call componentWillUnmount() on the whole subtree.
                    commitNestedUnmounts(current)
                    detachFiber(current)
                  },
                  commitWork: function(current, finishedWork) {
                    commitContainer(finishedWork)
                  },

                  commitLifeCycles: commitLifeCycles,
                  commitAttachRef: commitAttachRef,
                  commitDetachRef: commitDetachRef,
                }
              } else if (persistence) {
                invariant(false, 'Persistent reconciler is disabled.')
              } else {
                invariant(false, 'Noop reconciler is disabled.')
              }
            }
            var commitMount = mutation.commitMount,
              commitUpdate = mutation.commitUpdate,
              resetTextContent = mutation.resetTextContent,
              commitTextUpdate = mutation.commitTextUpdate,
              appendChild = mutation.appendChild,
              appendChildToContainer = mutation.appendChildToContainer,
              insertBefore = mutation.insertBefore,
              insertInContainerBefore = mutation.insertInContainerBefore,
              removeChild = mutation.removeChild,
              removeChildFromContainer = mutation.removeChildFromContainer

            function getHostParentFiber(fiber) {
              var parent = fiber['return']
              while (parent !== null) {
                if (isHostParent(parent)) {
                  return parent
                }
                parent = parent['return']
              }
              invariant(
                false,
                'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.'
              )
            }

            function isHostParent(fiber) {
              return (
                fiber.tag === HostComponent ||
                fiber.tag === HostRoot ||
                fiber.tag === HostPortal
              )
            }

            function getHostSibling(fiber) {
              // We're going to search forward into the tree until we find a sibling host
              // node. Unfortunately, if multiple insertions are done in a row we have to
              // search past them. This leads to exponential search for the next sibling.
              var node = fiber
              siblings: while (true) {
                // If we didn't find anything, let's try the next sibling.
                while (node.sibling === null) {
                  if (node['return'] === null || isHostParent(node['return'])) {
                    // If we pop out of the root or hit the parent the fiber we are the
                    // last sibling.
                    return null
                  }
                  node = node['return']
                }
                node.sibling['return'] = node['return']
                node = node.sibling
                while (node.tag !== HostComponent && node.tag !== HostText) {
                  // If it is not host node and, we might have a host node inside it.
                  // Try to search down until we find one.
                  if (node.effectTag & Placement) {
                    // If we don't have a child, try the siblings instead.
                    continue siblings
                  }
                  // If we don't have a child, try the siblings instead.
                  // We also skip portals because they are not part of this host tree.
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings
                  } else {
                    node.child['return'] = node
                    node = node.child
                  }
                }
                // Check if this host node is stable or about to be placed.
                if (!(node.effectTag & Placement)) {
                  // Found it!
                  return node.stateNode
                }
              }
            }

            function commitPlacement(finishedWork) {
              // Recursively insert all host nodes into the parent.
              var parentFiber = getHostParentFiber(finishedWork)
              var parent = void 0
              var isContainer = void 0
              switch (parentFiber.tag) {
                case HostComponent:
                  parent = parentFiber.stateNode
                  isContainer = false
                  break
                case HostRoot:
                  parent = parentFiber.stateNode.containerInfo
                  isContainer = true
                  break
                case HostPortal:
                  parent = parentFiber.stateNode.containerInfo
                  isContainer = true
                  break
                default:
                  invariant(
                    false,
                    'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.'
                  )
              }
              if (parentFiber.effectTag & ContentReset) {
                // Reset the text content of the parent before doing any insertions
                resetTextContent(parent)
                // Clear ContentReset from the effect tag
                parentFiber.effectTag &= ~ContentReset
              }

              var before = getHostSibling(finishedWork)
              // We only have the top Fiber that was inserted but we need recurse down its
              // children to find all the terminal nodes.
              var node = finishedWork
              while (true) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  if (before) {
                    if (isContainer) {
                      insertInContainerBefore(parent, node.stateNode, before)
                    } else {
                      insertBefore(parent, node.stateNode, before)
                    }
                  } else {
                    if (isContainer) {
                      appendChildToContainer(parent, node.stateNode)
                    } else {
                      appendChild(parent, node.stateNode)
                    }
                  }
                } else if (node.tag === HostPortal) {
                  // If the insertion itself is a portal, then we don't want to traverse
                  // down its children. Instead, we'll get insertions from each child in
                  // the portal directly.
                } else if (node.child !== null) {
                  node.child['return'] = node
                  node = node.child
                  continue
                }
                if (node === finishedWork) {
                  return
                }
                while (node.sibling === null) {
                  if (
                    node['return'] === null ||
                    node['return'] === finishedWork
                  ) {
                    return
                  }
                  node = node['return']
                }
                node.sibling['return'] = node['return']
                node = node.sibling
              }
            }

            function unmountHostComponents(current) {
              // We only have the top Fiber that was inserted but we need recurse down its
              var node = current

              // Each iteration, currentParent is populated with node's host parent if not
              // currentParentIsValid.
              var currentParentIsValid = false
              var currentParent = void 0
              var currentParentIsContainer = void 0

              while (true) {
                if (!currentParentIsValid) {
                  var parent = node['return']
                  findParent: while (true) {
                    !(parent !== null)
                      ? invariant(
                          false,
                          'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.'
                        )
                      : void 0
                    switch (parent.tag) {
                      case HostComponent:
                        currentParent = parent.stateNode
                        currentParentIsContainer = false
                        break findParent
                      case HostRoot:
                        currentParent = parent.stateNode.containerInfo
                        currentParentIsContainer = true
                        break findParent
                      case HostPortal:
                        currentParent = parent.stateNode.containerInfo
                        currentParentIsContainer = true
                        break findParent
                    }
                    parent = parent['return']
                  }
                  currentParentIsValid = true
                }

                if (node.tag === HostComponent || node.tag === HostText) {
                  commitNestedUnmounts(node)
                  // After all the children have unmounted, it is now safe to remove the
                  // node from the tree.
                  if (currentParentIsContainer) {
                    removeChildFromContainer(currentParent, node.stateNode)
                  } else {
                    removeChild(currentParent, node.stateNode)
                  }
                  // Don't visit children because we already visited them.
                } else if (node.tag === HostPortal) {
                  // When we go into a portal, it becomes the parent to remove from.
                  // We will reassign it back when we pop the portal on the way up.
                  currentParent = node.stateNode.containerInfo
                  // Visit children because portals might contain host components.
                  if (node.child !== null) {
                    node.child['return'] = node
                    node = node.child
                    continue
                  }
                } else {
                  commitUnmount(node)
                  // Visit children because we may find more host components below.
                  if (node.child !== null) {
                    node.child['return'] = node
                    node = node.child
                    continue
                  }
                }
                if (node === current) {
                  return
                }
                while (node.sibling === null) {
                  if (node['return'] === null || node['return'] === current) {
                    return
                  }
                  node = node['return']
                  if (node.tag === HostPortal) {
                    // When we go out of the portal, we need to restore the parent.
                    // Since we don't keep a stack of them, we will search for it.
                    currentParentIsValid = false
                  }
                }
                node.sibling['return'] = node['return']
                node = node.sibling
              }
            }

            function commitDeletion(current) {
              // Recursively delete all host nodes from the parent.
              // Detach refs and call componentWillUnmount() on the whole subtree.
              unmountHostComponents(current)
              detachFiber(current)
            }

            function commitWork(current, finishedWork) {
              switch (finishedWork.tag) {
                case ClassComponent: {
                  return
                }
                case HostComponent: {
                  var instance = finishedWork.stateNode
                  if (instance != null) {
                    // Commit the work prepared earlier.
                    var newProps = finishedWork.memoizedProps
                    // For hydration we reuse the update path but we treat the oldProps
                    // as the newProps. The updatePayload will contain the real change in
                    // this case.
                    var oldProps =
                      current !== null ? current.memoizedProps : newProps
                    var type = finishedWork.type
                    // TODO: Type the updateQueue to be specific to host components.
                    var updatePayload = finishedWork.updateQueue
                    finishedWork.updateQueue = null
                    if (updatePayload !== null) {
                      commitUpdate(
                        instance,
                        updatePayload,
                        type,
                        oldProps,
                        newProps,
                        finishedWork
                      )
                    }
                  }
                  return
                }
                case HostText: {
                  !(finishedWork.stateNode !== null)
                    ? invariant(
                        false,
                        'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.'
                      )
                    : void 0
                  var textInstance = finishedWork.stateNode
                  var newText = finishedWork.memoizedProps
                  // For hydration we reuse the update path but we treat the oldProps
                  // as the newProps. The updatePayload will contain the real change in
                  // this case.
                  var oldText =
                    current !== null ? current.memoizedProps : newText
                  commitTextUpdate(textInstance, oldText, newText)
                  return
                }
                case HostRoot: {
                  return
                }
                default: {
                  invariant(
                    false,
                    'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.'
                  )
                }
              }
            }

            function commitResetTextContent(current) {
              resetTextContent(current.stateNode)
            }

            if (enableMutatingReconciler) {
              return {
                commitResetTextContent: commitResetTextContent,
                commitPlacement: commitPlacement,
                commitDeletion: commitDeletion,
                commitWork: commitWork,
                commitLifeCycles: commitLifeCycles,
                commitAttachRef: commitAttachRef,
                commitDetachRef: commitDetachRef,
              }
            } else {
              invariant(false, 'Mutating reconciler is disabled.')
            }
          }

          var NO_CONTEXT = {}

          var ReactFiberHostContext = function(config) {
            var getChildHostContext = config.getChildHostContext,
              getRootHostContext = config.getRootHostContext

            var contextStackCursor = createCursor(NO_CONTEXT)
            var contextFiberStackCursor = createCursor(NO_CONTEXT)
            var rootInstanceStackCursor = createCursor(NO_CONTEXT)

            function requiredContext(c) {
              !(c !== NO_CONTEXT)
                ? invariant(
                    false,
                    'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.'
                  )
                : void 0
              return c
            }

            function getRootHostContainer() {
              var rootInstance = requiredContext(
                rootInstanceStackCursor.current
              )
              return rootInstance
            }

            function pushHostContainer(fiber, nextRootInstance) {
              // Push current root instance onto the stack;
              // This allows us to reset root when portals are popped.
              push(rootInstanceStackCursor, nextRootInstance, fiber)

              var nextRootContext = getRootHostContext(nextRootInstance)

              // Track the context and the Fiber that provided it.
              // This enables us to pop only Fibers that provide unique contexts.
              push(contextFiberStackCursor, fiber, fiber)
              push(contextStackCursor, nextRootContext, fiber)
            }

            function popHostContainer(fiber) {
              pop(contextStackCursor, fiber)
              pop(contextFiberStackCursor, fiber)
              pop(rootInstanceStackCursor, fiber)
            }

            function getHostContext() {
              var context = requiredContext(contextStackCursor.current)
              return context
            }

            function pushHostContext(fiber) {
              var rootInstance = requiredContext(
                rootInstanceStackCursor.current
              )
              var context = requiredContext(contextStackCursor.current)
              var nextContext = getChildHostContext(
                context,
                fiber.type,
                rootInstance
              )

              // Don't push this Fiber's context unless it's unique.
              if (context === nextContext) {
                return
              }

              // Track the context and the Fiber that provided it.
              // This enables us to pop only Fibers that provide unique contexts.
              push(contextFiberStackCursor, fiber, fiber)
              push(contextStackCursor, nextContext, fiber)
            }

            function popHostContext(fiber) {
              // Do not pop unless this Fiber provided the current context.
              // pushHostContext() only pushes Fibers that provide unique contexts.
              if (contextFiberStackCursor.current !== fiber) {
                return
              }

              pop(contextStackCursor, fiber)
              pop(contextFiberStackCursor, fiber)
            }

            function resetHostContainer() {
              contextStackCursor.current = NO_CONTEXT
              rootInstanceStackCursor.current = NO_CONTEXT
            }

            return {
              getHostContext: getHostContext,
              getRootHostContainer: getRootHostContainer,
              popHostContainer: popHostContainer,
              popHostContext: popHostContext,
              pushHostContainer: pushHostContainer,
              pushHostContext: pushHostContext,
              resetHostContainer: resetHostContainer,
            }
          }

          var ReactFiberHydrationContext = function(config) {
            var shouldSetTextContent = config.shouldSetTextContent,
              hydration = config.hydration

            // If this doesn't have hydration mode.

            if (!hydration) {
              return {
                enterHydrationState: function() {
                  return false
                },
                resetHydrationState: function() {},
                tryToClaimNextHydratableInstance: function() {},
                prepareToHydrateHostInstance: function() {
                  invariant(
                    false,
                    'Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.'
                  )
                },
                prepareToHydrateHostTextInstance: function() {
                  invariant(
                    false,
                    'Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.'
                  )
                },
                popHydrationState: function(fiber) {
                  return false
                },
              }
            }

            var canHydrateInstance = hydration.canHydrateInstance,
              canHydrateTextInstance = hydration.canHydrateTextInstance,
              getNextHydratableSibling = hydration.getNextHydratableSibling,
              getFirstHydratableChild = hydration.getFirstHydratableChild,
              hydrateInstance = hydration.hydrateInstance,
              hydrateTextInstance = hydration.hydrateTextInstance,
              didNotMatchHydratedContainerTextInstance =
                hydration.didNotMatchHydratedContainerTextInstance,
              didNotMatchHydratedTextInstance =
                hydration.didNotMatchHydratedTextInstance,
              didNotHydrateContainerInstance =
                hydration.didNotHydrateContainerInstance,
              didNotHydrateInstance = hydration.didNotHydrateInstance,
              didNotFindHydratableContainerInstance =
                hydration.didNotFindHydratableContainerInstance,
              didNotFindHydratableContainerTextInstance =
                hydration.didNotFindHydratableContainerTextInstance,
              didNotFindHydratableInstance =
                hydration.didNotFindHydratableInstance,
              didNotFindHydratableTextInstance =
                hydration.didNotFindHydratableTextInstance

            // The deepest Fiber on the stack involved in a hydration context.
            // This may have been an insertion or a hydration.

            var hydrationParentFiber = null
            var nextHydratableInstance = null
            var isHydrating = false

            function enterHydrationState(fiber) {
              var parentInstance = fiber.stateNode.containerInfo
              nextHydratableInstance = getFirstHydratableChild(parentInstance)
              hydrationParentFiber = fiber
              isHydrating = true
              return true
            }

            function deleteHydratableInstance(returnFiber, instance) {
              {
                switch (returnFiber.tag) {
                  case HostRoot:
                    didNotHydrateContainerInstance(
                      returnFiber.stateNode.containerInfo,
                      instance
                    )
                    break
                  case HostComponent:
                    didNotHydrateInstance(
                      returnFiber.type,
                      returnFiber.memoizedProps,
                      returnFiber.stateNode,
                      instance
                    )
                    break
                }
              }

              var childToDelete = createFiberFromHostInstanceForDeletion()
              childToDelete.stateNode = instance
              childToDelete['return'] = returnFiber
              childToDelete.effectTag = Deletion

              // This might seem like it belongs on progressedFirstDeletion. However,
              // these children are not part of the reconciliation list of children.
              // Even if we abort and rereconcile the children, that will try to hydrate
              // again and the nodes are still in the host tree so these will be
              // recreated.
              if (returnFiber.lastEffect !== null) {
                returnFiber.lastEffect.nextEffect = childToDelete
                returnFiber.lastEffect = childToDelete
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = childToDelete
              }
            }

            function insertNonHydratedInstance(returnFiber, fiber) {
              fiber.effectTag |= Placement
              {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo
                    switch (fiber.tag) {
                      case HostComponent:
                        var type = fiber.type
                        var props = fiber.pendingProps
                        didNotFindHydratableContainerInstance(
                          parentContainer,
                          type,
                          props
                        )
                        break
                      case HostText:
                        var text = fiber.pendingProps
                        didNotFindHydratableContainerTextInstance(
                          parentContainer,
                          text
                        )
                        break
                    }
                    break
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type
                    var parentProps = returnFiber.memoizedProps
                    var parentInstance = returnFiber.stateNode
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type = fiber.type
                        var _props = fiber.pendingProps
                        didNotFindHydratableInstance(
                          parentType,
                          parentProps,
                          parentInstance,
                          _type,
                          _props
                        )
                        break
                      case HostText:
                        var _text = fiber.pendingProps
                        didNotFindHydratableTextInstance(
                          parentType,
                          parentProps,
                          parentInstance,
                          _text
                        )
                        break
                    }
                    break
                  }
                  default:
                    return
                }
              }
            }

            function tryHydrate(fiber, nextInstance) {
              switch (fiber.tag) {
                case HostComponent: {
                  var type = fiber.type
                  var props = fiber.pendingProps
                  var instance = canHydrateInstance(nextInstance, type, props)
                  if (instance !== null) {
                    fiber.stateNode = instance
                    return true
                  }
                  return false
                }
                case HostText: {
                  var text = fiber.pendingProps
                  var textInstance = canHydrateTextInstance(nextInstance, text)
                  if (textInstance !== null) {
                    fiber.stateNode = textInstance
                    return true
                  }
                  return false
                }
                default:
                  return false
              }
            }

            function tryToClaimNextHydratableInstance(fiber) {
              if (!isHydrating) {
                return
              }
              var nextInstance = nextHydratableInstance
              if (!nextInstance) {
                // Nothing to hydrate. Make it an insertion.
                insertNonHydratedInstance(hydrationParentFiber, fiber)
                isHydrating = false
                hydrationParentFiber = fiber
                return
              }
              if (!tryHydrate(fiber, nextInstance)) {
                // If we can't hydrate this instance let's try the next one.
                // We use this as a heuristic. It's based on intuition and not data so it
                // might be flawed or unnecessary.
                nextInstance = getNextHydratableSibling(nextInstance)
                if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                  // Nothing to hydrate. Make it an insertion.
                  insertNonHydratedInstance(hydrationParentFiber, fiber)
                  isHydrating = false
                  hydrationParentFiber = fiber
                  return
                }
                // We matched the next one, we'll now assume that the first one was
                // superfluous and we'll delete it. Since we can't eagerly delete it
                // we'll have to schedule a deletion. To do that, this node needs a dummy
                // fiber associated with it.
                deleteHydratableInstance(
                  hydrationParentFiber,
                  nextHydratableInstance
                )
              }
              hydrationParentFiber = fiber
              nextHydratableInstance = getFirstHydratableChild(nextInstance)
            }

            function prepareToHydrateHostInstance(
              fiber,
              rootContainerInstance,
              hostContext
            ) {
              var instance = fiber.stateNode
              var updatePayload = hydrateInstance(
                instance,
                fiber.type,
                fiber.memoizedProps,
                rootContainerInstance,
                hostContext,
                fiber
              )
              // TODO: Type this specific to this type of component.
              fiber.updateQueue = updatePayload
              // If the update payload indicates that there is a change or if there
              // is a new ref we mark this as an update.
              if (updatePayload !== null) {
                return true
              }
              return false
            }

            function prepareToHydrateHostTextInstance(fiber) {
              var textInstance = fiber.stateNode
              var textContent = fiber.memoizedProps
              var shouldUpdate = hydrateTextInstance(
                textInstance,
                textContent,
                fiber
              )
              {
                if (shouldUpdate) {
                  // We assume that prepareToHydrateHostTextInstance is called in a context where the
                  // hydration parent is the parent host component of this host text.
                  var returnFiber = hydrationParentFiber
                  if (returnFiber !== null) {
                    switch (returnFiber.tag) {
                      case HostRoot: {
                        var parentContainer =
                          returnFiber.stateNode.containerInfo
                        didNotMatchHydratedContainerTextInstance(
                          parentContainer,
                          textInstance,
                          textContent
                        )
                        break
                      }
                      case HostComponent: {
                        var parentType = returnFiber.type
                        var parentProps = returnFiber.memoizedProps
                        var parentInstance = returnFiber.stateNode
                        didNotMatchHydratedTextInstance(
                          parentType,
                          parentProps,
                          parentInstance,
                          textInstance,
                          textContent
                        )
                        break
                      }
                    }
                  }
                }
              }
              return shouldUpdate
            }

            function popToNextHostParent(fiber) {
              var parent = fiber['return']
              while (
                parent !== null &&
                parent.tag !== HostComponent &&
                parent.tag !== HostRoot
              ) {
                parent = parent['return']
              }
              hydrationParentFiber = parent
            }

            function popHydrationState(fiber) {
              if (fiber !== hydrationParentFiber) {
                // We're deeper than the current hydration context, inside an inserted
                // tree.
                return false
              }
              if (!isHydrating) {
                // If we're not currently hydrating but we're in a hydration context, then
                // we were an insertion and now need to pop up reenter hydration of our
                // siblings.
                popToNextHostParent(fiber)
                isHydrating = true
                return false
              }

              var type = fiber.type

              // If we have any remaining hydratable nodes, we need to delete them now.
              // We only do this deeper than head and body since they tend to have random
              // other nodes in them. We also ignore components with pure text content in
              // side of them.
              // TODO: Better heuristic.
              if (
                fiber.tag !== HostComponent ||
                (type !== 'head' &&
                  type !== 'body' &&
                  !shouldSetTextContent(type, fiber.memoizedProps))
              ) {
                var nextInstance = nextHydratableInstance
                while (nextInstance) {
                  deleteHydratableInstance(fiber, nextInstance)
                  nextInstance = getNextHydratableSibling(nextInstance)
                }
              }

              popToNextHostParent(fiber)
              nextHydratableInstance = hydrationParentFiber
                ? getNextHydratableSibling(fiber.stateNode)
                : null
              return true
            }

            function resetHydrationState() {
              hydrationParentFiber = null
              nextHydratableInstance = null
              isHydrating = false
            }

            return {
              enterHydrationState: enterHydrationState,
              resetHydrationState: resetHydrationState,
              tryToClaimNextHydratableInstance: tryToClaimNextHydratableInstance,
              prepareToHydrateHostInstance: prepareToHydrateHostInstance,
              prepareToHydrateHostTextInstance: prepareToHydrateHostTextInstance,
              popHydrationState: popHydrationState,
            }
          }

          // This lets us hook into Fiber to debug what it's doing.
          // See https://github.com/facebook/react/pull/8033.
          // This is not part of the public API, not even for React DevTools.
          // You may only inject a debugTool if you work on React Fiber itself.
          var ReactFiberInstrumentation = {
            debugTool: null,
          }

          var ReactFiberInstrumentation_1 = ReactFiberInstrumentation

          var defaultShowDialog = function(capturedError) {
            return true
          }

          var showDialog = defaultShowDialog

          function logCapturedError(capturedError) {
            var logError = showDialog(capturedError)

            // Allow injected showDialog() to prevent default console.error logging.
            // This enables renderers like ReactNative to better manage redbox behavior.
            if (logError === false) {
              return
            }

            var error = capturedError.error
            var suppressLogging = error && error.suppressReactErrorLogging
            if (suppressLogging) {
              return
            }

            {
              var componentName = capturedError.componentName,
                componentStack = capturedError.componentStack,
                errorBoundaryName = capturedError.errorBoundaryName,
                errorBoundaryFound = capturedError.errorBoundaryFound,
                willRetry = capturedError.willRetry

              var componentNameMessage = componentName
                ? 'The above error occurred in the <' +
                  componentName +
                  '> component:'
                : 'The above error occurred in one of your React components:'

              var errorBoundaryMessage = void 0
              // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.
              if (errorBoundaryFound && errorBoundaryName) {
                if (willRetry) {
                  errorBoundaryMessage =
                    'React will try to recreate this component tree from scratch ' +
                    ('using the error boundary you provided, ' +
                      errorBoundaryName +
                      '.')
                } else {
                  errorBoundaryMessage =
                    'This error was initially handled by the error boundary ' +
                    errorBoundaryName +
                    '.\n' +
                    'Recreating the tree from scratch failed so React will unmount the tree.'
                }
              } else {
                errorBoundaryMessage =
                  'Consider adding an error boundary to your tree to customize error handling behavior.\n' +
                  'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.'
              }
              var combinedMessage =
                '' +
                componentNameMessage +
                componentStack +
                '\n\n' +
                ('' + errorBoundaryMessage)

              // In development, we provide our own message with just the component stack.
              // We don't include the original error message and JS stack because the browser
              // has already printed it. Even if the application swallows the error, it is still
              // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
              console.error(combinedMessage)
            }
          }

          var invokeGuardedCallback$1 = ReactErrorUtils.invokeGuardedCallback
          var hasCaughtError = ReactErrorUtils.hasCaughtError
          var clearCaughtError = ReactErrorUtils.clearCaughtError

          {
            var didWarnAboutStateTransition = false
            var didWarnSetStateChildContext = false
            var didWarnStateUpdateForUnmountedComponent = {}

            var warnAboutUpdateOnUnmounted = function(fiber) {
              var componentName = getComponentName(fiber) || 'ReactClass'
              if (didWarnStateUpdateForUnmountedComponent[componentName]) {
                return
              }
              warning(
                false,
                'Can only update a mounted or mounting ' +
                  'component. This usually means you called setState, replaceState, ' +
                  'or forceUpdate on an unmounted component. This is a no-op.\n\nPlease ' +
                  'check the code for the %s component.',
                componentName
              )
              didWarnStateUpdateForUnmountedComponent[componentName] = true
            }

            var warnAboutInvalidUpdates = function(instance) {
              switch (ReactDebugCurrentFiber.phase) {
                case 'getChildContext':
                  if (didWarnSetStateChildContext) {
                    return
                  }
                  warning(
                    false,
                    'setState(...): Cannot call setState() inside getChildContext()'
                  )
                  didWarnSetStateChildContext = true
                  break
                case 'render':
                  if (didWarnAboutStateTransition) {
                    return
                  }
                  warning(
                    false,
                    'Cannot update during an existing state transition (such as within ' +
                      "`render` or another component's constructor). Render methods should " +
                      'be a pure function of props and state; constructor side-effects are ' +
                      'an anti-pattern, but can be moved to `componentWillMount`.'
                  )
                  didWarnAboutStateTransition = true
                  break
              }
            }
          }

          var ReactFiberScheduler = function(config) {
            var hostContext = ReactFiberHostContext(config)
            var hydrationContext = ReactFiberHydrationContext(config)
            var popHostContainer = hostContext.popHostContainer,
              popHostContext = hostContext.popHostContext,
              resetHostContainer = hostContext.resetHostContainer

            var _ReactFiberBeginWork = ReactFiberBeginWork(
                config,
                hostContext,
                hydrationContext,
                scheduleWork,
                computeExpirationForFiber
              ),
              beginWork = _ReactFiberBeginWork.beginWork,
              beginFailedWork = _ReactFiberBeginWork.beginFailedWork

            var _ReactFiberCompleteWo = ReactFiberCompleteWork(
                config,
                hostContext,
                hydrationContext
              ),
              completeWork = _ReactFiberCompleteWo.completeWork

            var _ReactFiberCommitWork = ReactFiberCommitWork(
                config,
                captureError
              ),
              commitResetTextContent =
                _ReactFiberCommitWork.commitResetTextContent,
              commitPlacement = _ReactFiberCommitWork.commitPlacement,
              commitDeletion = _ReactFiberCommitWork.commitDeletion,
              commitWork = _ReactFiberCommitWork.commitWork,
              commitLifeCycles = _ReactFiberCommitWork.commitLifeCycles,
              commitAttachRef = _ReactFiberCommitWork.commitAttachRef,
              commitDetachRef = _ReactFiberCommitWork.commitDetachRef

            var now = config.now,
              scheduleDeferredCallback = config.scheduleDeferredCallback,
              cancelDeferredCallback = config.cancelDeferredCallback,
              useSyncScheduling = config.useSyncScheduling,
              prepareForCommit = config.prepareForCommit,
              resetAfterCommit = config.resetAfterCommit

            // Represents the current time in ms.

            var startTime = now()
            var mostRecentCurrentTime = msToExpirationTime(0)

            // Represents the expiration time that incoming updates should use. (If this
            // is NoWork, use the default strategy: async updates in async mode, sync
            // updates in sync mode.)
            var expirationContext = NoWork

            var isWorking = false

            // The next work in progress fiber that we're currently working on.
            var nextUnitOfWork = null
            var nextRoot = null
            // The time at which we're currently rendering work.
            var nextRenderExpirationTime = NoWork

            // The next fiber with an effect that we're currently committing.
            var nextEffect = null

            // Keep track of which fibers have captured an error that need to be handled.
            // Work is removed from this collection after componentDidCatch is called.
            var capturedErrors = null
            // Keep track of which fibers have failed during the current batch of work.
            // This is a different set than capturedErrors, because it is not reset until
            // the end of the batch. This is needed to propagate errors correctly if a
            // subtree fails more than once.
            var failedBoundaries = null
            // Error boundaries that captured an error during the current commit.
            var commitPhaseBoundaries = null
            var firstUncaughtError = null
            var didFatal = false

            var isCommitting = false
            var isUnmounting = false

            // Used for performance tracking.
            var interruptedBy = null

            function resetContextStack() {
              // Reset the stack
              reset$1()
              // Reset the cursors
              resetContext()
              resetHostContainer()
            }

            function commitAllHostEffects() {
              while (nextEffect !== null) {
                {
                  ReactDebugCurrentFiber.setCurrentFiber(nextEffect)
                }
                recordEffect()

                var effectTag = nextEffect.effectTag
                if (effectTag & ContentReset) {
                  commitResetTextContent(nextEffect)
                }

                if (effectTag & Ref) {
                  var current = nextEffect.alternate
                  if (current !== null) {
                    commitDetachRef(current)
                  }
                }

                // The following switch statement is only concerned about placement,
                // updates, and deletions. To avoid needing to add a case for every
                // possible bitmap value, we remove the secondary effects from the
                // effect tag and switch on that value.
                var primaryEffectTag =
                  effectTag &
                  ~(Callback | Err | ContentReset | Ref | PerformedWork)
                switch (primaryEffectTag) {
                  case Placement: {
                    commitPlacement(nextEffect)
                    // Clear the "placement" from effect tag so that we know that this is inserted, before
                    // any life-cycles like componentDidMount gets called.
                    // TODO: findDOMNode doesn't rely on this any more but isMounted
                    // does and isMounted is deprecated anyway so we should be able
                    // to kill this.
                    nextEffect.effectTag &= ~Placement
                    break
                  }
                  case PlacementAndUpdate: {
                    // Placement
                    commitPlacement(nextEffect)
                    // Clear the "placement" from effect tag so that we know that this is inserted, before
                    // any life-cycles like componentDidMount gets called.
                    nextEffect.effectTag &= ~Placement

                    // Update
                    var _current = nextEffect.alternate
                    commitWork(_current, nextEffect)
                    break
                  }
                  case Update: {
                    var _current2 = nextEffect.alternate
                    commitWork(_current2, nextEffect)
                    break
                  }
                  case Deletion: {
                    isUnmounting = true
                    commitDeletion(nextEffect)
                    isUnmounting = false
                    break
                  }
                }
                nextEffect = nextEffect.nextEffect
              }

              {
                ReactDebugCurrentFiber.resetCurrentFiber()
              }
            }

            function commitAllLifeCycles() {
              while (nextEffect !== null) {
                var effectTag = nextEffect.effectTag

                if (effectTag & (Update | Callback)) {
                  recordEffect()
                  var current = nextEffect.alternate
                  commitLifeCycles(current, nextEffect)
                }

                if (effectTag & Ref) {
                  recordEffect()
                  commitAttachRef(nextEffect)
                }

                if (effectTag & Err) {
                  recordEffect()
                  commitErrorHandling(nextEffect)
                }

                var next = nextEffect.nextEffect
                // Ensure that we clean these up so that we don't accidentally keep them.
                // I'm not actually sure this matters because we can't reset firstEffect
                // and lastEffect since they're on every node, not just the effectful
                // ones. So we have to clean everything as we reuse nodes anyway.
                nextEffect.nextEffect = null
                // Ensure that we reset the effectTag here so that we can rely on effect
                // tags to reason about the current life-cycle.
                nextEffect = next
              }
            }

            function commitRoot(finishedWork) {
              // We keep track of this so that captureError can collect any boundaries
              // that capture an error during the commit phase. The reason these aren't
              // local to this function is because errors that occur during cWU are
              // captured elsewhere, to prevent the unmount from being interrupted.
              isWorking = true
              isCommitting = true
              startCommitTimer()

              var root = finishedWork.stateNode
              !(root.current !== finishedWork)
                ? invariant(
                    false,
                    'Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.'
                  )
                : void 0
              root.isReadyForCommit = false

              // Reset this to null before calling lifecycles
              ReactCurrentOwner.current = null

              var firstEffect = void 0
              if (finishedWork.effectTag > PerformedWork) {
                // A fiber's effect list consists only of its children, not itself. So if
                // the root has an effect, we need to add it to the end of the list. The
                // resulting list is the set that would belong to the root's parent, if
                // it had one; that is, all the effects in the tree including the root.
                if (finishedWork.lastEffect !== null) {
                  finishedWork.lastEffect.nextEffect = finishedWork
                  firstEffect = finishedWork.firstEffect
                } else {
                  firstEffect = finishedWork
                }
              } else {
                // There is no effect on the root.
                firstEffect = finishedWork.firstEffect
              }

              prepareForCommit()

              // Commit all the side-effects within a tree. We'll do this in two passes.
              // The first pass performs all the host insertions, updates, deletions and
              // ref unmounts.
              nextEffect = firstEffect
              startCommitHostEffectsTimer()
              while (nextEffect !== null) {
                var didError = false
                var _error = void 0
                {
                  invokeGuardedCallback$1(null, commitAllHostEffects, null)
                  if (hasCaughtError()) {
                    didError = true
                    _error = clearCaughtError()
                  }
                }
                if (didError) {
                  !(nextEffect !== null)
                    ? invariant(
                        false,
                        'Should have next effect. This error is likely caused by a bug in React. Please file an issue.'
                      )
                    : void 0
                  captureError(nextEffect, _error)
                  // Clean-up
                  if (nextEffect !== null) {
                    nextEffect = nextEffect.nextEffect
                  }
                }
              }
              stopCommitHostEffectsTimer()

              resetAfterCommit()

              // The work-in-progress tree is now the current tree. This must come after
              // the first pass of the commit phase, so that the previous tree is still
              // current during componentWillUnmount, but before the second pass, so that
              // the finished work is current during componentDidMount/Update.
              root.current = finishedWork

              // In the second pass we'll perform all life-cycles and ref callbacks.
              // Life-cycles happen as a separate pass so that all placements, updates,
              // and deletions in the entire tree have already been invoked.
              // This pass also triggers any renderer-specific initial effects.
              nextEffect = firstEffect
              startCommitLifeCyclesTimer()
              while (nextEffect !== null) {
                var _didError = false
                var _error2 = void 0
                {
                  invokeGuardedCallback$1(null, commitAllLifeCycles, null)
                  if (hasCaughtError()) {
                    _didError = true
                    _error2 = clearCaughtError()
                  }
                }
                if (_didError) {
                  !(nextEffect !== null)
                    ? invariant(
                        false,
                        'Should have next effect. This error is likely caused by a bug in React. Please file an issue.'
                      )
                    : void 0
                  captureError(nextEffect, _error2)
                  if (nextEffect !== null) {
                    nextEffect = nextEffect.nextEffect
                  }
                }
              }

              isCommitting = false
              isWorking = false
              stopCommitLifeCyclesTimer()
              stopCommitTimer()
              if (typeof onCommitRoot === 'function') {
                onCommitRoot(finishedWork.stateNode)
              }
              if (true && ReactFiberInstrumentation_1.debugTool) {
                ReactFiberInstrumentation_1.debugTool.onCommitWork(finishedWork)
              }

              // If we caught any errors during this commit, schedule their boundaries
              // to update.
              if (commitPhaseBoundaries) {
                commitPhaseBoundaries.forEach(scheduleErrorRecovery)
                commitPhaseBoundaries = null
              }

              if (firstUncaughtError !== null) {
                var _error3 = firstUncaughtError
                firstUncaughtError = null
                onUncaughtError(_error3)
              }

              var remainingTime = root.current.expirationTime

              if (remainingTime === NoWork) {
                capturedErrors = null
                failedBoundaries = null
              }

              return remainingTime
            }

            function resetExpirationTime(workInProgress, renderTime) {
              if (
                renderTime !== Never &&
                workInProgress.expirationTime === Never
              ) {
                // The children of this component are hidden. Don't bubble their
                // expiration times.
                return
              }

              // Check for pending updates.
              var newExpirationTime = getUpdateExpirationTime(workInProgress)

              // TODO: Calls need to visit stateNode

              // Bubble up the earliest expiration time.
              var child = workInProgress.child
              while (child !== null) {
                if (
                  child.expirationTime !== NoWork &&
                  (newExpirationTime === NoWork ||
                    newExpirationTime > child.expirationTime)
                ) {
                  newExpirationTime = child.expirationTime
                }
                child = child.sibling
              }
              workInProgress.expirationTime = newExpirationTime
            }

            function completeUnitOfWork(workInProgress) {
              while (true) {
                // The current, flushed, state of this fiber is the alternate.
                // Ideally nothing should rely on this, but relying on it here
                // means that we don't need an additional field on the work in
                // progress.
                var current = workInProgress.alternate
                {
                  ReactDebugCurrentFiber.setCurrentFiber(workInProgress)
                }
                var next = completeWork(
                  current,
                  workInProgress,
                  nextRenderExpirationTime
                )
                {
                  ReactDebugCurrentFiber.resetCurrentFiber()
                }

                var returnFiber = workInProgress['return']
                var siblingFiber = workInProgress.sibling

                resetExpirationTime(workInProgress, nextRenderExpirationTime)

                if (next !== null) {
                  stopWorkTimer(workInProgress)
                  if (true && ReactFiberInstrumentation_1.debugTool) {
                    ReactFiberInstrumentation_1.debugTool.onCompleteWork(
                      workInProgress
                    )
                  }
                  // If completing this work spawned new work, do that next. We'll come
                  // back here again.
                  return next
                }

                if (returnFiber !== null) {
                  // Append all the effects of the subtree and this fiber onto the effect
                  // list of the parent. The completion order of the children affects the
                  // side-effect order.
                  if (returnFiber.firstEffect === null) {
                    returnFiber.firstEffect = workInProgress.firstEffect
                  }
                  if (workInProgress.lastEffect !== null) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect =
                        workInProgress.firstEffect
                    }
                    returnFiber.lastEffect = workInProgress.lastEffect
                  }

                  // If this fiber had side-effects, we append it AFTER the children's
                  // side-effects. We can perform certain side-effects earlier if
                  // needed, by doing multiple passes over the effect list. We don't want
                  // to schedule our own side-effect on our own list because if end up
                  // reusing children we'll schedule this effect onto itself since we're
                  // at the end.
                  var effectTag = workInProgress.effectTag
                  // Skip both NoWork and PerformedWork tags when creating the effect list.
                  // PerformedWork effect is read by React DevTools but shouldn't be committed.
                  if (effectTag > PerformedWork) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = workInProgress
                    } else {
                      returnFiber.firstEffect = workInProgress
                    }
                    returnFiber.lastEffect = workInProgress
                  }
                }

                stopWorkTimer(workInProgress)
                if (true && ReactFiberInstrumentation_1.debugTool) {
                  ReactFiberInstrumentation_1.debugTool.onCompleteWork(
                    workInProgress
                  )
                }

                if (siblingFiber !== null) {
                  // If there is more work to do in this returnFiber, do that next.
                  return siblingFiber
                } else if (returnFiber !== null) {
                  // If there's no more work in this returnFiber. Complete the returnFiber.
                  workInProgress = returnFiber
                  continue
                } else {
                  // We've reached the root.
                  var root = workInProgress.stateNode
                  root.isReadyForCommit = true
                  return null
                }
              }

              // Without this explicit null return Flow complains of invalid return type
              // TODO Remove the above while(true) loop
              // eslint-disable-next-line no-unreachable
              return null
            }

            function performUnitOfWork(workInProgress) {
              // The current, flushed, state of this fiber is the alternate.
              // Ideally nothing should rely on this, but relying on it here
              // means that we don't need an additional field on the work in
              // progress.
              var current = workInProgress.alternate

              // See if beginning this work spawns more work.
              startWorkTimer(workInProgress)
              {
                ReactDebugCurrentFiber.setCurrentFiber(workInProgress)
              }

              var next = beginWork(
                current,
                workInProgress,
                nextRenderExpirationTime
              )
              {
                ReactDebugCurrentFiber.resetCurrentFiber()
              }
              if (true && ReactFiberInstrumentation_1.debugTool) {
                ReactFiberInstrumentation_1.debugTool.onBeginWork(
                  workInProgress
                )
              }

              if (next === null) {
                // If this doesn't spawn new work, complete the current work.
                next = completeUnitOfWork(workInProgress)
              }

              ReactCurrentOwner.current = null

              return next
            }

            function performFailedUnitOfWork(workInProgress) {
              // The current, flushed, state of this fiber is the alternate.
              // Ideally nothing should rely on this, but relying on it here
              // means that we don't need an additional field on the work in
              // progress.
              var current = workInProgress.alternate

              // See if beginning this work spawns more work.
              startWorkTimer(workInProgress)
              {
                ReactDebugCurrentFiber.setCurrentFiber(workInProgress)
              }
              var next = beginFailedWork(
                current,
                workInProgress,
                nextRenderExpirationTime
              )
              {
                ReactDebugCurrentFiber.resetCurrentFiber()
              }
              if (true && ReactFiberInstrumentation_1.debugTool) {
                ReactFiberInstrumentation_1.debugTool.onBeginWork(
                  workInProgress
                )
              }

              if (next === null) {
                // If this doesn't spawn new work, complete the current work.
                next = completeUnitOfWork(workInProgress)
              }

              ReactCurrentOwner.current = null

              return next
            }

            function workLoop(expirationTime) {
              if (capturedErrors !== null) {
                // If there are unhandled errors, switch to the slow work loop.
                // TODO: How to avoid this check in the fast path? Maybe the renderer
                // could keep track of which roots have unhandled errors and call a
                // forked version of renderRoot.
                slowWorkLoopThatChecksForFailedWork(expirationTime)
                return
              }
              if (
                nextRenderExpirationTime === NoWork ||
                nextRenderExpirationTime > expirationTime
              ) {
                return
              }

              if (nextRenderExpirationTime <= mostRecentCurrentTime) {
                // Flush all expired work.
                while (nextUnitOfWork !== null) {
                  nextUnitOfWork = performUnitOfWork(nextUnitOfWork)
                }
              } else {
                // Flush asynchronous work until the deadline runs out of time.
                while (nextUnitOfWork !== null && !shouldYield()) {
                  nextUnitOfWork = performUnitOfWork(nextUnitOfWork)
                }
              }
            }

            function slowWorkLoopThatChecksForFailedWork(expirationTime) {
              if (
                nextRenderExpirationTime === NoWork ||
                nextRenderExpirationTime > expirationTime
              ) {
                return
              }

              if (nextRenderExpirationTime <= mostRecentCurrentTime) {
                // Flush all expired work.
                while (nextUnitOfWork !== null) {
                  if (hasCapturedError(nextUnitOfWork)) {
                    // Use a forked version of performUnitOfWork
                    nextUnitOfWork = performFailedUnitOfWork(nextUnitOfWork)
                  } else {
                    nextUnitOfWork = performUnitOfWork(nextUnitOfWork)
                  }
                }
              } else {
                // Flush asynchronous work until the deadline runs out of time.
                while (nextUnitOfWork !== null && !shouldYield()) {
                  if (hasCapturedError(nextUnitOfWork)) {
                    // Use a forked version of performUnitOfWork
                    nextUnitOfWork = performFailedUnitOfWork(nextUnitOfWork)
                  } else {
                    nextUnitOfWork = performUnitOfWork(nextUnitOfWork)
                  }
                }
              }
            }

            function renderRootCatchBlock(
              root,
              failedWork,
              boundary,
              expirationTime
            ) {
              // We're going to restart the error boundary that captured the error.
              // Conceptually, we're unwinding the stack. We need to unwind the
              // context stack, too.
              unwindContexts(failedWork, boundary)

              // Restart the error boundary using a forked version of
              // performUnitOfWork that deletes the boundary's children. The entire
              // failed subree will be unmounted. During the commit phase, a special
              // lifecycle method is called on the error boundary, which triggers
              // a re-render.
              nextUnitOfWork = performFailedUnitOfWork(boundary)

              // Continue working.
              workLoop(expirationTime)
            }

            function renderRoot(root, expirationTime) {
              !!isWorking
                ? invariant(
                    false,
                    'renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.'
                  )
                : void 0
              isWorking = true

              // We're about to mutate the work-in-progress tree. If the root was pending
              // commit, it no longer is: we'll need to complete it again.
              root.isReadyForCommit = false

              // Check if we're starting from a fresh stack, or if we're resuming from
              // previously yielded work.
              if (
                root !== nextRoot ||
                expirationTime !== nextRenderExpirationTime ||
                nextUnitOfWork === null
              ) {
                // Reset the stack and start working from the root.
                resetContextStack()
                nextRoot = root
                nextRenderExpirationTime = expirationTime
                nextUnitOfWork = createWorkInProgress(
                  nextRoot.current,
                  null,
                  expirationTime
                )
              }

              startWorkLoopTimer(nextUnitOfWork)

              var didError = false
              var error = null
              {
                invokeGuardedCallback$1(null, workLoop, null, expirationTime)
                if (hasCaughtError()) {
                  didError = true
                  error = clearCaughtError()
                }
              }

              // An error was thrown during the render phase.
              while (didError) {
                if (didFatal) {
                  // This was a fatal error. Don't attempt to recover from it.
                  firstUncaughtError = error
                  break
                }

                var failedWork = nextUnitOfWork
                if (failedWork === null) {
                  // An error was thrown but there's no current unit of work. This can
                  // happen during the commit phase if there's a bug in the renderer.
                  didFatal = true
                  continue
                }

                // "Capture" the error by finding the nearest boundary. If there is no
                // error boundary, we use the root.
                var boundary = captureError(failedWork, error)
                !(boundary !== null)
                  ? invariant(
                      false,
                      'Should have found an error boundary. This error is likely caused by a bug in React. Please file an issue.'
                    )
                  : void 0

                if (didFatal) {
                  // The error we just captured was a fatal error. This happens
                  // when the error propagates to the root more than once.
                  continue
                }

                didError = false
                error = null
                {
                  invokeGuardedCallback$1(
                    null,
                    renderRootCatchBlock,
                    null,
                    root,
                    failedWork,
                    boundary,
                    expirationTime
                  )
                  if (hasCaughtError()) {
                    didError = true
                    error = clearCaughtError()
                    continue
                  }
                }
                // We're finished working. Exit the error loop.
                break
              }

              var uncaughtError = firstUncaughtError

              // We're done performing work. Time to clean up.
              stopWorkLoopTimer(interruptedBy)
              interruptedBy = null
              isWorking = false
              didFatal = false
              firstUncaughtError = null

              if (uncaughtError !== null) {
                onUncaughtError(uncaughtError)
              }

              return root.isReadyForCommit ? root.current.alternate : null
            }

            // Returns the boundary that captured the error, or null if the error is ignored
            function captureError(failedWork, error) {
              // It is no longer valid because we exited the user code.
              ReactCurrentOwner.current = null
              {
                ReactDebugCurrentFiber.resetCurrentFiber()
              }

              // Search for the nearest error boundary.
              var boundary = null

              // Passed to logCapturedError()
              var errorBoundaryFound = false
              var willRetry = false
              var errorBoundaryName = null

              // Host containers are a special case. If the failed work itself is a host
              // container, then it acts as its own boundary. In all other cases, we
              // ignore the work itself and only search through the parents.
              if (failedWork.tag === HostRoot) {
                boundary = failedWork

                if (isFailedBoundary(failedWork)) {
                  // If this root already failed, there must have been an error when
                  // attempting to unmount it. This is a worst-case scenario and
                  // should only be possible if there's a bug in the renderer.
                  didFatal = true
                }
              } else {
                var node = failedWork['return']
                while (node !== null && boundary === null) {
                  if (node.tag === ClassComponent) {
                    var instance = node.stateNode
                    if (typeof instance.componentDidCatch === 'function') {
                      errorBoundaryFound = true
                      errorBoundaryName = getComponentName(node)

                      // Found an error boundary!
                      boundary = node
                      willRetry = true
                    }
                  } else if (node.tag === HostRoot) {
                    // Treat the root like a no-op error boundary
                    boundary = node
                  }

                  if (isFailedBoundary(node)) {
                    // This boundary is already in a failed state.

                    // If we're currently unmounting, that means this error was
                    // thrown while unmounting a failed subtree. We should ignore
                    // the error.
                    if (isUnmounting) {
                      return null
                    }

                    // If we're in the commit phase, we should check to see if
                    // this boundary already captured an error during this commit.
                    // This case exists because multiple errors can be thrown during
                    // a single commit without interruption.
                    if (
                      commitPhaseBoundaries !== null &&
                      (commitPhaseBoundaries.has(node) ||
                        (node.alternate !== null &&
                          commitPhaseBoundaries.has(node.alternate)))
                    ) {
                      // If so, we should ignore this error.
                      return null
                    }

                    // The error should propagate to the next boundary -— we keep looking.
                    boundary = null
                    willRetry = false
                  }

                  node = node['return']
                }
              }

              if (boundary !== null) {
                // Add to the collection of failed boundaries. This lets us know that
                // subsequent errors in this subtree should propagate to the next boundary.
                if (failedBoundaries === null) {
                  failedBoundaries = new Set()
                }
                failedBoundaries.add(boundary)

                // This method is unsafe outside of the begin and complete phases.
                // We might be in the commit phase when an error is captured.
                // The risk is that the return path from this Fiber may not be accurate.
                // That risk is acceptable given the benefit of providing users more context.
                var _componentStack = getStackAddendumByWorkInProgressFiber(
                  failedWork
                )
                var _componentName = getComponentName(failedWork)

                // Add to the collection of captured errors. This is stored as a global
                // map of errors and their component stack location keyed by the boundaries
                // that capture them. We mostly use this Map as a Set; it's a Map only to
                // avoid adding a field to Fiber to store the error.
                if (capturedErrors === null) {
                  capturedErrors = new Map()
                }

                var capturedError = {
                  componentName: _componentName,
                  componentStack: _componentStack,
                  error: error,
                  errorBoundary: errorBoundaryFound ? boundary.stateNode : null,
                  errorBoundaryFound: errorBoundaryFound,
                  errorBoundaryName: errorBoundaryName,
                  willRetry: willRetry,
                }

                capturedErrors.set(boundary, capturedError)

                try {
                  logCapturedError(capturedError)
                } catch (e) {
                  // Prevent cycle if logCapturedError() throws.
                  // A cycle may still occur if logCapturedError renders a component that throws.
                  var suppressLogging = e && e.suppressReactErrorLogging
                  if (!suppressLogging) {
                    console.error(e)
                  }
                }

                // If we're in the commit phase, defer scheduling an update on the
                // boundary until after the commit is complete
                if (isCommitting) {
                  if (commitPhaseBoundaries === null) {
                    commitPhaseBoundaries = new Set()
                  }
                  commitPhaseBoundaries.add(boundary)
                } else {
                  // Otherwise, schedule an update now.
                  // TODO: Is this actually necessary during the render phase? Is it
                  // possible to unwind and continue rendering at the same priority,
                  // without corrupting internal state?
                  scheduleErrorRecovery(boundary)
                }
                return boundary
              } else if (firstUncaughtError === null) {
                // If no boundary is found, we'll need to throw the error
                firstUncaughtError = error
              }
              return null
            }

            function hasCapturedError(fiber) {
              // TODO: capturedErrors should store the boundary instance, to avoid needing
              // to check the alternate.
              return (
                capturedErrors !== null &&
                (capturedErrors.has(fiber) ||
                  (fiber.alternate !== null &&
                    capturedErrors.has(fiber.alternate)))
              )
            }

            function isFailedBoundary(fiber) {
              // TODO: failedBoundaries should store the boundary instance, to avoid
              // needing to check the alternate.
              return (
                failedBoundaries !== null &&
                (failedBoundaries.has(fiber) ||
                  (fiber.alternate !== null &&
                    failedBoundaries.has(fiber.alternate)))
              )
            }

            function commitErrorHandling(effectfulFiber) {
              var capturedError = void 0
              if (capturedErrors !== null) {
                capturedError = capturedErrors.get(effectfulFiber)
                capturedErrors['delete'](effectfulFiber)
                if (capturedError == null) {
                  if (effectfulFiber.alternate !== null) {
                    effectfulFiber = effectfulFiber.alternate
                    capturedError = capturedErrors.get(effectfulFiber)
                    capturedErrors['delete'](effectfulFiber)
                  }
                }
              }

              !(capturedError != null)
                ? invariant(
                    false,
                    'No error for given unit of work. This error is likely caused by a bug in React. Please file an issue.'
                  )
                : void 0

              switch (effectfulFiber.tag) {
                case ClassComponent:
                  var instance = effectfulFiber.stateNode

                  var info = {
                    componentStack: capturedError.componentStack,
                  }

                  // Allow the boundary to handle the error, usually by scheduling
                  // an update to itself
                  instance.componentDidCatch(capturedError.error, info)
                  return
                case HostRoot:
                  if (firstUncaughtError === null) {
                    firstUncaughtError = capturedError.error
                  }
                  return
                default:
                  invariant(
                    false,
                    'Invalid type of work. This error is likely caused by a bug in React. Please file an issue.'
                  )
              }
            }

            function unwindContexts(from, to) {
              var node = from
              while (node !== null) {
                switch (node.tag) {
                  case ClassComponent:
                    popContextProvider(node)
                    break
                  case HostComponent:
                    popHostContext(node)
                    break
                  case HostRoot:
                    popHostContainer(node)
                    break
                  case HostPortal:
                    popHostContainer(node)
                    break
                }
                if (node === to || node.alternate === to) {
                  stopFailedWorkTimer(node)
                  break
                } else {
                  stopWorkTimer(node)
                }
                node = node['return']
              }
            }

            function computeAsyncExpiration() {
              // Given the current clock time, returns an expiration time. We use rounding
              // to batch like updates together.
              // Should complete within ~1000ms. 1200ms max.
              var currentTime = recalculateCurrentTime()
              var expirationMs = 1000
              var bucketSizeMs = 200
              return computeExpirationBucket(
                currentTime,
                expirationMs,
                bucketSizeMs
              )
            }

            function computeExpirationForFiber(fiber) {
              var expirationTime = void 0
              if (expirationContext !== NoWork) {
                // An explicit expiration context was set;
                expirationTime = expirationContext
              } else if (isWorking) {
                if (isCommitting) {
                  // Updates that occur during the commit phase should have sync priority
                  // by default.
                  expirationTime = Sync
                } else {
                  // Updates during the render phase should expire at the same time as
                  // the work that is being rendered.
                  expirationTime = nextRenderExpirationTime
                }
              } else {
                // No explicit expiration context was set, and we're not currently
                // performing work. Calculate a new expiration time.
                if (
                  useSyncScheduling &&
                  !(fiber.internalContextTag & AsyncUpdates)
                ) {
                  // This is a sync update
                  expirationTime = Sync
                } else {
                  // This is an async update
                  expirationTime = computeAsyncExpiration()
                }
              }
              return expirationTime
            }

            function scheduleWork(fiber, expirationTime) {
              return scheduleWorkImpl(fiber, expirationTime, false)
            }

            function checkRootNeedsClearing(root, fiber, expirationTime) {
              if (
                !isWorking &&
                root === nextRoot &&
                expirationTime < nextRenderExpirationTime
              ) {
                // Restart the root from the top.
                if (nextUnitOfWork !== null) {
                  // This is an interruption. (Used for performance tracking.)
                  interruptedBy = fiber
                }
                nextRoot = null
                nextUnitOfWork = null
                nextRenderExpirationTime = NoWork
              }
            }

            function scheduleWorkImpl(fiber, expirationTime, isErrorRecovery) {
              recordScheduleUpdate()

              {
                if (!isErrorRecovery && fiber.tag === ClassComponent) {
                  var instance = fiber.stateNode
                  warnAboutInvalidUpdates(instance)
                }
              }

              var node = fiber
              while (node !== null) {
                // Walk the parent path to the root and update each node's
                // expiration time.
                if (
                  node.expirationTime === NoWork ||
                  node.expirationTime > expirationTime
                ) {
                  node.expirationTime = expirationTime
                }
                if (node.alternate !== null) {
                  if (
                    node.alternate.expirationTime === NoWork ||
                    node.alternate.expirationTime > expirationTime
                  ) {
                    node.alternate.expirationTime = expirationTime
                  }
                }
                if (node['return'] === null) {
                  if (node.tag === HostRoot) {
                    var root = node.stateNode

                    checkRootNeedsClearing(root, fiber, expirationTime)
                    requestWork(root, expirationTime)
                    checkRootNeedsClearing(root, fiber, expirationTime)
                  } else {
                    {
                      if (!isErrorRecovery && fiber.tag === ClassComponent) {
                        warnAboutUpdateOnUnmounted(fiber)
                      }
                    }
                    return
                  }
                }
                node = node['return']
              }
            }

            function scheduleErrorRecovery(fiber) {
              scheduleWorkImpl(fiber, Sync, true)
            }

            function recalculateCurrentTime() {
              // Subtract initial time so it fits inside 32bits
              var ms = now() - startTime
              mostRecentCurrentTime = msToExpirationTime(ms)
              return mostRecentCurrentTime
            }

            function deferredUpdates(fn) {
              var previousExpirationContext = expirationContext
              expirationContext = computeAsyncExpiration()
              try {
                return fn()
              } finally {
                expirationContext = previousExpirationContext
              }
            }

            function syncUpdates(fn) {
              var previousExpirationContext = expirationContext
              expirationContext = Sync
              try {
                return fn()
              } finally {
                expirationContext = previousExpirationContext
              }
            }

            // TODO: Everything below this is written as if it has been lifted to the
            // renderers. I'll do this in a follow-up.

            // Linked-list of roots
            var firstScheduledRoot = null
            var lastScheduledRoot = null

            var callbackExpirationTime = NoWork
            var callbackID = -1
            var isRendering = false
            var nextFlushedRoot = null
            var nextFlushedExpirationTime = NoWork
            var deadlineDidExpire = false
            var hasUnhandledError = false
            var unhandledError = null
            var deadline = null

            var isBatchingUpdates = false
            var isUnbatchingUpdates = false

            // Use these to prevent an infinite loop of nested updates
            var NESTED_UPDATE_LIMIT = 1000
            var nestedUpdateCount = 0

            var timeHeuristicForUnitOfWork = 1

            function scheduleCallbackWithExpiration(expirationTime) {
              if (callbackExpirationTime !== NoWork) {
                // A callback is already scheduled. Check its expiration time (timeout).
                if (expirationTime > callbackExpirationTime) {
                  // Existing callback has sufficient timeout. Exit.
                  return
                } else {
                  // Existing callback has insufficient timeout. Cancel and schedule a
                  // new one.
                  cancelDeferredCallback(callbackID)
                }
                // The request callback timer is already running. Don't start a new one.
              } else {
                startRequestCallbackTimer()
              }

              // Compute a timeout for the given expiration time.
              var currentMs = now() - startTime
              var expirationMs = expirationTimeToMs(expirationTime)
              var timeout = expirationMs - currentMs

              callbackExpirationTime = expirationTime
              callbackID = scheduleDeferredCallback(performAsyncWork, {
                timeout: timeout,
              })
            }

            // requestWork is called by the scheduler whenever a root receives an update.
            // It's up to the renderer to call renderRoot at some point in the future.
            function requestWork(root, expirationTime) {
              if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
                invariant(
                  false,
                  'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.'
                )
              }

              // Add the root to the schedule.
              // Check if this root is already part of the schedule.
              if (root.nextScheduledRoot === null) {
                // This root is not already scheduled. Add it.
                root.remainingExpirationTime = expirationTime
                if (lastScheduledRoot === null) {
                  firstScheduledRoot = lastScheduledRoot = root
                  root.nextScheduledRoot = root
                } else {
                  lastScheduledRoot.nextScheduledRoot = root
                  lastScheduledRoot = root
                  lastScheduledRoot.nextScheduledRoot = firstScheduledRoot
                }
              } else {
                // This root is already scheduled, but its priority may have increased.
                var remainingExpirationTime = root.remainingExpirationTime
                if (
                  remainingExpirationTime === NoWork ||
                  expirationTime < remainingExpirationTime
                ) {
                  // Update the priority.
                  root.remainingExpirationTime = expirationTime
                }
              }

              if (isRendering) {
                // Prevent reentrancy. Remaining work will be scheduled at the end of
                // the currently rendering batch.
                return
              }

              if (isBatchingUpdates) {
                // Flush work at the end of the batch.
                if (isUnbatchingUpdates) {
                  // ...unless we're inside unbatchedUpdates, in which case we should
                  // flush it now.
                  nextFlushedRoot = root
                  nextFlushedExpirationTime = Sync
                  performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime)
                }
                return
              }

              // TODO: Get rid of Sync and use current time?
              if (expirationTime === Sync) {
                performWork(Sync, null)
              } else {
                scheduleCallbackWithExpiration(expirationTime)
              }
            }

            function findHighestPriorityRoot() {
              var highestPriorityWork = NoWork
              var highestPriorityRoot = null

              if (lastScheduledRoot !== null) {
                var previousScheduledRoot = lastScheduledRoot
                var root = firstScheduledRoot
                while (root !== null) {
                  var remainingExpirationTime = root.remainingExpirationTime
                  if (remainingExpirationTime === NoWork) {
                    // This root no longer has work. Remove it from the scheduler.

                    // TODO: This check is redudant, but Flow is confused by the branch
                    // below where we set lastScheduledRoot to null, even though we break
                    // from the loop right after.
                    !(
                      previousScheduledRoot !== null &&
                      lastScheduledRoot !== null
                    )
                      ? invariant(
                          false,
                          'Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.'
                        )
                      : void 0
                    if (root === root.nextScheduledRoot) {
                      // This is the only root in the list.
                      root.nextScheduledRoot = null
                      firstScheduledRoot = lastScheduledRoot = null
                      break
                    } else if (root === firstScheduledRoot) {
                      // This is the first root in the list.
                      var next = root.nextScheduledRoot
                      firstScheduledRoot = next
                      lastScheduledRoot.nextScheduledRoot = next
                      root.nextScheduledRoot = null
                    } else if (root === lastScheduledRoot) {
                      // This is the last root in the list.
                      lastScheduledRoot = previousScheduledRoot
                      lastScheduledRoot.nextScheduledRoot = firstScheduledRoot
                      root.nextScheduledRoot = null
                      break
                    } else {
                      previousScheduledRoot.nextScheduledRoot =
                        root.nextScheduledRoot
                      root.nextScheduledRoot = null
                    }
                    root = previousScheduledRoot.nextScheduledRoot
                  } else {
                    if (
                      highestPriorityWork === NoWork ||
                      remainingExpirationTime < highestPriorityWork
                    ) {
                      // Update the priority, if it's higher
                      highestPriorityWork = remainingExpirationTime
                      highestPriorityRoot = root
                    }
                    if (root === lastScheduledRoot) {
                      break
                    }
                    previousScheduledRoot = root
                    root = root.nextScheduledRoot
                  }
                }
              }

              // If the next root is the same as the previous root, this is a nested
              // update. To prevent an infinite loop, increment the nested update count.
              var previousFlushedRoot = nextFlushedRoot
              if (
                previousFlushedRoot !== null &&
                previousFlushedRoot === highestPriorityRoot
              ) {
                nestedUpdateCount++
              } else {
                // Reset whenever we switch roots.
                nestedUpdateCount = 0
              }
              nextFlushedRoot = highestPriorityRoot
              nextFlushedExpirationTime = highestPriorityWork
            }

            function performAsyncWork(dl) {
              performWork(NoWork, dl)
            }

            function performWork(minExpirationTime, dl) {
              deadline = dl

              // Keep working on roots until there's no more work, or until the we reach
              // the deadline.
              findHighestPriorityRoot()

              if (enableUserTimingAPI && deadline !== null) {
                var didExpire =
                  nextFlushedExpirationTime < recalculateCurrentTime()
                stopRequestCallbackTimer(didExpire)
              }

              while (
                nextFlushedRoot !== null &&
                nextFlushedExpirationTime !== NoWork &&
                (minExpirationTime === NoWork ||
                  nextFlushedExpirationTime <= minExpirationTime) &&
                !deadlineDidExpire
              ) {
                performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime)
                // Find the next highest priority work.
                findHighestPriorityRoot()
              }

              // We're done flushing work. Either we ran out of time in this callback,
              // or there's no more work left with sufficient priority.

              // If we're inside a callback, set this to false since we just completed it.
              if (deadline !== null) {
                callbackExpirationTime = NoWork
                callbackID = -1
              }
              // If there's work left over, schedule a new callback.
              if (nextFlushedExpirationTime !== NoWork) {
                scheduleCallbackWithExpiration(nextFlushedExpirationTime)
              }

              // Clean-up.
              deadline = null
              deadlineDidExpire = false
              nestedUpdateCount = 0

              if (hasUnhandledError) {
                var _error4 = unhandledError
                unhandledError = null
                hasUnhandledError = false
                throw _error4
              }
            }

            function performWorkOnRoot(root, expirationTime) {
              !!isRendering
                ? invariant(
                    false,
                    'performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.'
                  )
                : void 0

              isRendering = true

              // Check if this is async work or sync/expired work.
              // TODO: Pass current time as argument to renderRoot, commitRoot
              if (expirationTime <= recalculateCurrentTime()) {
                // Flush sync work.
                var finishedWork = root.finishedWork
                if (finishedWork !== null) {
                  // This root is already complete. We can commit it.
                  root.finishedWork = null
                  root.remainingExpirationTime = commitRoot(finishedWork)
                } else {
                  root.finishedWork = null
                  finishedWork = renderRoot(root, expirationTime)
                  if (finishedWork !== null) {
                    // We've completed the root. Commit it.
                    root.remainingExpirationTime = commitRoot(finishedWork)
                  }
                }
              } else {
                // Flush async work.
                var _finishedWork = root.finishedWork
                if (_finishedWork !== null) {
                  // This root is already complete. We can commit it.
                  root.finishedWork = null
                  root.remainingExpirationTime = commitRoot(_finishedWork)
                } else {
                  root.finishedWork = null
                  _finishedWork = renderRoot(root, expirationTime)
                  if (_finishedWork !== null) {
                    // We've completed the root. Check the deadline one more time
                    // before committing.
                    if (!shouldYield()) {
                      // Still time left. Commit the root.
                      root.remainingExpirationTime = commitRoot(_finishedWork)
                    } else {
                      // There's no time left. Mark this root as complete. We'll come
                      // back and commit it later.
                      root.finishedWork = _finishedWork
                    }
                  }
                }
              }

              isRendering = false
            }

            // When working on async work, the reconciler asks the renderer if it should
            // yield execution. For DOM, we implement this with requestIdleCallback.
            function shouldYield() {
              if (deadline === null) {
                return false
              }
              if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
                // Disregard deadline.didTimeout. Only expired work should be flushed
                // during a timeout. This path is only hit for non-expired work.
                return false
              }
              deadlineDidExpire = true
              return true
            }

            // TODO: Not happy about this hook. Conceptually, renderRoot should return a
            // tuple of (isReadyForCommit, didError, error)
            function onUncaughtError(error) {
              !(nextFlushedRoot !== null)
                ? invariant(
                    false,
                    'Should be working on a root. This error is likely caused by a bug in React. Please file an issue.'
                  )
                : void 0
              // Unschedule this root so we don't work on it again until there's
              // another update.
              nextFlushedRoot.remainingExpirationTime = NoWork
              if (!hasUnhandledError) {
                hasUnhandledError = true
                unhandledError = error
              }
            }

            // TODO: Batching should be implemented at the renderer level, not inside
            // the reconciler.
            function batchedUpdates(fn, a) {
              var previousIsBatchingUpdates = isBatchingUpdates
              isBatchingUpdates = true
              try {
                return fn(a)
              } finally {
                isBatchingUpdates = previousIsBatchingUpdates
                if (!isBatchingUpdates && !isRendering) {
                  performWork(Sync, null)
                }
              }
            }

            // TODO: Batching should be implemented at the renderer level, not inside
            // the reconciler.
            function unbatchedUpdates(fn) {
              if (isBatchingUpdates && !isUnbatchingUpdates) {
                isUnbatchingUpdates = true
                try {
                  return fn()
                } finally {
                  isUnbatchingUpdates = false
                }
              }
              return fn()
            }

            // TODO: Batching should be implemented at the renderer level, not within
            // the reconciler.
            function flushSync(fn) {
              var previousIsBatchingUpdates = isBatchingUpdates
              isBatchingUpdates = true
              try {
                return syncUpdates(fn)
              } finally {
                isBatchingUpdates = previousIsBatchingUpdates
                !!isRendering
                  ? invariant(
                      false,
                      'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.'
                    )
                  : void 0
                performWork(Sync, null)
              }
            }

            return {
              computeAsyncExpiration: computeAsyncExpiration,
              computeExpirationForFiber: computeExpirationForFiber,
              scheduleWork: scheduleWork,
              batchedUpdates: batchedUpdates,
              unbatchedUpdates: unbatchedUpdates,
              flushSync: flushSync,
              deferredUpdates: deferredUpdates,
            }
          }

          {
            var didWarnAboutNestedUpdates = false
          }

          // 0 is PROD, 1 is DEV.
          // Might add PROFILE later.

          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyObject
            }

            var fiber = get(parentComponent)
            var parentContext = findCurrentUnmaskedContext(fiber)
            return isContextProvider(fiber)
              ? processChildContext(fiber, parentContext)
              : parentContext
          }

          var ReactFiberReconciler$1 = function(config) {
            var getPublicInstance = config.getPublicInstance

            var _ReactFiberScheduler = ReactFiberScheduler(config),
              computeAsyncExpiration =
                _ReactFiberScheduler.computeAsyncExpiration,
              computeExpirationForFiber =
                _ReactFiberScheduler.computeExpirationForFiber,
              scheduleWork = _ReactFiberScheduler.scheduleWork,
              batchedUpdates = _ReactFiberScheduler.batchedUpdates,
              unbatchedUpdates = _ReactFiberScheduler.unbatchedUpdates,
              flushSync = _ReactFiberScheduler.flushSync,
              deferredUpdates = _ReactFiberScheduler.deferredUpdates

            function scheduleTopLevelUpdate(current, element, callback) {
              {
                if (
                  ReactDebugCurrentFiber.phase === 'render' &&
                  ReactDebugCurrentFiber.current !== null &&
                  !didWarnAboutNestedUpdates
                ) {
                  didWarnAboutNestedUpdates = true
                  warning(
                    false,
                    'Render methods should be a pure function of props and state; ' +
                      'triggering nested component updates from render is not allowed. ' +
                      'If necessary, trigger nested updates in componentDidUpdate.\n\n' +
                      'Check the render method of %s.',
                    getComponentName(ReactDebugCurrentFiber.current) ||
                      'Unknown'
                  )
                }
              }

              callback = callback === undefined ? null : callback
              {
                warning(
                  callback === null || typeof callback === 'function',
                  'render(...): Expected the last optional `callback` argument to be a ' +
                    'function. Instead received: %s.',
                  callback
                )
              }

              var expirationTime = void 0
              // Check if the top-level element is an async wrapper component. If so,
              // treat updates to the root as async. This is a bit weird but lets us
              // avoid a separate `renderAsync` API.
              if (
                enableAsyncSubtreeAPI &&
                element != null &&
                element.type != null &&
                element.type.prototype != null &&
                element.type.prototype.unstable_isAsyncReactComponent === true
              ) {
                expirationTime = computeAsyncExpiration()
              } else {
                expirationTime = computeExpirationForFiber(current)
              }

              var update = {
                expirationTime: expirationTime,
                partialState: { element: element },
                callback: callback,
                isReplace: false,
                isForced: false,
                nextCallback: null,
                next: null,
              }
              insertUpdateIntoFiber(current, update)
              scheduleWork(current, expirationTime)
            }

            function findHostInstance(fiber) {
              var hostFiber = findCurrentHostFiber(fiber)
              if (hostFiber === null) {
                return null
              }
              return hostFiber.stateNode
            }

            return {
              createContainer: function(containerInfo, hydrate) {
                return createFiberRoot(containerInfo, hydrate)
              },
              updateContainer: function(
                element,
                container,
                parentComponent,
                callback
              ) {
                // TODO: If this is a nested container, this won't be the root.
                var current = container.current

                {
                  if (ReactFiberInstrumentation_1.debugTool) {
                    if (current.alternate === null) {
                      ReactFiberInstrumentation_1.debugTool.onMountContainer(
                        container
                      )
                    } else if (element === null) {
                      ReactFiberInstrumentation_1.debugTool.onUnmountContainer(
                        container
                      )
                    } else {
                      ReactFiberInstrumentation_1.debugTool.onUpdateContainer(
                        container
                      )
                    }
                  }
                }

                var context = getContextForSubtree(parentComponent)
                if (container.context === null) {
                  container.context = context
                } else {
                  container.pendingContext = context
                }

                scheduleTopLevelUpdate(current, element, callback)
              },

              batchedUpdates: batchedUpdates,

              unbatchedUpdates: unbatchedUpdates,

              deferredUpdates: deferredUpdates,

              flushSync: flushSync,

              getPublicRootInstance: function(container) {
                var containerFiber = container.current
                if (!containerFiber.child) {
                  return null
                }
                switch (containerFiber.child.tag) {
                  case HostComponent:
                    return getPublicInstance(containerFiber.child.stateNode)
                  default:
                    return containerFiber.child.stateNode
                }
              },

              findHostInstance: findHostInstance,

              findHostInstanceWithNoPortals: function(fiber) {
                var hostFiber = findCurrentHostFiberWithNoPortals(fiber)
                if (hostFiber === null) {
                  return null
                }
                return hostFiber.stateNode
              },
              injectIntoDevTools: function(devToolsConfig) {
                var findFiberByHostInstance =
                  devToolsConfig.findFiberByHostInstance

                return injectInternals(
                  _assign({}, devToolsConfig, {
                    findHostInstanceByFiber: function(fiber) {
                      return findHostInstance(fiber)
                    },
                    findFiberByHostInstance: function(instance) {
                      if (!findFiberByHostInstance) {
                        // Might not be implemented by the renderer.
                        return null
                      }
                      return findFiberByHostInstance(instance)
                    },
                  })
                )
              },
            }
          }

          var ReactFiberReconciler$2 = Object.freeze({
            default: ReactFiberReconciler$1,
          })

          var ReactFiberReconciler$3 =
            (ReactFiberReconciler$2 && ReactFiberReconciler$1) ||
            ReactFiberReconciler$2

          // TODO: bundle Flow types with the package.

          // TODO: decide on the top-level export form.
          // This is hacky but makes it work with both Rollup and Jest.
          var reactReconciler = ReactFiberReconciler$3['default']
            ? ReactFiberReconciler$3['default']
            : ReactFiberReconciler$3

          function createPortal$1(
            children,
            containerInfo,
            // TODO: figure out the API for cross-renderer implementation.
            implementation
          ) {
            var key =
              arguments.length > 3 && arguments[3] !== undefined
                ? arguments[3]
                : null

            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : '' + key,
              children: children,
              containerInfo: containerInfo,
              implementation: implementation,
            }
          }

          // TODO: this is special because it gets imported during build.

          var ReactVersion = '16.2.0'

          // a requestAnimationFrame, storing the time for the start of the frame, then
          // scheduling a postMessage which gets scheduled after paint. Within the
          // postMessage handler do as much work as possible until time + frame rate.
          // By separating the idle call into a separate event tick we ensure that
          // layout, paint and other browser work is counted against the available time.
          // The frame rate is dynamically adjusted.

          {
            if (
              ExecutionEnvironment.canUseDOM &&
              typeof requestAnimationFrame !== 'function'
            ) {
              warning(
                false,
                'React depends on requestAnimationFrame. Make sure that you load a ' +
                  'polyfill in older browsers. http://fb.me/react-polyfills'
              )
            }
          }

          var hasNativePerformanceNow =
            typeof performance === 'object' &&
            typeof performance.now === 'function'

          var now = void 0
          if (hasNativePerformanceNow) {
            now = function() {
              return performance.now()
            }
          } else {
            now = function() {
              return Date.now()
            }
          }

          // TODO: There's no way to cancel, because Fiber doesn't atm.
          var rIC = void 0
          var cIC = void 0

          if (!ExecutionEnvironment.canUseDOM) {
            rIC = function(frameCallback) {
              return setTimeout(function() {
                frameCallback({
                  timeRemaining: function() {
                    return Infinity
                  },
                })
              })
            }
            cIC = function(timeoutID) {
              clearTimeout(timeoutID)
            }
          } else if (
            typeof requestIdleCallback !== 'function' ||
            typeof cancelIdleCallback !== 'function'
          ) {
            // Polyfill requestIdleCallback and cancelIdleCallback

            var scheduledRICCallback = null
            var isIdleScheduled = false
            var timeoutTime = -1

            var isAnimationFrameScheduled = false

            var frameDeadline = 0
            // We start out assuming that we run at 30fps but then the heuristic tracking
            // will adjust this value to a faster fps if we get more frequent animation
            // frames.
            var previousFrameTime = 33
            var activeFrameTime = 33

            var frameDeadlineObject
            if (hasNativePerformanceNow) {
              frameDeadlineObject = {
                didTimeout: false,
                timeRemaining: function() {
                  // We assume that if we have a performance timer that the rAF callback
                  // gets a performance timer value. Not sure if this is always true.
                  var remaining = frameDeadline - performance.now()
                  return remaining > 0 ? remaining : 0
                },
              }
            } else {
              frameDeadlineObject = {
                didTimeout: false,
                timeRemaining: function() {
                  // Fallback to Date.now()
                  var remaining = frameDeadline - Date.now()
                  return remaining > 0 ? remaining : 0
                },
              }
            }

            // We use the postMessage trick to defer idle work until after the repaint.
            var messageKey =
              '__reactIdleCallback$' +
              Math.random()
                .toString(36)
                .slice(2)
            var idleTick = function(event) {
              if (event.source !== window || event.data !== messageKey) {
                return
              }

              isIdleScheduled = false

              var currentTime = now()
              if (frameDeadline - currentTime <= 0) {
                // There's no time left in this idle period. Check if the callback has
                // a timeout and whether it's been exceeded.
                if (timeoutTime !== -1 && timeoutTime <= currentTime) {
                  // Exceeded the timeout. Invoke the callback even though there's no
                  // time left.
                  frameDeadlineObject.didTimeout = true
                } else {
                  // No timeout.
                  if (!isAnimationFrameScheduled) {
                    // Schedule another animation callback so we retry later.
                    isAnimationFrameScheduled = true
                    requestAnimationFrame(animationTick)
                  }
                  // Exit without invoking the callback.
                  return
                }
              } else {
                // There's still time left in this idle period.
                frameDeadlineObject.didTimeout = false
              }

              timeoutTime = -1
              var callback = scheduledRICCallback
              scheduledRICCallback = null
              if (callback !== null) {
                callback(frameDeadlineObject)
              }
            }
            // Assumes that we have addEventListener in this environment. Might need
            // something better for old IE.
            window.addEventListener('message', idleTick, false)

            var animationTick = function(rafTime) {
              isAnimationFrameScheduled = false
              var nextFrameTime = rafTime - frameDeadline + activeFrameTime
              if (
                nextFrameTime < activeFrameTime &&
                previousFrameTime < activeFrameTime
              ) {
                if (nextFrameTime < 8) {
                  // Defensive coding. We don't support higher frame rates than 120hz.
                  // If we get lower than that, it is probably a bug.
                  nextFrameTime = 8
                }
                // If one frame goes long, then the next one can be short to catch up.
                // If two frames are short in a row, then that's an indication that we
                // actually have a higher frame rate than what we're currently optimizing.
                // We adjust our heuristic dynamically accordingly. For example, if we're
                // running on 120hz display or 90hz VR display.
                // Take the max of the two in case one of them was an anomaly due to
                // missed frame deadlines.
                activeFrameTime =
                  nextFrameTime < previousFrameTime
                    ? previousFrameTime
                    : nextFrameTime
              } else {
                previousFrameTime = nextFrameTime
              }
              frameDeadline = rafTime + activeFrameTime
              if (!isIdleScheduled) {
                isIdleScheduled = true
                window.postMessage(messageKey, '*')
              }
            }

            rIC = function(callback, options) {
              // This assumes that we only schedule one callback at a time because that's
              // how Fiber uses it.
              scheduledRICCallback = callback
              if (options != null && typeof options.timeout === 'number') {
                timeoutTime = now() + options.timeout
              }
              if (!isAnimationFrameScheduled) {
                // If rAF didn't already schedule one, we need to schedule a frame.
                // TODO: If this rAF doesn't materialize because the browser throttles, we
                // might want to still have setTimeout trigger rIC as a backup to ensure
                // that we keep performing work.
                isAnimationFrameScheduled = true
                requestAnimationFrame(animationTick)
              }
              return 0
            }

            cIC = function() {
              scheduledRICCallback = null
              isIdleScheduled = false
              timeoutTime = -1
            }
          } else {
            rIC = window.requestIdleCallback
            cIC = window.cancelIdleCallback
          }

          /**
           * Forked from fbjs/warning:
           * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
           *
           * Only change is we use console.warn instead of console.error,
           * and do nothing when 'console' is not supported.
           * This really simplifies the code.
           * ---
           * Similar to invariant but only logs a warning if the condition is not met.
           * This can be used to log issues in development environments in critical
           * paths. Removing the logging code for production environments will keep the
           * same logic and follow the same code paths.
           */

          var lowPriorityWarning = function() {}

          {
            var printWarning = function(format) {
              for (
                var _len = arguments.length,
                  args = Array(_len > 1 ? _len - 1 : 0),
                  _key = 1;
                _key < _len;
                _key++
              ) {
                args[_key - 1] = arguments[_key]
              }

              var argIndex = 0
              var message =
                'Warning: ' +
                format.replace(/%s/g, function() {
                  return args[argIndex++]
                })
              if (typeof console !== 'undefined') {
                console.warn(message)
              }
              try {
                // --- Welcome to debugging React ---
                // This error was thrown as a convenience so that you can use this stack
                // to find the callsite that caused this warning to fire.
                throw new Error(message)
              } catch (x) {}
            }

            lowPriorityWarning = function(condition, format) {
              if (format === undefined) {
                throw new Error(
                  '`warning(condition, format, ...args)` requires a warning ' +
                    'message argument'
                )
              }
              if (!condition) {
                for (
                  var _len2 = arguments.length,
                    args = Array(_len2 > 2 ? _len2 - 2 : 0),
                    _key2 = 2;
                  _key2 < _len2;
                  _key2++
                ) {
                  args[_key2 - 2] = arguments[_key2]
                }

                printWarning.apply(undefined, [format].concat(args))
              }
            }
          }

          var lowPriorityWarning$1 = lowPriorityWarning

          // isAttributeNameSafe() is currently duplicated in DOMMarkupOperations.
          // TODO: Find a better place for this.
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp(
            '^[' +
              ATTRIBUTE_NAME_START_CHAR +
              '][' +
              ATTRIBUTE_NAME_CHAR +
              ']*$'
          )
          var illegalAttributeNameCache = {}
          var validatedAttributeNameCache = {}
          function isAttributeNameSafe(attributeName) {
            if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
              return true
            }
            if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
              return false
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true
              return true
            }
            illegalAttributeNameCache[attributeName] = true
            {
              warning(false, 'Invalid attribute name: `%s`', attributeName)
            }
            return false
          }

          // shouldIgnoreValue() is currently duplicated in DOMMarkupOperations.
          // TODO: Find a better place for this.
          function shouldIgnoreValue(propertyInfo, value) {
            return (
              value == null ||
              (propertyInfo.hasBooleanValue && !value) ||
              (propertyInfo.hasNumericValue && isNaN(value)) ||
              (propertyInfo.hasPositiveNumericValue && value < 1) ||
              (propertyInfo.hasOverloadedBooleanValue && value === false)
            )
          }

          /**
           * Operations for dealing with DOM properties.
           */

          /**
           * Get the value for a property on a node. Only used in DEV for SSR validation.
           * The "expected" argument is used as a hint of what the expected value is.
           * Some properties have multiple equivalent values.
           */
          function getValueForProperty(node, name, expected) {
            {
              var propertyInfo = getPropertyInfo(name)
              if (propertyInfo) {
                var mutationMethod = propertyInfo.mutationMethod
                if (mutationMethod || propertyInfo.mustUseProperty) {
                  return node[propertyInfo.propertyName]
                } else {
                  var attributeName = propertyInfo.attributeName

                  var stringValue = null

                  if (propertyInfo.hasOverloadedBooleanValue) {
                    if (node.hasAttribute(attributeName)) {
                      var value = node.getAttribute(attributeName)
                      if (value === '') {
                        return true
                      }
                      if (shouldIgnoreValue(propertyInfo, expected)) {
                        return value
                      }
                      if (value === '' + expected) {
                        return expected
                      }
                      return value
                    }
                  } else if (node.hasAttribute(attributeName)) {
                    if (shouldIgnoreValue(propertyInfo, expected)) {
                      // We had an attribute but shouldn't have had one, so read it
                      // for the error message.
                      return node.getAttribute(attributeName)
                    }
                    if (propertyInfo.hasBooleanValue) {
                      // If this was a boolean, it doesn't matter what the value is
                      // the fact that we have it is the same as the expected.
                      return expected
                    }
                    // Even if this property uses a namespace we use getAttribute
                    // because we assume its namespaced name is the same as our config.
                    // To use getAttributeNS we need the local name which we don't have
                    // in our config atm.
                    stringValue = node.getAttribute(attributeName)
                  }

                  if (shouldIgnoreValue(propertyInfo, expected)) {
                    return stringValue === null ? expected : stringValue
                  } else if (stringValue === '' + expected) {
                    return expected
                  } else {
                    return stringValue
                  }
                }
              }
            }
          }

          /**
           * Get the value for a attribute on a node. Only used in DEV for SSR validation.
           * The third argument is used as a hint of what the expected value is. Some
           * attributes have multiple equivalent values.
           */
          function getValueForAttribute(node, name, expected) {
            {
              if (!isAttributeNameSafe(name)) {
                return
              }
              if (!node.hasAttribute(name)) {
                return expected === undefined ? undefined : null
              }
              var value = node.getAttribute(name)
              if (value === '' + expected) {
                return expected
              }
              return value
            }
          }

          /**
           * Sets the value for a property on a node.
           *
           * @param {DOMElement} node
           * @param {string} name
           * @param {*} value
           */
          function setValueForProperty(node, name, value) {
            var propertyInfo = getPropertyInfo(name)

            if (propertyInfo && shouldSetAttribute(name, value)) {
              var mutationMethod = propertyInfo.mutationMethod
              if (mutationMethod) {
                mutationMethod(node, value)
              } else if (shouldIgnoreValue(propertyInfo, value)) {
                deleteValueForProperty(node, name)
                return
              } else if (propertyInfo.mustUseProperty) {
                // Contrary to `setAttribute`, object properties are properly
                // `toString`ed by IE8/9.
                node[propertyInfo.propertyName] = value
              } else {
                var attributeName = propertyInfo.attributeName
                var namespace = propertyInfo.attributeNamespace
                // `setAttribute` with objects becomes only `[object]` in IE8/9,
                // ('' + value) makes it output the correct toString()-value.
                if (namespace) {
                  node.setAttributeNS(namespace, attributeName, '' + value)
                } else if (
                  propertyInfo.hasBooleanValue ||
                  (propertyInfo.hasOverloadedBooleanValue && value === true)
                ) {
                  node.setAttribute(attributeName, '')
                } else {
                  node.setAttribute(attributeName, '' + value)
                }
              }
            } else {
              setValueForAttribute(
                node,
                name,
                shouldSetAttribute(name, value) ? value : null
              )
              return
            }

            {
            }
          }

          function setValueForAttribute(node, name, value) {
            if (!isAttributeNameSafe(name)) {
              return
            }
            if (value == null) {
              node.removeAttribute(name)
            } else {
              node.setAttribute(name, '' + value)
            }

            {
            }
          }

          /**
           * Deletes an attributes from a node.
           *
           * @param {DOMElement} node
           * @param {string} name
           */
          function deleteValueForAttribute(node, name) {
            node.removeAttribute(name)
          }

          /**
           * Deletes the value for a property on a node.
           *
           * @param {DOMElement} node
           * @param {string} name
           */
          function deleteValueForProperty(node, name) {
            var propertyInfo = getPropertyInfo(name)
            if (propertyInfo) {
              var mutationMethod = propertyInfo.mutationMethod
              if (mutationMethod) {
                mutationMethod(node, undefined)
              } else if (propertyInfo.mustUseProperty) {
                var propName = propertyInfo.propertyName
                if (propertyInfo.hasBooleanValue) {
                  node[propName] = false
                } else {
                  node[propName] = ''
                }
              } else {
                node.removeAttribute(propertyInfo.attributeName)
              }
            } else {
              node.removeAttribute(name)
            }
          }

          var ReactControlledValuePropTypes = {
            checkPropTypes: null,
          }

          {
            var hasReadOnlyValue = {
              button: true,
              checkbox: true,
              image: true,
              hidden: true,
              radio: true,
              reset: true,
              submit: true,
            }

            var propTypes = {
              value: function(props, propName, componentName) {
                if (
                  !props[propName] ||
                  hasReadOnlyValue[props.type] ||
                  props.onChange ||
                  props.readOnly ||
                  props.disabled
                ) {
                  return null
                }
                return new Error(
                  'You provided a `value` prop to a form field without an ' +
                    '`onChange` handler. This will render a read-only field. If ' +
                    'the field should be mutable use `defaultValue`. Otherwise, ' +
                    'set either `onChange` or `readOnly`.'
                )
              },
              checked: function(props, propName, componentName) {
                if (
                  !props[propName] ||
                  props.onChange ||
                  props.readOnly ||
                  props.disabled
                ) {
                  return null
                }
                return new Error(
                  'You provided a `checked` prop to a form field without an ' +
                    '`onChange` handler. This will render a read-only field. If ' +
                    'the field should be mutable use `defaultChecked`. Otherwise, ' +
                    'set either `onChange` or `readOnly`.'
                )
              },
            }

            /**
             * Provide a linked `value` attribute for controlled forms. You should not use
             * this outside of the ReactDOM controlled form components.
             */
            ReactControlledValuePropTypes.checkPropTypes = function(
              tagName,
              props,
              getStack
            ) {
              checkPropTypes(propTypes, props, 'prop', tagName, getStack)
            }
          }

          // TODO: direct imports like some-package/src/* are bad. Fix me.
          var getCurrentFiberOwnerName$2 =
            ReactDebugCurrentFiber.getCurrentFiberOwnerName
          var getCurrentFiberStackAddendum$3 =
            ReactDebugCurrentFiber.getCurrentFiberStackAddendum

          var didWarnValueDefaultValue = false
          var didWarnCheckedDefaultChecked = false
          var didWarnControlledToUncontrolled = false
          var didWarnUncontrolledToControlled = false

          function isControlled(props) {
            var usesChecked =
              props.type === 'checkbox' || props.type === 'radio'
            return usesChecked ? props.checked != null : props.value != null
          }

          /**
           * Implements an <input> host component that allows setting these optional
           * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
           *
           * If `checked` or `value` are not supplied (or null/undefined), user actions
           * that affect the checked state or value will trigger updates to the element.
           *
           * If they are supplied (and not null/undefined), the rendered element will not
           * trigger updates to the element. Instead, the props must change in order for
           * the rendered element to be updated.
           *
           * The rendered element will be initialized as unchecked (or `defaultChecked`)
           * with an empty value (or `defaultValue`).
           *
           * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
           */

          function getHostProps(element, props) {
            var node = element
            var value = props.value
            var checked = props.checked

            var hostProps = _assign(
              {
                // Make sure we set .type before any other properties (setting .value
                // before .type means .value is lost in IE11 and below)
                type: undefined,
                // Make sure we set .step before .value (setting .value before .step
                // means .value is rounded on mount, based upon step precision)
                step: undefined,
                // Make sure we set .min & .max before .value (to ensure proper order
                // in corner cases such as min or max deriving from value, e.g. Issue #7170)
                min: undefined,
                max: undefined,
              },
              props,
              {
                defaultChecked: undefined,
                defaultValue: undefined,
                value: value != null ? value : node._wrapperState.initialValue,
                checked:
                  checked != null ? checked : node._wrapperState.initialChecked,
              }
            )

            return hostProps
          }

          function initWrapperState(element, props) {
            {
              ReactControlledValuePropTypes.checkPropTypes(
                'input',
                props,
                getCurrentFiberStackAddendum$3
              )

              if (
                props.checked !== undefined &&
                props.defaultChecked !== undefined &&
                !didWarnCheckedDefaultChecked
              ) {
                warning(
                  false,
                  '%s contains an input of type %s with both checked and defaultChecked props. ' +
                    'Input elements must be either controlled or uncontrolled ' +
                    '(specify either the checked prop, or the defaultChecked prop, but not ' +
                    'both). Decide between using a controlled or uncontrolled input ' +
                    'element and remove one of these props. More info: ' +
                    'https://fb.me/react-controlled-components',
                  getCurrentFiberOwnerName$2() || 'A component',
                  props.type
                )
                didWarnCheckedDefaultChecked = true
              }
              if (
                props.value !== undefined &&
                props.defaultValue !== undefined &&
                !didWarnValueDefaultValue
              ) {
                warning(
                  false,
                  '%s contains an input of type %s with both value and defaultValue props. ' +
                    'Input elements must be either controlled or uncontrolled ' +
                    '(specify either the value prop, or the defaultValue prop, but not ' +
                    'both). Decide between using a controlled or uncontrolled input ' +
                    'element and remove one of these props. More info: ' +
                    'https://fb.me/react-controlled-components',
                  getCurrentFiberOwnerName$2() || 'A component',
                  props.type
                )
                didWarnValueDefaultValue = true
              }
            }

            var defaultValue = props.defaultValue
            var node = element
            node._wrapperState = {
              initialChecked:
                props.checked != null ? props.checked : props.defaultChecked,
              initialValue: props.value != null ? props.value : defaultValue,
              controlled: isControlled(props),
            }
          }

          function updateChecked(element, props) {
            var node = element
            var checked = props.checked
            if (checked != null) {
              setValueForProperty(node, 'checked', checked)
            }
          }

          function updateWrapper(element, props) {
            var node = element
            {
              var controlled = isControlled(props)

              if (
                !node._wrapperState.controlled &&
                controlled &&
                !didWarnUncontrolledToControlled
              ) {
                warning(
                  false,
                  'A component is changing an uncontrolled input of type %s to be controlled. ' +
                    'Input elements should not switch from uncontrolled to controlled (or vice versa). ' +
                    'Decide between using a controlled or uncontrolled input ' +
                    'element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s',
                  props.type,
                  getCurrentFiberStackAddendum$3()
                )
                didWarnUncontrolledToControlled = true
              }
              if (
                node._wrapperState.controlled &&
                !controlled &&
                !didWarnControlledToUncontrolled
              ) {
                warning(
                  false,
                  'A component is changing a controlled input of type %s to be uncontrolled. ' +
                    'Input elements should not switch from controlled to uncontrolled (or vice versa). ' +
                    'Decide between using a controlled or uncontrolled input ' +
                    'element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s',
                  props.type,
                  getCurrentFiberStackAddendum$3()
                )
                didWarnControlledToUncontrolled = true
              }
            }

            updateChecked(element, props)

            var value = props.value
            if (value != null) {
              if (value === 0 && node.value === '') {
                node.value = '0'
                // Note: IE9 reports a number inputs as 'text', so check props instead.
              } else if (props.type === 'number') {
                // Simulate `input.valueAsNumber`. IE9 does not support it
                var valueAsNumber = parseFloat(node.value) || 0

                if (
                  // eslint-disable-next-line
                  value != valueAsNumber ||
                  // eslint-disable-next-line
                  (value == valueAsNumber && node.value != value)
                ) {
                  // Cast `value` to a string to ensure the value is set correctly. While
                  // browsers typically do this as necessary, jsdom doesn't.
                  node.value = '' + value
                }
              } else if (node.value !== '' + value) {
                // Cast `value` to a string to ensure the value is set correctly. While
                // browsers typically do this as necessary, jsdom doesn't.
                node.value = '' + value
              }
            } else {
              if (props.value == null && props.defaultValue != null) {
                // In Chrome, assigning defaultValue to certain input types triggers input validation.
                // For number inputs, the display value loses trailing decimal points. For email inputs,
                // Chrome raises "The specified value <x> is not a valid email address".
                //
                // Here we check to see if the defaultValue has actually changed, avoiding these problems
                // when the user is inputting text
                //
                // https://github.com/facebook/react/issues/7253
                if (node.defaultValue !== '' + props.defaultValue) {
                  node.defaultValue = '' + props.defaultValue
                }
              }
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked
              }
            }
          }

          function postMountWrapper(element, props) {
            var node = element

            // Detach value from defaultValue. We won't do anything if we're working on
            // submit or reset inputs as those values & defaultValues are linked. They
            // are not resetable nodes so this operation doesn't matter and actually
            // removes browser-default values (eg "Submit Query") when no value is
            // provided.

            switch (props.type) {
              case 'submit':
              case 'reset':
                break
              case 'color':
              case 'date':
              case 'datetime':
              case 'datetime-local':
              case 'month':
              case 'time':
              case 'week':
                // This fixes the no-show issue on iOS Safari and Android Chrome:
                // https://github.com/facebook/react/issues/7233
                node.value = ''
                node.value = node.defaultValue
                break
              default:
                node.value = node.value
                break
            }

            // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
            // this is needed to work around a chrome bug where setting defaultChecked
            // will sometimes influence the value of checked (even after detachment).
            // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
            // We need to temporarily unset name to avoid disrupting radio button groups.
            var name = node.name
            if (name !== '') {
              node.name = ''
            }
            node.defaultChecked = !node.defaultChecked
            node.defaultChecked = !node.defaultChecked
            if (name !== '') {
              node.name = name
            }
          }

          function restoreControlledState$1(element, props) {
            var node = element
            updateWrapper(node, props)
            updateNamedCousins(node, props)
          }

          function updateNamedCousins(rootNode, props) {
            var name = props.name
            if (props.type === 'radio' && name != null) {
              var queryRoot = rootNode

              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode
              }

              // If `rootNode.form` was non-null, then we could try `form.elements`,
              // but that sometimes behaves strangely in IE8. We could also try using
              // `form.getElementsByName`, but that will only return direct children
              // and won't include inputs that use the HTML5 `form=` attribute. Since
              // the input might not even be in a form. It might not even be in the
              // document. Let's just use the local `querySelectorAll` to ensure we don't
              // miss anything.
              var group = queryRoot.querySelectorAll(
                'input[name=' + JSON.stringify('' + name) + '][type="radio"]'
              )

              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i]
                if (
                  otherNode === rootNode ||
                  otherNode.form !== rootNode.form
                ) {
                  continue
                }
                // This will throw if radio buttons rendered by different copies of React
                // and the same name are rendered into the same form (same as #1939).
                // That's probably okay; we don't support it just as we don't support
                // mixing React radio buttons with non-React ones.
                var otherProps = getFiberCurrentPropsFromNode$1(otherNode)
                !otherProps
                  ? invariant(
                      false,
                      'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.'
                    )
                  : void 0

                // We need update the tracked value on the named cousin since the value
                // was changed but the input saw no event or value set
                updateValueIfChanged(otherNode)

                // If this is a controlled radio button group, forcing the input that
                // was previously checked to update will cause it to be come re-checked
                // as appropriate.
                updateWrapper(otherNode, otherProps)
              }
            }
          }

          function flattenChildren(children) {
            var content = ''

            // Flatten children and warn if they aren't strings or numbers;
            // invalid types are ignored.
            // We can silently skip them because invalid DOM nesting warning
            // catches these cases in Fiber.
            React.Children.forEach(children, function(child) {
              if (child == null) {
                return
              }
              if (typeof child === 'string' || typeof child === 'number') {
                content += child
              }
            })

            return content
          }

          /**
           * Implements an <option> host component that warns when `selected` is set.
           */

          function validateProps(element, props) {
            // TODO (yungsters): Remove support for `selected` in <option>.
            {
              warning(
                props.selected == null,
                'Use the `defaultValue` or `value` props on <select> instead of ' +
                  'setting `selected` on <option>.'
              )
            }
          }

          function postMountWrapper$1(element, props) {
            // value="" should make a value attribute (#6219)
            if (props.value != null) {
              element.setAttribute('value', props.value)
            }
          }

          function getHostProps$1(element, props) {
            var hostProps = _assign({ children: undefined }, props)
            var content = flattenChildren(props.children)

            if (content) {
              hostProps.children = content
            }

            return hostProps
          }

          // TODO: direct imports like some-package/src/* are bad. Fix me.
          var getCurrentFiberOwnerName$3 =
            ReactDebugCurrentFiber.getCurrentFiberOwnerName
          var getCurrentFiberStackAddendum$4 =
            ReactDebugCurrentFiber.getCurrentFiberStackAddendum

          {
            var didWarnValueDefaultValue$1 = false
          }

          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerName$3()
            if (ownerName) {
              return '\n\nCheck the render method of `' + ownerName + '`.'
            }
            return ''
          }

          var valuePropNames = ['value', 'defaultValue']

          /**
           * Validation function for `value` and `defaultValue`.
           */
          function checkSelectPropTypes(props) {
            ReactControlledValuePropTypes.checkPropTypes(
              'select',
              props,
              getCurrentFiberStackAddendum$4
            )

            for (var i = 0; i < valuePropNames.length; i++) {
              var propName = valuePropNames[i]
              if (props[propName] == null) {
                continue
              }
              var isArray = Array.isArray(props[propName])
              if (props.multiple && !isArray) {
                warning(
                  false,
                  'The `%s` prop supplied to <select> must be an array if ' +
                    '`multiple` is true.%s',
                  propName,
                  getDeclarationErrorAddendum()
                )
              } else if (!props.multiple && isArray) {
                warning(
                  false,
                  'The `%s` prop supplied to <select> must be a scalar ' +
                    'value if `multiple` is false.%s',
                  propName,
                  getDeclarationErrorAddendum()
                )
              }
            }
          }

          function updateOptions(
            node,
            multiple,
            propValue,
            setDefaultSelected
          ) {
            var options = node.options

            if (multiple) {
              var selectedValues = propValue
              var selectedValue = {}
              for (var i = 0; i < selectedValues.length; i++) {
                // Prefix to avoid chaos with special keys.
                selectedValue['$' + selectedValues[i]] = true
              }
              for (var _i = 0; _i < options.length; _i++) {
                var selected = selectedValue.hasOwnProperty(
                  '$' + options[_i].value
                )
                if (options[_i].selected !== selected) {
                  options[_i].selected = selected
                }
                if (selected && setDefaultSelected) {
                  options[_i].defaultSelected = true
                }
              }
            } else {
              // Do not set `select.value` as exact behavior isn't consistent across all
              // browsers for all cases.
              var _selectedValue = '' + propValue
              var defaultSelected = null
              for (var _i2 = 0; _i2 < options.length; _i2++) {
                if (options[_i2].value === _selectedValue) {
                  options[_i2].selected = true
                  if (setDefaultSelected) {
                    options[_i2].defaultSelected = true
                  }
                  return
                }
                if (defaultSelected === null && !options[_i2].disabled) {
                  defaultSelected = options[_i2]
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true
              }
            }
          }

          /**
           * Implements a <select> host component that allows optionally setting the
           * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
           * stringable. If `multiple` is true, the prop must be an array of stringables.
           *
           * If `value` is not supplied (or null/undefined), user actions that change the
           * selected option will trigger updates to the rendered options.
           *
           * If it is supplied (and not null/undefined), the rendered options will not
           * update in response to user actions. Instead, the `value` prop must change in
           * order for the rendered options to update.
           *
           * If `defaultValue` is provided, any options with the supplied values will be
           * selected.
           */

          function getHostProps$2(element, props) {
            return _assign({}, props, {
              value: undefined,
            })
          }

          function initWrapperState$1(element, props) {
            var node = element
            {
              checkSelectPropTypes(props)
            }

            var value = props.value
            node._wrapperState = {
              initialValue: value != null ? value : props.defaultValue,
              wasMultiple: !!props.multiple,
            }

            {
              if (
                props.value !== undefined &&
                props.defaultValue !== undefined &&
                !didWarnValueDefaultValue$1
              ) {
                warning(
                  false,
                  'Select elements must be either controlled or uncontrolled ' +
                    '(specify either the value prop, or the defaultValue prop, but not ' +
                    'both). Decide between using a controlled or uncontrolled select ' +
                    'element and remove one of these props. More info: ' +
                    'https://fb.me/react-controlled-components'
                )
                didWarnValueDefaultValue$1 = true
              }
            }
          }

          function postMountWrapper$2(element, props) {
            var node = element
            node.multiple = !!props.multiple
            var value = props.value
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false)
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true)
            }
          }

          function postUpdateWrapper(element, props) {
            var node = element
            // After the initial mount, we control selected-ness manually so don't pass
            // this value down
            node._wrapperState.initialValue = undefined

            var wasMultiple = node._wrapperState.wasMultiple
            node._wrapperState.wasMultiple = !!props.multiple

            var value = props.value
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false)
            } else if (wasMultiple !== !!props.multiple) {
              // For simplicity, reapply `defaultValue` if `multiple` is toggled.
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true)
              } else {
                // Revert the select back to its default unselected state.
                updateOptions(
                  node,
                  !!props.multiple,
                  props.multiple ? [] : '',
                  false
                )
              }
            }
          }

          function restoreControlledState$2(element, props) {
            var node = element
            var value = props.value

            if (value != null) {
              updateOptions(node, !!props.multiple, value, false)
            }
          }

          // TODO: direct imports like some-package/src/* are bad. Fix me.
          var getCurrentFiberStackAddendum$5 =
            ReactDebugCurrentFiber.getCurrentFiberStackAddendum

          var didWarnValDefaultVal = false

          /**
           * Implements a <textarea> host component that allows setting `value`, and
           * `defaultValue`. This differs from the traditional DOM API because value is
           * usually set as PCDATA children.
           *
           * If `value` is not supplied (or null/undefined), user actions that affect the
           * value will trigger updates to the element.
           *
           * If `value` is supplied (and not null/undefined), the rendered element will
           * not trigger updates to the element. Instead, the `value` prop must change in
           * order for the rendered element to be updated.
           *
           * The rendered element will be initialized with an empty value, the prop
           * `defaultValue` if specified, or the children content (deprecated).
           */

          function getHostProps$3(element, props) {
            var node = element
            !(props.dangerouslySetInnerHTML == null)
              ? invariant(
                  false,
                  '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
                )
              : void 0

            // Always set children to the same thing. In IE9, the selection range will
            // get reset if `textContent` is mutated.  We could add a check in setTextContent
            // to only set the value if/when the value differs from the node value (which would
            // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
            // solution. The value can be a boolean or object so that's why it's forced
            // to be a string.
            var hostProps = _assign({}, props, {
              value: undefined,
              defaultValue: undefined,
              children: '' + node._wrapperState.initialValue,
            })

            return hostProps
          }

          function initWrapperState$2(element, props) {
            var node = element
            {
              ReactControlledValuePropTypes.checkPropTypes(
                'textarea',
                props,
                getCurrentFiberStackAddendum$5
              )
              if (
                props.value !== undefined &&
                props.defaultValue !== undefined &&
                !didWarnValDefaultVal
              ) {
                warning(
                  false,
                  'Textarea elements must be either controlled or uncontrolled ' +
                    '(specify either the value prop, or the defaultValue prop, but not ' +
                    'both). Decide between using a controlled or uncontrolled textarea ' +
                    'and remove one of these props. More info: ' +
                    'https://fb.me/react-controlled-components'
                )
                didWarnValDefaultVal = true
              }
            }

            var initialValue = props.value

            // Only bother fetching default value if we're going to use it
            if (initialValue == null) {
              var defaultValue = props.defaultValue
              // TODO (yungsters): Remove support for children content in <textarea>.
              var children = props.children
              if (children != null) {
                {
                  warning(
                    false,
                    'Use the `defaultValue` or `value` props instead of setting ' +
                      'children on <textarea>.'
                  )
                }
                !(defaultValue == null)
                  ? invariant(
                      false,
                      'If you supply `defaultValue` on a <textarea>, do not pass children.'
                    )
                  : void 0
                if (Array.isArray(children)) {
                  !(children.length <= 1)
                    ? invariant(
                        false,
                        '<textarea> can only have at most one child.'
                      )
                    : void 0
                  children = children[0]
                }

                defaultValue = '' + children
              }
              if (defaultValue == null) {
                defaultValue = ''
              }
              initialValue = defaultValue
            }

            node._wrapperState = {
              initialValue: '' + initialValue,
            }
          }

          function updateWrapper$1(element, props) {
            var node = element
            var value = props.value
            if (value != null) {
              // Cast `value` to a string to ensure the value is set correctly. While
              // browsers typically do this as necessary, jsdom doesn't.
              var newValue = '' + value

              // To avoid side effects (such as losing text selection), only set value if changed
              if (newValue !== node.value) {
                node.value = newValue
              }
              if (props.defaultValue == null) {
                node.defaultValue = newValue
              }
            }
            if (props.defaultValue != null) {
              node.defaultValue = props.defaultValue
            }
          }

          function postMountWrapper$3(element, props) {
            var node = element
            // This is in postMount because we need access to the DOM node, which is not
            // available until after the component has mounted.
            var textContent = node.textContent

            // Only set node.value if textContent is equal to the expected
            // initial value. In IE10/IE11 there is a bug where the placeholder attribute
            // will populate textContent as well.
            // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
            if (textContent === node._wrapperState.initialValue) {
              node.value = textContent
            }
          }

          function restoreControlledState$3(element, props) {
            // DOM component is still mounted; update
            updateWrapper$1(element, props)
          }

          var HTML_NAMESPACE$1 = 'http://www.w3.org/1999/xhtml'
          var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML'
          var SVG_NAMESPACE = 'http://www.w3.org/2000/svg'

          var Namespaces = {
            html: HTML_NAMESPACE$1,
            mathml: MATH_NAMESPACE,
            svg: SVG_NAMESPACE,
          }

          // Assumes there is no parent namespace.
          function getIntrinsicNamespace(type) {
            switch (type) {
              case 'svg':
                return SVG_NAMESPACE
              case 'math':
                return MATH_NAMESPACE
              default:
                return HTML_NAMESPACE$1
            }
          }

          function getChildNamespace(parentNamespace, type) {
            if (
              parentNamespace == null ||
              parentNamespace === HTML_NAMESPACE$1
            ) {
              // No (or default) parent namespace: potential entry point.
              return getIntrinsicNamespace(type)
            }
            if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
              // We're leaving SVG.
              return HTML_NAMESPACE$1
            }
            // By default, pass namespace below.
            return parentNamespace
          }

          /* globals MSApp */

          /**
           * Create a function which has 'unsafe' privileges (required by windows8 apps)
           */
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3)
                })
              }
            } else {
              return func
            }
          }

          // SVG temp container for IE lacking innerHTML
          var reusableSVGContainer = void 0

          /**
           * Set the innerHTML property of a node
           *
           * @param {DOMElement} node
           * @param {string} html
           * @internal
           */
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(
            node,
            html
          ) {
            // IE does not have innerHTML for SVG nodes, so instead we inject the
            // new markup in a temp node and then move the child nodes across into
            // the target node

            if (
              node.namespaceURI === Namespaces.svg &&
              !('innerHTML' in node)
            ) {
              reusableSVGContainer =
                reusableSVGContainer || document.createElement('div')
              reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>'
              var svgNode = reusableSVGContainer.firstChild
              while (node.firstChild) {
                node.removeChild(node.firstChild)
              }
              while (svgNode.firstChild) {
                node.appendChild(svgNode.firstChild)
              }
            } else {
              node.innerHTML = html
            }
          })

          /**
           * Set the textContent property of a node, ensuring that whitespace is preserved
           * even in IE8. innerText is a poor substitute for textContent and, among many
           * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
           * as it should.
           *
           * @param {DOMElement} node
           * @param {string} text
           * @internal
           */
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild

              if (
                firstChild &&
                firstChild === node.lastChild &&
                firstChild.nodeType === TEXT_NODE
              ) {
                firstChild.nodeValue = text
                return
              }
            }
            node.textContent = text
          }

          /**
           * CSS properties which accept numbers but are not in units of "px".
           */
          var isUnitlessNumber = {
            animationIterationCount: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,

            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true,
          }

          /**
           * @param {string} prefix vendor-specific prefix, eg: Webkit
           * @param {string} key style name, eg: transitionDuration
           * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
           * WebkitTransitionDuration
           */
          function prefixKey(prefix, key) {
            return prefix + key.charAt(0).toUpperCase() + key.substring(1)
          }

          /**
           * Support style names that may come passed in prefixed by adding permutations
           * of vendor prefixes.
           */
          var prefixes = ['Webkit', 'ms', 'Moz', 'O']

          // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
          // infinite loop, because it iterates over the newly added props too.
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix) {
              isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop]
            })
          })

          /**
           * Convert a value into the proper css writable value. The style name `name`
           * should be logical (no hyphens), as specified
           * in `CSSProperty.isUnitlessNumber`.
           *
           * @param {string} name CSS property name such as `topMargin`.
           * @param {*} value CSS property value such as `10px`.
           * @return {string} Normalized style value with dimensions applied.
           */
          function dangerousStyleValue(name, value, isCustomProperty) {
            // Note that we've removed escapeTextForBrowser() calls here since the
            // whole string will be escaped when the attribute is injected into
            // the markup. If you provide unsafe user data here they can inject
            // arbitrary CSS which may be problematic (I couldn't repro this):
            // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
            // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
            // This is not an XSS hole but instead a potential CSS injection issue
            // which has lead to a greater discussion about how we're going to
            // trust URLs moving forward. See #2115901

            var isEmpty =
              value == null || typeof value === 'boolean' || value === ''
            if (isEmpty) {
              return ''
            }

            if (
              !isCustomProperty &&
              typeof value === 'number' &&
              value !== 0 &&
              !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])
            ) {
              return value + 'px' // Presumes implicit 'px' suffix for unitless numbers
            }

            return ('' + value).trim()
          }

          var warnValidStyle = emptyFunction

          {
            // 'msTransform' is correct, but the other prefixes should be capitalized
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/

            // style values shouldn't contain a semicolon
            var badStyleValueWithSemicolonPattern = /;\s*$/

            var warnedStyleNames = {}
            var warnedStyleValues = {}
            var warnedForNaNValue = false
            var warnedForInfinityValue = false

            var warnHyphenatedStyleName = function(name, getStack) {
              if (
                warnedStyleNames.hasOwnProperty(name) &&
                warnedStyleNames[name]
              ) {
                return
              }

              warnedStyleNames[name] = true
              warning(
                false,
                'Unsupported style property %s. Did you mean %s?%s',
                name,
                camelizeStyleName(name),
                getStack()
              )
            }

            var warnBadVendoredStyleName = function(name, getStack) {
              if (
                warnedStyleNames.hasOwnProperty(name) &&
                warnedStyleNames[name]
              ) {
                return
              }

              warnedStyleNames[name] = true
              warning(
                false,
                'Unsupported vendor-prefixed style property %s. Did you mean %s?%s',
                name,
                name.charAt(0).toUpperCase() + name.slice(1),
                getStack()
              )
            }

            var warnStyleValueWithSemicolon = function(name, value, getStack) {
              if (
                warnedStyleValues.hasOwnProperty(value) &&
                warnedStyleValues[value]
              ) {
                return
              }

              warnedStyleValues[value] = true
              warning(
                false,
                "Style property values shouldn't contain a semicolon. " +
                  'Try "%s: %s" instead.%s',
                name,
                value.replace(badStyleValueWithSemicolonPattern, ''),
                getStack()
              )
            }

            var warnStyleValueIsNaN = function(name, value, getStack) {
              if (warnedForNaNValue) {
                return
              }

              warnedForNaNValue = true
              warning(
                false,
                '`NaN` is an invalid value for the `%s` css style property.%s',
                name,
                getStack()
              )
            }

            var warnStyleValueIsInfinity = function(name, value, getStack) {
              if (warnedForInfinityValue) {
                return
              }

              warnedForInfinityValue = true
              warning(
                false,
                '`Infinity` is an invalid value for the `%s` css style property.%s',
                name,
                getStack()
              )
            }

            warnValidStyle = function(name, value, getStack) {
              if (name.indexOf('-') > -1) {
                warnHyphenatedStyleName(name, getStack)
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name, getStack)
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value, getStack)
              }

              if (typeof value === 'number') {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value, getStack)
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value, getStack)
                }
              }
            }
          }

          var warnValidStyle$1 = warnValidStyle

          /**
           * Operations for dealing with CSS properties.
           */

          /**
           * This creates a string that is expected to be equivalent to the style
           * attribute generated by server-side rendering. It by-passes warnings and
           * security checks so it's not safe to use this value for anything other than
           * comparison. It is only used in DEV for SSR validation.
           */
          function createDangerousStringForStyles(styles) {
            {
              var serialized = ''
              var delimiter = ''
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue
                }
                var styleValue = styles[styleName]
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf('--') === 0
                  serialized += delimiter + hyphenateStyleName(styleName) + ':'
                  serialized += dangerousStyleValue(
                    styleName,
                    styleValue,
                    isCustomProperty
                  )

                  delimiter = ';'
                }
              }
              return serialized || null
            }
          }

          /**
           * Sets the value for multiple styles on a node.  If a value is specified as
           * '' (empty string), the corresponding style property will be unset.
           *
           * @param {DOMElement} node
           * @param {object} styles
           */
          function setValueForStyles(node, styles, getStack) {
            var style = node.style
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue
              }
              var isCustomProperty = styleName.indexOf('--') === 0
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName], getStack)
                }
              }
              var styleValue = dangerousStyleValue(
                styleName,
                styles[styleName],
                isCustomProperty
              )
              if (styleName === 'float') {
                styleName = 'cssFloat'
              }
              if (isCustomProperty) {
                style.setProperty(styleName, styleValue)
              } else {
                style[styleName] = styleValue
              }
            }
          }

          // For HTML, certain tags should omit their close tag. We keep a whitelist for
          // those special-case tags.

          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true,
          }

          // For HTML, certain tags cannot have children. This has the same purpose as
          // `omittedCloseTags` except that `menuitem` should still have its closing tag.

          var voidElementTags = _assign(
            {
              menuitem: true,
            },
            omittedCloseTags
          )

          var HTML$1 = '__html'

          function assertValidProps(tag, props, getStack) {
            if (!props) {
              return
            }
            // Note the use of `==` which checks for null or undefined.
            if (voidElementTags[tag]) {
              !(props.children == null && props.dangerouslySetInnerHTML == null)
                ? invariant(
                    false,
                    '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s',
                    tag,
                    getStack()
                  )
                : void 0
            }
            if (props.dangerouslySetInnerHTML != null) {
              !(props.children == null)
                ? invariant(
                    false,
                    'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
                  )
                : void 0
              !(
                typeof props.dangerouslySetInnerHTML === 'object' &&
                HTML$1 in props.dangerouslySetInnerHTML
              )
                ? invariant(
                    false,
                    '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.'
                  )
                : void 0
            }
            {
              warning(
                props.suppressContentEditableWarning ||
                  !props.contentEditable ||
                  props.children == null,
                'A component is `contentEditable` and contains `children` managed by ' +
                  'React. It is now your responsibility to guarantee that none of ' +
                  'those nodes are unexpectedly modified or duplicated. This is ' +
                  'probably not intentional.%s',
                getStack()
              )
            }
            !(props.style == null || typeof props.style === 'object')
              ? invariant(
                  false,
                  "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.%s",
                  getStack()
                )
              : void 0
          }

          function isCustomComponent(tagName, props) {
            if (tagName.indexOf('-') === -1) {
              return typeof props.is === 'string'
            }
            switch (tagName) {
              // These are reserved SVG and MathML elements.
              // We don't mind this whitelist too much because we expect it to never grow.
              // The alternative is to track the namespace in a few places which is convoluted.
              // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
              case 'annotation-xml':
              case 'color-profile':
              case 'font-face':
              case 'font-face-src':
              case 'font-face-uri':
              case 'font-face-format':
              case 'font-face-name':
              case 'missing-glyph':
                return false
              default:
                return true
            }
          }

          var ariaProperties = {
            'aria-current': 0, // state
            'aria-details': 0,
            'aria-disabled': 0, // state
            'aria-hidden': 0, // state
            'aria-invalid': 0, // state
            'aria-keyshortcuts': 0,
            'aria-label': 0,
            'aria-roledescription': 0,
            // Widget Attributes
            'aria-autocomplete': 0,
            'aria-checked': 0,
            'aria-expanded': 0,
            'aria-haspopup': 0,
            'aria-level': 0,
            'aria-modal': 0,
            'aria-multiline': 0,
            'aria-multiselectable': 0,
            'aria-orientation': 0,
            'aria-placeholder': 0,
            'aria-pressed': 0,
            'aria-readonly': 0,
            'aria-required': 0,
            'aria-selected': 0,
            'aria-sort': 0,
            'aria-valuemax': 0,
            'aria-valuemin': 0,
            'aria-valuenow': 0,
            'aria-valuetext': 0,
            // Live Region Attributes
            'aria-atomic': 0,
            'aria-busy': 0,
            'aria-live': 0,
            'aria-relevant': 0,
            // Drag-and-Drop Attributes
            'aria-dropeffect': 0,
            'aria-grabbed': 0,
            // Relationship Attributes
            'aria-activedescendant': 0,
            'aria-colcount': 0,
            'aria-colindex': 0,
            'aria-colspan': 0,
            'aria-controls': 0,
            'aria-describedby': 0,
            'aria-errormessage': 0,
            'aria-flowto': 0,
            'aria-labelledby': 0,
            'aria-owns': 0,
            'aria-posinset': 0,
            'aria-rowcount': 0,
            'aria-rowindex': 0,
            'aria-rowspan': 0,
            'aria-setsize': 0,
          }

          var warnedProperties = {}
          var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$')
          var rARIACamel = new RegExp(
            '^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$'
          )

          var hasOwnProperty = Object.prototype.hasOwnProperty

          function getStackAddendum() {
            var stack = ReactDebugCurrentFrame.getStackAddendum()
            return stack != null ? stack : ''
          }

          function validateProperty(tagName, name) {
            if (
              hasOwnProperty.call(warnedProperties, name) &&
              warnedProperties[name]
            ) {
              return true
            }

            if (rARIACamel.test(name)) {
              var ariaName = 'aria-' + name.slice(4).toLowerCase()
              var correctName = ariaProperties.hasOwnProperty(ariaName)
                ? ariaName
                : null

              // If this is an aria-* attribute, but is not listed in the known DOM
              // DOM properties, then it is an invalid aria-* attribute.
              if (correctName == null) {
                warning(
                  false,
                  'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.%s',
                  name,
                  getStackAddendum()
                )
                warnedProperties[name] = true
                return true
              }
              // aria-* attributes should be lowercase; suggest the lowercase version.
              if (name !== correctName) {
                warning(
                  false,
                  'Invalid ARIA attribute `%s`. Did you mean `%s`?%s',
                  name,
                  correctName,
                  getStackAddendum()
                )
                warnedProperties[name] = true
                return true
              }
            }

            if (rARIA.test(name)) {
              var lowerCasedName = name.toLowerCase()
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName)
                ? lowerCasedName
                : null

              // If this is an aria-* attribute, but is not listed in the known DOM
              // DOM properties, then it is an invalid aria-* attribute.
              if (standardName == null) {
                warnedProperties[name] = true
                return false
              }
              // aria-* attributes should be lowercase; suggest the lowercase version.
              if (name !== standardName) {
                warning(
                  false,
                  'Unknown ARIA attribute `%s`. Did you mean `%s`?%s',
                  name,
                  standardName,
                  getStackAddendum()
                )
                warnedProperties[name] = true
                return true
              }
            }

            return true
          }

          function warnInvalidARIAProps(type, props) {
            var invalidProps = []

            for (var key in props) {
              var isValid = validateProperty(type, key)
              if (!isValid) {
                invalidProps.push(key)
              }
            }

            var unknownPropString = invalidProps
              .map(function(prop) {
                return '`' + prop + '`'
              })
              .join(', ')

            if (invalidProps.length === 1) {
              warning(
                false,
                'Invalid aria prop %s on <%s> tag. ' +
                  'For details, see https://fb.me/invalid-aria-prop%s',
                unknownPropString,
                type,
                getStackAddendum()
              )
            } else if (invalidProps.length > 1) {
              warning(
                false,
                'Invalid aria props %s on <%s> tag. ' +
                  'For details, see https://fb.me/invalid-aria-prop%s',
                unknownPropString,
                type,
                getStackAddendum()
              )
            }
          }

          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return
            }
            warnInvalidARIAProps(type, props)
          }

          var didWarnValueNull = false

          function getStackAddendum$1() {
            var stack = ReactDebugCurrentFrame.getStackAddendum()
            return stack != null ? stack : ''
          }

          function validateProperties$1(type, props) {
            if (type !== 'input' && type !== 'textarea' && type !== 'select') {
              return
            }

            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true
              if (type === 'select' && props.multiple) {
                warning(
                  false,
                  '`value` prop on `%s` should not be null. ' +
                    'Consider using an empty array when `multiple` is set to `true` ' +
                    'to clear the component or `undefined` for uncontrolled components.%s',
                  type,
                  getStackAddendum$1()
                )
              } else {
                warning(
                  false,
                  '`value` prop on `%s` should not be null. ' +
                    'Consider using an empty string to clear the component or `undefined` ' +
                    'for uncontrolled components.%s',
                  type,
                  getStackAddendum$1()
                )
              }
            }
          }

          // When adding attributes to the HTML or SVG whitelist, be sure to
          // also add them to this module to ensure casing and incorrect name
          // warnings.
          var possibleStandardNames = {
            // HTML
            accept: 'accept',
            acceptcharset: 'acceptCharset',
            'accept-charset': 'acceptCharset',
            accesskey: 'accessKey',
            action: 'action',
            allowfullscreen: 'allowFullScreen',
            alt: 'alt',
            as: 'as',
            async: 'async',
            autocapitalize: 'autoCapitalize',
            autocomplete: 'autoComplete',
            autocorrect: 'autoCorrect',
            autofocus: 'autoFocus',
            autoplay: 'autoPlay',
            autosave: 'autoSave',
            capture: 'capture',
            cellpadding: 'cellPadding',
            cellspacing: 'cellSpacing',
            challenge: 'challenge',
            charset: 'charSet',
            checked: 'checked',
            children: 'children',
            cite: 'cite',
            class: 'className',
            classid: 'classID',
            classname: 'className',
            cols: 'cols',
            colspan: 'colSpan',
            content: 'content',
            contenteditable: 'contentEditable',
            contextmenu: 'contextMenu',
            controls: 'controls',
            controlslist: 'controlsList',
            coords: 'coords',
            crossorigin: 'crossOrigin',
            dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
            data: 'data',
            datetime: 'dateTime',
            default: 'default',
            defaultchecked: 'defaultChecked',
            defaultvalue: 'defaultValue',
            defer: 'defer',
            dir: 'dir',
            disabled: 'disabled',
            download: 'download',
            draggable: 'draggable',
            enctype: 'encType',
            for: 'htmlFor',
            form: 'form',
            formmethod: 'formMethod',
            formaction: 'formAction',
            formenctype: 'formEncType',
            formnovalidate: 'formNoValidate',
            formtarget: 'formTarget',
            frameborder: 'frameBorder',
            headers: 'headers',
            height: 'height',
            hidden: 'hidden',
            high: 'high',
            href: 'href',
            hreflang: 'hrefLang',
            htmlfor: 'htmlFor',
            httpequiv: 'httpEquiv',
            'http-equiv': 'httpEquiv',
            icon: 'icon',
            id: 'id',
            innerhtml: 'innerHTML',
            inputmode: 'inputMode',
            integrity: 'integrity',
            is: 'is',
            itemid: 'itemID',
            itemprop: 'itemProp',
            itemref: 'itemRef',
            itemscope: 'itemScope',
            itemtype: 'itemType',
            keyparams: 'keyParams',
            keytype: 'keyType',
            kind: 'kind',
            label: 'label',
            lang: 'lang',
            list: 'list',
            loop: 'loop',
            low: 'low',
            manifest: 'manifest',
            marginwidth: 'marginWidth',
            marginheight: 'marginHeight',
            max: 'max',
            maxlength: 'maxLength',
            media: 'media',
            mediagroup: 'mediaGroup',
            method: 'method',
            min: 'min',
            minlength: 'minLength',
            multiple: 'multiple',
            muted: 'muted',
            name: 'name',
            nonce: 'nonce',
            novalidate: 'noValidate',
            open: 'open',
            optimum: 'optimum',
            pattern: 'pattern',
            placeholder: 'placeholder',
            playsinline: 'playsInline',
            poster: 'poster',
            preload: 'preload',
            profile: 'profile',
            radiogroup: 'radioGroup',
            readonly: 'readOnly',
            referrerpolicy: 'referrerPolicy',
            rel: 'rel',
            required: 'required',
            reversed: 'reversed',
            role: 'role',
            rows: 'rows',
            rowspan: 'rowSpan',
            sandbox: 'sandbox',
            scope: 'scope',
            scoped: 'scoped',
            scrolling: 'scrolling',
            seamless: 'seamless',
            selected: 'selected',
            shape: 'shape',
            size: 'size',
            sizes: 'sizes',
            span: 'span',
            spellcheck: 'spellCheck',
            src: 'src',
            srcdoc: 'srcDoc',
            srclang: 'srcLang',
            srcset: 'srcSet',
            start: 'start',
            step: 'step',
            style: 'style',
            summary: 'summary',
            tabindex: 'tabIndex',
            target: 'target',
            title: 'title',
            type: 'type',
            usemap: 'useMap',
            value: 'value',
            width: 'width',
            wmode: 'wmode',
            wrap: 'wrap',

            // SVG
            about: 'about',
            accentheight: 'accentHeight',
            'accent-height': 'accentHeight',
            accumulate: 'accumulate',
            additive: 'additive',
            alignmentbaseline: 'alignmentBaseline',
            'alignment-baseline': 'alignmentBaseline',
            allowreorder: 'allowReorder',
            alphabetic: 'alphabetic',
            amplitude: 'amplitude',
            arabicform: 'arabicForm',
            'arabic-form': 'arabicForm',
            ascent: 'ascent',
            attributename: 'attributeName',
            attributetype: 'attributeType',
            autoreverse: 'autoReverse',
            azimuth: 'azimuth',
            basefrequency: 'baseFrequency',
            baselineshift: 'baselineShift',
            'baseline-shift': 'baselineShift',
            baseprofile: 'baseProfile',
            bbox: 'bbox',
            begin: 'begin',
            bias: 'bias',
            by: 'by',
            calcmode: 'calcMode',
            capheight: 'capHeight',
            'cap-height': 'capHeight',
            clip: 'clip',
            clippath: 'clipPath',
            'clip-path': 'clipPath',
            clippathunits: 'clipPathUnits',
            cliprule: 'clipRule',
            'clip-rule': 'clipRule',
            color: 'color',
            colorinterpolation: 'colorInterpolation',
            'color-interpolation': 'colorInterpolation',
            colorinterpolationfilters: 'colorInterpolationFilters',
            'color-interpolation-filters': 'colorInterpolationFilters',
            colorprofile: 'colorProfile',
            'color-profile': 'colorProfile',
            colorrendering: 'colorRendering',
            'color-rendering': 'colorRendering',
            contentscripttype: 'contentScriptType',
            contentstyletype: 'contentStyleType',
            cursor: 'cursor',
            cx: 'cx',
            cy: 'cy',
            d: 'd',
            datatype: 'datatype',
            decelerate: 'decelerate',
            descent: 'descent',
            diffuseconstant: 'diffuseConstant',
            direction: 'direction',
            display: 'display',
            divisor: 'divisor',
            dominantbaseline: 'dominantBaseline',
            'dominant-baseline': 'dominantBaseline',
            dur: 'dur',
            dx: 'dx',
            dy: 'dy',
            edgemode: 'edgeMode',
            elevation: 'elevation',
            enablebackground: 'enableBackground',
            'enable-background': 'enableBackground',
            end: 'end',
            exponent: 'exponent',
            externalresourcesrequired: 'externalResourcesRequired',
            fill: 'fill',
            fillopacity: 'fillOpacity',
            'fill-opacity': 'fillOpacity',
            fillrule: 'fillRule',
            'fill-rule': 'fillRule',
            filter: 'filter',
            filterres: 'filterRes',
            filterunits: 'filterUnits',
            floodopacity: 'floodOpacity',
            'flood-opacity': 'floodOpacity',
            floodcolor: 'floodColor',
            'flood-color': 'floodColor',
            focusable: 'focusable',
            fontfamily: 'fontFamily',
            'font-family': 'fontFamily',
            fontsize: 'fontSize',
            'font-size': 'fontSize',
            fontsizeadjust: 'fontSizeAdjust',
            'font-size-adjust': 'fontSizeAdjust',
            fontstretch: 'fontStretch',
            'font-stretch': 'fontStretch',
            fontstyle: 'fontStyle',
            'font-style': 'fontStyle',
            fontvariant: 'fontVariant',
            'font-variant': 'fontVariant',
            fontweight: 'fontWeight',
            'font-weight': 'fontWeight',
            format: 'format',
            from: 'from',
            fx: 'fx',
            fy: 'fy',
            g1: 'g1',
            g2: 'g2',
            glyphname: 'glyphName',
            'glyph-name': 'glyphName',
            glyphorientationhorizontal: 'glyphOrientationHorizontal',
            'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
            glyphorientationvertical: 'glyphOrientationVertical',
            'glyph-orientation-vertical': 'glyphOrientationVertical',
            glyphref: 'glyphRef',
            gradienttransform: 'gradientTransform',
            gradientunits: 'gradientUnits',
            hanging: 'hanging',
            horizadvx: 'horizAdvX',
            'horiz-adv-x': 'horizAdvX',
            horizoriginx: 'horizOriginX',
            'horiz-origin-x': 'horizOriginX',
            ideographic: 'ideographic',
            imagerendering: 'imageRendering',
            'image-rendering': 'imageRendering',
            in2: 'in2',
            in: 'in',
            inlist: 'inlist',
            intercept: 'intercept',
            k1: 'k1',
            k2: 'k2',
            k3: 'k3',
            k4: 'k4',
            k: 'k',
            kernelmatrix: 'kernelMatrix',
            kernelunitlength: 'kernelUnitLength',
            kerning: 'kerning',
            keypoints: 'keyPoints',
            keysplines: 'keySplines',
            keytimes: 'keyTimes',
            lengthadjust: 'lengthAdjust',
            letterspacing: 'letterSpacing',
            'letter-spacing': 'letterSpacing',
            lightingcolor: 'lightingColor',
            'lighting-color': 'lightingColor',
            limitingconeangle: 'limitingConeAngle',
            local: 'local',
            markerend: 'markerEnd',
            'marker-end': 'markerEnd',
            markerheight: 'markerHeight',
            markermid: 'markerMid',
            'marker-mid': 'markerMid',
            markerstart: 'markerStart',
            'marker-start': 'markerStart',
            markerunits: 'markerUnits',
            markerwidth: 'markerWidth',
            mask: 'mask',
            maskcontentunits: 'maskContentUnits',
            maskunits: 'maskUnits',
            mathematical: 'mathematical',
            mode: 'mode',
            numoctaves: 'numOctaves',
            offset: 'offset',
            opacity: 'opacity',
            operator: 'operator',
            order: 'order',
            orient: 'orient',
            orientation: 'orientation',
            origin: 'origin',
            overflow: 'overflow',
            overlineposition: 'overlinePosition',
            'overline-position': 'overlinePosition',
            overlinethickness: 'overlineThickness',
            'overline-thickness': 'overlineThickness',
            paintorder: 'paintOrder',
            'paint-order': 'paintOrder',
            panose1: 'panose1',
            'panose-1': 'panose1',
            pathlength: 'pathLength',
            patterncontentunits: 'patternContentUnits',
            patterntransform: 'patternTransform',
            patternunits: 'patternUnits',
            pointerevents: 'pointerEvents',
            'pointer-events': 'pointerEvents',
            points: 'points',
            pointsatx: 'pointsAtX',
            pointsaty: 'pointsAtY',
            pointsatz: 'pointsAtZ',
            prefix: 'prefix',
            preservealpha: 'preserveAlpha',
            preserveaspectratio: 'preserveAspectRatio',
            primitiveunits: 'primitiveUnits',
            property: 'property',
            r: 'r',
            radius: 'radius',
            refx: 'refX',
            refy: 'refY',
            renderingintent: 'renderingIntent',
            'rendering-intent': 'renderingIntent',
            repeatcount: 'repeatCount',
            repeatdur: 'repeatDur',
            requiredextensions: 'requiredExtensions',
            requiredfeatures: 'requiredFeatures',
            resource: 'resource',
            restart: 'restart',
            result: 'result',
            results: 'results',
            rotate: 'rotate',
            rx: 'rx',
            ry: 'ry',
            scale: 'scale',
            security: 'security',
            seed: 'seed',
            shaperendering: 'shapeRendering',
            'shape-rendering': 'shapeRendering',
            slope: 'slope',
            spacing: 'spacing',
            specularconstant: 'specularConstant',
            specularexponent: 'specularExponent',
            speed: 'speed',
            spreadmethod: 'spreadMethod',
            startoffset: 'startOffset',
            stddeviation: 'stdDeviation',
            stemh: 'stemh',
            stemv: 'stemv',
            stitchtiles: 'stitchTiles',
            stopcolor: 'stopColor',
            'stop-color': 'stopColor',
            stopopacity: 'stopOpacity',
            'stop-opacity': 'stopOpacity',
            strikethroughposition: 'strikethroughPosition',
            'strikethrough-position': 'strikethroughPosition',
            strikethroughthickness: 'strikethroughThickness',
            'strikethrough-thickness': 'strikethroughThickness',
            string: 'string',
            stroke: 'stroke',
            strokedasharray: 'strokeDasharray',
            'stroke-dasharray': 'strokeDasharray',
            strokedashoffset: 'strokeDashoffset',
            'stroke-dashoffset': 'strokeDashoffset',
            strokelinecap: 'strokeLinecap',
            'stroke-linecap': 'strokeLinecap',
            strokelinejoin: 'strokeLinejoin',
            'stroke-linejoin': 'strokeLinejoin',
            strokemiterlimit: 'strokeMiterlimit',
            'stroke-miterlimit': 'strokeMiterlimit',
            strokewidth: 'strokeWidth',
            'stroke-width': 'strokeWidth',
            strokeopacity: 'strokeOpacity',
            'stroke-opacity': 'strokeOpacity',
            suppresscontenteditablewarning: 'suppressContentEditableWarning',
            suppresshydrationwarning: 'suppressHydrationWarning',
            surfacescale: 'surfaceScale',
            systemlanguage: 'systemLanguage',
            tablevalues: 'tableValues',
            targetx: 'targetX',
            targety: 'targetY',
            textanchor: 'textAnchor',
            'text-anchor': 'textAnchor',
            textdecoration: 'textDecoration',
            'text-decoration': 'textDecoration',
            textlength: 'textLength',
            textrendering: 'textRendering',
            'text-rendering': 'textRendering',
            to: 'to',
            transform: 'transform',
            typeof: 'typeof',
            u1: 'u1',
            u2: 'u2',
            underlineposition: 'underlinePosition',
            'underline-position': 'underlinePosition',
            underlinethickness: 'underlineThickness',
            'underline-thickness': 'underlineThickness',
            unicode: 'unicode',
            unicodebidi: 'unicodeBidi',
            'unicode-bidi': 'unicodeBidi',
            unicoderange: 'unicodeRange',
            'unicode-range': 'unicodeRange',
            unitsperem: 'unitsPerEm',
            'units-per-em': 'unitsPerEm',
            unselectable: 'unselectable',
            valphabetic: 'vAlphabetic',
            'v-alphabetic': 'vAlphabetic',
            values: 'values',
            vectoreffect: 'vectorEffect',
            'vector-effect': 'vectorEffect',
            version: 'version',
            vertadvy: 'vertAdvY',
            'vert-adv-y': 'vertAdvY',
            vertoriginx: 'vertOriginX',
            'vert-origin-x': 'vertOriginX',
            vertoriginy: 'vertOriginY',
            'vert-origin-y': 'vertOriginY',
            vhanging: 'vHanging',
            'v-hanging': 'vHanging',
            videographic: 'vIdeographic',
            'v-ideographic': 'vIdeographic',
            viewbox: 'viewBox',
            viewtarget: 'viewTarget',
            visibility: 'visibility',
            vmathematical: 'vMathematical',
            'v-mathematical': 'vMathematical',
            vocab: 'vocab',
            widths: 'widths',
            wordspacing: 'wordSpacing',
            'word-spacing': 'wordSpacing',
            writingmode: 'writingMode',
            'writing-mode': 'writingMode',
            x1: 'x1',
            x2: 'x2',
            x: 'x',
            xchannelselector: 'xChannelSelector',
            xheight: 'xHeight',
            'x-height': 'xHeight',
            xlinkactuate: 'xlinkActuate',
            'xlink:actuate': 'xlinkActuate',
            xlinkarcrole: 'xlinkArcrole',
            'xlink:arcrole': 'xlinkArcrole',
            xlinkhref: 'xlinkHref',
            'xlink:href': 'xlinkHref',
            xlinkrole: 'xlinkRole',
            'xlink:role': 'xlinkRole',
            xlinkshow: 'xlinkShow',
            'xlink:show': 'xlinkShow',
            xlinktitle: 'xlinkTitle',
            'xlink:title': 'xlinkTitle',
            xlinktype: 'xlinkType',
            'xlink:type': 'xlinkType',
            xmlbase: 'xmlBase',
            'xml:base': 'xmlBase',
            xmllang: 'xmlLang',
            'xml:lang': 'xmlLang',
            xmlns: 'xmlns',
            'xml:space': 'xmlSpace',
            xmlnsxlink: 'xmlnsXlink',
            'xmlns:xlink': 'xmlnsXlink',
            xmlspace: 'xmlSpace',
            y1: 'y1',
            y2: 'y2',
            y: 'y',
            ychannelselector: 'yChannelSelector',
            z: 'z',
            zoomandpan: 'zoomAndPan',
          }

          function getStackAddendum$2() {
            var stack = ReactDebugCurrentFrame.getStackAddendum()
            return stack != null ? stack : ''
          }

          {
            var warnedProperties$1 = {}
            var hasOwnProperty$1 = Object.prototype.hasOwnProperty
            var EVENT_NAME_REGEX = /^on./
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/
            var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$')
            var rARIACamel$1 = new RegExp(
              '^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$'
            )

            var validateProperty$1 = function(
              tagName,
              name,
              value,
              canUseEventSystem
            ) {
              if (
                hasOwnProperty$1.call(warnedProperties$1, name) &&
                warnedProperties$1[name]
              ) {
                return true
              }

              var lowerCasedName = name.toLowerCase()
              if (
                lowerCasedName === 'onfocusin' ||
                lowerCasedName === 'onfocusout'
              ) {
                warning(
                  false,
                  'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' +
                    'All React events are normalized to bubble, so onFocusIn and onFocusOut ' +
                    'are not needed/supported by React.'
                )
                warnedProperties$1[name] = true
                return true
              }

              // We can't rely on the event system being injected on the server.
              if (canUseEventSystem) {
                if (registrationNameModules.hasOwnProperty(name)) {
                  return true
                }
                var registrationName = possibleRegistrationNames.hasOwnProperty(
                  lowerCasedName
                )
                  ? possibleRegistrationNames[lowerCasedName]
                  : null
                if (registrationName != null) {
                  warning(
                    false,
                    'Invalid event handler property `%s`. Did you mean `%s`?%s',
                    name,
                    registrationName,
                    getStackAddendum$2()
                  )
                  warnedProperties$1[name] = true
                  return true
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  warning(
                    false,
                    'Unknown event handler property `%s`. It will be ignored.%s',
                    name,
                    getStackAddendum$2()
                  )
                  warnedProperties$1[name] = true
                  return true
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                // If no event plugins have been injected, we are in a server environment.
                // So we can't tell if the event name is correct for sure, but we can filter
                // out known bad ones like `onclick`. We can't suggest a specific replacement though.
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  warning(
                    false,
                    'Invalid event handler property `%s`. ' +
                      'React events use the camelCase naming convention, for example `onClick`.%s',
                    name,
                    getStackAddendum$2()
                  )
                }
                warnedProperties$1[name] = true
                return true
              }

              // Let the ARIA attribute hook validate ARIA attributes
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true
              }

              if (lowerCasedName === 'innerhtml') {
                warning(
                  false,
                  'Directly setting property `innerHTML` is not permitted. ' +
                    'For more information, lookup documentation on `dangerouslySetInnerHTML`.'
                )
                warnedProperties$1[name] = true
                return true
              }

              if (lowerCasedName === 'aria') {
                warning(
                  false,
                  'The `aria` attribute is reserved for future use in React. ' +
                    'Pass individual `aria-` attributes instead.'
                )
                warnedProperties$1[name] = true
                return true
              }

              if (
                lowerCasedName === 'is' &&
                value !== null &&
                value !== undefined &&
                typeof value !== 'string'
              ) {
                warning(
                  false,
                  'Received a `%s` for a string attribute `is`. If this is expected, cast ' +
                    'the value to a string.%s',
                  typeof value,
                  getStackAddendum$2()
                )
                warnedProperties$1[name] = true
                return true
              }

              if (typeof value === 'number' && isNaN(value)) {
                warning(
                  false,
                  'Received NaN for the `%s` attribute. If this is expected, cast ' +
                    'the value to a string.%s',
                  name,
                  getStackAddendum$2()
                )
                warnedProperties$1[name] = true
                return true
              }

              var isReserved = isReservedProp(name)

              // Known attributes should match the casing specified in the property config.
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName]
                if (standardName !== name) {
                  warning(
                    false,
                    'Invalid DOM property `%s`. Did you mean `%s`?%s',
                    name,
                    standardName,
                    getStackAddendum$2()
                  )
                  warnedProperties$1[name] = true
                  return true
                }
              } else if (!isReserved && name !== lowerCasedName) {
                // Unknown attributes should have lowercase casing since that's how they
                // will be cased anyway with server rendering.
                warning(
                  false,
                  'React does not recognize the `%s` prop on a DOM element. If you ' +
                    'intentionally want it to appear in the DOM as a custom ' +
                    'attribute, spell it as lowercase `%s` instead. ' +
                    'If you accidentally passed it from a parent component, remove ' +
                    'it from the DOM element.%s',
                  name,
                  lowerCasedName,
                  getStackAddendum$2()
                )
                warnedProperties$1[name] = true
                return true
              }

              if (
                typeof value === 'boolean' &&
                !shouldAttributeAcceptBooleanValue(name)
              ) {
                if (value) {
                  warning(
                    false,
                    'Received `%s` for a non-boolean attribute `%s`.\n\n' +
                      'If you want to write it to the DOM, pass a string instead: ' +
                      '%s="%s" or %s={value.toString()}.%s',
                    value,
                    name,
                    name,
                    value,
                    name,
                    getStackAddendum$2()
                  )
                } else {
                  warning(
                    false,
                    'Received `%s` for a non-boolean attribute `%s`.\n\n' +
                      'If you want to write it to the DOM, pass a string instead: ' +
                      '%s="%s" or %s={value.toString()}.\n\n' +
                      'If you used to conditionally omit it with %s={condition && value}, ' +
                      'pass %s={condition ? value : undefined} instead.%s',
                    value,
                    name,
                    name,
                    value,
                    name,
                    name,
                    name,
                    getStackAddendum$2()
                  )
                }
                warnedProperties$1[name] = true
                return true
              }

              // Now that we've validated casing, do not validate
              // data types for reserved props
              if (isReserved) {
                return true
              }

              // Warn when a known attribute is a bad type
              if (!shouldSetAttribute(name, value)) {
                warnedProperties$1[name] = true
                return false
              }

              return true
            }
          }

          var warnUnknownProperties = function(type, props, canUseEventSystem) {
            var unknownProps = []
            for (var key in props) {
              var isValid = validateProperty$1(
                type,
                key,
                props[key],
                canUseEventSystem
              )
              if (!isValid) {
                unknownProps.push(key)
              }
            }

            var unknownPropString = unknownProps
              .map(function(prop) {
                return '`' + prop + '`'
              })
              .join(', ')
            if (unknownProps.length === 1) {
              warning(
                false,
                'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' +
                  'or pass a string or number value to keep it in the DOM. ' +
                  'For details, see https://fb.me/react-attribute-behavior%s',
                unknownPropString,
                type,
                getStackAddendum$2()
              )
            } else if (unknownProps.length > 1) {
              warning(
                false,
                'Invalid values for props %s on <%s> tag. Either remove them from the element, ' +
                  'or pass a string or number value to keep them in the DOM. ' +
                  'For details, see https://fb.me/react-attribute-behavior%s',
                unknownPropString,
                type,
                getStackAddendum$2()
              )
            }
          }

          function validateProperties$2(type, props, canUseEventSystem) {
            if (isCustomComponent(type, props)) {
              return
            }
            warnUnknownProperties(type, props, canUseEventSystem)
          }

          // TODO: direct imports like some-package/src/* are bad. Fix me.
          var getCurrentFiberOwnerName$1 =
            ReactDebugCurrentFiber.getCurrentFiberOwnerName
          var getCurrentFiberStackAddendum$2 =
            ReactDebugCurrentFiber.getCurrentFiberStackAddendum

          var didWarnInvalidHydration = false
          var didWarnShadyDOM = false

          var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML'
          var SUPPRESS_CONTENT_EDITABLE_WARNING =
            'suppressContentEditableWarning'
          var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning'
          var AUTOFOCUS = 'autoFocus'
          var CHILDREN = 'children'
          var STYLE = 'style'
          var HTML = '__html'

          var HTML_NAMESPACE = Namespaces.html

          var getStack = emptyFunction.thatReturns('')

          {
            getStack = getCurrentFiberStackAddendum$2

            var warnedUnknownTags = {
              // Chrome is the only major browser not shipping <time>. But as of July
              // 2017 it intends to ship it due to widespread usage. We intentionally
              // *don't* warn for <time> even if it's unrecognized by Chrome because
              // it soon will be, and many apps have been using it anyway.
              time: true,
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
            }

            var validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props)
              validateProperties$1(type, props)
              validateProperties$2(type, props, /* canUseEventSystem */ true)
            }

            // HTML parsing normalizes CR and CRLF to LF.
            // It also can turn \u0000 into \uFFFD inside attributes.
            // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
            // If we have a mismatch, it might be caused by that.
            // We will still patch up in this case but not fire the warning.
            var NORMALIZE_NEWLINES_REGEX = /\r\n?/g
            var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g

            var normalizeMarkupForTextOrAttribute = function(markup) {
              var markupString =
                typeof markup === 'string' ? markup : '' + markup
              return markupString
                .replace(NORMALIZE_NEWLINES_REGEX, '\n')
                .replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '')
            }

            var warnForTextDifference = function(serverText, clientText) {
              if (didWarnInvalidHydration) {
                return
              }
              var normalizedClientText = normalizeMarkupForTextOrAttribute(
                clientText
              )
              var normalizedServerText = normalizeMarkupForTextOrAttribute(
                serverText
              )
              if (normalizedServerText === normalizedClientText) {
                return
              }
              didWarnInvalidHydration = true
              warning(
                false,
                'Text content did not match. Server: "%s" Client: "%s"',
                normalizedServerText,
                normalizedClientText
              )
            }

            var warnForPropDifference = function(
              propName,
              serverValue,
              clientValue
            ) {
              if (didWarnInvalidHydration) {
                return
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(
                clientValue
              )
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(
                serverValue
              )
              if (normalizedServerValue === normalizedClientValue) {
                return
              }
              didWarnInvalidHydration = true
              warning(
                false,
                'Prop `%s` did not match. Server: %s Client: %s',
                propName,
                JSON.stringify(normalizedServerValue),
                JSON.stringify(normalizedClientValue)
              )
            }

            var warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return
              }
              didWarnInvalidHydration = true
              var names = []
              attributeNames.forEach(function(name) {
                names.push(name)
              })
              warning(false, 'Extra attributes from the server: %s', names)
            }

            var warnForInvalidEventListener = function(
              registrationName,
              listener
            ) {
              if (listener === false) {
                warning(
                  false,
                  'Expected `%s` listener to be a function, instead got `false`.\n\n' +
                    'If you used to conditionally omit it with %s={condition && value}, ' +
                    'pass %s={condition ? value : undefined} instead.%s',
                  registrationName,
                  registrationName,
                  registrationName,
                  getCurrentFiberStackAddendum$2()
                )
              } else {
                warning(
                  false,
                  'Expected `%s` listener to be a function, instead got a value of `%s` type.%s',
                  registrationName,
                  typeof listener,
                  getCurrentFiberStackAddendum$2()
                )
              }
            }

            // Parse the HTML and read it back to normalize the HTML string so that it
            // can be used for comparison.
            var normalizeHTML = function(parent, html) {
              // We could have created a separate document here to avoid
              // re-initializing custom elements if they exist. But this breaks
              // how <noscript> is being handled. So we use the same document.
              // See the discussion in https://github.com/facebook/react/pull/11157.
              var testElement =
                parent.namespaceURI === HTML_NAMESPACE
                  ? parent.ownerDocument.createElement(parent.tagName)
                  : parent.ownerDocument.createElementNS(
                      parent.namespaceURI,
                      parent.tagName
                    )
              testElement.innerHTML = html
              return testElement.innerHTML
            }
          }

          function ensureListeningTo(rootContainerElement, registrationName) {
            var isDocumentOrFragment =
              rootContainerElement.nodeType === DOCUMENT_NODE ||
              rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE
            var doc = isDocumentOrFragment
              ? rootContainerElement
              : rootContainerElement.ownerDocument
            listenTo(registrationName, doc)
          }

          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE
              ? rootContainerElement
              : rootContainerElement.ownerDocument
          }

          // There are so many media events, it makes sense to just
          // maintain a list rather than create a `trapBubbledEvent` for each
          var mediaEvents = {
            topAbort: 'abort',
            topCanPlay: 'canplay',
            topCanPlayThrough: 'canplaythrough',
            topDurationChange: 'durationchange',
            topEmptied: 'emptied',
            topEncrypted: 'encrypted',
            topEnded: 'ended',
            topError: 'error',
            topLoadedData: 'loadeddata',
            topLoadedMetadata: 'loadedmetadata',
            topLoadStart: 'loadstart',
            topPause: 'pause',
            topPlay: 'play',
            topPlaying: 'playing',
            topProgress: 'progress',
            topRateChange: 'ratechange',
            topSeeked: 'seeked',
            topSeeking: 'seeking',
            topStalled: 'stalled',
            topSuspend: 'suspend',
            topTimeUpdate: 'timeupdate',
            topVolumeChange: 'volumechange',
            topWaiting: 'waiting',
          }

          function trapClickOnNonInteractiveElement(node) {
            // Mobile Safari does not fire properly bubble click events on
            // non-interactive elements, which means delegated click listeners do not
            // fire. The workaround for this bug involves attaching an empty click
            // listener on the target node.
            // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
            // Just set it using the onclick property so that we don't have to manage any
            // bookkeeping for it. Not sure if we need to clear it when the listener is
            // removed.
            // TODO: Only do this for the relevant Safaris maybe?
            node.onclick = emptyFunction
          }

          function setInitialDOMProperties(
            tag,
            domElement,
            rootContainerElement,
            nextProps,
            isCustomComponentTag
          ) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue
              }
              var nextProp = nextProps[propKey]
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    // Freeze the next style object so that we can assume it won't be
                    // mutated. We have already warned for this in the past.
                    Object.freeze(nextProp)
                  }
                }
                // Relies on `updateStylesByID` not mutating `styleUpdates`.
                setValueForStyles(domElement, nextProp, getStack)
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML] : undefined
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml)
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string') {
                  // Avoid setting initial textContent when the text is empty. In IE11 setting
                  // textContent on a <textarea> will cause the placeholder to not
                  // show within the <textarea> until it has been focused and blurred again.
                  // https://github.com/facebook/react/issues/6731#issuecomment-254874553
                  var canSetTextContent = tag !== 'textarea' || nextProp !== ''
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp)
                  }
                } else if (typeof nextProp === 'number') {
                  setTextContent(domElement, '' + nextProp)
                }
              } else if (
                propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
                propKey === SUPPRESS_HYDRATION_WARNING$1
              ) {
                // Noop
              } else if (propKey === AUTOFOCUS) {
                // We polyfill it separately on the client during commit.
                // We blacklist it here rather than in the property list because we emit it in SSR.
              } else if (registrationNameModules.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (true && typeof nextProp !== 'function') {
                    warnForInvalidEventListener(propKey, nextProp)
                  }
                  ensureListeningTo(rootContainerElement, propKey)
                }
              } else if (isCustomComponentTag) {
                setValueForAttribute(domElement, propKey, nextProp)
              } else if (nextProp != null) {
                // If we're updating to null or undefined, we should remove the property
                // from the DOM node instead of inadvertently setting to a string. This
                // brings us in line with the same behavior we have on initial render.
                setValueForProperty(domElement, propKey, nextProp)
              }
            }
          }

          function updateDOMProperties(
            domElement,
            updatePayload,
            wasCustomComponentTag,
            isCustomComponentTag
          ) {
            // TODO: Handle wasCustomComponentTag
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i]
              var propValue = updatePayload[i + 1]
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue, getStack)
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue)
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue)
              } else if (isCustomComponentTag) {
                if (propValue != null) {
                  setValueForAttribute(domElement, propKey, propValue)
                } else {
                  deleteValueForAttribute(domElement, propKey)
                }
              } else if (propValue != null) {
                setValueForProperty(domElement, propKey, propValue)
              } else {
                // If we're updating to null or undefined, we should remove the property
                // from the DOM node instead of inadvertently setting to a string. This
                // brings us in line with the same behavior we have on initial render.
                deleteValueForProperty(domElement, propKey)
              }
            }
          }

          function createElement$1(
            type,
            props,
            rootContainerElement,
            parentNamespace
          ) {
            // We create tags in the namespace of their parent container, except HTML
            var ownerDocument = getOwnerDocumentFromRootContainer(
              rootContainerElement
            )
            var domElement
            var namespaceURI = parentNamespace
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type)
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                var isCustomComponentTag = isCustomComponent(type, props)
                // Should this check be gated by parent namespace? Not sure we want to
                // allow <SVG> or <mATH>.
                warning(
                  isCustomComponentTag || type === type.toLowerCase(),
                  '<%s /> is using uppercase HTML. Always use lowercase HTML tags ' +
                    'in React.',
                  type
                )
              }

              if (type === 'script') {
                // Create the script via .innerHTML so its "parser-inserted" flag is
                // set to true and it does not execute
                var div = ownerDocument.createElement('div')
                div.innerHTML = '<script><' + '/script>' // eslint-disable-line
                // This is guaranteed to yield a script element.
                var firstChild = div.firstChild
                domElement = div.removeChild(firstChild)
              } else if (typeof props.is === 'string') {
                // $FlowIssue `createElement` should be updated for Web Components
                domElement = ownerDocument.createElement(type, { is: props.is })
              } else {
                // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
                // See discussion in https://github.com/facebook/react/pull/6896
                // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
                domElement = ownerDocument.createElement(type)
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type)
            }

            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (
                  !isCustomComponentTag &&
                  Object.prototype.toString.call(domElement) ===
                    '[object HTMLUnknownElement]' &&
                  !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)
                ) {
                  warnedUnknownTags[type] = true
                  warning(
                    false,
                    'The tag <%s> is unrecognized in this browser. ' +
                      'If you meant to render a React component, start its name with ' +
                      'an uppercase letter.',
                    type
                  )
                }
              }
            }

            return domElement
          }

          function createTextNode$1(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(
              rootContainerElement
            ).createTextNode(text)
          }

          function setInitialProperties$1(
            domElement,
            tag,
            rawProps,
            rootContainerElement
          ) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps)
            {
              validatePropertiesInDevelopment(tag, rawProps)
              if (
                isCustomComponentTag &&
                !didWarnShadyDOM &&
                domElement.shadyRoot
              ) {
                warning(
                  false,
                  '%s is using shady DOM. Using shady DOM with React can ' +
                    'cause things to break subtly.',
                  getCurrentFiberOwnerName$1() || 'A component'
                )
                didWarnShadyDOM = true
              }
            }

            // TODO: Make sure that we check isMounted before firing any of these events.
            var props
            switch (tag) {
              case 'iframe':
              case 'object':
                trapBubbledEvent('topLoad', 'load', domElement)
                props = rawProps
                break
              case 'video':
              case 'audio':
                // Create listener for each media event
                for (var event in mediaEvents) {
                  if (mediaEvents.hasOwnProperty(event)) {
                    trapBubbledEvent(event, mediaEvents[event], domElement)
                  }
                }
                props = rawProps
                break
              case 'source':
                trapBubbledEvent('topError', 'error', domElement)
                props = rawProps
                break
              case 'img':
              case 'image':
                trapBubbledEvent('topError', 'error', domElement)
                trapBubbledEvent('topLoad', 'load', domElement)
                props = rawProps
                break
              case 'form':
                trapBubbledEvent('topReset', 'reset', domElement)
                trapBubbledEvent('topSubmit', 'submit', domElement)
                props = rawProps
                break
              case 'details':
                trapBubbledEvent('topToggle', 'toggle', domElement)
                props = rawProps
                break
              case 'input':
                initWrapperState(domElement, rawProps)
                props = getHostProps(domElement, rawProps)
                trapBubbledEvent('topInvalid', 'invalid', domElement)
                // For controlled components we always need to ensure we're listening
                // to onChange. Even if there is no listener.
                ensureListeningTo(rootContainerElement, 'onChange')
                break
              case 'option':
                validateProps(domElement, rawProps)
                props = getHostProps$1(domElement, rawProps)
                break
              case 'select':
                initWrapperState$1(domElement, rawProps)
                props = getHostProps$2(domElement, rawProps)
                trapBubbledEvent('topInvalid', 'invalid', domElement)
                // For controlled components we always need to ensure we're listening
                // to onChange. Even if there is no listener.
                ensureListeningTo(rootContainerElement, 'onChange')
                break
              case 'textarea':
                initWrapperState$2(domElement, rawProps)
                props = getHostProps$3(domElement, rawProps)
                trapBubbledEvent('topInvalid', 'invalid', domElement)
                // For controlled components we always need to ensure we're listening
                // to onChange. Even if there is no listener.
                ensureListeningTo(rootContainerElement, 'onChange')
                break
              default:
                props = rawProps
            }

            assertValidProps(tag, props, getStack)

            setInitialDOMProperties(
              tag,
              domElement,
              rootContainerElement,
              props,
              isCustomComponentTag
            )

            switch (tag) {
              case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement)
                postMountWrapper(domElement, rawProps)
                break
              case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement)
                postMountWrapper$3(domElement, rawProps)
                break
              case 'option':
                postMountWrapper$1(domElement, rawProps)
                break
              case 'select':
                postMountWrapper$2(domElement, rawProps)
                break
              default:
                if (typeof props.onClick === 'function') {
                  // TODO: This cast may not be sound for SVG, MathML or custom elements.
                  trapClickOnNonInteractiveElement(domElement)
                }
                break
            }
          }

          // Calculate the diff between the two objects.
          function diffProperties$1(
            domElement,
            tag,
            lastRawProps,
            nextRawProps,
            rootContainerElement
          ) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps)
            }

            var updatePayload = null

            var lastProps
            var nextProps
            switch (tag) {
              case 'input':
                lastProps = getHostProps(domElement, lastRawProps)
                nextProps = getHostProps(domElement, nextRawProps)
                updatePayload = []
                break
              case 'option':
                lastProps = getHostProps$1(domElement, lastRawProps)
                nextProps = getHostProps$1(domElement, nextRawProps)
                updatePayload = []
                break
              case 'select':
                lastProps = getHostProps$2(domElement, lastRawProps)
                nextProps = getHostProps$2(domElement, nextRawProps)
                updatePayload = []
                break
              case 'textarea':
                lastProps = getHostProps$3(domElement, lastRawProps)
                nextProps = getHostProps$3(domElement, nextRawProps)
                updatePayload = []
                break
              default:
                lastProps = lastRawProps
                nextProps = nextRawProps
                if (
                  typeof lastProps.onClick !== 'function' &&
                  typeof nextProps.onClick === 'function'
                ) {
                  // TODO: This cast may not be sound for SVG, MathML or custom elements.
                  trapClickOnNonInteractiveElement(domElement)
                }
                break
            }

            assertValidProps(tag, nextProps, getStack)

            var propKey
            var styleName
            var styleUpdates = null
            for (propKey in lastProps) {
              if (
                nextProps.hasOwnProperty(propKey) ||
                !lastProps.hasOwnProperty(propKey) ||
                lastProps[propKey] == null
              ) {
                continue
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey]
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {}
                    }
                    styleUpdates[styleName] = ''
                  }
                }
              } else if (
                propKey === DANGEROUSLY_SET_INNER_HTML ||
                propKey === CHILDREN
              ) {
                // Noop. This is handled by the clear text mechanism.
              } else if (
                propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
                propKey === SUPPRESS_HYDRATION_WARNING$1
              ) {
                // Noop
              } else if (propKey === AUTOFOCUS) {
                // Noop. It doesn't work on updates anyway.
              } else if (registrationNameModules.hasOwnProperty(propKey)) {
                // This is a special case. If any listener updates we need to ensure
                // that the "current" fiber pointer gets updated so we need a commit
                // to update this element.
                if (!updatePayload) {
                  updatePayload = []
                }
              } else {
                // For all other deleted properties we add it to the queue. We use
                // the whitelist in the commit phase instead.
                ;(updatePayload = updatePayload || []).push(propKey, null)
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey]
              var lastProp = lastProps != null ? lastProps[propKey] : undefined
              if (
                !nextProps.hasOwnProperty(propKey) ||
                nextProp === lastProp ||
                (nextProp == null && lastProp == null)
              ) {
                continue
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    // Freeze the next style object so that we can assume it won't be
                    // mutated. We have already warned for this in the past.
                    Object.freeze(nextProp)
                  }
                }
                if (lastProp) {
                  // Unset styles on `lastProp` but not on `nextProp`.
                  for (styleName in lastProp) {
                    if (
                      lastProp.hasOwnProperty(styleName) &&
                      (!nextProp || !nextProp.hasOwnProperty(styleName))
                    ) {
                      if (!styleUpdates) {
                        styleUpdates = {}
                      }
                      styleUpdates[styleName] = ''
                    }
                  }
                  // Update styles that changed since `lastProp`.
                  for (styleName in nextProp) {
                    if (
                      nextProp.hasOwnProperty(styleName) &&
                      lastProp[styleName] !== nextProp[styleName]
                    ) {
                      if (!styleUpdates) {
                        styleUpdates = {}
                      }
                      styleUpdates[styleName] = nextProp[styleName]
                    }
                  }
                } else {
                  // Relies on `updateStylesByID` not mutating `styleUpdates`.
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = []
                    }
                    updatePayload.push(propKey, styleUpdates)
                  }
                  styleUpdates = nextProp
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML] : undefined
                var lastHtml = lastProp ? lastProp[HTML] : undefined
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    ;(updatePayload = updatePayload || []).push(
                      propKey,
                      '' + nextHtml
                    )
                  }
                } else {
                  // TODO: It might be too late to clear this if we have children
                  // inserted already.
                }
              } else if (propKey === CHILDREN) {
                if (
                  lastProp !== nextProp &&
                  (typeof nextProp === 'string' || typeof nextProp === 'number')
                ) {
                  ;(updatePayload = updatePayload || []).push(
                    propKey,
                    '' + nextProp
                  )
                }
              } else if (
                propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
                propKey === SUPPRESS_HYDRATION_WARNING$1
              ) {
                // Noop
              } else if (registrationNameModules.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  // We eagerly listen to this even though we haven't committed yet.
                  if (true && typeof nextProp !== 'function') {
                    warnForInvalidEventListener(propKey, nextProp)
                  }
                  ensureListeningTo(rootContainerElement, propKey)
                }
                if (!updatePayload && lastProp !== nextProp) {
                  // This is a special case. If any listener updates we need to ensure
                  // that the "current" props pointer gets updated so we need a commit
                  // to update this element.
                  updatePayload = []
                }
              } else {
                // For any other property we always add it to the queue and then we
                // filter it out using the whitelist during the commit.
                ;(updatePayload = updatePayload || []).push(propKey, nextProp)
              }
            }
            if (styleUpdates) {
              ;(updatePayload = updatePayload || []).push(STYLE, styleUpdates)
            }
            return updatePayload
          }

          // Apply the diff.
          function updateProperties$1(
            domElement,
            updatePayload,
            tag,
            lastRawProps,
            nextRawProps
          ) {
            // Update checked *before* name.
            // In the middle of an update, it is possible to have multiple checked.
            // When a checked radio tries to change name, browser makes another radio's checked false.
            if (
              tag === 'input' &&
              nextRawProps.type === 'radio' &&
              nextRawProps.name != null
            ) {
              updateChecked(domElement, nextRawProps)
            }

            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps)
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps)
            // Apply the diff.
            updateDOMProperties(
              domElement,
              updatePayload,
              wasCustomComponentTag,
              isCustomComponentTag
            )

            // TODO: Ensure that an update gets scheduled if any of the special props
            // changed.
            switch (tag) {
              case 'input':
                // Update the wrapper around inputs *after* updating props. This has to
                // happen after `updateDOMProperties`. Otherwise HTML5 input validations
                // raise warnings and prevent the new value from being assigned.
                updateWrapper(domElement, nextRawProps)
                break
              case 'textarea':
                updateWrapper$1(domElement, nextRawProps)
                break
              case 'select':
                // <select> value update needs to occur after <option> children
                // reconciliation
                postUpdateWrapper(domElement, nextRawProps)
                break
            }
          }

          function diffHydratedProperties$1(
            domElement,
            tag,
            rawProps,
            parentNamespace,
            rootContainerElement
          ) {
            {
              var suppressHydrationWarning =
                rawProps[SUPPRESS_HYDRATION_WARNING$1] === true
              var isCustomComponentTag = isCustomComponent(tag, rawProps)
              validatePropertiesInDevelopment(tag, rawProps)
              if (
                isCustomComponentTag &&
                !didWarnShadyDOM &&
                domElement.shadyRoot
              ) {
                warning(
                  false,
                  '%s is using shady DOM. Using shady DOM with React can ' +
                    'cause things to break subtly.',
                  getCurrentFiberOwnerName$1() || 'A component'
                )
                didWarnShadyDOM = true
              }
            }

            // TODO: Make sure that we check isMounted before firing any of these events.
            switch (tag) {
              case 'iframe':
              case 'object':
                trapBubbledEvent('topLoad', 'load', domElement)
                break
              case 'video':
              case 'audio':
                // Create listener for each media event
                for (var event in mediaEvents) {
                  if (mediaEvents.hasOwnProperty(event)) {
                    trapBubbledEvent(event, mediaEvents[event], domElement)
                  }
                }
                break
              case 'source':
                trapBubbledEvent('topError', 'error', domElement)
                break
              case 'img':
              case 'image':
                trapBubbledEvent('topError', 'error', domElement)
                trapBubbledEvent('topLoad', 'load', domElement)
                break
              case 'form':
                trapBubbledEvent('topReset', 'reset', domElement)
                trapBubbledEvent('topSubmit', 'submit', domElement)
                break
              case 'details':
                trapBubbledEvent('topToggle', 'toggle', domElement)
                break
              case 'input':
                initWrapperState(domElement, rawProps)
                trapBubbledEvent('topInvalid', 'invalid', domElement)
                // For controlled components we always need to ensure we're listening
                // to onChange. Even if there is no listener.
                ensureListeningTo(rootContainerElement, 'onChange')
                break
              case 'option':
                validateProps(domElement, rawProps)
                break
              case 'select':
                initWrapperState$1(domElement, rawProps)
                trapBubbledEvent('topInvalid', 'invalid', domElement)
                // For controlled components we always need to ensure we're listening
                // to onChange. Even if there is no listener.
                ensureListeningTo(rootContainerElement, 'onChange')
                break
              case 'textarea':
                initWrapperState$2(domElement, rawProps)
                trapBubbledEvent('topInvalid', 'invalid', domElement)
                // For controlled components we always need to ensure we're listening
                // to onChange. Even if there is no listener.
                ensureListeningTo(rootContainerElement, 'onChange')
                break
            }

            assertValidProps(tag, rawProps, getStack)

            {
              var extraAttributeNames = new Set()
              var attributes = domElement.attributes
              for (var i = 0; i < attributes.length; i++) {
                var name = attributes[i].name.toLowerCase()
                switch (name) {
                  // Built-in SSR attribute is whitelisted
                  case 'data-reactroot':
                    break
                  // Controlled attributes are not validated
                  // TODO: Only ignore them on controlled tags.
                  case 'value':
                    break
                  case 'checked':
                    break
                  case 'selected':
                    break
                  default:
                    // Intentionally use the original name.
                    // See discussion in https://github.com/facebook/react/pull/10676.
                    extraAttributeNames.add(attributes[i].name)
                }
              }
            }

            var updatePayload = null
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue
              }
              var nextProp = rawProps[propKey]
              if (propKey === CHILDREN) {
                // For text content children we compare against textContent. This
                // might match additional HTML that is hidden when we read it using
                // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
                // satisfies our requirement. Our requirement is not to produce perfect
                // HTML and attributes. Ideally we should preserve structure but it's
                // ok not to if the visible content is still enough to indicate what
                // even listeners these nodes might be wired up to.
                // TODO: Warn if there is more than a single textNode as a child.
                // TODO: Should we use domElement.firstChild.nodeValue to compare?
                if (typeof nextProp === 'string') {
                  if (domElement.textContent !== nextProp) {
                    if (true && !suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp)
                    }
                    updatePayload = [CHILDREN, nextProp]
                  }
                } else if (typeof nextProp === 'number') {
                  if (domElement.textContent !== '' + nextProp) {
                    if (true && !suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp)
                    }
                    updatePayload = [CHILDREN, '' + nextProp]
                  }
                }
              } else if (registrationNameModules.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (true && typeof nextProp !== 'function') {
                    warnForInvalidEventListener(propKey, nextProp)
                  }
                  ensureListeningTo(rootContainerElement, propKey)
                }
              } else {
                // Validate that the properties correspond to their expected values.
                var serverValue
                var propertyInfo
                if (suppressHydrationWarning) {
                  // Don't bother comparing. We're ignoring all these warnings.
                } else if (
                  propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
                  propKey === SUPPRESS_HYDRATION_WARNING$1 ||
                  // Controlled attributes are not validated
                  // TODO: Only ignore them on controlled tags.
                  propKey === 'value' ||
                  propKey === 'checked' ||
                  propKey === 'selected'
                ) {
                  // Noop
                } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var rawHtml = nextProp ? nextProp[HTML] || '' : ''
                  var serverHTML = domElement.innerHTML
                  var expectedHTML = normalizeHTML(domElement, rawHtml)
                  if (expectedHTML !== serverHTML) {
                    warnForPropDifference(propKey, serverHTML, expectedHTML)
                  }
                } else if (propKey === STYLE) {
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames['delete'](propKey)
                  var expectedStyle = createDangerousStringForStyles(nextProp)
                  serverValue = domElement.getAttribute('style')
                  if (expectedStyle !== serverValue) {
                    warnForPropDifference(propKey, serverValue, expectedStyle)
                  }
                } else if (isCustomComponentTag) {
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames['delete'](propKey.toLowerCase())
                  serverValue = getValueForAttribute(
                    domElement,
                    propKey,
                    nextProp
                  )

                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp)
                  }
                } else if (shouldSetAttribute(propKey, nextProp)) {
                  if ((propertyInfo = getPropertyInfo(propKey))) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames['delete'](propertyInfo.attributeName)
                    serverValue = getValueForProperty(
                      domElement,
                      propKey,
                      nextProp
                    )
                  } else {
                    var ownNamespace = parentNamespace
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag)
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      // $FlowFixMe - Should be inferred as not undefined.
                      extraAttributeNames['delete'](propKey.toLowerCase())
                    } else {
                      // $FlowFixMe - Should be inferred as not undefined.
                      extraAttributeNames['delete'](propKey)
                    }
                    serverValue = getValueForAttribute(
                      domElement,
                      propKey,
                      nextProp
                    )
                  }

                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp)
                  }
                }
              }
            }

            {
              // $FlowFixMe - Should be inferred as not undefined.
              if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
                // $FlowFixMe - Should be inferred as not undefined.
                warnForExtraAttributes(extraAttributeNames)
              }
            }

            switch (tag) {
              case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement)
                postMountWrapper(domElement, rawProps)
                break
              case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement)
                postMountWrapper$3(domElement, rawProps)
                break
              case 'select':
              case 'option':
                // For input and textarea we current always set the value property at
                // post mount to force it to diverge from attributes. However, for
                // option and select we don't quite do the same thing and select
                // is not resilient to the DOM state changing so we don't do that here.
                // TODO: Consider not doing this for input and textarea.
                break
              default:
                if (typeof rawProps.onClick === 'function') {
                  // TODO: This cast may not be sound for SVG, MathML or custom elements.
                  trapClickOnNonInteractiveElement(domElement)
                }
                break
            }

            return updatePayload
          }

          function diffHydratedText$1(textNode, text) {
            var isDifferent = textNode.nodeValue !== text
            return isDifferent
          }

          function warnForUnmatchedText$1(textNode, text) {
            {
              warnForTextDifference(textNode.nodeValue, text)
            }
          }

          function warnForDeletedHydratableElement$1(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return
              }
              didWarnInvalidHydration = true
              warning(
                false,
                'Did not expect server HTML to contain a <%s> in <%s>.',
                child.nodeName.toLowerCase(),
                parentNode.nodeName.toLowerCase()
              )
            }
          }

          function warnForDeletedHydratableText$1(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return
              }
              didWarnInvalidHydration = true
              warning(
                false,
                'Did not expect server HTML to contain the text node "%s" in <%s>.',
                child.nodeValue,
                parentNode.nodeName.toLowerCase()
              )
            }
          }

          function warnForInsertedHydratedElement$1(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return
              }
              didWarnInvalidHydration = true
              warning(
                false,
                'Expected server HTML to contain a matching <%s> in <%s>.',
                tag,
                parentNode.nodeName.toLowerCase()
              )
            }
          }

          function warnForInsertedHydratedText$1(parentNode, text) {
            {
              if (text === '') {
                // We expect to insert empty text nodes since they're not represented in
                // the HTML.
                // TODO: Remove this special case if we can just avoid inserting empty
                // text nodes.
                return
              }
              if (didWarnInvalidHydration) {
                return
              }
              didWarnInvalidHydration = true
              warning(
                false,
                'Expected server HTML to contain a matching text node for "%s" in <%s>.',
                text,
                parentNode.nodeName.toLowerCase()
              )
            }
          }

          function restoreControlledState(domElement, tag, props) {
            switch (tag) {
              case 'input':
                restoreControlledState$1(domElement, props)
                return
              case 'textarea':
                restoreControlledState$3(domElement, props)
                return
              case 'select':
                restoreControlledState$2(domElement, props)
                return
            }
          }

          var ReactDOMFiberComponent = Object.freeze({
            createElement: createElement$1,
            createTextNode: createTextNode$1,
            setInitialProperties: setInitialProperties$1,
            diffProperties: diffProperties$1,
            updateProperties: updateProperties$1,
            diffHydratedProperties: diffHydratedProperties$1,
            diffHydratedText: diffHydratedText$1,
            warnForUnmatchedText: warnForUnmatchedText$1,
            warnForDeletedHydratableElement: warnForDeletedHydratableElement$1,
            warnForDeletedHydratableText: warnForDeletedHydratableText$1,
            warnForInsertedHydratedElement: warnForInsertedHydratedElement$1,
            warnForInsertedHydratedText: warnForInsertedHydratedText$1,
            restoreControlledState: restoreControlledState,
          })

          // TODO: direct imports like some-package/src/* are bad. Fix me.
          var getCurrentFiberStackAddendum$6 =
            ReactDebugCurrentFiber.getCurrentFiberStackAddendum

          var validateDOMNesting = emptyFunction

          {
            // This validation code was written based on the HTML5 parsing spec:
            // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
            //
            // Note: this does not catch all invalid nesting, nor does it try to (as it's
            // not clear what practical benefit doing so provides); instead, we warn only
            // for cases where the parser will give a parse tree differing from what React
            // intended. For example, <b><div></div></b> is invalid but we don't warn
            // because it still parses correctly; we do warn for other cases like nested
            // <p> tags where the beginning of the second element implicitly closes the
            // first, causing a confusing mess.

            // https://html.spec.whatwg.org/multipage/syntax.html#special
            var specialTags = [
              'address',
              'applet',
              'area',
              'article',
              'aside',
              'base',
              'basefont',
              'bgsound',
              'blockquote',
              'body',
              'br',
              'button',
              'caption',
              'center',
              'col',
              'colgroup',
              'dd',
              'details',
              'dir',
              'div',
              'dl',
              'dt',
              'embed',
              'fieldset',
              'figcaption',
              'figure',
              'footer',
              'form',
              'frame',
              'frameset',
              'h1',
              'h2',
              'h3',
              'h4',
              'h5',
              'h6',
              'head',
              'header',
              'hgroup',
              'hr',
              'html',
              'iframe',
              'img',
              'input',
              'isindex',
              'li',
              'link',
              'listing',
              'main',
              'marquee',
              'menu',
              'menuitem',
              'meta',
              'nav',
              'noembed',
              'noframes',
              'noscript',
              'object',
              'ol',
              'p',
              'param',
              'plaintext',
              'pre',
              'script',
              'section',
              'select',
              'source',
              'style',
              'summary',
              'table',
              'tbody',
              'td',
              'template',
              'textarea',
              'tfoot',
              'th',
              'thead',
              'title',
              'tr',
              'track',
              'ul',
              'wbr',
              'xmp',
            ]

            // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
            var inScopeTags = [
              'applet',
              'caption',
              'html',
              'table',
              'td',
              'th',
              'marquee',
              'object',
              'template',

              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              'foreignObject',
              'desc',
              'title',
            ]

            // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
            var buttonScopeTags = inScopeTags.concat(['button'])

            // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
            var impliedEndTags = [
              'dd',
              'dt',
              'li',
              'option',
              'optgroup',
              'p',
              'rp',
              'rt',
            ]

            var emptyAncestorInfo = {
              current: null,

              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,

              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null,
            }

            var updatedAncestorInfo$1 = function(oldInfo, tag, instance) {
              var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo)
              var info = { tag: tag, instance: instance }

              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null
                ancestorInfo.buttonTagInScope = null
                ancestorInfo.nobrTagInScope = null
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null
              }

              // See rules for 'li', 'dd', 'dt' start tags in
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
              if (
                specialTags.indexOf(tag) !== -1 &&
                tag !== 'address' &&
                tag !== 'div' &&
                tag !== 'p'
              ) {
                ancestorInfo.listItemTagAutoclosing = null
                ancestorInfo.dlItemTagAutoclosing = null
              }

              ancestorInfo.current = info

              if (tag === 'form') {
                ancestorInfo.formTag = info
              }
              if (tag === 'a') {
                ancestorInfo.aTagInScope = info
              }
              if (tag === 'button') {
                ancestorInfo.buttonTagInScope = info
              }
              if (tag === 'nobr') {
                ancestorInfo.nobrTagInScope = info
              }
              if (tag === 'p') {
                ancestorInfo.pTagInButtonScope = info
              }
              if (tag === 'li') {
                ancestorInfo.listItemTagAutoclosing = info
              }
              if (tag === 'dd' || tag === 'dt') {
                ancestorInfo.dlItemTagAutoclosing = info
              }

              return ancestorInfo
            }

            /**
             * Returns whether
             */
            var isTagValidWithParent = function(tag, parentTag) {
              // First, let's check if we're in an unusual parsing mode...
              switch (parentTag) {
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
                case 'select':
                  return (
                    tag === 'option' || tag === 'optgroup' || tag === '#text'
                  )
                case 'optgroup':
                  return tag === 'option' || tag === '#text'
                // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
                // but
                case 'option':
                  return tag === '#text'
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
                // No special behavior since these rules fall back to "in body" mode for
                // all except special table nodes which cause bad parsing behavior anyway.

                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
                case 'tr':
                  return (
                    tag === 'th' ||
                    tag === 'td' ||
                    tag === 'style' ||
                    tag === 'script' ||
                    tag === 'template'
                  )
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
                case 'tbody':
                case 'thead':
                case 'tfoot':
                  return (
                    tag === 'tr' ||
                    tag === 'style' ||
                    tag === 'script' ||
                    tag === 'template'
                  )
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
                case 'colgroup':
                  return tag === 'col' || tag === 'template'
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
                case 'table':
                  return (
                    tag === 'caption' ||
                    tag === 'colgroup' ||
                    tag === 'tbody' ||
                    tag === 'tfoot' ||
                    tag === 'thead' ||
                    tag === 'style' ||
                    tag === 'script' ||
                    tag === 'template'
                  )
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
                case 'head':
                  return (
                    tag === 'base' ||
                    tag === 'basefont' ||
                    tag === 'bgsound' ||
                    tag === 'link' ||
                    tag === 'meta' ||
                    tag === 'title' ||
                    tag === 'noscript' ||
                    tag === 'noframes' ||
                    tag === 'style' ||
                    tag === 'script' ||
                    tag === 'template'
                  )
                // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
                case 'html':
                  return tag === 'head' || tag === 'body'
                case '#document':
                  return tag === 'html'
              }

              // Probably in the "in body" parsing mode, so we outlaw only tag combos
              // where the parsing rules cause implicit opens or closes to be added.
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
              switch (tag) {
                case 'h1':
                case 'h2':
                case 'h3':
                case 'h4':
                case 'h5':
                case 'h6':
                  return (
                    parentTag !== 'h1' &&
                    parentTag !== 'h2' &&
                    parentTag !== 'h3' &&
                    parentTag !== 'h4' &&
                    parentTag !== 'h5' &&
                    parentTag !== 'h6'
                  )

                case 'rp':
                case 'rt':
                  return impliedEndTags.indexOf(parentTag) === -1

                case 'body':
                case 'caption':
                case 'col':
                case 'colgroup':
                case 'frame':
                case 'head':
                case 'html':
                case 'tbody':
                case 'td':
                case 'tfoot':
                case 'th':
                case 'thead':
                case 'tr':
                  // These tags are only valid with a few parents that have special child
                  // parsing rules -- if we're down here, then none of those matched and
                  // so we allow it only if we don't know what the parent is, as all other
                  // cases are invalid.
                  return parentTag == null
              }

              return true
            }

            /**
             * Returns whether
             */
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case 'address':
                case 'article':
                case 'aside':
                case 'blockquote':
                case 'center':
                case 'details':
                case 'dialog':
                case 'dir':
                case 'div':
                case 'dl':
                case 'fieldset':
                case 'figcaption':
                case 'figure':
                case 'footer':
                case 'header':
                case 'hgroup':
                case 'main':
                case 'menu':
                case 'nav':
                case 'ol':
                case 'p':
                case 'section':
                case 'summary':
                case 'ul':
                case 'pre':
                case 'listing':
                case 'table':
                case 'hr':
                case 'xmp':
                case 'h1':
                case 'h2':
                case 'h3':
                case 'h4':
                case 'h5':
                case 'h6':
                  return ancestorInfo.pTagInButtonScope

                case 'form':
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope

                case 'li':
                  return ancestorInfo.listItemTagAutoclosing

                case 'dd':
                case 'dt':
                  return ancestorInfo.dlItemTagAutoclosing

                case 'button':
                  return ancestorInfo.buttonTagInScope

                case 'a':
                  // Spec says something about storing a list of markers, but it sounds
                  // equivalent to this check.
                  return ancestorInfo.aTagInScope

                case 'nobr':
                  return ancestorInfo.nobrTagInScope
              }

              return null
            }

            var didWarn = {}

            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo
              var parentInfo = ancestorInfo.current
              var parentTag = parentInfo && parentInfo.tag

              if (childText != null) {
                warning(
                  childTag == null,
                  'validateDOMNesting: when childText is passed, childTag should be null'
                )
                childTag = '#text'
              }

              var invalidParent = isTagValidWithParent(childTag, parentTag)
                ? null
                : parentInfo
              var invalidAncestor = invalidParent
                ? null
                : findInvalidAncestorForTag(childTag, ancestorInfo)
              var invalidParentOrAncestor = invalidParent || invalidAncestor
              if (!invalidParentOrAncestor) {
                return
              }

              var ancestorTag = invalidParentOrAncestor.tag
              var addendum = getCurrentFiberStackAddendum$6()

              var warnKey =
                !!invalidParent +
                '|' +
                childTag +
                '|' +
                ancestorTag +
                '|' +
                addendum
              if (didWarn[warnKey]) {
                return
              }
              didWarn[warnKey] = true

              var tagDisplayName = childTag
              var whitespaceInfo = ''
              if (childTag === '#text') {
                if (/\S/.test(childText)) {
                  tagDisplayName = 'Text nodes'
                } else {
                  tagDisplayName = 'Whitespace text nodes'
                  whitespaceInfo =
                    " Make sure you don't have any extra whitespace between tags on " +
                    'each line of your source code.'
                }
              } else {
                tagDisplayName = '<' + childTag + '>'
              }

              if (invalidParent) {
                var info = ''
                if (ancestorTag === 'table' && childTag === 'tr') {
                  info +=
                    ' Add a <tbody> to your code to match the DOM tree generated by ' +
                    'the browser.'
                }
                warning(
                  false,
                  'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s',
                  tagDisplayName,
                  ancestorTag,
                  whitespaceInfo,
                  info,
                  addendum
                )
              } else {
                warning(
                  false,
                  'validateDOMNesting(...): %s cannot appear as a descendant of ' +
                    '<%s>.%s',
                  tagDisplayName,
                  ancestorTag,
                  addendum
                )
              }
            }

            // TODO: turn this into a named export
            validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo$1

            // For testing
            validateDOMNesting.isTagValidInContext = function(
              tag,
              ancestorInfo
            ) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo
              var parentInfo = ancestorInfo.current
              var parentTag = parentInfo && parentInfo.tag
              return (
                isTagValidWithParent(tag, parentTag) &&
                !findInvalidAncestorForTag(tag, ancestorInfo)
              )
            }
          }

          var validateDOMNesting$1 = validateDOMNesting

          // TODO: direct imports like some-package/src/* are bad. Fix me.
          var createElement = createElement$1
          var createTextNode = createTextNode$1
          var setInitialProperties = setInitialProperties$1
          var diffProperties = diffProperties$1
          var updateProperties = updateProperties$1
          var diffHydratedProperties = diffHydratedProperties$1
          var diffHydratedText = diffHydratedText$1
          var warnForUnmatchedText = warnForUnmatchedText$1
          var warnForDeletedHydratableElement = warnForDeletedHydratableElement$1
          var warnForDeletedHydratableText = warnForDeletedHydratableText$1
          var warnForInsertedHydratedElement = warnForInsertedHydratedElement$1
          var warnForInsertedHydratedText = warnForInsertedHydratedText$1
          var updatedAncestorInfo = validateDOMNesting$1.updatedAncestorInfo
          var precacheFiberNode = precacheFiberNode$1
          var updateFiberProps = updateFiberProps$1

          {
            var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning'
            if (
              typeof Map !== 'function' ||
              Map.prototype == null ||
              typeof Map.prototype.forEach !== 'function' ||
              typeof Set !== 'function' ||
              Set.prototype == null ||
              typeof Set.prototype.clear !== 'function' ||
              typeof Set.prototype.forEach !== 'function'
            ) {
              warning(
                false,
                'React depends on Map and Set built-in types. Make sure that you load a ' +
                  'polyfill in older browsers. http://fb.me/react-polyfills'
              )
            }
          }

          injection$3.injectFiberControlledHostComponent(ReactDOMFiberComponent)

          var eventsEnabled = null
          var selectionInformation = null

          /**
           * True if the supplied DOM node is a valid node element.
           *
           * @param {?DOMElement} node The candidate DOM node.
           * @return {boolean} True if the DOM is a valid DOM node.
           * @internal
           */
          function isValidContainer(node) {
            return !!(
              node &&
              (node.nodeType === ELEMENT_NODE ||
                node.nodeType === DOCUMENT_NODE ||
                node.nodeType === DOCUMENT_FRAGMENT_NODE ||
                (node.nodeType === COMMENT_NODE &&
                  node.nodeValue === ' react-mount-point-unstable '))
            )
          }

          function getReactRootElementInContainer(container) {
            if (!container) {
              return null
            }

            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement
            } else {
              return container.firstChild
            }
          }

          function shouldHydrateDueToLegacyHeuristic(container) {
            var rootElement = getReactRootElementInContainer(container)
            return !!(
              rootElement &&
              rootElement.nodeType === ELEMENT_NODE &&
              rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME)
            )
          }

          function shouldAutoFocusHostComponent(type, props) {
            switch (type) {
              case 'button':
              case 'input':
              case 'select':
              case 'textarea':
                return !!props.autoFocus
            }
            return false
          }

          var DOMRenderer = reactReconciler({
            getRootHostContext: function(rootContainerInstance) {
              var type = void 0
              var namespace = void 0
              var nodeType = rootContainerInstance.nodeType
              switch (nodeType) {
                case DOCUMENT_NODE:
                case DOCUMENT_FRAGMENT_NODE: {
                  type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment'
                  var root = rootContainerInstance.documentElement
                  namespace = root
                    ? root.namespaceURI
                    : getChildNamespace(null, '')
                  break
                }
                default: {
                  var container =
                    nodeType === COMMENT_NODE
                      ? rootContainerInstance.parentNode
                      : rootContainerInstance
                  var ownNamespace = container.namespaceURI || null
                  type = container.tagName
                  namespace = getChildNamespace(ownNamespace, type)
                  break
                }
              }
              {
                var validatedTag = type.toLowerCase()
                var _ancestorInfo = updatedAncestorInfo(
                  null,
                  validatedTag,
                  null
                )
                return { namespace: namespace, ancestorInfo: _ancestorInfo }
              }
              return namespace
            },
            getChildHostContext: function(parentHostContext, type) {
              {
                var parentHostContextDev = parentHostContext
                var _namespace = getChildNamespace(
                  parentHostContextDev.namespace,
                  type
                )
                var _ancestorInfo2 = updatedAncestorInfo(
                  parentHostContextDev.ancestorInfo,
                  type,
                  null
                )
                return { namespace: _namespace, ancestorInfo: _ancestorInfo2 }
              }
              var parentNamespace = parentHostContext
              return getChildNamespace(parentNamespace, type)
            },
            getPublicInstance: function(instance) {
              return instance
            },
            prepareForCommit: function() {
              eventsEnabled = isEnabled()
              selectionInformation = getSelectionInformation()
              setEnabled(false)
            },
            resetAfterCommit: function() {
              restoreSelection(selectionInformation)
              selectionInformation = null
              setEnabled(eventsEnabled)
              eventsEnabled = null
            },
            createInstance: function(
              type,
              props,
              rootContainerInstance,
              hostContext,
              internalInstanceHandle
            ) {
              var parentNamespace = void 0
              {
                // TODO: take namespace into account when validating.
                var hostContextDev = hostContext
                validateDOMNesting$1(type, null, hostContextDev.ancestorInfo)
                if (
                  typeof props.children === 'string' ||
                  typeof props.children === 'number'
                ) {
                  var string = '' + props.children
                  var ownAncestorInfo = updatedAncestorInfo(
                    hostContextDev.ancestorInfo,
                    type,
                    null
                  )
                  validateDOMNesting$1(null, string, ownAncestorInfo)
                }
                parentNamespace = hostContextDev.namespace
              }
              var domElement = createElement(
                type,
                props,
                rootContainerInstance,
                parentNamespace
              )
              precacheFiberNode(internalInstanceHandle, domElement)
              updateFiberProps(domElement, props)
              return domElement
            },
            appendInitialChild: function(parentInstance, child) {
              parentInstance.appendChild(child)
            },
            finalizeInitialChildren: function(
              domElement,
              type,
              props,
              rootContainerInstance
            ) {
              setInitialProperties(
                domElement,
                type,
                props,
                rootContainerInstance
              )
              return shouldAutoFocusHostComponent(type, props)
            },
            prepareUpdate: function(
              domElement,
              type,
              oldProps,
              newProps,
              rootContainerInstance,
              hostContext
            ) {
              {
                var hostContextDev = hostContext
                if (
                  typeof newProps.children !== typeof oldProps.children &&
                  (typeof newProps.children === 'string' ||
                    typeof newProps.children === 'number')
                ) {
                  var string = '' + newProps.children
                  var ownAncestorInfo = updatedAncestorInfo(
                    hostContextDev.ancestorInfo,
                    type,
                    null
                  )
                  validateDOMNesting$1(null, string, ownAncestorInfo)
                }
              }
              return diffProperties(
                domElement,
                type,
                oldProps,
                newProps,
                rootContainerInstance
              )
            },
            shouldSetTextContent: function(type, props) {
              return (
                type === 'textarea' ||
                typeof props.children === 'string' ||
                typeof props.children === 'number' ||
                (typeof props.dangerouslySetInnerHTML === 'object' &&
                  props.dangerouslySetInnerHTML !== null &&
                  typeof props.dangerouslySetInnerHTML.__html === 'string')
              )
            },
            shouldDeprioritizeSubtree: function(type, props) {
              return !!props.hidden
            },
            createTextInstance: function(
              text,
              rootContainerInstance,
              hostContext,
              internalInstanceHandle
            ) {
              {
                var hostContextDev = hostContext
                validateDOMNesting$1(null, text, hostContextDev.ancestorInfo)
              }
              var textNode = createTextNode(text, rootContainerInstance)
              precacheFiberNode(internalInstanceHandle, textNode)
              return textNode
            },

            now: now,

            mutation: {
              commitMount: function(
                domElement,
                type,
                newProps,
                internalInstanceHandle
              ) {
                domElement.focus()
              },
              commitUpdate: function(
                domElement,
                updatePayload,
                type,
                oldProps,
                newProps,
                internalInstanceHandle
              ) {
                // Update the props handle so that we know which props are the ones with
                // with current event handlers.
                updateFiberProps(domElement, newProps)
                // Apply the diff to the DOM node.
                updateProperties(
                  domElement,
                  updatePayload,
                  type,
                  oldProps,
                  newProps
                )
              },
              resetTextContent: function(domElement) {
                domElement.textContent = ''
              },
              commitTextUpdate: function(textInstance, oldText, newText) {
                textInstance.nodeValue = newText
              },
              appendChild: function(parentInstance, child) {
                parentInstance.appendChild(child)
              },
              appendChildToContainer: function(container, child) {
                if (container.nodeType === COMMENT_NODE) {
                  container.parentNode.insertBefore(child, container)
                } else {
                  container.appendChild(child)
                }
              },
              insertBefore: function(parentInstance, child, beforeChild) {
                parentInstance.insertBefore(child, beforeChild)
              },
              insertInContainerBefore: function(container, child, beforeChild) {
                if (container.nodeType === COMMENT_NODE) {
                  container.parentNode.insertBefore(child, beforeChild)
                } else {
                  container.insertBefore(child, beforeChild)
                }
              },
              removeChild: function(parentInstance, child) {
                parentInstance.removeChild(child)
              },
              removeChildFromContainer: function(container, child) {
                if (container.nodeType === COMMENT_NODE) {
                  container.parentNode.removeChild(child)
                } else {
                  container.removeChild(child)
                }
              },
            },

            hydration: {
              canHydrateInstance: function(instance, type, props) {
                if (
                  instance.nodeType !== ELEMENT_NODE ||
                  type.toLowerCase() !== instance.nodeName.toLowerCase()
                ) {
                  return null
                }
                // This has now been refined to an element node.
                return instance
              },
              canHydrateTextInstance: function(instance, text) {
                if (text === '' || instance.nodeType !== TEXT_NODE) {
                  // Empty strings are not parsed by HTML so there won't be a correct match here.
                  return null
                }
                // This has now been refined to a text node.
                return instance
              },
              getNextHydratableSibling: function(instance) {
                var node = instance.nextSibling
                // Skip non-hydratable nodes.
                while (
                  node &&
                  node.nodeType !== ELEMENT_NODE &&
                  node.nodeType !== TEXT_NODE
                ) {
                  node = node.nextSibling
                }
                return node
              },
              getFirstHydratableChild: function(parentInstance) {
                var next = parentInstance.firstChild
                // Skip non-hydratable nodes.
                while (
                  next &&
                  next.nodeType !== ELEMENT_NODE &&
                  next.nodeType !== TEXT_NODE
                ) {
                  next = next.nextSibling
                }
                return next
              },
              hydrateInstance: function(
                instance,
                type,
                props,
                rootContainerInstance,
                hostContext,
                internalInstanceHandle
              ) {
                precacheFiberNode(internalInstanceHandle, instance)
                // TODO: Possibly defer this until the commit phase where all the events
                // get attached.
                updateFiberProps(instance, props)
                var parentNamespace = void 0
                {
                  var hostContextDev = hostContext
                  parentNamespace = hostContextDev.namespace
                }
                return diffHydratedProperties(
                  instance,
                  type,
                  props,
                  parentNamespace,
                  rootContainerInstance
                )
              },
              hydrateTextInstance: function(
                textInstance,
                text,
                internalInstanceHandle
              ) {
                precacheFiberNode(internalInstanceHandle, textInstance)
                return diffHydratedText(textInstance, text)
              },
              didNotMatchHydratedContainerTextInstance: function(
                parentContainer,
                textInstance,
                text
              ) {
                {
                  warnForUnmatchedText(textInstance, text)
                }
              },
              didNotMatchHydratedTextInstance: function(
                parentType,
                parentProps,
                parentInstance,
                textInstance,
                text
              ) {
                if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                  warnForUnmatchedText(textInstance, text)
                }
              },
              didNotHydrateContainerInstance: function(
                parentContainer,
                instance
              ) {
                {
                  if (instance.nodeType === 1) {
                    warnForDeletedHydratableElement(parentContainer, instance)
                  } else {
                    warnForDeletedHydratableText(parentContainer, instance)
                  }
                }
              },
              didNotHydrateInstance: function(
                parentType,
                parentProps,
                parentInstance,
                instance
              ) {
                if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                  if (instance.nodeType === 1) {
                    warnForDeletedHydratableElement(parentInstance, instance)
                  } else {
                    warnForDeletedHydratableText(parentInstance, instance)
                  }
                }
              },
              didNotFindHydratableContainerInstance: function(
                parentContainer,
                type,
                props
              ) {
                {
                  warnForInsertedHydratedElement(parentContainer, type, props)
                }
              },
              didNotFindHydratableContainerTextInstance: function(
                parentContainer,
                text
              ) {
                {
                  warnForInsertedHydratedText(parentContainer, text)
                }
              },
              didNotFindHydratableInstance: function(
                parentType,
                parentProps,
                parentInstance,
                type,
                props
              ) {
                if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                  warnForInsertedHydratedElement(parentInstance, type, props)
                }
              },
              didNotFindHydratableTextInstance: function(
                parentType,
                parentProps,
                parentInstance,
                text
              ) {
                if (true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                  warnForInsertedHydratedText(parentInstance, text)
                }
              },
            },

            scheduleDeferredCallback: rIC,
            cancelDeferredCallback: cIC,

            useSyncScheduling: !enableAsyncSchedulingByDefaultInReactDOM,
          })

          injection$4.injectFiberBatchedUpdates(DOMRenderer.batchedUpdates)

          var warnedAboutHydrateAPI = false

          function renderSubtreeIntoContainer(
            parentComponent,
            children,
            container,
            forceHydrate,
            callback
          ) {
            !isValidContainer(container)
              ? invariant(false, 'Target container is not a DOM element.')
              : void 0

            {
              if (
                container._reactRootContainer &&
                container.nodeType !== COMMENT_NODE
              ) {
                var hostInstance = DOMRenderer.findHostInstanceWithNoPortals(
                  container._reactRootContainer.current
                )
                if (hostInstance) {
                  warning(
                    hostInstance.parentNode === container,
                    'render(...): It looks like the React-rendered content of this ' +
                      'container was removed without using React. This is not ' +
                      'supported and will cause errors. Instead, call ' +
                      'ReactDOM.unmountComponentAtNode to empty a container.'
                  )
                }
              }

              var isRootRenderedBySomeReact = !!container._reactRootContainer
              var rootEl = getReactRootElementInContainer(container)
              var hasNonRootReactChild = !!(
                rootEl && getInstanceFromNode$1(rootEl)
              )

              warning(
                !hasNonRootReactChild || isRootRenderedBySomeReact,
                'render(...): Replacing React-rendered children with a new root ' +
                  'component. If you intended to update the children of this node, ' +
                  'you should instead have the existing children update their state ' +
                  'and render the new components instead of calling ReactDOM.render.'
              )

              warning(
                container.nodeType !== ELEMENT_NODE ||
                  !container.tagName ||
                  container.tagName.toUpperCase() !== 'BODY',
                'render(): Rendering components directly into document.body is ' +
                  'discouraged, since its children are often manipulated by third-party ' +
                  'scripts and browser extensions. This may lead to subtle ' +
                  'reconciliation issues. Try rendering into a container element created ' +
                  'for your app.'
              )
            }

            var root = container._reactRootContainer
            if (!root) {
              var shouldHydrate =
                forceHydrate || shouldHydrateDueToLegacyHeuristic(container)
              // First clear any existing content.
              if (!shouldHydrate) {
                var warned = false
                var rootSibling = void 0
                while ((rootSibling = container.lastChild)) {
                  {
                    if (
                      !warned &&
                      rootSibling.nodeType === ELEMENT_NODE &&
                      rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)
                    ) {
                      warned = true
                      warning(
                        false,
                        'render(): Target node has markup rendered by React, but there ' +
                          'are unrelated nodes as well. This is most commonly caused by ' +
                          'white-space inserted around server-rendered markup.'
                      )
                    }
                  }
                  container.removeChild(rootSibling)
                }
              }
              {
                if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
                  warnedAboutHydrateAPI = true
                  lowPriorityWarning$1(
                    false,
                    'render(): Calling ReactDOM.render() to hydrate server-rendered markup ' +
                      'will stop working in React v17. Replace the ReactDOM.render() call ' +
                      'with ReactDOM.hydrate() if you want React to attach to the server HTML.'
                  )
                }
              }
              var newRoot = DOMRenderer.createContainer(
                container,
                shouldHydrate
              )
              root = container._reactRootContainer = newRoot
              // Initial mount should not be batched.
              DOMRenderer.unbatchedUpdates(function() {
                DOMRenderer.updateContainer(
                  children,
                  newRoot,
                  parentComponent,
                  callback
                )
              })
            } else {
              DOMRenderer.updateContainer(
                children,
                root,
                parentComponent,
                callback
              )
            }
            return DOMRenderer.getPublicRootInstance(root)
          }

          function createPortal(children, container) {
            var key =
              arguments.length > 2 && arguments[2] !== undefined
                ? arguments[2]
                : null

            !isValidContainer(container)
              ? invariant(false, 'Target container is not a DOM element.')
              : void 0
            // TODO: pass ReactDOM portal implementation as third argument
            return createPortal$1(children, container, null, key)
          }

          function ReactRoot(container, hydrate) {
            var root = DOMRenderer.createContainer(container, hydrate)
            this._reactRootContainer = root
          }
          ReactRoot.prototype.render = function(children, callback) {
            var root = this._reactRootContainer
            DOMRenderer.updateContainer(children, root, null, callback)
          }
          ReactRoot.prototype.unmount = function(callback) {
            var root = this._reactRootContainer
            DOMRenderer.updateContainer(null, root, null, callback)
          }

          var ReactDOM = {
            createPortal: createPortal,

            findDOMNode: function(componentOrElement) {
              {
                var owner = ReactCurrentOwner.current
                if (owner !== null) {
                  var warnedAboutRefsInRender =
                    owner.stateNode._warnedAboutRefsInRender
                  warning(
                    warnedAboutRefsInRender,
                    '%s is accessing findDOMNode inside its render(). ' +
                      'render() should be a pure function of props and state. It should ' +
                      'never access something that requires stale data from the previous ' +
                      'render, such as refs. Move this logic to componentDidMount and ' +
                      'componentDidUpdate instead.',
                    getComponentName(owner) || 'A component'
                  )
                  owner.stateNode._warnedAboutRefsInRender = true
                }
              }
              if (componentOrElement == null) {
                return null
              }
              if (componentOrElement.nodeType === ELEMENT_NODE) {
                return componentOrElement
              }

              var inst = get(componentOrElement)
              if (inst) {
                return DOMRenderer.findHostInstance(inst)
              }

              if (typeof componentOrElement.render === 'function') {
                invariant(
                  false,
                  'Unable to find node on an unmounted component.'
                )
              } else {
                invariant(
                  false,
                  'Element appears to be neither ReactComponent nor DOMNode. Keys: %s',
                  Object.keys(componentOrElement)
                )
              }
            },
            hydrate: function(element, container, callback) {
              // TODO: throw or warn if we couldn't hydrate?
              return renderSubtreeIntoContainer(
                null,
                element,
                container,
                true,
                callback
              )
            },
            render: function(element, container, callback) {
              return renderSubtreeIntoContainer(
                null,
                element,
                container,
                false,
                callback
              )
            },
            unstable_renderSubtreeIntoContainer: function(
              parentComponent,
              element,
              containerNode,
              callback
            ) {
              !(parentComponent != null && has(parentComponent))
                ? invariant(
                    false,
                    'parentComponent must be a valid React Component'
                  )
                : void 0
              return renderSubtreeIntoContainer(
                parentComponent,
                element,
                containerNode,
                false,
                callback
              )
            },
            unmountComponentAtNode: function(container) {
              !isValidContainer(container)
                ? invariant(
                    false,
                    'unmountComponentAtNode(...): Target container is not a DOM element.'
                  )
                : void 0

              if (container._reactRootContainer) {
                {
                  var rootEl = getReactRootElementInContainer(container)
                  var renderedByDifferentReact =
                    rootEl && !getInstanceFromNode$1(rootEl)
                  warning(
                    !renderedByDifferentReact,
                    "unmountComponentAtNode(): The node you're attempting to unmount " +
                      'was rendered by another copy of React.'
                  )
                }

                // Unmount should not be batched.
                DOMRenderer.unbatchedUpdates(function() {
                  renderSubtreeIntoContainer(
                    null,
                    null,
                    container,
                    false,
                    function() {
                      container._reactRootContainer = null
                    }
                  )
                })
                // If you call unmountComponentAtNode twice in quick succession, you'll
                // get `true` twice. That's probably fine?
                return true
              } else {
                {
                  var _rootEl = getReactRootElementInContainer(container)
                  var hasNonRootReactChild = !!(
                    _rootEl && getInstanceFromNode$1(_rootEl)
                  )

                  // Check if the container itself is a React root node.
                  var isContainerReactRoot =
                    container.nodeType === 1 &&
                    isValidContainer(container.parentNode) &&
                    !!container.parentNode._reactRootContainer

                  warning(
                    !hasNonRootReactChild,
                    "unmountComponentAtNode(): The node you're attempting to unmount " +
                      'was rendered by React and is not a top-level container. %s',
                    isContainerReactRoot
                      ? 'You may have accidentally passed in a React root node instead ' +
                        'of its container.'
                      : 'Instead, have the parent component update its state and ' +
                        'rerender in order to remove this component.'
                  )
                }

                return false
              }
            },

            // Temporary alias since we already shipped React 16 RC with it.
            // TODO: remove in React 17.
            unstable_createPortal: createPortal,

            unstable_batchedUpdates: batchedUpdates,

            unstable_deferredUpdates: DOMRenderer.deferredUpdates,

            flushSync: DOMRenderer.flushSync,

            __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
              // For TapEventPlugin which is popular in open source
              EventPluginHub: EventPluginHub,
              // Used by test-utils
              EventPluginRegistry: EventPluginRegistry,
              EventPropagators: EventPropagators,
              ReactControlledComponent: ReactControlledComponent,
              ReactDOMComponentTree: ReactDOMComponentTree,
              ReactDOMEventListener: ReactDOMEventListener,
            },
          }

          if (enableCreateRoot) {
            ReactDOM.createRoot = function createRoot(container, options) {
              var hydrate = options != null && options.hydrate === true
              return new ReactRoot(container, hydrate)
            }
          }

          var foundDevTools = DOMRenderer.injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: 'react-dom',
          })

          {
            if (
              !foundDevTools &&
              ExecutionEnvironment.canUseDOM &&
              window.top === window.self
            ) {
              // If we're in Chrome or Firefox, provide a download link if not installed.
              if (
                (navigator.userAgent.indexOf('Chrome') > -1 &&
                  navigator.userAgent.indexOf('Edge') === -1) ||
                navigator.userAgent.indexOf('Firefox') > -1
              ) {
                var protocol = window.location.protocol
                // Don't warn in exotic cases like chrome-extension://.
                if (/^(https?|file):$/.test(protocol)) {
                  console.info(
                    '%cDownload the React DevTools ' +
                      'for a better development experience: ' +
                      'https://fb.me/react-devtools' +
                      (protocol === 'file:'
                        ? '\nYou might need to use a local HTTP server (instead of file://): ' +
                          'https://fb.me/react-devtools-faq'
                        : ''),
                    'font-weight:bold'
                  )
                }
              }
            }
          }

          var ReactDOM$2 = Object.freeze({
            default: ReactDOM,
          })

          var ReactDOM$3 = (ReactDOM$2 && ReactDOM) || ReactDOM$2

          // TODO: decide on the top-level export form.
          // This is hacky but makes it work with both Rollup and Jest.
          var reactDom = ReactDOM$3['default']
            ? ReactDOM$3['default']
            : ReactDOM$3

          module.exports = reactDom
        })()
      }

      /***/
    },
    /* 93 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      /**
       * Copyright (c) 2013-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @typechecks
       */

      var emptyFunction = __webpack_require__(8)

      /**
       * Upstream version of event listener. Does not take into account specific
       * nature of platform.
       */
      var EventListener = {
        /**
         * Listen to DOM events during the bubble phase.
         *
         * @param {DOMEventTarget} target DOM element to register listener on.
         * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
         * @param {function} callback Callback function.
         * @return {object} Object with a `remove` method.
         */
        listen: function listen(target, eventType, callback) {
          if (target.addEventListener) {
            target.addEventListener(eventType, callback, false)
            return {
              remove: function remove() {
                target.removeEventListener(eventType, callback, false)
              },
            }
          } else if (target.attachEvent) {
            target.attachEvent('on' + eventType, callback)
            return {
              remove: function remove() {
                target.detachEvent('on' + eventType, callback)
              },
            }
          }
        },

        /**
         * Listen to DOM events during the capture phase.
         *
         * @param {DOMEventTarget} target DOM element to register listener on.
         * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
         * @param {function} callback Callback function.
         * @return {object} Object with a `remove` method.
         */
        capture: function capture(target, eventType, callback) {
          if (target.addEventListener) {
            target.addEventListener(eventType, callback, true)
            return {
              remove: function remove() {
                target.removeEventListener(eventType, callback, true)
              },
            }
          } else {
            if (true) {
              console.error(
                'Attempted to listen to events during the capture phase on a ' +
                  'browser that does not support the capture phase. Your application ' +
                  'will not receive some events.'
              )
            }
            return {
              remove: emptyFunction,
            }
          }
        },

        registerDefault: function registerDefault() {},
      }

      module.exports = EventListener

      /***/
    },
    /* 94 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      /**
       * Copyright (c) 2013-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @typechecks
       */

      /* eslint-disable fb-www/typeof-undefined */

      /**
       * Same as document.activeElement but wraps in a try-catch block. In IE it is
       * not safe to call document.activeElement if there is nothing focused.
       *
       * The activeElement will be null only if the document or document body is not
       * yet defined.
       *
       * @param {?DOMDocument} doc Defaults to current document.
       * @return {?DOMElement}
       */
      function getActiveElement(doc) /*?DOMElement*/ {
        doc = doc || (typeof document !== 'undefined' ? document : undefined)
        if (typeof doc === 'undefined') {
          return null
        }
        try {
          return doc.activeElement || doc.body
        } catch (e) {
          return doc.body
        }
      }

      module.exports = getActiveElement

      /***/
    },
    /* 95 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'
      /**
       * Copyright (c) 2013-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @typechecks
       *
       */

      /*eslint-disable no-self-compare */

      var hasOwnProperty = Object.prototype.hasOwnProperty

      /**
       * inlined Object.is polyfill to avoid requiring consumers ship their own
       * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
       */
      function is(x, y) {
        // SameValue algorithm
        if (x === y) {
          // Steps 1-5, 7-10
          // Steps 6.b-6.e: +0 != -0
          // Added the nonzero y check to make Flow happy, but it is redundant
          return x !== 0 || y !== 0 || 1 / x === 1 / y
        } else {
          // Step 6.a: NaN == NaN
          return x !== x && y !== y
        }
      }

      /**
       * Performs equality by iterating through keys on an object and returning false
       * when any key has values which are not strictly equal between the arguments.
       * Returns true when the values of all keys are strictly equal.
       */
      function shallowEqual(objA, objB) {
        if (is(objA, objB)) {
          return true
        }

        if (
          typeof objA !== 'object' ||
          objA === null ||
          typeof objB !== 'object' ||
          objB === null
        ) {
          return false
        }

        var keysA = Object.keys(objA)
        var keysB = Object.keys(objB)

        if (keysA.length !== keysB.length) {
          return false
        }

        // Test for A's keys different from B.
        for (var i = 0; i < keysA.length; i++) {
          if (
            !hasOwnProperty.call(objB, keysA[i]) ||
            !is(objA[keysA[i]], objB[keysA[i]])
          ) {
            return false
          }
        }

        return true
      }

      module.exports = shallowEqual

      /***/
    },
    /* 96 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      /**
       * Copyright (c) 2013-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       */

      var isTextNode = __webpack_require__(97)

      /*eslint-disable no-bitwise */

      /**
       * Checks if a given DOM node contains or is another DOM node.
       */
      function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) {
          return false
        } else if (outerNode === innerNode) {
          return true
        } else if (isTextNode(outerNode)) {
          return false
        } else if (isTextNode(innerNode)) {
          return containsNode(outerNode, innerNode.parentNode)
        } else if ('contains' in outerNode) {
          return outerNode.contains(innerNode)
        } else if (outerNode.compareDocumentPosition) {
          return !!(outerNode.compareDocumentPosition(innerNode) & 16)
        } else {
          return false
        }
      }

      module.exports = containsNode

      /***/
    },
    /* 97 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      /**
       * Copyright (c) 2013-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @typechecks
       */

      var isNode = __webpack_require__(98)

      /**
       * @param {*} object The object to check.
       * @return {boolean} Whether or not the object is a DOM text node.
       */
      function isTextNode(object) {
        return isNode(object) && object.nodeType == 3
      }

      module.exports = isTextNode

      /***/
    },
    /* 98 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      /**
       * Copyright (c) 2013-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @typechecks
       */

      /**
       * @param {*} object The object to check.
       * @return {boolean} Whether or not the object is a DOM node.
       */
      function isNode(object) {
        var doc = object ? object.ownerDocument || object : document
        var defaultView = doc.defaultView || window
        return !!(
          object &&
          (typeof defaultView.Node === 'function'
            ? object instanceof defaultView.Node
            : typeof object === 'object' &&
              typeof object.nodeType === 'number' &&
              typeof object.nodeName === 'string')
        )
      }

      module.exports = isNode

      /***/
    },
    /* 99 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'
      /**
       * Copyright (c) 2013-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       */

      /**
       * @param {DOMElement} node input/textarea to focus
       */

      function focusNode(node) {
        // IE8 can throw "Can't move focus to the control because it is invisible,
        // not enabled, or of a type that does not accept the focus." for all kinds of
        // reasons that are too expensive and fragile to test.
        try {
          node.focus()
        } catch (e) {}
      }

      module.exports = focusNode

      /***/
    },
    /* 100 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'
      /**
       * Copyright (c) 2013-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @typechecks
       */

      var hyphenate = __webpack_require__(101)

      var msPattern = /^ms-/

      /**
       * Hyphenates a camelcased CSS property name, for example:
       *
       *   > hyphenateStyleName('backgroundColor')
       *   < "background-color"
       *   > hyphenateStyleName('MozTransition')
       *   < "-moz-transition"
       *   > hyphenateStyleName('msTransition')
       *   < "-ms-transition"
       *
       * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
       * is converted to `-ms-`.
       *
       * @param {string} string
       * @return {string}
       */
      function hyphenateStyleName(string) {
        return hyphenate(string).replace(msPattern, '-ms-')
      }

      module.exports = hyphenateStyleName

      /***/
    },
    /* 101 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      /**
       * Copyright (c) 2013-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @typechecks
       */

      var _uppercasePattern = /([A-Z])/g

      /**
       * Hyphenates a camelcased string, for example:
       *
       *   > hyphenate('backgroundColor')
       *   < "background-color"
       *
       * For CSS style names, use `hyphenateStyleName` instead which works properly
       * with all vendor prefixes, including `ms`.
       *
       * @param {string} string
       * @return {string}
       */
      function hyphenate(string) {
        return string.replace(_uppercasePattern, '-$1').toLowerCase()
      }

      module.exports = hyphenate

      /***/
    },
    /* 102 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      /**
       * Copyright (c) 2013-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @typechecks
       */

      var _hyphenPattern = /-(.)/g

      /**
       * Camelcases a hyphenated string, for example:
       *
       *   > camelize('background-color')
       *   < "backgroundColor"
       *
       * @param {string} string
       * @return {string}
       */
      function camelize(string) {
        return string.replace(_hyphenPattern, function(_, character) {
          return character.toUpperCase()
        })
      }

      module.exports = camelize

      /***/
    },
    /* 103 */
    /***/ function(module, exports, __webpack_require__) {
      Object.defineProperty(exports, '__esModule', { value: true })
      var _jsxFileName =
        '/Users/glodon/glodon/react/testReact/app/redux/containers/App.web.js'
      var _createClass = (function() {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i]
            descriptor.enumerable = descriptor.enumerable || false
            descriptor.configurable = true
            if ('value' in descriptor) descriptor.writable = true
            Object.defineProperty(target, descriptor.key, descriptor)
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps) defineProperties(Constructor.prototype, protoProps)
          if (staticProps) defineProperties(Constructor, staticProps)
          return Constructor
        }
      })()
      var _react = __webpack_require__(1)
      var _react2 = _interopRequireDefault(_react)
      var _reactRouter = __webpack_require__(39)
      var _connectedReactRouter = __webpack_require__(46)
      var _reactRedux = __webpack_require__(18)
      var _ConfigureStore = __webpack_require__(149)
      var _ConfigureStore2 = _interopRequireDefault(_ConfigureStore)
      var _LoginPage = __webpack_require__(154)
      var _LoginPage2 = _interopRequireDefault(_LoginPage)
      var _MainPage = __webpack_require__(214)
      var _MainPage2 = _interopRequireDefault(_MainPage)
      var _reactNavigation = __webpack_require__(218)
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError('Cannot call a class as a function')
        }
      }
      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          )
        }
        return call && (typeof call === 'object' || typeof call === 'function')
          ? call
          : self
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== 'function' && superClass !== null) {
          throw new TypeError(
            'Super expression must either be null or a function, not ' +
              typeof superClass
          )
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true,
          },
        })
        if (superClass)
          Object.setPrototypeOf
            ? Object.setPrototypeOf(subClass, superClass)
            : (subClass.__proto__ = superClass)
      }
      var store = (0, _ConfigureStore2.default)()
      var App = (function(_React$Component) {
        _inherits(App, _React$Component)
        function App() {
          _classCallCheck(this, App)
          return _possibleConstructorReturn(
            this,
            (App.__proto__ || Object.getPrototypeOf(App)).apply(this, arguments)
          )
        }
        _createClass(App, [
          {
            key: 'render',
            value: function render() {
              return _react2.default.createElement(
                _reactRedux.Provider,
                {
                  store: store,
                  __source: { fileName: _jsxFileName, lineNumber: 16 },
                },
                _react2.default.createElement(
                  _connectedReactRouter.ConnectedRouter,
                  {
                    history: _ConfigureStore.history,
                    __source: { fileName: _jsxFileName, lineNumber: 17 },
                  },
                  _react2.default.createElement(
                    _reactRouter.Switch,
                    { __source: { fileName: _jsxFileName, lineNumber: 18 } },
                    _react2.default.createElement(_reactRouter.Route, {
                      path: '/',
                      exact: true,
                      component: _LoginPage2.default,
                      __source: { fileName: _jsxFileName, lineNumber: 19 },
                    }),
                    _react2.default.createElement(_reactRouter.Route, {
                      path: '/Login',
                      exact: true,
                      component: _LoginPage2.default,
                      __source: { fileName: _jsxFileName, lineNumber: 20 },
                    }),
                    _react2.default.createElement(_reactRouter.Route, {
                      path: '/Main',
                      exact: true,
                      component: _MainPage2.default,
                      __source: { fileName: _jsxFileName, lineNumber: 21 },
                    }),
                    _react2.default.createElement(_reactRouter.Route, {
                      component: _reactRouter.NoMatch,
                      __source: { fileName: _jsxFileName, lineNumber: 22 },
                    }),
                    _react2.default.createElement(StackNavigator, {
                      __source: { fileName: _jsxFileName, lineNumber: 23 },
                    })
                  )
                )
              )
            },
          },
        ])
        return App
      })(_react2.default.Component)
      exports.default = App

      /***/
    },
    /* 104 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(
        3
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_0_warning__
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react__ = __webpack_require__(
        1
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_1_react__
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_prop_types__ = __webpack_require__(
        0
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_prop_types___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_2_prop_types__
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_history_createMemoryHistory__ = __webpack_require__(
        106
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_history_createMemoryHistory___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_3_history_createMemoryHistory__
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Router__ = __webpack_require__(
        23
      )
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError('Cannot call a class as a function')
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          )
        }
        return call && (typeof call === 'object' || typeof call === 'function')
          ? call
          : self
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== 'function' && superClass !== null) {
          throw new TypeError(
            'Super expression must either be null or a function, not ' +
              typeof superClass
          )
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true,
          },
        })
        if (superClass)
          Object.setPrototypeOf
            ? Object.setPrototypeOf(subClass, superClass)
            : (subClass.__proto__ = superClass)
      }

      /**
       * The public API for a <Router> that stores location in memory.
       */

      var MemoryRouter = (function(_React$Component) {
        _inherits(MemoryRouter, _React$Component)

        function MemoryRouter() {
          var _temp, _this, _ret

          _classCallCheck(this, MemoryRouter)

          for (
            var _len = arguments.length, args = Array(_len), _key = 0;
            _key < _len;
            _key++
          ) {
            args[_key] = arguments[_key]
          }

          return (
            (_ret = ((_temp = ((_this = _possibleConstructorReturn(
              this,
              _React$Component.call.apply(_React$Component, [this].concat(args))
            )),
            _this)),
            (_this.history = __WEBPACK_IMPORTED_MODULE_3_history_createMemoryHistory___default()(
              _this.props
            )),
            _temp)),
            _possibleConstructorReturn(_this, _ret)
          )
        }

        MemoryRouter.prototype.componentWillMount = function componentWillMount() {
          __WEBPACK_IMPORTED_MODULE_0_warning___default()(
            !this.props.history,
            '<MemoryRouter> ignores the history prop. To use a custom history, ' +
              'use `import { Router }` instead of `import { MemoryRouter as Router }`.'
          )
        }

        MemoryRouter.prototype.render = function render() {
          return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(
            __WEBPACK_IMPORTED_MODULE_4__Router__['a' /* default */],
            { history: this.history, children: this.props.children }
          )
        }

        return MemoryRouter
      })(__WEBPACK_IMPORTED_MODULE_1_react___default.a.Component)

      MemoryRouter.propTypes = {
        initialEntries:
          __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.array,
        initialIndex: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.number,
        getUserConfirmation:
          __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.func,
        keyLength: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.number,
        children: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.node,
      }

      /* harmony default export */ __webpack_exports__['a'] = MemoryRouter

      /***/
    },
    /* 105 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'
      /**
       * Copyright (c) 2013-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       */

      var emptyFunction = __webpack_require__(8)
      var invariant = __webpack_require__(4)
      var warning = __webpack_require__(6)
      var assign = __webpack_require__(10)

      var ReactPropTypesSecret = __webpack_require__(37)
      var checkPropTypes = __webpack_require__(21)

      module.exports = function(isValidElement, throwOnDirectAccess) {
        /* global Symbol */
        var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator
        var FAUX_ITERATOR_SYMBOL = '@@iterator' // Before Symbol spec.

        /**
         * Returns the iterator method function contained on the iterable object.
         *
         * Be sure to invoke the function with the iterable as context:
         *
         *     var iteratorFn = getIteratorFn(myIterable);
         *     if (iteratorFn) {
         *       var iterator = iteratorFn.call(myIterable);
         *       ...
         *     }
         *
         * @param {?object} maybeIterable
         * @return {?function}
         */
        function getIteratorFn(maybeIterable) {
          var iteratorFn =
            maybeIterable &&
            ((ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL]) ||
              maybeIterable[FAUX_ITERATOR_SYMBOL])
          if (typeof iteratorFn === 'function') {
            return iteratorFn
          }
        }

        /**
         * Collection of methods that allow declaration and validation of props that are
         * supplied to React components. Example usage:
         *
         *   var Props = require('ReactPropTypes');
         *   var MyArticle = React.createClass({
         *     propTypes: {
         *       // An optional string prop named "description".
         *       description: Props.string,
         *
         *       // A required enum prop named "category".
         *       category: Props.oneOf(['News','Photos']).isRequired,
         *
         *       // A prop named "dialog" that requires an instance of Dialog.
         *       dialog: Props.instanceOf(Dialog).isRequired
         *     },
         *     render: function() { ... }
         *   });
         *
         * A more formal specification of how these methods are used:
         *
         *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
         *   decl := ReactPropTypes.{type}(.isRequired)?
         *
         * Each and every declaration produces a function with the same signature. This
         * allows the creation of custom validation functions. For example:
         *
         *  var MyLink = React.createClass({
         *    propTypes: {
         *      // An optional string or URI prop named "href".
         *      href: function(props, propName, componentName) {
         *        var propValue = props[propName];
         *        if (propValue != null && typeof propValue !== 'string' &&
         *            !(propValue instanceof URI)) {
         *          return new Error(
         *            'Expected a string or an URI for ' + propName + ' in ' +
         *            componentName
         *          );
         *        }
         *      }
         *    },
         *    render: function() {...}
         *  });
         *
         * @internal
         */

        var ANONYMOUS = '<<anonymous>>'

        // Important!
        // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker('array'),
          bool: createPrimitiveTypeChecker('boolean'),
          func: createPrimitiveTypeChecker('function'),
          number: createPrimitiveTypeChecker('number'),
          object: createPrimitiveTypeChecker('object'),
          string: createPrimitiveTypeChecker('string'),
          symbol: createPrimitiveTypeChecker('symbol'),

          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker,
        }

        /**
         * inlined Object.is polyfill to avoid requiring consumers ship their own
         * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
         */
        /*eslint-disable no-self-compare*/
        function is(x, y) {
          // SameValue algorithm
          if (x === y) {
            // Steps 1-5, 7-10
            // Steps 6.b-6.e: +0 != -0
            return x !== 0 || 1 / x === 1 / y
          } else {
            // Step 6.a: NaN == NaN
            return x !== x && y !== y
          }
        }
        /*eslint-enable no-self-compare*/

        /**
         * We use an Error-like object for backward compatibility as people may call
         * PropTypes directly and inspect their output. However, we don't use real
         * Errors anymore. We don't inspect their stack anyway, and creating them
         * is prohibitively expensive if they are created too often, such as what
         * happens in oneOfType() for any type before the one that matched.
         */
        function PropTypeError(message) {
          this.message = message
          this.stack = ''
        }
        // Make `instanceof Error` still work for returned errors.
        PropTypeError.prototype = Error.prototype

        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {}
            var manualPropTypeWarningCount = 0
          }
          function checkType(
            isRequired,
            props,
            propName,
            componentName,
            location,
            propFullName,
            secret
          ) {
            componentName = componentName || ANONYMOUS
            propFullName = propFullName || propName

            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                // New behavior only for users of `prop-types` package
                invariant(
                  false,
                  'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
                    'Use `PropTypes.checkPropTypes()` to call them. ' +
                    'Read more at http://fb.me/use-check-prop-types'
                )
              } else if (
                'development' !== 'production' &&
                typeof console !== 'undefined'
              ) {
                // Old behavior for people using React.PropTypes
                var cacheKey = componentName + ':' + propName
                if (
                  !manualPropTypeCallCache[cacheKey] &&
                  // Avoid spamming the console because they are often not actionable except for lib authors
                  manualPropTypeWarningCount < 3
                ) {
                  warning(
                    false,
                    'You are manually calling a React.PropTypes validation ' +
                      'function for the `%s` prop on `%s`. This is deprecated ' +
                      'and will throw in the standalone `prop-types` package. ' +
                      'You may be seeing this warning due to a third-party PropTypes ' +
                      'library. See https://fb.me/react-warning-dont-call-proptypes ' +
                      'for details.',
                    propFullName,
                    componentName
                  )
                  manualPropTypeCallCache[cacheKey] = true
                  manualPropTypeWarningCount++
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError(
                    'The ' +
                      location +
                      ' `' +
                      propFullName +
                      '` is marked as required ' +
                      ('in `' + componentName + '`, but its value is `null`.')
                  )
                }
                return new PropTypeError(
                  'The ' +
                    location +
                    ' `' +
                    propFullName +
                    '` is marked as required in ' +
                    ('`' + componentName + '`, but its value is `undefined`.')
                )
              }
              return null
            } else {
              return validate(
                props,
                propName,
                componentName,
                location,
                propFullName
              )
            }
          }

          var chainedCheckType = checkType.bind(null, false)
          chainedCheckType.isRequired = checkType.bind(null, true)

          return chainedCheckType
        }

        function createPrimitiveTypeChecker(expectedType) {
          function validate(
            props,
            propName,
            componentName,
            location,
            propFullName,
            secret
          ) {
            var propValue = props[propName]
            var propType = getPropType(propValue)
            if (propType !== expectedType) {
              // `propValue` being instance of, say, date/regexp, pass the 'object'
              // check, but we can offer a more precise error message here rather than
              // 'of type `object`'.
              var preciseType = getPreciseType(propValue)

              return new PropTypeError(
                'Invalid ' +
                  location +
                  ' `' +
                  propFullName +
                  '` of type ' +
                  ('`' +
                    preciseType +
                    '` supplied to `' +
                    componentName +
                    '`, expected ') +
                  ('`' + expectedType + '`.')
              )
            }
            return null
          }
          return createChainableTypeChecker(validate)
        }

        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunction.thatReturnsNull)
        }

        function createArrayOfTypeChecker(typeChecker) {
          function validate(
            props,
            propName,
            componentName,
            location,
            propFullName
          ) {
            if (typeof typeChecker !== 'function') {
              return new PropTypeError(
                'Property `' +
                  propFullName +
                  '` of component `' +
                  componentName +
                  '` has invalid PropType notation inside arrayOf.'
              )
            }
            var propValue = props[propName]
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue)
              return new PropTypeError(
                'Invalid ' +
                  location +
                  ' `' +
                  propFullName +
                  '` of type ' +
                  ('`' +
                    propType +
                    '` supplied to `' +
                    componentName +
                    '`, expected an array.')
              )
            }
            for (var i = 0; i < propValue.length; i++) {
              var error = typeChecker(
                propValue,
                i,
                componentName,
                location,
                propFullName + '[' + i + ']',
                ReactPropTypesSecret
              )
              if (error instanceof Error) {
                return error
              }
            }
            return null
          }
          return createChainableTypeChecker(validate)
        }

        function createElementTypeChecker() {
          function validate(
            props,
            propName,
            componentName,
            location,
            propFullName
          ) {
            var propValue = props[propName]
            if (!isValidElement(propValue)) {
              var propType = getPropType(propValue)
              return new PropTypeError(
                'Invalid ' +
                  location +
                  ' `' +
                  propFullName +
                  '` of type ' +
                  ('`' +
                    propType +
                    '` supplied to `' +
                    componentName +
                    '`, expected a single ReactElement.')
              )
            }
            return null
          }
          return createChainableTypeChecker(validate)
        }

        function createInstanceTypeChecker(expectedClass) {
          function validate(
            props,
            propName,
            componentName,
            location,
            propFullName
          ) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS
              var actualClassName = getClassName(props[propName])
              return new PropTypeError(
                'Invalid ' +
                  location +
                  ' `' +
                  propFullName +
                  '` of type ' +
                  ('`' +
                    actualClassName +
                    '` supplied to `' +
                    componentName +
                    '`, expected ') +
                  ('instance of `' + expectedClassName + '`.')
              )
            }
            return null
          }
          return createChainableTypeChecker(validate)
        }

        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            true
              ? warning(
                  false,
                  'Invalid argument supplied to oneOf, expected an instance of array.'
                )
              : void 0
            return emptyFunction.thatReturnsNull
          }

          function validate(
            props,
            propName,
            componentName,
            location,
            propFullName
          ) {
            var propValue = props[propName]
            for (var i = 0; i < expectedValues.length; i++) {
              if (is(propValue, expectedValues[i])) {
                return null
              }
            }

            var valuesString = JSON.stringify(expectedValues)
            return new PropTypeError(
              'Invalid ' +
                location +
                ' `' +
                propFullName +
                '` of value `' +
                propValue +
                '` ' +
                ('supplied to `' +
                  componentName +
                  '`, expected one of ' +
                  valuesString +
                  '.')
            )
          }
          return createChainableTypeChecker(validate)
        }

        function createObjectOfTypeChecker(typeChecker) {
          function validate(
            props,
            propName,
            componentName,
            location,
            propFullName
          ) {
            if (typeof typeChecker !== 'function') {
              return new PropTypeError(
                'Property `' +
                  propFullName +
                  '` of component `' +
                  componentName +
                  '` has invalid PropType notation inside objectOf.'
              )
            }
            var propValue = props[propName]
            var propType = getPropType(propValue)
            if (propType !== 'object') {
              return new PropTypeError(
                'Invalid ' +
                  location +
                  ' `' +
                  propFullName +
                  '` of type ' +
                  ('`' +
                    propType +
                    '` supplied to `' +
                    componentName +
                    '`, expected an object.')
              )
            }
            for (var key in propValue) {
              if (propValue.hasOwnProperty(key)) {
                var error = typeChecker(
                  propValue,
                  key,
                  componentName,
                  location,
                  propFullName + '.' + key,
                  ReactPropTypesSecret
                )
                if (error instanceof Error) {
                  return error
                }
              }
            }
            return null
          }
          return createChainableTypeChecker(validate)
        }

        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true
              ? warning(
                  false,
                  'Invalid argument supplied to oneOfType, expected an instance of array.'
                )
              : void 0
            return emptyFunction.thatReturnsNull
          }

          for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
            var checker = arrayOfTypeCheckers[i]
            if (typeof checker !== 'function') {
              warning(
                false,
                'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
                  'received %s at index %s.',
                getPostfixForTypeWarning(checker),
                i
              )
              return emptyFunction.thatReturnsNull
            }
          }

          function validate(
            props,
            propName,
            componentName,
            location,
            propFullName
          ) {
            for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
              var checker = arrayOfTypeCheckers[i]
              if (
                checker(
                  props,
                  propName,
                  componentName,
                  location,
                  propFullName,
                  ReactPropTypesSecret
                ) == null
              ) {
                return null
              }
            }

            return new PropTypeError(
              'Invalid ' +
                location +
                ' `' +
                propFullName +
                '` supplied to ' +
                ('`' + componentName + '`.')
            )
          }
          return createChainableTypeChecker(validate)
        }

        function createNodeChecker() {
          function validate(
            props,
            propName,
            componentName,
            location,
            propFullName
          ) {
            if (!isNode(props[propName])) {
              return new PropTypeError(
                'Invalid ' +
                  location +
                  ' `' +
                  propFullName +
                  '` supplied to ' +
                  ('`' + componentName + '`, expected a ReactNode.')
              )
            }
            return null
          }
          return createChainableTypeChecker(validate)
        }

        function createShapeTypeChecker(shapeTypes) {
          function validate(
            props,
            propName,
            componentName,
            location,
            propFullName
          ) {
            var propValue = props[propName]
            var propType = getPropType(propValue)
            if (propType !== 'object') {
              return new PropTypeError(
                'Invalid ' +
                  location +
                  ' `' +
                  propFullName +
                  '` of type `' +
                  propType +
                  '` ' +
                  ('supplied to `' + componentName + '`, expected `object`.')
              )
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key]
              if (!checker) {
                continue
              }
              var error = checker(
                propValue,
                key,
                componentName,
                location,
                propFullName + '.' + key,
                ReactPropTypesSecret
              )
              if (error) {
                return error
              }
            }
            return null
          }
          return createChainableTypeChecker(validate)
        }

        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(
            props,
            propName,
            componentName,
            location,
            propFullName
          ) {
            var propValue = props[propName]
            var propType = getPropType(propValue)
            if (propType !== 'object') {
              return new PropTypeError(
                'Invalid ' +
                  location +
                  ' `' +
                  propFullName +
                  '` of type `' +
                  propType +
                  '` ' +
                  ('supplied to `' + componentName + '`, expected `object`.')
              )
            }
            // We need to check all keys in case some are required but missing from
            // props.
            var allKeys = assign({}, props[propName], shapeTypes)
            for (var key in allKeys) {
              var checker = shapeTypes[key]
              if (!checker) {
                return new PropTypeError(
                  'Invalid ' +
                    location +
                    ' `' +
                    propFullName +
                    '` key `' +
                    key +
                    '` supplied to `' +
                    componentName +
                    '`.' +
                    '\nBad object: ' +
                    JSON.stringify(props[propName], null, '  ') +
                    '\nValid keys: ' +
                    JSON.stringify(Object.keys(shapeTypes), null, '  ')
                )
              }
              var error = checker(
                propValue,
                key,
                componentName,
                location,
                propFullName + '.' + key,
                ReactPropTypesSecret
              )
              if (error) {
                return error
              }
            }
            return null
          }

          return createChainableTypeChecker(validate)
        }

        function isNode(propValue) {
          switch (typeof propValue) {
            case 'number':
            case 'string':
            case 'undefined':
              return true
            case 'boolean':
              return !propValue
            case 'object':
              if (Array.isArray(propValue)) {
                return propValue.every(isNode)
              }
              if (propValue === null || isValidElement(propValue)) {
                return true
              }

              var iteratorFn = getIteratorFn(propValue)
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue)
                var step
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode(step.value)) {
                      return false
                    }
                  }
                } else {
                  // Iterator will provide entry [k,v] tuples rather than values.
                  while (!(step = iterator.next()).done) {
                    var entry = step.value
                    if (entry) {
                      if (!isNode(entry[1])) {
                        return false
                      }
                    }
                  }
                }
              } else {
                return false
              }

              return true
            default:
              return false
          }
        }

        function isSymbol(propType, propValue) {
          // Native Symbol.
          if (propType === 'symbol') {
            return true
          }

          // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
          if (propValue['@@toStringTag'] === 'Symbol') {
            return true
          }

          // Fallback for non-spec compliant Symbols which are polyfilled.
          if (typeof Symbol === 'function' && propValue instanceof Symbol) {
            return true
          }

          return false
        }

        // Equivalent of `typeof` but with special handling for array and regexp.
        function getPropType(propValue) {
          var propType = typeof propValue
          if (Array.isArray(propValue)) {
            return 'array'
          }
          if (propValue instanceof RegExp) {
            // Old webkits (at least until Android 4.0) return 'function' rather than
            // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
            // passes PropTypes.object.
            return 'object'
          }
          if (isSymbol(propType, propValue)) {
            return 'symbol'
          }
          return propType
        }

        // This handles more types than `getPropType`. Only used for error messages.
        // See `createPrimitiveTypeChecker`.
        function getPreciseType(propValue) {
          if (typeof propValue === 'undefined' || propValue === null) {
            return '' + propValue
          }
          var propType = getPropType(propValue)
          if (propType === 'object') {
            if (propValue instanceof Date) {
              return 'date'
            } else if (propValue instanceof RegExp) {
              return 'regexp'
            }
          }
          return propType
        }

        // Returns a string that is postfixed to a warning about an invalid type.
        // For example, "undefined" or "of type array"
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value)
          switch (type) {
            case 'array':
            case 'object':
              return 'an ' + type
            case 'boolean':
            case 'date':
            case 'regexp':
              return 'a ' + type
            default:
              return type
          }
        }

        // Returns class name of the object, if any.
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS
          }
          return propValue.constructor.name
        }

        ReactPropTypes.checkPropTypes = checkPropTypes
        ReactPropTypes.PropTypes = ReactPropTypes

        return ReactPropTypes
      }

      /***/
    },
    /* 106 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _typeof =
        typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
          ? function(obj) {
              return typeof obj
            }
          : function(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj
            }

      var _extends =
        Object.assign ||
        function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i]
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key]
              }
            }
          }
          return target
        }

      var _warning = __webpack_require__(3)

      var _warning2 = _interopRequireDefault(_warning)

      var _PathUtils = __webpack_require__(22)

      var _LocationUtils = __webpack_require__(107)

      var _createTransitionManager = __webpack_require__(108)

      var _createTransitionManager2 = _interopRequireDefault(
        _createTransitionManager
      )

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      var clamp = function clamp(n, lowerBound, upperBound) {
        return Math.min(Math.max(n, lowerBound), upperBound)
      }

      /**
       * Creates a history object that stores locations in memory.
       */
      var createMemoryHistory = function createMemoryHistory() {
        var props =
          arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}
        var getUserConfirmation = props.getUserConfirmation,
          _props$initialEntries = props.initialEntries,
          initialEntries =
            _props$initialEntries === undefined ? ['/'] : _props$initialEntries,
          _props$initialIndex = props.initialIndex,
          initialIndex =
            _props$initialIndex === undefined ? 0 : _props$initialIndex,
          _props$keyLength = props.keyLength,
          keyLength = _props$keyLength === undefined ? 6 : _props$keyLength

        var transitionManager = (0, _createTransitionManager2.default)()

        var setState = function setState(nextState) {
          _extends(history, nextState)

          history.length = history.entries.length

          transitionManager.notifyListeners(history.location, history.action)
        }

        var createKey = function createKey() {
          return Math.random()
            .toString(36)
            .substr(2, keyLength)
        }

        var index = clamp(initialIndex, 0, initialEntries.length - 1)
        var entries = initialEntries.map(function(entry) {
          return typeof entry === 'string'
            ? (0, _LocationUtils.createLocation)(entry, undefined, createKey())
            : (0, _LocationUtils.createLocation)(
                entry,
                undefined,
                entry.key || createKey()
              )
        })

        // Public interface

        var createHref = _PathUtils.createPath

        var push = function push(path, state) {
          ;(0, _warning2.default)(
            !(
              (typeof path === 'undefined' ? 'undefined' : _typeof(path)) ===
                'object' &&
              path.state !== undefined &&
              state !== undefined
            ),
            'You should avoid providing a 2nd state argument to push when the 1st ' +
              'argument is a location-like object that already has state; it is ignored'
          )

          var action = 'PUSH'
          var location = (0, _LocationUtils.createLocation)(
            path,
            state,
            createKey(),
            history.location
          )

          transitionManager.confirmTransitionTo(
            location,
            action,
            getUserConfirmation,
            function(ok) {
              if (!ok) return

              var prevIndex = history.index
              var nextIndex = prevIndex + 1

              var nextEntries = history.entries.slice(0)
              if (nextEntries.length > nextIndex) {
                nextEntries.splice(
                  nextIndex,
                  nextEntries.length - nextIndex,
                  location
                )
              } else {
                nextEntries.push(location)
              }

              setState({
                action: action,
                location: location,
                index: nextIndex,
                entries: nextEntries,
              })
            }
          )
        }

        var replace = function replace(path, state) {
          ;(0, _warning2.default)(
            !(
              (typeof path === 'undefined' ? 'undefined' : _typeof(path)) ===
                'object' &&
              path.state !== undefined &&
              state !== undefined
            ),
            'You should avoid providing a 2nd state argument to replace when the 1st ' +
              'argument is a location-like object that already has state; it is ignored'
          )

          var action = 'REPLACE'
          var location = (0, _LocationUtils.createLocation)(
            path,
            state,
            createKey(),
            history.location
          )

          transitionManager.confirmTransitionTo(
            location,
            action,
            getUserConfirmation,
            function(ok) {
              if (!ok) return

              history.entries[history.index] = location

              setState({ action: action, location: location })
            }
          )
        }

        var go = function go(n) {
          var nextIndex = clamp(
            history.index + n,
            0,
            history.entries.length - 1
          )

          var action = 'POP'
          var location = history.entries[nextIndex]

          transitionManager.confirmTransitionTo(
            location,
            action,
            getUserConfirmation,
            function(ok) {
              if (ok) {
                setState({
                  action: action,
                  location: location,
                  index: nextIndex,
                })
              } else {
                // Mimic the behavior of DOM histories by
                // causing a render after a cancelled POP.
                setState()
              }
            }
          )
        }

        var goBack = function goBack() {
          return go(-1)
        }

        var goForward = function goForward() {
          return go(1)
        }

        var canGo = function canGo(n) {
          var nextIndex = history.index + n
          return nextIndex >= 0 && nextIndex < history.entries.length
        }

        var block = function block() {
          var prompt =
            arguments.length > 0 && arguments[0] !== undefined
              ? arguments[0]
              : false
          return transitionManager.setPrompt(prompt)
        }

        var listen = function listen(listener) {
          return transitionManager.appendListener(listener)
        }

        var history = {
          length: entries.length,
          action: 'POP',
          location: entries[index],
          index: index,
          entries: entries,
          createHref: createHref,
          push: push,
          replace: replace,
          go: go,
          goBack: goBack,
          goForward: goForward,
          canGo: canGo,
          block: block,
          listen: listen,
        }

        return history
      }

      exports.default = createMemoryHistory

      /***/
    },
    /* 107 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true
      exports.locationsAreEqual = exports.createLocation = undefined

      var _extends =
        Object.assign ||
        function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i]
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key]
              }
            }
          }
          return target
        }

      var _resolvePathname = __webpack_require__(40)

      var _resolvePathname2 = _interopRequireDefault(_resolvePathname)

      var _valueEqual = __webpack_require__(41)

      var _valueEqual2 = _interopRequireDefault(_valueEqual)

      var _PathUtils = __webpack_require__(22)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      var createLocation = (exports.createLocation = function createLocation(
        path,
        state,
        key,
        currentLocation
      ) {
        var location = void 0
        if (typeof path === 'string') {
          // Two-arg form: push(path, state)
          location = (0, _PathUtils.parsePath)(path)
          location.state = state
        } else {
          // One-arg form: push(location)
          location = _extends({}, path)

          if (location.pathname === undefined) location.pathname = ''

          if (location.search) {
            if (location.search.charAt(0) !== '?')
              location.search = '?' + location.search
          } else {
            location.search = ''
          }

          if (location.hash) {
            if (location.hash.charAt(0) !== '#')
              location.hash = '#' + location.hash
          } else {
            location.hash = ''
          }

          if (state !== undefined && location.state === undefined)
            location.state = state
        }

        try {
          location.pathname = decodeURI(location.pathname)
        } catch (e) {
          if (e instanceof URIError) {
            throw new URIError(
              'Pathname "' +
                location.pathname +
                '" could not be decoded. ' +
                'This is likely caused by an invalid percent-encoding.'
            )
          } else {
            throw e
          }
        }

        if (key) location.key = key

        if (currentLocation) {
          // Resolve incomplete/relative pathname relative to current location.
          if (!location.pathname) {
            location.pathname = currentLocation.pathname
          } else if (location.pathname.charAt(0) !== '/') {
            location.pathname = (0, _resolvePathname2.default)(
              location.pathname,
              currentLocation.pathname
            )
          }
        } else {
          // When there is no prior location and pathname is empty, set it to /
          if (!location.pathname) {
            location.pathname = '/'
          }
        }

        return location
      })

      var locationsAreEqual = (exports.locationsAreEqual = function locationsAreEqual(
        a,
        b
      ) {
        return (
          a.pathname === b.pathname &&
          a.search === b.search &&
          a.hash === b.hash &&
          a.key === b.key &&
          (0, _valueEqual2.default)(a.state, b.state)
        )
      })

      /***/
    },
    /* 108 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _warning = __webpack_require__(3)

      var _warning2 = _interopRequireDefault(_warning)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      var createTransitionManager = function createTransitionManager() {
        var prompt = null

        var setPrompt = function setPrompt(nextPrompt) {
          ;(0, _warning2.default)(
            prompt == null,
            'A history supports only one prompt at a time'
          )

          prompt = nextPrompt

          return function() {
            if (prompt === nextPrompt) prompt = null
          }
        }

        var confirmTransitionTo = function confirmTransitionTo(
          location,
          action,
          getUserConfirmation,
          callback
        ) {
          // TODO: If another transition starts while we're still confirming
          // the previous one, we may end up in a weird state. Figure out the
          // best way to handle this.
          if (prompt != null) {
            var result =
              typeof prompt === 'function' ? prompt(location, action) : prompt

            if (typeof result === 'string') {
              if (typeof getUserConfirmation === 'function') {
                getUserConfirmation(result, callback)
              } else {
                ;(0, _warning2.default)(
                  false,
                  'A history needs a getUserConfirmation function in order to use a prompt message'
                )

                callback(true)
              }
            } else {
              // Return false from a transition hook to cancel the transition.
              callback(result !== false)
            }
          } else {
            callback(true)
          }
        }

        var listeners = []

        var appendListener = function appendListener(fn) {
          var isActive = true

          var listener = function listener() {
            if (isActive) fn.apply(undefined, arguments)
          }

          listeners.push(listener)

          return function() {
            isActive = false
            listeners = listeners.filter(function(item) {
              return item !== listener
            })
          }
        }

        var notifyListeners = function notifyListeners() {
          for (
            var _len = arguments.length, args = Array(_len), _key = 0;
            _key < _len;
            _key++
          ) {
            args[_key] = arguments[_key]
          }

          listeners.forEach(function(listener) {
            return listener.apply(undefined, args)
          })
        }

        return {
          setPrompt: setPrompt,
          confirmTransitionTo: confirmTransitionTo,
          appendListener: appendListener,
          notifyListeners: notifyListeners,
        }
      }

      exports.default = createTransitionManager

      /***/
    },
    /* 109 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(
        1
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_0_react__
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(
        0
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_1_prop_types__
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_invariant__ = __webpack_require__(
        7
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_invariant___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_2_invariant__
      )
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError('Cannot call a class as a function')
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          )
        }
        return call && (typeof call === 'object' || typeof call === 'function')
          ? call
          : self
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== 'function' && superClass !== null) {
          throw new TypeError(
            'Super expression must either be null or a function, not ' +
              typeof superClass
          )
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true,
          },
        })
        if (superClass)
          Object.setPrototypeOf
            ? Object.setPrototypeOf(subClass, superClass)
            : (subClass.__proto__ = superClass)
      }

      /**
       * The public API for prompting the user before navigating away
       * from a screen with a component.
       */

      var Prompt = (function(_React$Component) {
        _inherits(Prompt, _React$Component)

        function Prompt() {
          _classCallCheck(this, Prompt)

          return _possibleConstructorReturn(
            this,
            _React$Component.apply(this, arguments)
          )
        }

        Prompt.prototype.enable = function enable(message) {
          if (this.unblock) this.unblock()

          this.unblock = this.context.router.history.block(message)
        }

        Prompt.prototype.disable = function disable() {
          if (this.unblock) {
            this.unblock()
            this.unblock = null
          }
        }

        Prompt.prototype.componentWillMount = function componentWillMount() {
          __WEBPACK_IMPORTED_MODULE_2_invariant___default()(
            this.context.router,
            'You should not use <Prompt> outside a <Router>'
          )

          if (this.props.when) this.enable(this.props.message)
        }

        Prompt.prototype.componentWillReceiveProps = function componentWillReceiveProps(
          nextProps
        ) {
          if (nextProps.when) {
            if (!this.props.when || this.props.message !== nextProps.message)
              this.enable(nextProps.message)
          } else {
            this.disable()
          }
        }

        Prompt.prototype.componentWillUnmount = function componentWillUnmount() {
          this.disable()
        }

        Prompt.prototype.render = function render() {
          return null
        }

        return Prompt
      })(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component)

      Prompt.propTypes = {
        when: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.bool,
        message: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.oneOfType([
          __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func,
          __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string,
        ]).isRequired,
      }
      Prompt.defaultProps = {
        when: true,
      }
      Prompt.contextTypes = {
        router: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
          history: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
            block:
              __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func
                .isRequired,
          }).isRequired,
        }).isRequired,
      }

      /* harmony default export */ __webpack_exports__['a'] = Prompt

      /***/
    },
    /* 110 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(
        1
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_0_react__
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(
        0
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_1_prop_types__
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_warning__ = __webpack_require__(
        3
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_warning___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_2_warning__
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_invariant__ = __webpack_require__(
        7
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_invariant___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_3_invariant__
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_history__ = __webpack_require__(
        42
      )
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError('Cannot call a class as a function')
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          )
        }
        return call && (typeof call === 'object' || typeof call === 'function')
          ? call
          : self
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== 'function' && superClass !== null) {
          throw new TypeError(
            'Super expression must either be null or a function, not ' +
              typeof superClass
          )
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true,
          },
        })
        if (superClass)
          Object.setPrototypeOf
            ? Object.setPrototypeOf(subClass, superClass)
            : (subClass.__proto__ = superClass)
      }

      /**
       * The public API for updating the location programmatically
       * with a component.
       */

      var Redirect = (function(_React$Component) {
        _inherits(Redirect, _React$Component)

        function Redirect() {
          _classCallCheck(this, Redirect)

          return _possibleConstructorReturn(
            this,
            _React$Component.apply(this, arguments)
          )
        }

        Redirect.prototype.isStatic = function isStatic() {
          return this.context.router && this.context.router.staticContext
        }

        Redirect.prototype.componentWillMount = function componentWillMount() {
          __WEBPACK_IMPORTED_MODULE_3_invariant___default()(
            this.context.router,
            'You should not use <Redirect> outside a <Router>'
          )

          if (this.isStatic()) this.perform()
        }

        Redirect.prototype.componentDidMount = function componentDidMount() {
          if (!this.isStatic()) this.perform()
        }

        Redirect.prototype.componentDidUpdate = function componentDidUpdate(
          prevProps
        ) {
          var prevTo = Object(
            __WEBPACK_IMPORTED_MODULE_4_history__['createLocation']
          )(prevProps.to)
          var nextTo = Object(
            __WEBPACK_IMPORTED_MODULE_4_history__['createLocation']
          )(this.props.to)

          if (
            Object(__WEBPACK_IMPORTED_MODULE_4_history__['locationsAreEqual'])(
              prevTo,
              nextTo
            )
          ) {
            __WEBPACK_IMPORTED_MODULE_2_warning___default()(
              false,
              "You tried to redirect to the same route you're currently on: " +
                ('"' + nextTo.pathname + nextTo.search + '"')
            )
            return
          }

          this.perform()
        }

        Redirect.prototype.perform = function perform() {
          var history = this.context.router.history
          var _props = this.props,
            push = _props.push,
            to = _props.to

          if (push) {
            history.push(to)
          } else {
            history.replace(to)
          }
        }

        Redirect.prototype.render = function render() {
          return null
        }

        return Redirect
      })(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component)

      Redirect.propTypes = {
        push: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.bool,
        from: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string,
        to: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.oneOfType([
          __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string,
          __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object,
        ]).isRequired,
      }
      Redirect.defaultProps = {
        push: false,
      }
      Redirect.contextTypes = {
        router: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
          history: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
            push:
              __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func
                .isRequired,
            replace:
              __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func
                .isRequired,
          }).isRequired,
          staticContext:
            __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object,
        }).isRequired,
      }

      /* harmony default export */ __webpack_exports__['a'] = Redirect

      /***/
    },
    /* 111 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(
        3
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_0_warning__
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant__ = __webpack_require__(
        7
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_1_invariant__
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__LocationUtils__ = __webpack_require__(
        16
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__PathUtils__ = __webpack_require__(
        11
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__createTransitionManager__ = __webpack_require__(
        24
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__DOMUtils__ = __webpack_require__(
        43
      )
      var _typeof =
        typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
          ? function(obj) {
              return typeof obj
            }
          : function(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj
            }

      var _extends =
        Object.assign ||
        function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i]
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key]
              }
            }
          }
          return target
        }

      var PopStateEvent = 'popstate'
      var HashChangeEvent = 'hashchange'

      var getHistoryState = function getHistoryState() {
        try {
          return window.history.state || {}
        } catch (e) {
          // IE 11 sometimes throws when accessing window.history.state
          // See https://github.com/ReactTraining/history/pull/289
          return {}
        }
      }

      /**
       * Creates a history object that uses the HTML5 history API including
       * pushState, replaceState, and the popstate event.
       */
      var createBrowserHistory = function createBrowserHistory() {
        var props =
          arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}

        __WEBPACK_IMPORTED_MODULE_1_invariant___default()(
          __WEBPACK_IMPORTED_MODULE_5__DOMUtils__['b' /* canUseDOM */],
          'Browser history needs a DOM'
        )

        var globalHistory = window.history
        var canUseHistory = Object(
          __WEBPACK_IMPORTED_MODULE_5__DOMUtils__['g' /* supportsHistory */]
        )()
        var needsHashChangeListener = !Object(
          __WEBPACK_IMPORTED_MODULE_5__DOMUtils__[
            'h' /* supportsPopStateOnHashChange */
          ]
        )()

        var _props$forceRefresh = props.forceRefresh,
          forceRefresh =
            _props$forceRefresh === undefined ? false : _props$forceRefresh,
          _props$getUserConfirm = props.getUserConfirmation,
          getUserConfirmation =
            _props$getUserConfirm === undefined
              ? __WEBPACK_IMPORTED_MODULE_5__DOMUtils__[
                  'c' /* getConfirmation */
                ]
              : _props$getUserConfirm,
          _props$keyLength = props.keyLength,
          keyLength = _props$keyLength === undefined ? 6 : _props$keyLength

        var basename = props.basename
          ? Object(
              __WEBPACK_IMPORTED_MODULE_3__PathUtils__[
                'g' /* stripTrailingSlash */
              ]
            )(
              Object(
                __WEBPACK_IMPORTED_MODULE_3__PathUtils__[
                  'a' /* addLeadingSlash */
                ]
              )(props.basename)
            )
          : ''

        var getDOMLocation = function getDOMLocation(historyState) {
          var _ref = historyState || {},
            key = _ref.key,
            state = _ref.state

          var _window$location = window.location,
            pathname = _window$location.pathname,
            search = _window$location.search,
            hash = _window$location.hash

          var path = pathname + search + hash

          __WEBPACK_IMPORTED_MODULE_0_warning___default()(
            !basename ||
              Object(
                __WEBPACK_IMPORTED_MODULE_3__PathUtils__['c' /* hasBasename */]
              )(path, basename),
            'You are attempting to use a basename on a page whose URL path does not begin ' +
              'with the basename. Expected path "' +
              path +
              '" to begin with "' +
              basename +
              '".'
          )

          if (basename)
            path = Object(
              __WEBPACK_IMPORTED_MODULE_3__PathUtils__['e' /* stripBasename */]
            )(path, basename)

          return Object(
            __WEBPACK_IMPORTED_MODULE_2__LocationUtils__[
              'a' /* createLocation */
            ]
          )(path, state, key)
        }

        var createKey = function createKey() {
          return Math.random()
            .toString(36)
            .substr(2, keyLength)
        }

        var transitionManager = Object(
          __WEBPACK_IMPORTED_MODULE_4__createTransitionManager__[
            'a' /* default */
          ]
        )()

        var setState = function setState(nextState) {
          _extends(history, nextState)

          history.length = globalHistory.length

          transitionManager.notifyListeners(history.location, history.action)
        }

        var handlePopState = function handlePopState(event) {
          // Ignore extraneous popstate events in WebKit.
          if (
            Object(
              __WEBPACK_IMPORTED_MODULE_5__DOMUtils__[
                'd' /* isExtraneousPopstateEvent */
              ]
            )(event)
          )
            return

          handlePop(getDOMLocation(event.state))
        }

        var handleHashChange = function handleHashChange() {
          handlePop(getDOMLocation(getHistoryState()))
        }

        var forceNextPop = false

        var handlePop = function handlePop(location) {
          if (forceNextPop) {
            forceNextPop = false
            setState()
          } else {
            var action = 'POP'

            transitionManager.confirmTransitionTo(
              location,
              action,
              getUserConfirmation,
              function(ok) {
                if (ok) {
                  setState({ action: action, location: location })
                } else {
                  revertPop(location)
                }
              }
            )
          }
        }

        var revertPop = function revertPop(fromLocation) {
          var toLocation = history.location

          // TODO: We could probably make this more reliable by
          // keeping a list of keys we've seen in sessionStorage.
          // Instead, we just default to 0 for keys we don't know.

          var toIndex = allKeys.indexOf(toLocation.key)

          if (toIndex === -1) toIndex = 0

          var fromIndex = allKeys.indexOf(fromLocation.key)

          if (fromIndex === -1) fromIndex = 0

          var delta = toIndex - fromIndex

          if (delta) {
            forceNextPop = true
            go(delta)
          }
        }

        var initialLocation = getDOMLocation(getHistoryState())
        var allKeys = [initialLocation.key]

        // Public interface

        var createHref = function createHref(location) {
          return (
            basename +
            Object(
              __WEBPACK_IMPORTED_MODULE_3__PathUtils__['b' /* createPath */]
            )(location)
          )
        }

        var push = function push(path, state) {
          __WEBPACK_IMPORTED_MODULE_0_warning___default()(
            !(
              (typeof path === 'undefined' ? 'undefined' : _typeof(path)) ===
                'object' &&
              path.state !== undefined &&
              state !== undefined
            ),
            'You should avoid providing a 2nd state argument to push when the 1st ' +
              'argument is a location-like object that already has state; it is ignored'
          )

          var action = 'PUSH'
          var location = Object(
            __WEBPACK_IMPORTED_MODULE_2__LocationUtils__[
              'a' /* createLocation */
            ]
          )(path, state, createKey(), history.location)

          transitionManager.confirmTransitionTo(
            location,
            action,
            getUserConfirmation,
            function(ok) {
              if (!ok) return

              var href = createHref(location)
              var key = location.key,
                state = location.state

              if (canUseHistory) {
                globalHistory.pushState({ key: key, state: state }, null, href)

                if (forceRefresh) {
                  window.location.href = href
                } else {
                  var prevIndex = allKeys.indexOf(history.location.key)
                  var nextKeys = allKeys.slice(
                    0,
                    prevIndex === -1 ? 0 : prevIndex + 1
                  )

                  nextKeys.push(location.key)
                  allKeys = nextKeys

                  setState({ action: action, location: location })
                }
              } else {
                __WEBPACK_IMPORTED_MODULE_0_warning___default()(
                  state === undefined,
                  'Browser history cannot push state in browsers that do not support HTML5 history'
                )

                window.location.href = href
              }
            }
          )
        }

        var replace = function replace(path, state) {
          __WEBPACK_IMPORTED_MODULE_0_warning___default()(
            !(
              (typeof path === 'undefined' ? 'undefined' : _typeof(path)) ===
                'object' &&
              path.state !== undefined &&
              state !== undefined
            ),
            'You should avoid providing a 2nd state argument to replace when the 1st ' +
              'argument is a location-like object that already has state; it is ignored'
          )

          var action = 'REPLACE'
          var location = Object(
            __WEBPACK_IMPORTED_MODULE_2__LocationUtils__[
              'a' /* createLocation */
            ]
          )(path, state, createKey(), history.location)

          transitionManager.confirmTransitionTo(
            location,
            action,
            getUserConfirmation,
            function(ok) {
              if (!ok) return

              var href = createHref(location)
              var key = location.key,
                state = location.state

              if (canUseHistory) {
                globalHistory.replaceState(
                  { key: key, state: state },
                  null,
                  href
                )

                if (forceRefresh) {
                  window.location.replace(href)
                } else {
                  var prevIndex = allKeys.indexOf(history.location.key)

                  if (prevIndex !== -1) allKeys[prevIndex] = location.key

                  setState({ action: action, location: location })
                }
              } else {
                __WEBPACK_IMPORTED_MODULE_0_warning___default()(
                  state === undefined,
                  'Browser history cannot replace state in browsers that do not support HTML5 history'
                )

                window.location.replace(href)
              }
            }
          )
        }

        var go = function go(n) {
          globalHistory.go(n)
        }

        var goBack = function goBack() {
          return go(-1)
        }

        var goForward = function goForward() {
          return go(1)
        }

        var listenerCount = 0

        var checkDOMListeners = function checkDOMListeners(delta) {
          listenerCount += delta

          if (listenerCount === 1) {
            Object(
              __WEBPACK_IMPORTED_MODULE_5__DOMUtils__[
                'a' /* addEventListener */
              ]
            )(window, PopStateEvent, handlePopState)

            if (needsHashChangeListener)
              Object(
                __WEBPACK_IMPORTED_MODULE_5__DOMUtils__[
                  'a' /* addEventListener */
                ]
              )(window, HashChangeEvent, handleHashChange)
          } else if (listenerCount === 0) {
            Object(
              __WEBPACK_IMPORTED_MODULE_5__DOMUtils__[
                'e' /* removeEventListener */
              ]
            )(window, PopStateEvent, handlePopState)

            if (needsHashChangeListener)
              Object(
                __WEBPACK_IMPORTED_MODULE_5__DOMUtils__[
                  'e' /* removeEventListener */
                ]
              )(window, HashChangeEvent, handleHashChange)
          }
        }

        var isBlocked = false

        var block = function block() {
          var prompt =
            arguments.length > 0 && arguments[0] !== undefined
              ? arguments[0]
              : false

          var unblock = transitionManager.setPrompt(prompt)

          if (!isBlocked) {
            checkDOMListeners(1)
            isBlocked = true
          }

          return function() {
            if (isBlocked) {
              isBlocked = false
              checkDOMListeners(-1)
            }

            return unblock()
          }
        }

        var listen = function listen(listener) {
          var unlisten = transitionManager.appendListener(listener)
          checkDOMListeners(1)

          return function() {
            checkDOMListeners(-1)
            unlisten()
          }
        }

        var history = {
          length: globalHistory.length,
          action: 'POP',
          location: initialLocation,
          createHref: createHref,
          push: push,
          replace: replace,
          go: go,
          goBack: goBack,
          goForward: goForward,
          block: block,
          listen: listen,
        }

        return history
      }

      /* harmony default export */ __webpack_exports__[
        'a'
      ] = createBrowserHistory

      /***/
    },
    /* 112 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(
        3
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_0_warning__
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant__ = __webpack_require__(
        7
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_1_invariant__
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__LocationUtils__ = __webpack_require__(
        16
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__PathUtils__ = __webpack_require__(
        11
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__createTransitionManager__ = __webpack_require__(
        24
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__DOMUtils__ = __webpack_require__(
        43
      )
      var _extends =
        Object.assign ||
        function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i]
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key]
              }
            }
          }
          return target
        }

      var HashChangeEvent = 'hashchange'

      var HashPathCoders = {
        hashbang: {
          encodePath: function encodePath(path) {
            return path.charAt(0) === '!'
              ? path
              : '!/' +
                  Object(
                    __WEBPACK_IMPORTED_MODULE_3__PathUtils__[
                      'f' /* stripLeadingSlash */
                    ]
                  )(path)
          },
          decodePath: function decodePath(path) {
            return path.charAt(0) === '!' ? path.substr(1) : path
          },
        },
        noslash: {
          encodePath:
            __WEBPACK_IMPORTED_MODULE_3__PathUtils__[
              'f' /* stripLeadingSlash */
            ],
          decodePath:
            __WEBPACK_IMPORTED_MODULE_3__PathUtils__['a' /* addLeadingSlash */],
        },
        slash: {
          encodePath:
            __WEBPACK_IMPORTED_MODULE_3__PathUtils__['a' /* addLeadingSlash */],
          decodePath:
            __WEBPACK_IMPORTED_MODULE_3__PathUtils__['a' /* addLeadingSlash */],
        },
      }

      var getHashPath = function getHashPath() {
        // We can't use window.location.hash here because it's not
        // consistent across browsers - Firefox will pre-decode it!
        var href = window.location.href
        var hashIndex = href.indexOf('#')
        return hashIndex === -1 ? '' : href.substring(hashIndex + 1)
      }

      var pushHashPath = function pushHashPath(path) {
        return (window.location.hash = path)
      }

      var replaceHashPath = function replaceHashPath(path) {
        var hashIndex = window.location.href.indexOf('#')

        window.location.replace(
          window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) +
            '#' +
            path
        )
      }

      var createHashHistory = function createHashHistory() {
        var props =
          arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}

        __WEBPACK_IMPORTED_MODULE_1_invariant___default()(
          __WEBPACK_IMPORTED_MODULE_5__DOMUtils__['b' /* canUseDOM */],
          'Hash history needs a DOM'
        )

        var globalHistory = window.history
        var canGoWithoutReload = Object(
          __WEBPACK_IMPORTED_MODULE_5__DOMUtils__[
            'f' /* supportsGoWithoutReloadUsingHash */
          ]
        )()

        var _props$getUserConfirm = props.getUserConfirmation,
          getUserConfirmation =
            _props$getUserConfirm === undefined
              ? __WEBPACK_IMPORTED_MODULE_5__DOMUtils__[
                  'c' /* getConfirmation */
                ]
              : _props$getUserConfirm,
          _props$hashType = props.hashType,
          hashType = _props$hashType === undefined ? 'slash' : _props$hashType

        var basename = props.basename
          ? Object(
              __WEBPACK_IMPORTED_MODULE_3__PathUtils__[
                'g' /* stripTrailingSlash */
              ]
            )(
              Object(
                __WEBPACK_IMPORTED_MODULE_3__PathUtils__[
                  'a' /* addLeadingSlash */
                ]
              )(props.basename)
            )
          : ''

        var _HashPathCoders$hashT = HashPathCoders[hashType],
          encodePath = _HashPathCoders$hashT.encodePath,
          decodePath = _HashPathCoders$hashT.decodePath

        var getDOMLocation = function getDOMLocation() {
          var path = decodePath(getHashPath())

          __WEBPACK_IMPORTED_MODULE_0_warning___default()(
            !basename ||
              Object(
                __WEBPACK_IMPORTED_MODULE_3__PathUtils__['c' /* hasBasename */]
              )(path, basename),
            'You are attempting to use a basename on a page whose URL path does not begin ' +
              'with the basename. Expected path "' +
              path +
              '" to begin with "' +
              basename +
              '".'
          )

          if (basename)
            path = Object(
              __WEBPACK_IMPORTED_MODULE_3__PathUtils__['e' /* stripBasename */]
            )(path, basename)

          return Object(
            __WEBPACK_IMPORTED_MODULE_2__LocationUtils__[
              'a' /* createLocation */
            ]
          )(path)
        }

        var transitionManager = Object(
          __WEBPACK_IMPORTED_MODULE_4__createTransitionManager__[
            'a' /* default */
          ]
        )()

        var setState = function setState(nextState) {
          _extends(history, nextState)

          history.length = globalHistory.length

          transitionManager.notifyListeners(history.location, history.action)
        }

        var forceNextPop = false
        var ignorePath = null

        var handleHashChange = function handleHashChange() {
          var path = getHashPath()
          var encodedPath = encodePath(path)

          if (path !== encodedPath) {
            // Ensure we always have a properly-encoded hash.
            replaceHashPath(encodedPath)
          } else {
            var location = getDOMLocation()
            var prevLocation = history.location

            if (
              !forceNextPop &&
              Object(
                __WEBPACK_IMPORTED_MODULE_2__LocationUtils__[
                  'b' /* locationsAreEqual */
                ]
              )(prevLocation, location)
            )
              return // A hashchange doesn't always == location change.

            if (
              ignorePath ===
              Object(
                __WEBPACK_IMPORTED_MODULE_3__PathUtils__['b' /* createPath */]
              )(location)
            )
              return // Ignore this change; we already setState in push/replace.

            ignorePath = null

            handlePop(location)
          }
        }

        var handlePop = function handlePop(location) {
          if (forceNextPop) {
            forceNextPop = false
            setState()
          } else {
            var action = 'POP'

            transitionManager.confirmTransitionTo(
              location,
              action,
              getUserConfirmation,
              function(ok) {
                if (ok) {
                  setState({ action: action, location: location })
                } else {
                  revertPop(location)
                }
              }
            )
          }
        }

        var revertPop = function revertPop(fromLocation) {
          var toLocation = history.location

          // TODO: We could probably make this more reliable by
          // keeping a list of paths we've seen in sessionStorage.
          // Instead, we just default to 0 for paths we don't know.

          var toIndex = allPaths.lastIndexOf(
            Object(
              __WEBPACK_IMPORTED_MODULE_3__PathUtils__['b' /* createPath */]
            )(toLocation)
          )

          if (toIndex === -1) toIndex = 0

          var fromIndex = allPaths.lastIndexOf(
            Object(
              __WEBPACK_IMPORTED_MODULE_3__PathUtils__['b' /* createPath */]
            )(fromLocation)
          )

          if (fromIndex === -1) fromIndex = 0

          var delta = toIndex - fromIndex

          if (delta) {
            forceNextPop = true
            go(delta)
          }
        }

        // Ensure the hash is encoded properly before doing anything else.
        var path = getHashPath()
        var encodedPath = encodePath(path)

        if (path !== encodedPath) replaceHashPath(encodedPath)

        var initialLocation = getDOMLocation()
        var allPaths = [
          Object(
            __WEBPACK_IMPORTED_MODULE_3__PathUtils__['b' /* createPath */]
          )(initialLocation),
        ]

        // Public interface

        var createHref = function createHref(location) {
          return (
            '#' +
            encodePath(
              basename +
                Object(
                  __WEBPACK_IMPORTED_MODULE_3__PathUtils__['b' /* createPath */]
                )(location)
            )
          )
        }

        var push = function push(path, state) {
          __WEBPACK_IMPORTED_MODULE_0_warning___default()(
            state === undefined,
            'Hash history cannot push state; it is ignored'
          )

          var action = 'PUSH'
          var location = Object(
            __WEBPACK_IMPORTED_MODULE_2__LocationUtils__[
              'a' /* createLocation */
            ]
          )(path, undefined, undefined, history.location)

          transitionManager.confirmTransitionTo(
            location,
            action,
            getUserConfirmation,
            function(ok) {
              if (!ok) return

              var path = Object(
                __WEBPACK_IMPORTED_MODULE_3__PathUtils__['b' /* createPath */]
              )(location)
              var encodedPath = encodePath(basename + path)
              var hashChanged = getHashPath() !== encodedPath

              if (hashChanged) {
                // We cannot tell if a hashchange was caused by a PUSH, so we'd
                // rather setState here and ignore the hashchange. The caveat here
                // is that other hash histories in the page will consider it a POP.
                ignorePath = path
                pushHashPath(encodedPath)

                var prevIndex = allPaths.lastIndexOf(
                  Object(
                    __WEBPACK_IMPORTED_MODULE_3__PathUtils__[
                      'b' /* createPath */
                    ]
                  )(history.location)
                )
                var nextPaths = allPaths.slice(
                  0,
                  prevIndex === -1 ? 0 : prevIndex + 1
                )

                nextPaths.push(path)
                allPaths = nextPaths

                setState({ action: action, location: location })
              } else {
                __WEBPACK_IMPORTED_MODULE_0_warning___default()(
                  false,
                  'Hash history cannot PUSH the same path; a new entry will not be added to the history stack'
                )

                setState()
              }
            }
          )
        }

        var replace = function replace(path, state) {
          __WEBPACK_IMPORTED_MODULE_0_warning___default()(
            state === undefined,
            'Hash history cannot replace state; it is ignored'
          )

          var action = 'REPLACE'
          var location = Object(
            __WEBPACK_IMPORTED_MODULE_2__LocationUtils__[
              'a' /* createLocation */
            ]
          )(path, undefined, undefined, history.location)

          transitionManager.confirmTransitionTo(
            location,
            action,
            getUserConfirmation,
            function(ok) {
              if (!ok) return

              var path = Object(
                __WEBPACK_IMPORTED_MODULE_3__PathUtils__['b' /* createPath */]
              )(location)
              var encodedPath = encodePath(basename + path)
              var hashChanged = getHashPath() !== encodedPath

              if (hashChanged) {
                // We cannot tell if a hashchange was caused by a REPLACE, so we'd
                // rather setState here and ignore the hashchange. The caveat here
                // is that other hash histories in the page will consider it a POP.
                ignorePath = path
                replaceHashPath(encodedPath)
              }

              var prevIndex = allPaths.indexOf(
                Object(
                  __WEBPACK_IMPORTED_MODULE_3__PathUtils__['b' /* createPath */]
                )(history.location)
              )

              if (prevIndex !== -1) allPaths[prevIndex] = path

              setState({ action: action, location: location })
            }
          )
        }

        var go = function go(n) {
          __WEBPACK_IMPORTED_MODULE_0_warning___default()(
            canGoWithoutReload,
            'Hash history go(n) causes a full page reload in this browser'
          )

          globalHistory.go(n)
        }

        var goBack = function goBack() {
          return go(-1)
        }

        var goForward = function goForward() {
          return go(1)
        }

        var listenerCount = 0

        var checkDOMListeners = function checkDOMListeners(delta) {
          listenerCount += delta

          if (listenerCount === 1) {
            Object(
              __WEBPACK_IMPORTED_MODULE_5__DOMUtils__[
                'a' /* addEventListener */
              ]
            )(window, HashChangeEvent, handleHashChange)
          } else if (listenerCount === 0) {
            Object(
              __WEBPACK_IMPORTED_MODULE_5__DOMUtils__[
                'e' /* removeEventListener */
              ]
            )(window, HashChangeEvent, handleHashChange)
          }
        }

        var isBlocked = false

        var block = function block() {
          var prompt =
            arguments.length > 0 && arguments[0] !== undefined
              ? arguments[0]
              : false

          var unblock = transitionManager.setPrompt(prompt)

          if (!isBlocked) {
            checkDOMListeners(1)
            isBlocked = true
          }

          return function() {
            if (isBlocked) {
              isBlocked = false
              checkDOMListeners(-1)
            }

            return unblock()
          }
        }

        var listen = function listen(listener) {
          var unlisten = transitionManager.appendListener(listener)
          checkDOMListeners(1)

          return function() {
            checkDOMListeners(-1)
            unlisten()
          }
        }

        var history = {
          length: globalHistory.length,
          action: 'POP',
          location: initialLocation,
          createHref: createHref,
          push: push,
          replace: replace,
          go: go,
          goBack: goBack,
          goForward: goForward,
          block: block,
          listen: listen,
        }

        return history
      }

      /* harmony default export */ __webpack_exports__['a'] = createHashHistory

      /***/
    },
    /* 113 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(
        3
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_0_warning__
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__PathUtils__ = __webpack_require__(
        11
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__LocationUtils__ = __webpack_require__(
        16
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__createTransitionManager__ = __webpack_require__(
        24
      )
      var _typeof =
        typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
          ? function(obj) {
              return typeof obj
            }
          : function(obj) {
              return obj &&
                typeof Symbol === 'function' &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj
            }

      var _extends =
        Object.assign ||
        function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i]
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key]
              }
            }
          }
          return target
        }

      var clamp = function clamp(n, lowerBound, upperBound) {
        return Math.min(Math.max(n, lowerBound), upperBound)
      }

      /**
       * Creates a history object that stores locations in memory.
       */
      var createMemoryHistory = function createMemoryHistory() {
        var props =
          arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}
        var getUserConfirmation = props.getUserConfirmation,
          _props$initialEntries = props.initialEntries,
          initialEntries =
            _props$initialEntries === undefined ? ['/'] : _props$initialEntries,
          _props$initialIndex = props.initialIndex,
          initialIndex =
            _props$initialIndex === undefined ? 0 : _props$initialIndex,
          _props$keyLength = props.keyLength,
          keyLength = _props$keyLength === undefined ? 6 : _props$keyLength

        var transitionManager = Object(
          __WEBPACK_IMPORTED_MODULE_3__createTransitionManager__[
            'a' /* default */
          ]
        )()

        var setState = function setState(nextState) {
          _extends(history, nextState)

          history.length = history.entries.length

          transitionManager.notifyListeners(history.location, history.action)
        }

        var createKey = function createKey() {
          return Math.random()
            .toString(36)
            .substr(2, keyLength)
        }

        var index = clamp(initialIndex, 0, initialEntries.length - 1)
        var entries = initialEntries.map(function(entry) {
          return typeof entry === 'string'
            ? Object(
                __WEBPACK_IMPORTED_MODULE_2__LocationUtils__[
                  'a' /* createLocation */
                ]
              )(entry, undefined, createKey())
            : Object(
                __WEBPACK_IMPORTED_MODULE_2__LocationUtils__[
                  'a' /* createLocation */
                ]
              )(entry, undefined, entry.key || createKey())
        })

        // Public interface

        var createHref =
          __WEBPACK_IMPORTED_MODULE_1__PathUtils__['b' /* createPath */]

        var push = function push(path, state) {
          __WEBPACK_IMPORTED_MODULE_0_warning___default()(
            !(
              (typeof path === 'undefined' ? 'undefined' : _typeof(path)) ===
                'object' &&
              path.state !== undefined &&
              state !== undefined
            ),
            'You should avoid providing a 2nd state argument to push when the 1st ' +
              'argument is a location-like object that already has state; it is ignored'
          )

          var action = 'PUSH'
          var location = Object(
            __WEBPACK_IMPORTED_MODULE_2__LocationUtils__[
              'a' /* createLocation */
            ]
          )(path, state, createKey(), history.location)

          transitionManager.confirmTransitionTo(
            location,
            action,
            getUserConfirmation,
            function(ok) {
              if (!ok) return

              var prevIndex = history.index
              var nextIndex = prevIndex + 1

              var nextEntries = history.entries.slice(0)
              if (nextEntries.length > nextIndex) {
                nextEntries.splice(
                  nextIndex,
                  nextEntries.length - nextIndex,
                  location
                )
              } else {
                nextEntries.push(location)
              }

              setState({
                action: action,
                location: location,
                index: nextIndex,
                entries: nextEntries,
              })
            }
          )
        }

        var replace = function replace(path, state) {
          __WEBPACK_IMPORTED_MODULE_0_warning___default()(
            !(
              (typeof path === 'undefined' ? 'undefined' : _typeof(path)) ===
                'object' &&
              path.state !== undefined &&
              state !== undefined
            ),
            'You should avoid providing a 2nd state argument to replace when the 1st ' +
              'argument is a location-like object that already has state; it is ignored'
          )

          var action = 'REPLACE'
          var location = Object(
            __WEBPACK_IMPORTED_MODULE_2__LocationUtils__[
              'a' /* createLocation */
            ]
          )(path, state, createKey(), history.location)

          transitionManager.confirmTransitionTo(
            location,
            action,
            getUserConfirmation,
            function(ok) {
              if (!ok) return

              history.entries[history.index] = location

              setState({ action: action, location: location })
            }
          )
        }

        var go = function go(n) {
          var nextIndex = clamp(
            history.index + n,
            0,
            history.entries.length - 1
          )

          var action = 'POP'
          var location = history.entries[nextIndex]

          transitionManager.confirmTransitionTo(
            location,
            action,
            getUserConfirmation,
            function(ok) {
              if (ok) {
                setState({
                  action: action,
                  location: location,
                  index: nextIndex,
                })
              } else {
                // Mimic the behavior of DOM histories by
                // causing a render after a cancelled POP.
                setState()
              }
            }
          )
        }

        var goBack = function goBack() {
          return go(-1)
        }

        var goForward = function goForward() {
          return go(1)
        }

        var canGo = function canGo(n) {
          var nextIndex = history.index + n
          return nextIndex >= 0 && nextIndex < history.entries.length
        }

        var block = function block() {
          var prompt =
            arguments.length > 0 && arguments[0] !== undefined
              ? arguments[0]
              : false
          return transitionManager.setPrompt(prompt)
        }

        var listen = function listen(listener) {
          return transitionManager.appendListener(listener)
        }

        var history = {
          length: entries.length,
          action: 'POP',
          location: entries[index],
          index: index,
          entries: entries,
          createHref: createHref,
          push: push,
          replace: replace,
          go: go,
          goBack: goBack,
          goForward: goForward,
          canGo: canGo,
          block: block,
          listen: listen,
        }

        return history
      }

      /* harmony default export */ __webpack_exports__[
        'a'
      ] = createMemoryHistory

      /***/
    },
    /* 114 */
    /***/ function(module, exports, __webpack_require__) {
      var isarray = __webpack_require__(115)

      /**
       * Expose `pathToRegexp`.
       */
      module.exports = pathToRegexp
      module.exports.parse = parse
      module.exports.compile = compile
      module.exports.tokensToFunction = tokensToFunction
      module.exports.tokensToRegExp = tokensToRegExp

      /**
       * The main path matching regexp utility.
       *
       * @type {RegExp}
       */
      var PATH_REGEXP = new RegExp(
        [
          // Match escaped characters that would otherwise appear in future matches.
          // This allows the user to escape special characters that won't transform.
          '(\\\\.)',
          // Match Express-style parameters and un-named parameters with a prefix
          // and optional suffixes. Matches appear as:
          //
          // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
          // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
          // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
          '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))',
        ].join('|'),
        'g'
      )

      /**
       * Parse a string for the raw tokens.
       *
       * @param  {string}  str
       * @param  {Object=} options
       * @return {!Array}
       */
      function parse(str, options) {
        var tokens = []
        var key = 0
        var index = 0
        var path = ''
        var defaultDelimiter = (options && options.delimiter) || '/'
        var res

        while ((res = PATH_REGEXP.exec(str)) != null) {
          var m = res[0]
          var escaped = res[1]
          var offset = res.index
          path += str.slice(index, offset)
          index = offset + m.length

          // Ignore already escaped sequences.
          if (escaped) {
            path += escaped[1]
            continue
          }

          var next = str[index]
          var prefix = res[2]
          var name = res[3]
          var capture = res[4]
          var group = res[5]
          var modifier = res[6]
          var asterisk = res[7]

          // Push the current path onto the tokens.
          if (path) {
            tokens.push(path)
            path = ''
          }

          var partial = prefix != null && next != null && next !== prefix
          var repeat = modifier === '+' || modifier === '*'
          var optional = modifier === '?' || modifier === '*'
          var delimiter = res[2] || defaultDelimiter
          var pattern = capture || group

          tokens.push({
            name: name || key++,
            prefix: prefix || '',
            delimiter: delimiter,
            optional: optional,
            repeat: repeat,
            partial: partial,
            asterisk: !!asterisk,
            pattern: pattern
              ? escapeGroup(pattern)
              : asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?',
          })
        }

        // Match any characters still remaining.
        if (index < str.length) {
          path += str.substr(index)
        }

        // If the path exists, push it onto the end.
        if (path) {
          tokens.push(path)
        }

        return tokens
      }

      /**
       * Compile a string to a template function for the path.
       *
       * @param  {string}             str
       * @param  {Object=}            options
       * @return {!function(Object=, Object=)}
       */
      function compile(str, options) {
        return tokensToFunction(parse(str, options))
      }

      /**
       * Prettier encoding of URI path segments.
       *
       * @param  {string}
       * @return {string}
       */
      function encodeURIComponentPretty(str) {
        return encodeURI(str).replace(/[\/?#]/g, function(c) {
          return (
            '%' +
            c
              .charCodeAt(0)
              .toString(16)
              .toUpperCase()
          )
        })
      }

      /**
       * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
       *
       * @param  {string}
       * @return {string}
       */
      function encodeAsterisk(str) {
        return encodeURI(str).replace(/[?#]/g, function(c) {
          return (
            '%' +
            c
              .charCodeAt(0)
              .toString(16)
              .toUpperCase()
          )
        })
      }

      /**
       * Expose a method for transforming tokens into the path function.
       */
      function tokensToFunction(tokens) {
        // Compile all the tokens into regexps.
        var matches = new Array(tokens.length)

        // Compile all the patterns before compilation.
        for (var i = 0; i < tokens.length; i++) {
          if (typeof tokens[i] === 'object') {
            matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')
          }
        }

        return function(obj, opts) {
          var path = ''
          var data = obj || {}
          var options = opts || {}
          var encode = options.pretty
            ? encodeURIComponentPretty
            : encodeURIComponent

          for (var i = 0; i < tokens.length; i++) {
            var token = tokens[i]

            if (typeof token === 'string') {
              path += token

              continue
            }

            var value = data[token.name]
            var segment

            if (value == null) {
              if (token.optional) {
                // Prepend partial segment prefixes.
                if (token.partial) {
                  path += token.prefix
                }

                continue
              } else {
                throw new TypeError(
                  'Expected "' + token.name + '" to be defined'
                )
              }
            }

            if (isarray(value)) {
              if (!token.repeat) {
                throw new TypeError(
                  'Expected "' +
                    token.name +
                    '" to not repeat, but received `' +
                    JSON.stringify(value) +
                    '`'
                )
              }

              if (value.length === 0) {
                if (token.optional) {
                  continue
                } else {
                  throw new TypeError(
                    'Expected "' + token.name + '" to not be empty'
                  )
                }
              }

              for (var j = 0; j < value.length; j++) {
                segment = encode(value[j])

                if (!matches[i].test(segment)) {
                  throw new TypeError(
                    'Expected all "' +
                      token.name +
                      '" to match "' +
                      token.pattern +
                      '", but received `' +
                      JSON.stringify(segment) +
                      '`'
                  )
                }

                path += (j === 0 ? token.prefix : token.delimiter) + segment
              }

              continue
            }

            segment = token.asterisk ? encodeAsterisk(value) : encode(value)

            if (!matches[i].test(segment)) {
              throw new TypeError(
                'Expected "' +
                  token.name +
                  '" to match "' +
                  token.pattern +
                  '", but received "' +
                  segment +
                  '"'
              )
            }

            path += token.prefix + segment
          }

          return path
        }
      }

      /**
       * Escape a regular expression string.
       *
       * @param  {string} str
       * @return {string}
       */
      function escapeString(str) {
        return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1')
      }

      /**
       * Escape the capturing group by escaping special characters and meaning.
       *
       * @param  {string} group
       * @return {string}
       */
      function escapeGroup(group) {
        return group.replace(/([=!:$\/()])/g, '\\$1')
      }

      /**
       * Attach the keys as a property of the regexp.
       *
       * @param  {!RegExp} re
       * @param  {Array}   keys
       * @return {!RegExp}
       */
      function attachKeys(re, keys) {
        re.keys = keys
        return re
      }

      /**
       * Get the flags for a regexp from the options.
       *
       * @param  {Object} options
       * @return {string}
       */
      function flags(options) {
        return options.sensitive ? '' : 'i'
      }

      /**
       * Pull out keys from a regexp.
       *
       * @param  {!RegExp} path
       * @param  {!Array}  keys
       * @return {!RegExp}
       */
      function regexpToRegexp(path, keys) {
        // Use a negative lookahead to match only capturing groups.
        var groups = path.source.match(/\((?!\?)/g)

        if (groups) {
          for (var i = 0; i < groups.length; i++) {
            keys.push({
              name: i,
              prefix: null,
              delimiter: null,
              optional: false,
              repeat: false,
              partial: false,
              asterisk: false,
              pattern: null,
            })
          }
        }

        return attachKeys(path, keys)
      }

      /**
       * Transform an array into a regexp.
       *
       * @param  {!Array}  path
       * @param  {Array}   keys
       * @param  {!Object} options
       * @return {!RegExp}
       */
      function arrayToRegexp(path, keys, options) {
        var parts = []

        for (var i = 0; i < path.length; i++) {
          parts.push(pathToRegexp(path[i], keys, options).source)
        }

        var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))

        return attachKeys(regexp, keys)
      }

      /**
       * Create a path regexp from string input.
       *
       * @param  {string}  path
       * @param  {!Array}  keys
       * @param  {!Object} options
       * @return {!RegExp}
       */
      function stringToRegexp(path, keys, options) {
        return tokensToRegExp(parse(path, options), keys, options)
      }

      /**
       * Expose a function for taking tokens and returning a RegExp.
       *
       * @param  {!Array}          tokens
       * @param  {(Array|Object)=} keys
       * @param  {Object=}         options
       * @return {!RegExp}
       */
      function tokensToRegExp(tokens, keys, options) {
        if (!isarray(keys)) {
          options = /** @type {!Object} */ (keys || options)
          keys = []
        }

        options = options || {}

        var strict = options.strict
        var end = options.end !== false
        var route = ''

        // Iterate over the tokens and create our regexp string.
        for (var i = 0; i < tokens.length; i++) {
          var token = tokens[i]

          if (typeof token === 'string') {
            route += escapeString(token)
          } else {
            var prefix = escapeString(token.prefix)
            var capture = '(?:' + token.pattern + ')'

            keys.push(token)

            if (token.repeat) {
              capture += '(?:' + prefix + capture + ')*'
            }

            if (token.optional) {
              if (!token.partial) {
                capture = '(?:' + prefix + '(' + capture + '))?'
              } else {
                capture = prefix + '(' + capture + ')?'
              }
            } else {
              capture = prefix + '(' + capture + ')'
            }

            route += capture
          }
        }

        var delimiter = escapeString(options.delimiter || '/')
        var endsWithDelimiter = route.slice(-delimiter.length) === delimiter

        // In non-strict mode we allow a slash at the end of match. If the path to
        // match already ends with a slash, we remove it for consistency. The slash
        // is valid at the end of a path match, not in the middle. This is important
        // in non-ending mode, where "/test/" shouldn't match "/test//route".
        if (!strict) {
          route =
            (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) +
            '(?:' +
            delimiter +
            '(?=$))?'
        }

        if (end) {
          route += '$'
        } else {
          // In non-ending mode, we need the capturing groups to match as much as
          // possible by using a positive lookahead to the end or next path segment.
          route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'
        }

        return attachKeys(new RegExp('^' + route, flags(options)), keys)
      }

      /**
       * Normalize the given path string, returning a regular expression.
       *
       * An empty array can be passed in for the keys, which will hold the
       * placeholder key descriptions. For example, using `/user/:id`, `keys` will
       * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
       *
       * @param  {(string|RegExp|Array)} path
       * @param  {(Array|Object)=}       keys
       * @param  {Object=}               options
       * @return {!RegExp}
       */
      function pathToRegexp(path, keys, options) {
        if (!isarray(keys)) {
          options = /** @type {!Object} */ (keys || options)
          keys = []
        }

        options = options || {}

        if (path instanceof RegExp) {
          return regexpToRegexp(path, /** @type {!Array} */ (keys))
        }

        if (isarray(path)) {
          return arrayToRegexp(
            /** @type {!Array} */ (path),
            /** @type {!Array} */ (keys),
            options
          )
        }

        return stringToRegexp(
          /** @type {string} */ (path),
          /** @type {!Array} */ (keys),
          options
        )
      }

      /***/
    },
    /* 115 */
    /***/ function(module, exports) {
      module.exports =
        Array.isArray ||
        function(arr) {
          return Object.prototype.toString.call(arr) == '[object Array]'
        }

      /***/
    },
    /* 116 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(
        3
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_0_warning__
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant__ = __webpack_require__(
        7
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_1_invariant__
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react__ = __webpack_require__(
        1
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_2_react__
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types__ = __webpack_require__(
        0
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_3_prop_types__
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_history_PathUtils__ = __webpack_require__(
        22
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_history_PathUtils___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_4_history_PathUtils__
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Router__ = __webpack_require__(
        23
      )
      var _extends =
        Object.assign ||
        function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i]
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key]
              }
            }
          }
          return target
        }

      function _objectWithoutProperties(obj, keys) {
        var target = {}
        for (var i in obj) {
          if (keys.indexOf(i) >= 0) continue
          if (!Object.prototype.hasOwnProperty.call(obj, i)) continue
          target[i] = obj[i]
        }
        return target
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError('Cannot call a class as a function')
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          )
        }
        return call && (typeof call === 'object' || typeof call === 'function')
          ? call
          : self
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== 'function' && superClass !== null) {
          throw new TypeError(
            'Super expression must either be null or a function, not ' +
              typeof superClass
          )
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true,
          },
        })
        if (superClass)
          Object.setPrototypeOf
            ? Object.setPrototypeOf(subClass, superClass)
            : (subClass.__proto__ = superClass)
      }

      var normalizeLocation = function normalizeLocation(object) {
        var _object$pathname = object.pathname,
          pathname = _object$pathname === undefined ? '/' : _object$pathname,
          _object$search = object.search,
          search = _object$search === undefined ? '' : _object$search,
          _object$hash = object.hash,
          hash = _object$hash === undefined ? '' : _object$hash

        return {
          pathname: pathname,
          search: search === '?' ? '' : search,
          hash: hash === '#' ? '' : hash,
        }
      }

      var addBasename = function addBasename(basename, location) {
        if (!basename) return location

        return _extends({}, location, {
          pathname:
            Object(
              __WEBPACK_IMPORTED_MODULE_4_history_PathUtils__['addLeadingSlash']
            )(basename) + location.pathname,
        })
      }

      var stripBasename = function stripBasename(basename, location) {
        if (!basename) return location

        var base = Object(
          __WEBPACK_IMPORTED_MODULE_4_history_PathUtils__['addLeadingSlash']
        )(basename)

        if (location.pathname.indexOf(base) !== 0) return location

        return _extends({}, location, {
          pathname: location.pathname.substr(base.length),
        })
      }

      var createLocation = function createLocation(location) {
        return typeof location === 'string'
          ? Object(
              __WEBPACK_IMPORTED_MODULE_4_history_PathUtils__['parsePath']
            )(location)
          : normalizeLocation(location)
      }

      var createURL = function createURL(location) {
        return typeof location === 'string'
          ? location
          : Object(
              __WEBPACK_IMPORTED_MODULE_4_history_PathUtils__['createPath']
            )(location)
      }

      var staticHandler = function staticHandler(methodName) {
        return function() {
          __WEBPACK_IMPORTED_MODULE_1_invariant___default()(
            false,
            'You cannot %s with <StaticRouter>',
            methodName
          )
        }
      }

      var noop = function noop() {}

      /**
       * The public top-level API for a "static" <Router>, so-called because it
       * can't actually change the current location. Instead, it just records
       * location changes in a context object. Useful mainly in testing and
       * server-rendering scenarios.
       */

      var StaticRouter = (function(_React$Component) {
        _inherits(StaticRouter, _React$Component)

        function StaticRouter() {
          var _temp, _this, _ret

          _classCallCheck(this, StaticRouter)

          for (
            var _len = arguments.length, args = Array(_len), _key = 0;
            _key < _len;
            _key++
          ) {
            args[_key] = arguments[_key]
          }

          return (
            (_ret = ((_temp = ((_this = _possibleConstructorReturn(
              this,
              _React$Component.call.apply(_React$Component, [this].concat(args))
            )),
            _this)),
            (_this.createHref = function(path) {
              return Object(
                __WEBPACK_IMPORTED_MODULE_4_history_PathUtils__[
                  'addLeadingSlash'
                ]
              )(_this.props.basename + createURL(path))
            }),
            (_this.handlePush = function(location) {
              var _this$props = _this.props,
                basename = _this$props.basename,
                context = _this$props.context

              context.action = 'PUSH'
              context.location = addBasename(basename, createLocation(location))
              context.url = createURL(context.location)
            }),
            (_this.handleReplace = function(location) {
              var _this$props2 = _this.props,
                basename = _this$props2.basename,
                context = _this$props2.context

              context.action = 'REPLACE'
              context.location = addBasename(basename, createLocation(location))
              context.url = createURL(context.location)
            }),
            (_this.handleListen = function() {
              return noop
            }),
            (_this.handleBlock = function() {
              return noop
            }),
            _temp)),
            _possibleConstructorReturn(_this, _ret)
          )
        }

        StaticRouter.prototype.getChildContext = function getChildContext() {
          return {
            router: {
              staticContext: this.props.context,
            },
          }
        }

        StaticRouter.prototype.componentWillMount = function componentWillMount() {
          __WEBPACK_IMPORTED_MODULE_0_warning___default()(
            !this.props.history,
            '<StaticRouter> ignores the history prop. To use a custom history, ' +
              'use `import { Router }` instead of `import { StaticRouter as Router }`.'
          )
        }

        StaticRouter.prototype.render = function render() {
          var _props = this.props,
            basename = _props.basename,
            context = _props.context,
            location = _props.location,
            props = _objectWithoutProperties(_props, [
              'basename',
              'context',
              'location',
            ])

          var history = {
            createHref: this.createHref,
            action: 'POP',
            location: stripBasename(basename, createLocation(location)),
            push: this.handlePush,
            replace: this.handleReplace,
            go: staticHandler('go'),
            goBack: staticHandler('goBack'),
            goForward: staticHandler('goForward'),
            listen: this.handleListen,
            block: this.handleBlock,
          }

          return __WEBPACK_IMPORTED_MODULE_2_react___default.a.createElement(
            __WEBPACK_IMPORTED_MODULE_5__Router__['a' /* default */],
            _extends({}, props, { history: history })
          )
        }

        return StaticRouter
      })(__WEBPACK_IMPORTED_MODULE_2_react___default.a.Component)

      StaticRouter.propTypes = {
        basename: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.string,
        context:
          __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object.isRequired,
        location: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.oneOfType([
          __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.string,
          __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object,
        ]),
      }
      StaticRouter.defaultProps = {
        basename: '',
        location: '/',
      }
      StaticRouter.childContextTypes = {
        router:
          __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object.isRequired,
      }

      /* harmony default export */ __webpack_exports__['a'] = StaticRouter

      /***/
    },
    /* 117 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(
        1
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_0_react__
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(
        0
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_1_prop_types__
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_warning__ = __webpack_require__(
        3
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_warning___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_2_warning__
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_invariant__ = __webpack_require__(
        7
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_invariant___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_3_invariant__
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__matchPath__ = __webpack_require__(
        25
      )
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError('Cannot call a class as a function')
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          )
        }
        return call && (typeof call === 'object' || typeof call === 'function')
          ? call
          : self
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== 'function' && superClass !== null) {
          throw new TypeError(
            'Super expression must either be null or a function, not ' +
              typeof superClass
          )
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true,
          },
        })
        if (superClass)
          Object.setPrototypeOf
            ? Object.setPrototypeOf(subClass, superClass)
            : (subClass.__proto__ = superClass)
      }

      /**
       * The public API for rendering the first <Route> that matches.
       */

      var Switch = (function(_React$Component) {
        _inherits(Switch, _React$Component)

        function Switch() {
          _classCallCheck(this, Switch)

          return _possibleConstructorReturn(
            this,
            _React$Component.apply(this, arguments)
          )
        }

        Switch.prototype.componentWillMount = function componentWillMount() {
          __WEBPACK_IMPORTED_MODULE_3_invariant___default()(
            this.context.router,
            'You should not use <Switch> outside a <Router>'
          )
        }

        Switch.prototype.componentWillReceiveProps = function componentWillReceiveProps(
          nextProps
        ) {
          __WEBPACK_IMPORTED_MODULE_2_warning___default()(
            !(nextProps.location && !this.props.location),
            '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'
          )

          __WEBPACK_IMPORTED_MODULE_2_warning___default()(
            !(!nextProps.location && this.props.location),
            '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'
          )
        }

        Switch.prototype.render = function render() {
          var route = this.context.router.route
          var children = this.props.children

          var location = this.props.location || route.location

          var match = void 0,
            child = void 0
          __WEBPACK_IMPORTED_MODULE_0_react___default.a.Children.forEach(
            children,
            function(element) {
              if (
                !__WEBPACK_IMPORTED_MODULE_0_react___default.a.isValidElement(
                  element
                )
              )
                return

              var _element$props = element.props,
                pathProp = _element$props.path,
                exact = _element$props.exact,
                strict = _element$props.strict,
                sensitive = _element$props.sensitive,
                from = _element$props.from

              var path = pathProp || from

              if (match == null) {
                child = element
                match = path
                  ? Object(
                      __WEBPACK_IMPORTED_MODULE_4__matchPath__[
                        'a' /* default */
                      ]
                    )(location.pathname, {
                      path: path,
                      exact: exact,
                      strict: strict,
                      sensitive: sensitive,
                    })
                  : route.match
              }
            }
          )

          return match
            ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.cloneElement(
                child,
                { location: location, computedMatch: match }
              )
            : null
        }

        return Switch
      })(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component)

      Switch.contextTypes = {
        router: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
          route:
            __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object
              .isRequired,
        }).isRequired,
      }
      Switch.propTypes = {
        children: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.node,
        location: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object,
      }

      /* harmony default export */ __webpack_exports__['a'] = Switch

      /***/
    },
    /* 118 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(
        1
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_0_react__
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(
        0
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_1_prop_types__
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_hoist_non_react_statics__ = __webpack_require__(
        45
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_hoist_non_react_statics___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_2_hoist_non_react_statics__
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Route__ = __webpack_require__(
        44
      )
      var _extends =
        Object.assign ||
        function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i]
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key]
              }
            }
          }
          return target
        }

      function _objectWithoutProperties(obj, keys) {
        var target = {}
        for (var i in obj) {
          if (keys.indexOf(i) >= 0) continue
          if (!Object.prototype.hasOwnProperty.call(obj, i)) continue
          target[i] = obj[i]
        }
        return target
      }

      /**
       * A public higher-order component to access the imperative API
       */
      var withRouter = function withRouter(Component) {
        var C = function C(props) {
          var wrappedComponentRef = props.wrappedComponentRef,
            remainingProps = _objectWithoutProperties(props, [
              'wrappedComponentRef',
            ])

          return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(
            __WEBPACK_IMPORTED_MODULE_3__Route__['a' /* default */],
            {
              render: function render(routeComponentProps) {
                return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(
                  Component,
                  _extends({}, remainingProps, routeComponentProps, {
                    ref: wrappedComponentRef,
                  })
                )
              },
            }
          )
        }

        C.displayName =
          'withRouter(' + (Component.displayName || Component.name) + ')'
        C.WrappedComponent = Component
        C.propTypes = {
          wrappedComponentRef:
            __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func,
        }

        return __WEBPACK_IMPORTED_MODULE_2_hoist_non_react_statics___default()(
          C,
          Component
        )
      }

      /* harmony default export */ __webpack_exports__['a'] = withRouter

      /***/
    },
    /* 119 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'
      /* WEBPACK VAR INJECTION */
      ;(function(global) {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.__RewireAPI__ = exports.__ResetDependency__ = exports.__set__ = exports.__Rewire__ = exports.__GetDependency__ = exports.__get__ = undefined

        var _typeof =
          typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
            ? function(obj) {
                return typeof obj
              }
            : function(obj) {
                return obj &&
                  typeof Symbol === 'function' &&
                  obj.constructor === Symbol &&
                  obj !== Symbol.prototype
                  ? 'symbol'
                  : typeof obj
              }

        var _extends =
          Object.assign ||
          function(target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i]
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key]
                }
              }
            }
            return target
          }

        var _actions = __webpack_require__(17)

        var actions = _interopRequireWildcard(_actions)

        var _ConnectedRouter = __webpack_require__(120)

        var _ConnectedRouter2 = _interopRequireDefault(_ConnectedRouter)

        var _reducer = __webpack_require__(144)

        var _reducer2 = _interopRequireDefault(_reducer)

        var _middleware = __webpack_require__(145)

        var _middleware2 = _interopRequireDefault(_middleware)

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj
          } else {
            var newObj = {}
            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key))
                  newObj[key] = obj[key]
              }
            }
            newObj.default = obj
            return newObj
          }
        }

        var createAll = function createAll(structure) {
          return _extends({}, _get__('actions'), {
            ConnectedRouter: _get__('createConnectedRouter')(structure),
            connectRouter: _get__('createConnectRouter')(structure),
            routerMiddleware: _get__('routerMiddleware'),
          })
        }

        exports.default = _get__('createAll')

        function _getGlobalObject() {
          try {
            if (!!global) {
              return global
            }
          } catch (e) {
            try {
              if (!!window) {
                return window
              }
            } catch (e) {
              return this
            }
          }
        }

        var _RewireModuleId__ = null

        function _getRewireModuleId__() {
          if (_RewireModuleId__ === null) {
            var globalVariable = _getGlobalObject()

            if (!globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__) {
              globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__ = 0
            }

            _RewireModuleId__ = __$$GLOBAL_REWIRE_NEXT_MODULE_ID__++
          }

          return _RewireModuleId__
        }

        function _getRewireRegistry__() {
          var theGlobalVariable = _getGlobalObject()

          if (!theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__) {
            theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null)
          }

          return __$$GLOBAL_REWIRE_REGISTRY__
        }

        function _getRewiredData__() {
          var moduleId = _getRewireModuleId__()

          var registry = _getRewireRegistry__()

          var rewireData = registry[moduleId]

          if (!rewireData) {
            registry[moduleId] = Object.create(null)
            rewireData = registry[moduleId]
          }

          return rewireData
        }

        ;(function registerResetAll() {
          var theGlobalVariable = _getGlobalObject()

          if (!theGlobalVariable['__rewire_reset_all__']) {
            theGlobalVariable['__rewire_reset_all__'] = function() {
              theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(
                null
              )
            }
          }
        })()

        var INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__'
        var _RewireAPI__ = {}
        ;(function() {
          function addPropertyToAPIObject(name, value) {
            Object.defineProperty(_RewireAPI__, name, {
              value: value,
              enumerable: false,
              configurable: true,
            })
          }

          addPropertyToAPIObject('__get__', _get__)
          addPropertyToAPIObject('__GetDependency__', _get__)
          addPropertyToAPIObject('__Rewire__', _set__)
          addPropertyToAPIObject('__set__', _set__)
          addPropertyToAPIObject('__reset__', _reset__)
          addPropertyToAPIObject('__ResetDependency__', _reset__)
          addPropertyToAPIObject('__with__', _with__)
        })()

        function _get__(variableName) {
          var rewireData = _getRewiredData__()

          if (rewireData[variableName] === undefined) {
            return _get_original__(variableName)
          } else {
            var value = rewireData[variableName]

            if (value === INTENTIONAL_UNDEFINED) {
              return undefined
            } else {
              return value
            }
          }
        }

        function _get_original__(variableName) {
          switch (variableName) {
            case 'actions':
              return _filterWildcardImport__(actions)

            case 'createConnectedRouter':
              return _ConnectedRouter2.default

            case 'createConnectRouter':
              return _reducer2.default

            case 'routerMiddleware':
              return _middleware2.default

            case 'createAll':
              return createAll
          }

          return undefined
        }

        function _assign__(variableName, value) {
          var rewireData = _getRewiredData__()

          if (rewireData[variableName] === undefined) {
            return _set_original__(variableName, value)
          } else {
            return (rewireData[variableName] = value)
          }
        }

        function _set_original__(variableName, _value) {
          switch (variableName) {
          }

          return undefined
        }

        function _update_operation__(operation, variableName, prefix) {
          var oldValue = _get__(variableName)

          var newValue = operation === '++' ? oldValue + 1 : oldValue - 1

          _assign__(variableName, newValue)

          return prefix ? newValue : oldValue
        }

        function _set__(variableName, value) {
          var rewireData = _getRewiredData__()

          if (
            (typeof variableName === 'undefined'
              ? 'undefined'
              : _typeof(variableName)) === 'object'
          ) {
            Object.keys(variableName).forEach(function(name) {
              rewireData[name] = variableName[name]
            })
          } else {
            if (value === undefined) {
              rewireData[variableName] = INTENTIONAL_UNDEFINED
            } else {
              rewireData[variableName] = value
            }

            return function() {
              _reset__(variableName)
            }
          }
        }

        function _reset__(variableName) {
          var rewireData = _getRewiredData__()

          delete rewireData[variableName]

          if (Object.keys(rewireData).length == 0) {
            delete _getRewireRegistry__()[_getRewireModuleId__]
          }
        }

        function _with__(object) {
          var rewireData = _getRewiredData__()

          var rewiredVariableNames = Object.keys(object)
          var previousValues = {}

          function reset() {
            rewiredVariableNames.forEach(function(variableName) {
              rewireData[variableName] = previousValues[variableName]
            })
          }

          return function(callback) {
            rewiredVariableNames.forEach(function(variableName) {
              previousValues[variableName] = rewireData[variableName]
              rewireData[variableName] = object[variableName]
            })
            var result = callback()

            if (!!result && typeof result.then == 'function') {
              result.then(reset).catch(reset)
            } else {
              reset()
            }

            return result
          }
        }

        var _typeOfOriginalExport =
          typeof createAll === 'undefined' ? 'undefined' : _typeof(createAll)

        function addNonEnumerableProperty(name, value) {
          Object.defineProperty(createAll, name, {
            value: value,
            enumerable: false,
            configurable: true,
          })
        }

        if (
          (_typeOfOriginalExport === 'object' ||
            _typeOfOriginalExport === 'function') &&
          Object.isExtensible(createAll)
        ) {
          addNonEnumerableProperty('__get__', _get__)
          addNonEnumerableProperty('__GetDependency__', _get__)
          addNonEnumerableProperty('__Rewire__', _set__)
          addNonEnumerableProperty('__set__', _set__)
          addNonEnumerableProperty('__reset__', _reset__)
          addNonEnumerableProperty('__ResetDependency__', _reset__)
          addNonEnumerableProperty('__with__', _with__)
          addNonEnumerableProperty('__RewireAPI__', _RewireAPI__)
        }

        function _filterWildcardImport__() {
          var wildcardImport =
            arguments.length > 0 && arguments[0] !== undefined
              ? arguments[0]
              : {}
          var validPropertyNames = Object.keys(wildcardImport).filter(function(
            propertyName
          ) {
            return (
              propertyName !== '__get__' &&
              propertyName !== '__set__' &&
              propertyName !== '__reset__' &&
              propertyName !== '__with__' &&
              propertyName !== '__GetDependency__' &&
              propertyName !== '__Rewire__' &&
              propertyName !== '__ResetDependency__' &&
              propertyName !== '__RewireAPI__'
            )
          })
          return validPropertyNames.reduce(function(
            filteredWildcardImport,
            propertyName
          ) {
            filteredWildcardImport[propertyName] = wildcardImport[propertyName]
            return filteredWildcardImport
          },
          {})
        }

        exports.__get__ = _get__
        exports.__GetDependency__ = _get__
        exports.__Rewire__ = _set__
        exports.__set__ = _set__
        exports.__ResetDependency__ = _reset__
        exports.__RewireAPI__ = _RewireAPI__
        /* WEBPACK VAR INJECTION */
      }.call(exports, __webpack_require__(2)))

      /***/
    },
    /* 120 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'
      /* WEBPACK VAR INJECTION */
      ;(function(global) {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.__RewireAPI__ = exports.__ResetDependency__ = exports.__set__ = exports.__Rewire__ = exports.__GetDependency__ = exports.__get__ = undefined

        var _typeof =
          typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
            ? function(obj) {
                return typeof obj
              }
            : function(obj) {
                return obj &&
                  typeof Symbol === 'function' &&
                  obj.constructor === Symbol &&
                  obj !== Symbol.prototype
                  ? 'symbol'
                  : typeof obj
              }

        var _createClass = (function() {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i]
              descriptor.enumerable = descriptor.enumerable || false
              descriptor.configurable = true
              if ('value' in descriptor) descriptor.writable = true
              Object.defineProperty(target, descriptor.key, descriptor)
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps)
            if (staticProps) defineProperties(Constructor, staticProps)
            return Constructor
          }
        })()

        var _react = __webpack_require__(1)

        var _react2 = _interopRequireDefault(_react)

        var _propTypes = __webpack_require__(0)

        var _propTypes2 = _interopRequireDefault(_propTypes)

        var _reactRedux = __webpack_require__(18)

        var _reactRouter = __webpack_require__(39)

        var _actions = __webpack_require__(17)

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError('Cannot call a class as a function')
          }
        }

        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            )
          }
          return call &&
            (typeof call === 'object' || typeof call === 'function')
            ? call
            : self
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== 'function' && superClass !== null) {
            throw new TypeError(
              'Super expression must either be null or a function, not ' +
                typeof superClass
            )
          }
          subClass.prototype = Object.create(
            superClass && superClass.prototype,
            {
              constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            }
          )
          if (superClass)
            Object.setPrototypeOf
              ? Object.setPrototypeOf(subClass, superClass)
              : (subClass.__proto__ = superClass)
        }

        var createConnectedRouter = function createConnectedRouter(structure) {
          var getIn = structure.getIn,
            toJS = structure.toJS
          /*
   * ConnectedRouter listens to a history object passed from props.
   * When history is changed, it dispatches action to redux store.
   * Then, store will pass props to component to render.
   * This creates uni-directional flow from history->store->router->components.
   */

          var ConnectedRouter = (function(_get__2) {
            _inherits(ConnectedRouter, _get__2)

            function ConnectedRouter(props, context) {
              _classCallCheck(this, ConnectedRouter)

              var _this = _possibleConstructorReturn(
                this,
                (
                  ConnectedRouter.__proto__ ||
                  Object.getPrototypeOf(ConnectedRouter)
                ).call(this, props)
              )

              _this.inTimeTravelling = false

              // Subscribe to store changes
              _this.unsubscribe = context.store.subscribe(function() {
                // Extract store's location
                var _toJS = toJS(
                    getIn(context.store.getState(), ['router', 'location'])
                  ),
                  pathnameInStore = _toJS.pathname,
                  searchInStore = _toJS.search,
                  hashInStore = _toJS.hash
                // Extract history's location

                var _props$history$locati = props.history.location,
                  pathnameInHistory = _props$history$locati.pathname,
                  searchInHistory = _props$history$locati.search,
                  hashInHistory = _props$history$locati.hash

                // If we do time travelling, the location in store is changed but location in history is not changed

                if (
                  pathnameInHistory !== pathnameInStore ||
                  searchInHistory !== searchInStore ||
                  hashInHistory !== hashInStore
                ) {
                  _this.inTimeTravelling = true
                  // Update history's location to match store's location
                  props.history.push({
                    pathname: pathnameInStore,
                    search: searchInStore,
                    hash: hashInStore,
                  })
                }
              })

              // Listen to history changes
              _this.unlisten = props.history.listen(function(location, action) {
                // Dispatch onLocationChanged except when we're in time travelling
                if (!_this.inTimeTravelling) {
                  props.onLocationChanged(location, action)
                } else {
                  _this.inTimeTravelling = false
                }
              })
              return _this
            }

            _createClass(ConnectedRouter, [
              {
                key: 'componentWillUnmount',
                value: function componentWillUnmount() {
                  this.unlisten()
                  this.unsubscribe()
                },
              },
              {
                key: 'render',
                value: function render() {
                  var _props = this.props,
                    history = _props.history,
                    children = _props.children

                  return _get__('React').createElement(
                    _get__('Router'),
                    { history: history },
                    children
                  )
                },
              },
            ])

            return ConnectedRouter
          })(_get__('Component'))

          ConnectedRouter.contextTypes = {
            store: _get__('PropTypes').shape({
              getState: _get__('PropTypes').func.isRequired,
              subscribe: _get__('PropTypes').func.isRequired,
            }).isRequired,
          }

          ConnectedRouter.propTypes = {
            history: _get__('PropTypes').shape({
              listen: _get__('PropTypes').func.isRequired,
              location: _get__('PropTypes').object.isRequired,
              push: _get__('PropTypes').func.isRequired,
            }).isRequired,
            location: _get__('PropTypes').oneOfType([
              _get__('PropTypes').object,
              _get__('PropTypes').string,
            ]).isRequired,
            action: _get__('PropTypes').string.isRequired,
            basename: _get__('PropTypes').string,
            children: _get__('PropTypes').oneOfType([
              _get__('PropTypes').func,
              _get__('PropTypes').node,
            ]),
            onLocationChanged: _get__('PropTypes').func.isRequired,
          }

          var mapStateToProps = function mapStateToProps(state) {
            return {
              action: getIn(state, ['router', 'action']),
              location: getIn(state, ['router', 'location']),
            }
          }

          var mapDispatchToProps = function mapDispatchToProps(dispatch) {
            return {
              onLocationChanged: function onLocationChanged(location, action) {
                return dispatch(_get__('onLocationChanged')(location, action))
              },
            }
          }

          return _get__('connect')(mapStateToProps, mapDispatchToProps)(
            ConnectedRouter
          )
        }

        exports.default = _get__('createConnectedRouter')

        function _getGlobalObject() {
          try {
            if (!!global) {
              return global
            }
          } catch (e) {
            try {
              if (!!window) {
                return window
              }
            } catch (e) {
              return this
            }
          }
        }

        var _RewireModuleId__ = null

        function _getRewireModuleId__() {
          if (_RewireModuleId__ === null) {
            var globalVariable = _getGlobalObject()

            if (!globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__) {
              globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__ = 0
            }

            _RewireModuleId__ = __$$GLOBAL_REWIRE_NEXT_MODULE_ID__++
          }

          return _RewireModuleId__
        }

        function _getRewireRegistry__() {
          var theGlobalVariable = _getGlobalObject()

          if (!theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__) {
            theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null)
          }

          return __$$GLOBAL_REWIRE_REGISTRY__
        }

        function _getRewiredData__() {
          var moduleId = _getRewireModuleId__()

          var registry = _getRewireRegistry__()

          var rewireData = registry[moduleId]

          if (!rewireData) {
            registry[moduleId] = Object.create(null)
            rewireData = registry[moduleId]
          }

          return rewireData
        }

        ;(function registerResetAll() {
          var theGlobalVariable = _getGlobalObject()

          if (!theGlobalVariable['__rewire_reset_all__']) {
            theGlobalVariable['__rewire_reset_all__'] = function() {
              theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(
                null
              )
            }
          }
        })()

        var INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__'
        var _RewireAPI__ = {}
        ;(function() {
          function addPropertyToAPIObject(name, value) {
            Object.defineProperty(_RewireAPI__, name, {
              value: value,
              enumerable: false,
              configurable: true,
            })
          }

          addPropertyToAPIObject('__get__', _get__)
          addPropertyToAPIObject('__GetDependency__', _get__)
          addPropertyToAPIObject('__Rewire__', _set__)
          addPropertyToAPIObject('__set__', _set__)
          addPropertyToAPIObject('__reset__', _reset__)
          addPropertyToAPIObject('__ResetDependency__', _reset__)
          addPropertyToAPIObject('__with__', _with__)
        })()

        function _get__(variableName) {
          var rewireData = _getRewiredData__()

          if (rewireData[variableName] === undefined) {
            return _get_original__(variableName)
          } else {
            var value = rewireData[variableName]

            if (value === INTENTIONAL_UNDEFINED) {
              return undefined
            } else {
              return value
            }
          }
        }

        function _get_original__(variableName) {
          switch (variableName) {
            case 'Component':
              return _react.Component

            case 'PropTypes':
              return _propTypes2.default

            case 'onLocationChanged':
              return _actions.onLocationChanged

            case 'connect':
              return _reactRedux.connect

            case 'createConnectedRouter':
              return createConnectedRouter

            case 'React':
              return _react2.default

            case 'Router':
              return _reactRouter.Router
          }

          return undefined
        }

        function _assign__(variableName, value) {
          var rewireData = _getRewiredData__()

          if (rewireData[variableName] === undefined) {
            return _set_original__(variableName, value)
          } else {
            return (rewireData[variableName] = value)
          }
        }

        function _set_original__(variableName, _value) {
          switch (variableName) {
          }

          return undefined
        }

        function _update_operation__(operation, variableName, prefix) {
          var oldValue = _get__(variableName)

          var newValue = operation === '++' ? oldValue + 1 : oldValue - 1

          _assign__(variableName, newValue)

          return prefix ? newValue : oldValue
        }

        function _set__(variableName, value) {
          var rewireData = _getRewiredData__()

          if (
            (typeof variableName === 'undefined'
              ? 'undefined'
              : _typeof(variableName)) === 'object'
          ) {
            Object.keys(variableName).forEach(function(name) {
              rewireData[name] = variableName[name]
            })
          } else {
            if (value === undefined) {
              rewireData[variableName] = INTENTIONAL_UNDEFINED
            } else {
              rewireData[variableName] = value
            }

            return function() {
              _reset__(variableName)
            }
          }
        }

        function _reset__(variableName) {
          var rewireData = _getRewiredData__()

          delete rewireData[variableName]

          if (Object.keys(rewireData).length == 0) {
            delete _getRewireRegistry__()[_getRewireModuleId__]
          }
        }

        function _with__(object) {
          var rewireData = _getRewiredData__()

          var rewiredVariableNames = Object.keys(object)
          var previousValues = {}

          function reset() {
            rewiredVariableNames.forEach(function(variableName) {
              rewireData[variableName] = previousValues[variableName]
            })
          }

          return function(callback) {
            rewiredVariableNames.forEach(function(variableName) {
              previousValues[variableName] = rewireData[variableName]
              rewireData[variableName] = object[variableName]
            })
            var result = callback()

            if (!!result && typeof result.then == 'function') {
              result.then(reset).catch(reset)
            } else {
              reset()
            }

            return result
          }
        }

        var _typeOfOriginalExport =
          typeof createConnectedRouter === 'undefined'
            ? 'undefined'
            : _typeof(createConnectedRouter)

        function addNonEnumerableProperty(name, value) {
          Object.defineProperty(createConnectedRouter, name, {
            value: value,
            enumerable: false,
            configurable: true,
          })
        }

        if (
          (_typeOfOriginalExport === 'object' ||
            _typeOfOriginalExport === 'function') &&
          Object.isExtensible(createConnectedRouter)
        ) {
          addNonEnumerableProperty('__get__', _get__)
          addNonEnumerableProperty('__GetDependency__', _get__)
          addNonEnumerableProperty('__Rewire__', _set__)
          addNonEnumerableProperty('__set__', _set__)
          addNonEnumerableProperty('__reset__', _reset__)
          addNonEnumerableProperty('__ResetDependency__', _reset__)
          addNonEnumerableProperty('__with__', _with__)
          addNonEnumerableProperty('__RewireAPI__', _RewireAPI__)
        }

        exports.__get__ = _get__
        exports.__GetDependency__ = _get__
        exports.__Rewire__ = _set__
        exports.__set__ = _set__
        exports.__ResetDependency__ = _reset__
        exports.__RewireAPI__ = _RewireAPI__
        /* WEBPACK VAR INJECTION */
      }.call(exports, __webpack_require__(2)))

      /***/
    },
    /* 121 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      /* harmony export (immutable) */ __webpack_exports__['a'] = createProvider
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(
        1
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_0_react__
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(
        0
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(
        __WEBPACK_IMPORTED_MODULE_1_prop_types__
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_PropTypes__ = __webpack_require__(
        47
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_warning__ = __webpack_require__(
        26
      )
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError('Cannot call a class as a function')
        }
      }

      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          )
        }
        return call && (typeof call === 'object' || typeof call === 'function')
          ? call
          : self
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== 'function' && superClass !== null) {
          throw new TypeError(
            'Super expression must either be null or a function, not ' +
              typeof superClass
          )
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true,
          },
        })
        if (superClass)
          Object.setPrototypeOf
            ? Object.setPrototypeOf(subClass, superClass)
            : (subClass.__proto__ = superClass)
      }

      var didWarnAboutReceivingStore = false
      function warnAboutReceivingStore() {
        if (didWarnAboutReceivingStore) {
          return
        }
        didWarnAboutReceivingStore = true

        Object(__WEBPACK_IMPORTED_MODULE_3__utils_warning__['a' /* default */])(
          '<Provider> does not support changing `store` on the fly. ' +
            'It is most likely that you see this error because you updated to ' +
            'Redux 2.x and React Redux 2.x which no longer hot reload reducers ' +
            'automatically. See https://github.com/reactjs/react-redux/releases/' +
            'tag/v2.0.0 for the migration instructions.'
        )
      }

      function createProvider() {
        var _Provider$childContex

        var storeKey =
          arguments.length > 0 && arguments[0] !== undefined
            ? arguments[0]
            : 'store'
        var subKey = arguments[1]

        var subscriptionKey = subKey || storeKey + 'Subscription'

        var Provider = (function(_Component) {
          _inherits(Provider, _Component)

          Provider.prototype.getChildContext = function getChildContext() {
            var _ref

            return (
              (_ref = {}),
              (_ref[storeKey] = this[storeKey]),
              (_ref[subscriptionKey] = null),
              _ref
            )
          }

          function Provider(props, context) {
            _classCallCheck(this, Provider)

            var _this = _possibleConstructorReturn(
              this,
              _Component.call(this, props, context)
            )

            _this[storeKey] = props.store
            return _this
          }

          Provider.prototype.render = function render() {
            return __WEBPACK_IMPORTED_MODULE_0_react__['Children'].only(
              this.props.children
            )
          }

          return Provider
        })(__WEBPACK_IMPORTED_MODULE_0_react__['Component'])

        if (true) {
          Provider.prototype.componentWillReceiveProps = function(nextProps) {
            if (this[storeKey] !== nextProps.store) {
              warnAboutReceivingStore()
            }
          }
        }

        Provider.propTypes = {
          store:
            __WEBPACK_IMPORTED_MODULE_2__utils_PropTypes__['a' /* storeShape */]
              .isRequired,
          children:
            __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.element
              .isRequired,
        }
        Provider.childContextTypes = ((_Provider$childContex = {}),
        (_Provider$childContex[storeKey] =
          __WEBPACK_IMPORTED_MODULE_2__utils_PropTypes__[
            'a' /* storeShape */
          ].isRequired),
        (_Provider$childContex[subscriptionKey] =
          __WEBPACK_IMPORTED_MODULE_2__utils_PropTypes__[
            'b' /* subscriptionShape */
          ]),
        _Provider$childContex)

        return Provider
      }

      /* harmony default export */ __webpack_exports__['b'] = createProvider()

      /***/
    },
    /* 122 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      /* harmony export (binding) */ __webpack_require__.d(
        __webpack_exports__,
        'a',
        function() {
          return Subscription
        }
      )
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError('Cannot call a class as a function')
        }
      }

      // encapsulates the subscription logic for connecting a component to the redux store, as
      // well as nesting subscriptions of descendant components, so that we can ensure the
      // ancestor components re-render before descendants

      var CLEARED = null
      var nullListeners = {
        notify: function notify() {},
      }

      function createListenerCollection() {
        // the current/next pattern is copied from redux's createStore code.
        // TODO: refactor+expose that code to be reusable here?
        var current = []
        var next = []

        return {
          clear: function clear() {
            next = CLEARED
            current = CLEARED
          },
          notify: function notify() {
            var listeners = (current = next)
            for (var i = 0; i < listeners.length; i++) {
              listeners[i]()
            }
          },
          get: function get() {
            return next
          },
          subscribe: function subscribe(listener) {
            var isSubscribed = true
            if (next === current) next = current.slice()
            next.push(listener)

            return function unsubscribe() {
              if (!isSubscribed || current === CLEARED) return
              isSubscribed = false

              if (next === current) next = current.slice()
              next.splice(next.indexOf(listener), 1)
            }
          },
        }
      }

      var Subscription = (function() {
        function Subscription(store, parentSub, onStateChange) {
          _classCallCheck(this, Subscription)

          this.store = store
          this.parentSub = parentSub
          this.onStateChange = onStateChange
          this.unsubscribe = null
          this.listeners = nullListeners
        }

        Subscription.prototype.addNestedSub = function addNestedSub(listener) {
          this.trySubscribe()
          return this.listeners.subscribe(listener)
        }

        Subscription.prototype.notifyNestedSubs = function notifyNestedSubs() {
          this.listeners.notify()
        }

        Subscription.prototype.isSubscribed = function isSubscribed() {
          return Boolean(this.unsubscribe)
        }

        Subscription.prototype.trySubscribe = function trySubscribe() {
          if (!this.unsubscribe) {
            this.unsubscribe = this.parentSub
              ? this.parentSub.addNestedSub(this.onStateChange)
              : this.store.subscribe(this.onStateChange)

            this.listeners = createListenerCollection()
          }
        }

        Subscription.prototype.tryUnsubscribe = function tryUnsubscribe() {
          if (this.unsubscribe) {
            this.unsubscribe()
            this.unsubscribe = null
            this.listeners.clear()
            this.listeners = nullListeners
          }
        }

        return Subscription
      })()

      /***/
    },
    /* 123 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      /* unused harmony export createConnect */
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_connectAdvanced__ = __webpack_require__(
        48
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_shallowEqual__ = __webpack_require__(
        124
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__mapDispatchToProps__ = __webpack_require__(
        125
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__mapStateToProps__ = __webpack_require__(
        140
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__mergeProps__ = __webpack_require__(
        141
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__selectorFactory__ = __webpack_require__(
        142
      )
      var _extends =
        Object.assign ||
        function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i]
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key]
              }
            }
          }
          return target
        }

      function _objectWithoutProperties(obj, keys) {
        var target = {}
        for (var i in obj) {
          if (keys.indexOf(i) >= 0) continue
          if (!Object.prototype.hasOwnProperty.call(obj, i)) continue
          target[i] = obj[i]
        }
        return target
      }

      /*
  connect is a facade over connectAdvanced. It turns its args into a compatible
  selectorFactory, which has the signature:

    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps
  
  connect passes its args to connectAdvanced as options, which will in turn pass them to
  selectorFactory each time a Connect component instance is instantiated or hot reloaded.

  selectorFactory returns a final props selector from its mapStateToProps,
  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
  mergePropsFactories, and pure args.

  The resulting final props selector is called by the Connect component instance whenever
  it receives new props or store state.
 */

      function match(arg, factories, name) {
        for (var i = factories.length - 1; i >= 0; i--) {
          var result = factories[i](arg)
          if (result) return result
        }

        return function(dispatch, options) {
          throw new Error(
            'Invalid value of type ' +
              typeof arg +
              ' for ' +
              name +
              ' argument when connecting component ' +
              options.wrappedComponentName +
              '.'
          )
        }
      }

      function strictEqual(a, b) {
        return a === b
      }

      // createConnect with default args builds the 'official' connect behavior. Calling it with
      // different options opens up some testing and extensibility scenarios
      function createConnect() {
        var _ref =
            arguments.length > 0 && arguments[0] !== undefined
              ? arguments[0]
              : {},
          _ref$connectHOC = _ref.connectHOC,
          connectHOC =
            _ref$connectHOC === undefined
              ? __WEBPACK_IMPORTED_MODULE_0__components_connectAdvanced__[
                  'a' /* default */
                ]
              : _ref$connectHOC,
          _ref$mapStateToPropsF = _ref.mapStateToPropsFactories,
          mapStateToPropsFactories =
            _ref$mapStateToPropsF === undefined
              ? __WEBPACK_IMPORTED_MODULE_3__mapStateToProps__[
                  'a' /* default */
                ]
              : _ref$mapStateToPropsF,
          _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories,
          mapDispatchToPropsFactories =
            _ref$mapDispatchToPro === undefined
              ? __WEBPACK_IMPORTED_MODULE_2__mapDispatchToProps__[
                  'a' /* default */
                ]
              : _ref$mapDispatchToPro,
          _ref$mergePropsFactor = _ref.mergePropsFactories,
          mergePropsFactories =
            _ref$mergePropsFactor === undefined
              ? __WEBPACK_IMPORTED_MODULE_4__mergeProps__['a' /* default */]
              : _ref$mergePropsFactor,
          _ref$selectorFactory = _ref.selectorFactory,
          selectorFactory =
            _ref$selectorFactory === undefined
              ? __WEBPACK_IMPORTED_MODULE_5__selectorFactory__[
                  'a' /* default */
                ]
              : _ref$selectorFactory

        return function connect(
          mapStateToProps,
          mapDispatchToProps,
          mergeProps
        ) {
          var _ref2 =
              arguments.length > 3 && arguments[3] !== undefined
                ? arguments[3]
                : {},
            _ref2$pure = _ref2.pure,
            pure = _ref2$pure === undefined ? true : _ref2$pure,
            _ref2$areStatesEqual = _ref2.areStatesEqual,
            areStatesEqual =
              _ref2$areStatesEqual === undefined
                ? strictEqual
                : _ref2$areStatesEqual,
            _ref2$areOwnPropsEqua = _ref2.areOwnPropsEqual,
            areOwnPropsEqual =
              _ref2$areOwnPropsEqua === undefined
                ? __WEBPACK_IMPORTED_MODULE_1__utils_shallowEqual__[
                    'a' /* default */
                  ]
                : _ref2$areOwnPropsEqua,
            _ref2$areStatePropsEq = _ref2.areStatePropsEqual,
            areStatePropsEqual =
              _ref2$areStatePropsEq === undefined
                ? __WEBPACK_IMPORTED_MODULE_1__utils_shallowEqual__[
                    'a' /* default */
                  ]
                : _ref2$areStatePropsEq,
            _ref2$areMergedPropsE = _ref2.areMergedPropsEqual,
            areMergedPropsEqual =
              _ref2$areMergedPropsE === undefined
                ? __WEBPACK_IMPORTED_MODULE_1__utils_shallowEqual__[
                    'a' /* default */
                  ]
                : _ref2$areMergedPropsE,
            extraOptions = _objectWithoutProperties(_ref2, [
              'pure',
              'areStatesEqual',
              'areOwnPropsEqual',
              'areStatePropsEqual',
              'areMergedPropsEqual',
            ])

          var initMapStateToProps = match(
            mapStateToProps,
            mapStateToPropsFactories,
            'mapStateToProps'
          )
          var initMapDispatchToProps = match(
            mapDispatchToProps,
            mapDispatchToPropsFactories,
            'mapDispatchToProps'
          )
          var initMergeProps = match(
            mergeProps,
            mergePropsFactories,
            'mergeProps'
          )

          return connectHOC(
            selectorFactory,
            _extends(
              {
                // used in error messages
                methodName: 'connect',

                // used to compute Connect's displayName from the wrapped component's displayName.
                getDisplayName: function getDisplayName(name) {
                  return 'Connect(' + name + ')'
                },

                // if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes
                shouldHandleStateChanges: Boolean(mapStateToProps),

                // passed through to selectorFactory
                initMapStateToProps: initMapStateToProps,
                initMapDispatchToProps: initMapDispatchToProps,
                initMergeProps: initMergeProps,
                pure: pure,
                areStatesEqual: areStatesEqual,
                areOwnPropsEqual: areOwnPropsEqual,
                areStatePropsEqual: areStatePropsEqual,
                areMergedPropsEqual: areMergedPropsEqual,
              },
              extraOptions
            )
          )
        }
      }

      /* harmony default export */ __webpack_exports__['a'] = createConnect()

      /***/
    },
    /* 124 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      /* harmony export (immutable) */ __webpack_exports__['a'] = shallowEqual
      var hasOwn = Object.prototype.hasOwnProperty

      function is(x, y) {
        if (x === y) {
          return x !== 0 || y !== 0 || 1 / x === 1 / y
        } else {
          return x !== x && y !== y
        }
      }

      function shallowEqual(objA, objB) {
        if (is(objA, objB)) return true

        if (
          typeof objA !== 'object' ||
          objA === null ||
          typeof objB !== 'object' ||
          objB === null
        ) {
          return false
        }

        var keysA = Object.keys(objA)
        var keysB = Object.keys(objB)

        if (keysA.length !== keysB.length) return false

        for (var i = 0; i < keysA.length; i++) {
          if (
            !hasOwn.call(objB, keysA[i]) ||
            !is(objA[keysA[i]], objB[keysA[i]])
          ) {
            return false
          }
        }

        return true
      }

      /***/
    },
    /* 125 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      /* unused harmony export whenMapDispatchToPropsIsFunction */
      /* unused harmony export whenMapDispatchToPropsIsMissing */
      /* unused harmony export whenMapDispatchToPropsIsObject */
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_redux__ = __webpack_require__(
        27
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__wrapMapToProps__ = __webpack_require__(
        53
      )

      function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {
        return typeof mapDispatchToProps === 'function'
          ? Object(
              __WEBPACK_IMPORTED_MODULE_1__wrapMapToProps__[
                'b' /* wrapMapToPropsFunc */
              ]
            )(mapDispatchToProps, 'mapDispatchToProps')
          : undefined
      }

      function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {
        return !mapDispatchToProps
          ? Object(
              __WEBPACK_IMPORTED_MODULE_1__wrapMapToProps__[
                'a' /* wrapMapToPropsConstant */
              ]
            )(function(dispatch) {
              return { dispatch: dispatch }
            })
          : undefined
      }

      function whenMapDispatchToPropsIsObject(mapDispatchToProps) {
        return mapDispatchToProps && typeof mapDispatchToProps === 'object'
          ? Object(
              __WEBPACK_IMPORTED_MODULE_1__wrapMapToProps__[
                'a' /* wrapMapToPropsConstant */
              ]
            )(function(dispatch) {
              return Object(
                __WEBPACK_IMPORTED_MODULE_0_redux__['bindActionCreators']
              )(mapDispatchToProps, dispatch)
            })
          : undefined
      }

      /* harmony default export */ __webpack_exports__['a'] = [
        whenMapDispatchToPropsIsFunction,
        whenMapDispatchToPropsIsMissing,
        whenMapDispatchToPropsIsObject,
      ]

      /***/
    },
    /* 126 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Symbol_js__ = __webpack_require__(
        50
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__getRawTag_js__ = __webpack_require__(
        129
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__objectToString_js__ = __webpack_require__(
        130
      )

      /** `Object#toString` result references. */
      var nullTag = '[object Null]',
        undefinedTag = '[object Undefined]'

      /** Built-in value references. */
      var symToStringTag = __WEBPACK_IMPORTED_MODULE_0__Symbol_js__[
        'a' /* default */
      ]
        ? __WEBPACK_IMPORTED_MODULE_0__Symbol_js__['a' /* default */]
            .toStringTag
        : undefined

      /**
       * The base implementation of `getTag` without fallbacks for buggy environments.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the `toStringTag`.
       */
      function baseGetTag(value) {
        if (value == null) {
          return value === undefined ? undefinedTag : nullTag
        }
        return symToStringTag && symToStringTag in Object(value)
          ? Object(
              __WEBPACK_IMPORTED_MODULE_1__getRawTag_js__['a' /* default */]
            )(value)
          : Object(
              __WEBPACK_IMPORTED_MODULE_2__objectToString_js__[
                'a' /* default */
              ]
            )(value)
      }

      /* harmony default export */ __webpack_exports__['a'] = baseGetTag

      /***/
    },
    /* 127 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__freeGlobal_js__ = __webpack_require__(
        128
      )

      /** Detect free variable `self`. */
      var freeSelf =
        typeof self == 'object' && self && self.Object === Object && self

      /** Used as a reference to the global object. */
      var root =
        __WEBPACK_IMPORTED_MODULE_0__freeGlobal_js__['a' /* default */] ||
        freeSelf ||
        Function('return this')()

      /* harmony default export */ __webpack_exports__['a'] = root

      /***/
    },
    /* 128 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      /* WEBPACK VAR INJECTION */
      ;(function(global) {
        /** Detect free variable `global` from Node.js. */
        var freeGlobal =
          typeof global == 'object' &&
          global &&
          global.Object === Object &&
          global

        /* harmony default export */ __webpack_exports__['a'] = freeGlobal

        /* WEBPACK VAR INJECTION */
      }.call(__webpack_exports__, __webpack_require__(2)))

      /***/
    },
    /* 129 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Symbol_js__ = __webpack_require__(
        50
      )

      /** Used for built-in method references. */
      var objectProto = Object.prototype

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty

      /**
       * Used to resolve the
       * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
       * of values.
       */
      var nativeObjectToString = objectProto.toString

      /** Built-in value references. */
      var symToStringTag = __WEBPACK_IMPORTED_MODULE_0__Symbol_js__[
        'a' /* default */
      ]
        ? __WEBPACK_IMPORTED_MODULE_0__Symbol_js__['a' /* default */]
            .toStringTag
        : undefined

      /**
       * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the raw `toStringTag`.
       */
      function getRawTag(value) {
        var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag]

        try {
          value[symToStringTag] = undefined
          var unmasked = true
        } catch (e) {}

        var result = nativeObjectToString.call(value)
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag
          } else {
            delete value[symToStringTag]
          }
        }
        return result
      }

      /* harmony default export */ __webpack_exports__['a'] = getRawTag

      /***/
    },
    /* 130 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      /** Used for built-in method references. */
      var objectProto = Object.prototype

      /**
       * Used to resolve the
       * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
       * of values.
       */
      var nativeObjectToString = objectProto.toString

      /**
       * Converts `value` to a string using `Object.prototype.toString`.
       *
       * @private
       * @param {*} value The value to convert.
       * @returns {string} Returns the converted string.
       */
      function objectToString(value) {
        return nativeObjectToString.call(value)
      }

      /* harmony default export */ __webpack_exports__['a'] = objectToString

      /***/
    },
    /* 131 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__overArg_js__ = __webpack_require__(
        132
      )

      /** Built-in value references. */
      var getPrototype = Object(
        __WEBPACK_IMPORTED_MODULE_0__overArg_js__['a' /* default */]
      )(Object.getPrototypeOf, Object)

      /* harmony default export */ __webpack_exports__['a'] = getPrototype

      /***/
    },
    /* 132 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      /**
       * Creates a unary function that invokes `func` with its argument transformed.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {Function} transform The argument transform.
       * @returns {Function} Returns the new function.
       */
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg))
        }
      }

      /* harmony default export */ __webpack_exports__['a'] = overArg

      /***/
    },
    /* 133 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      /**
       * Checks if `value` is object-like. A value is object-like if it's not `null`
       * and has a `typeof` result of "object".
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
       * @example
       *
       * _.isObjectLike({});
       * // => true
       *
       * _.isObjectLike([1, 2, 3]);
       * // => true
       *
       * _.isObjectLike(_.noop);
       * // => false
       *
       * _.isObjectLike(null);
       * // => false
       */
      function isObjectLike(value) {
        return value != null && typeof value == 'object'
      }

      /* harmony default export */ __webpack_exports__['a'] = isObjectLike

      /***/
    },
    /* 134 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      /* WEBPACK VAR INJECTION */
      ;(function(global, module) {
        /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ponyfill_js__ = __webpack_require__(
          136
        )
        /* global window */

        var root

        if (typeof self !== 'undefined') {
          root = self
        } else if (typeof window !== 'undefined') {
          root = window
        } else if (typeof global !== 'undefined') {
          root = global
        } else if (true) {
          root = module
        } else {
          root = Function('return this')()
        }

        var result = Object(
          __WEBPACK_IMPORTED_MODULE_0__ponyfill_js__['a' /* default */]
        )(root)
        /* harmony default export */ __webpack_exports__['a'] = result

        /* WEBPACK VAR INJECTION */
      }.call(
        __webpack_exports__,
        __webpack_require__(2),
        __webpack_require__(135)(module)
      ))

      /***/
    },
    /* 135 */
    /***/ function(module, exports) {
      module.exports = function(originalModule) {
        if (!originalModule.webpackPolyfill) {
          var module = Object.create(originalModule)
          // module.parent = undefined by default
          if (!module.children) module.children = []
          Object.defineProperty(module, 'loaded', {
            enumerable: true,
            get: function() {
              return module.l
            },
          })
          Object.defineProperty(module, 'id', {
            enumerable: true,
            get: function() {
              return module.i
            },
          })
          Object.defineProperty(module, 'exports', {
            enumerable: true,
          })
          module.webpackPolyfill = 1
        }
        return module
      }

      /***/
    },
    /* 136 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      /* harmony export (immutable) */ __webpack_exports__[
        'a'
      ] = symbolObservablePonyfill
      function symbolObservablePonyfill(root) {
        var result
        var Symbol = root.Symbol

        if (typeof Symbol === 'function') {
          if (Symbol.observable) {
            result = Symbol.observable
          } else {
            result = Symbol('observable')
            Symbol.observable = result
          }
        } else {
          result = '@@observable'
        }

        return result
      }

      /***/
    },
    /* 137 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      /* harmony export (immutable) */ __webpack_exports__[
        'a'
      ] = combineReducers
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__createStore__ = __webpack_require__(
        49
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash_es_isPlainObject__ = __webpack_require__(
        28
      )
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__utils_warning__ = __webpack_require__(
        51
      )

      function getUndefinedStateErrorMessage(key, action) {
        var actionType = action && action.type
        var actionName =
          (actionType && '"' + actionType.toString() + '"') || 'an action'

        return (
          'Given action ' +
          actionName +
          ', reducer "' +
          key +
          '" returned undefined. ' +
          'To ignore an action, you must explicitly return the previous state. ' +
          'If you want this reducer to hold no value, you can return null instead of undefined.'
        )
      }

      function getUnexpectedStateShapeWarningMessage(
        inputState,
        reducers,
        action,
        unexpectedKeyCache
      ) {
        var reducerKeys = Object.keys(reducers)
        var argumentName =
          action &&
          action.type ===
            __WEBPACK_IMPORTED_MODULE_0__createStore__['a' /* ActionTypes */]
              .INIT
            ? 'preloadedState argument passed to createStore'
            : 'previous state received by the reducer'

        if (reducerKeys.length === 0) {
          return (
            'Store does not have a valid reducer. Make sure the argument passed ' +
            'to combineReducers is an object whose values are reducers.'
          )
        }

        if (
          !Object(
            __WEBPACK_IMPORTED_MODULE_1_lodash_es_isPlainObject__[
              'a' /* default */
            ]
          )(inputState)
        ) {
          return (
            'The ' +
            argumentName +
            ' has unexpected type of "' +
            {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] +
            '". Expected argument to be an object with the following ' +
            ('keys: "' + reducerKeys.join('", "') + '"')
          )
        }

        var unexpectedKeys = Object.keys(inputState).filter(function(key) {
          return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key]
        })

        unexpectedKeys.forEach(function(key) {
          unexpectedKeyCache[key] = true
        })

        if (unexpectedKeys.length > 0) {
          return (
            'Unexpected ' +
            (unexpectedKeys.length > 1 ? 'keys' : 'key') +
            ' ' +
            ('"' +
              unexpectedKeys.join('", "') +
              '" found in ' +
              argumentName +
              '. ') +
            'Expected to find one of the known reducer keys instead: ' +
            ('"' +
              reducerKeys.join('", "') +
              '". Unexpected keys will be ignored.')
          )
        }
      }

      function assertReducerShape(reducers) {
        Object.keys(reducers).forEach(function(key) {
          var reducer = reducers[key]
          var initialState = reducer(undefined, {
            type:
              __WEBPACK_IMPORTED_MODULE_0__createStore__['a' /* ActionTypes */]
                .INIT,
          })

          if (typeof initialState === 'undefined') {
            throw new Error(
              'Reducer "' +
                key +
                '" returned undefined during initialization. ' +
                'If the state passed to the reducer is undefined, you must ' +
                'explicitly return the initial state. The initial state may ' +
                "not be undefined. If you don't want to set a value for this reducer, " +
                'you can use null instead of undefined.'
            )
          }

          var type =
            '@@redux/PROBE_UNKNOWN_ACTION_' +
            Math.random()
              .toString(36)
              .substring(7)
              .split('')
              .join('.')
          if (typeof reducer(undefined, { type: type }) === 'undefined') {
            throw new Error(
              'Reducer "' +
                key +
                '" returned undefined when probed with a random type. ' +
                ("Don't try to handle " +
                  __WEBPACK_IMPORTED_MODULE_0__createStore__[
                    'a' /* ActionTypes */
                  ].INIT +
                  ' or other actions in "redux/*" ') +
                'namespace. They are considered private. Instead, you must return the ' +
                'current state for any unknown actions, unless it is undefined, ' +
                'in which case you must return the initial state, regardless of the ' +
                'action type. The initial state may not be undefined, but can be null.'
            )
          }
        })
      }

      /**
       * Turns an object whose values are different reducer functions, into a single
       * reducer function. It will call every child reducer, and gather their results
       * into a single state object, whose keys correspond to the keys of the passed
       * reducer functions.
       *
       * @param {Object} reducers An object whose values correspond to different
       * reducer functions that need to be combined into one. One handy way to obtain
       * it is to use ES6 `import * as reducers` syntax. The reducers may never return
       * undefined for any action. Instead, they should return their initial state
       * if the state passed to them was undefined, and the current state for any
       * unrecognized action.
       *
       * @returns {Function} A reducer function that invokes every reducer inside the
       * passed object, and builds a state object with the same shape.
       */
      function combineReducers(reducers) {
        var reducerKeys = Object.keys(reducers)
        var finalReducers = {}
        for (var i = 0; i < reducerKeys.length; i++) {
          var key = reducerKeys[i]

          if (true) {
            if (typeof reducers[key] === 'undefined') {
              Object(
                __WEBPACK_IMPORTED_MODULE_2__utils_warning__['a' /* default */]
              )('No reducer provided for key "' + key + '"')
            }
          }

          if (typeof reducers[key] === 'function') {
            finalReducers[key] = reducers[key]
          }
        }
        var finalReducerKeys = Object.keys(finalReducers)

        var unexpectedKeyCache = void 0
        if (true) {
          unexpectedKeyCache = {}
        }

        var shapeAssertionError = void 0
        try {
          assertReducerShape(finalReducers)
        } catch (e) {
          shapeAssertionError = e
        }

        return function combination() {
          var state =
            arguments.length > 0 && arguments[0] !== undefined
              ? arguments[0]
              : {}
          var action = arguments[1]

          if (shapeAssertionError) {
            throw shapeAssertionError
          }

          if (true) {
            var warningMessage = getUnexpectedStateShapeWarningMessage(
              state,
              finalReducers,
              action,
              unexpectedKeyCache
            )
            if (warningMessage) {
              Object(
                __WEBPACK_IMPORTED_MODULE_2__utils_warning__['a' /* default */]
              )(warningMessage)
            }
          }

          var hasChanged = false
          var nextState = {}
          for (var _i = 0; _i < finalReducerKeys.length; _i++) {
            var _key = finalReducerKeys[_i]
            var reducer = finalReducers[_key]
            var previousStateForKey = state[_key]
            var nextStateForKey = reducer(previousStateForKey, action)
            if (typeof nextStateForKey === 'undefined') {
              var errorMessage = getUndefinedStateErrorMessage(_key, action)
              throw new Error(errorMessage)
            }
            nextState[_key] = nextStateForKey
            hasChanged = hasChanged || nextStateForKey !== previousStateForKey
          }
          return hasChanged ? nextState : state
        }
      }

      /***/
    },
    /* 138 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      /* harmony export (immutable) */ __webpack_exports__[
        'a'
      ] = bindActionCreators
      function bindActionCreator(actionCreator, dispatch) {
        return function() {
          return dispatch(actionCreator.apply(undefined, arguments))
        }
      }

      /**
       * Turns an object whose values are action creators, into an object with the
       * same keys, but with every function wrapped into a `dispatch` call so they
       * may be invoked directly. This is just a convenience method, as you can call
       * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
       *
       * For convenience, you can also pass a single function as the first argument,
       * and get a function in return.
       *
       * @param {Function|Object} actionCreators An object whose values are action
       * creator functions. One handy way to obtain it is to use ES6 `import * as`
       * syntax. You may also pass a single function.
       *
       * @param {Function} dispatch The `dispatch` function available on your Redux
       * store.
       *
       * @returns {Function|Object} The object mimicking the original object, but with
       * every action creator wrapped into the `dispatch` call. If you passed a
       * function as `actionCreators`, the return value will also be a single
       * function.
       */
      function bindActionCreators(actionCreators, dispatch) {
        if (typeof actionCreators === 'function') {
          return bindActionCreator(actionCreators, dispatch)
        }

        if (typeof actionCreators !== 'object' || actionCreators === null) {
          throw new Error(
            'bindActionCreators expected an object or a function, instead received ' +
              (actionCreators === null ? 'null' : typeof actionCreators) +
              '. ' +
              'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?'
          )
        }

        var keys = Object.keys(actionCreators)
        var boundActionCreators = {}
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i]
          var actionCreator = actionCreators[key]
          if (typeof actionCreator === 'function') {
            boundActionCreators[key] = bindActionCreator(
              actionCreator,
              dispatch
            )
          }
        }
        return boundActionCreators
      }

      /***/
    },
    /* 139 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      /* harmony export (immutable) */ __webpack_exports__[
        'a'
      ] = applyMiddleware
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__compose__ = __webpack_require__(
        52
      )
      var _extends =
        Object.assign ||
        function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i]
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key]
              }
            }
          }
          return target
        }

      /**
       * Creates a store enhancer that applies middleware to the dispatch method
       * of the Redux store. This is handy for a variety of tasks, such as expressing
       * asynchronous actions in a concise manner, or logging every action payload.
       *
       * See `redux-thunk` package as an example of the Redux middleware.
       *
       * Because middleware is potentially asynchronous, this should be the first
       * store enhancer in the composition chain.
       *
       * Note that each middleware will be given the `dispatch` and `getState` functions
       * as named arguments.
       *
       * @param {...Function} middlewares The middleware chain to be applied.
       * @returns {Function} A store enhancer applying the middleware.
       */
      function applyMiddleware() {
        for (
          var _len = arguments.length, middlewares = Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          middlewares[_key] = arguments[_key]
        }

        return function(createStore) {
          return function(reducer, preloadedState, enhancer) {
            var store = createStore(reducer, preloadedState, enhancer)
            var _dispatch = store.dispatch
            var chain = []

            var middlewareAPI = {
              getState: store.getState,
              dispatch: function dispatch(action) {
                return _dispatch(action)
              },
            }
            chain = middlewares.map(function(middleware) {
              return middleware(middlewareAPI)
            })
            _dispatch = __WEBPACK_IMPORTED_MODULE_0__compose__[
              'a' /* default */
            ].apply(undefined, chain)(store.dispatch)

            return _extends({}, store, {
              dispatch: _dispatch,
            })
          }
        }
      }

      /***/
    },
    /* 140 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      /* unused harmony export whenMapStateToPropsIsFunction */
      /* unused harmony export whenMapStateToPropsIsMissing */
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__wrapMapToProps__ = __webpack_require__(
        53
      )

      function whenMapStateToPropsIsFunction(mapStateToProps) {
        return typeof mapStateToProps === 'function'
          ? Object(
              __WEBPACK_IMPORTED_MODULE_0__wrapMapToProps__[
                'b' /* wrapMapToPropsFunc */
              ]
            )(mapStateToProps, 'mapStateToProps')
          : undefined
      }

      function whenMapStateToPropsIsMissing(mapStateToProps) {
        return !mapStateToProps
          ? Object(
              __WEBPACK_IMPORTED_MODULE_0__wrapMapToProps__[
                'a' /* wrapMapToPropsConstant */
              ]
            )(function() {
              return {}
            })
          : undefined
      }

      /* harmony default export */ __webpack_exports__['a'] = [
        whenMapStateToPropsIsFunction,
        whenMapStateToPropsIsMissing,
      ]

      /***/
    },
    /* 141 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      /* unused harmony export defaultMergeProps */
      /* unused harmony export wrapMergePropsFunc */
      /* unused harmony export whenMergePropsIsFunction */
      /* unused harmony export whenMergePropsIsOmitted */
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_verifyPlainObject__ = __webpack_require__(
        54
      )
      var _extends =
        Object.assign ||
        function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i]
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key]
              }
            }
          }
          return target
        }

      function defaultMergeProps(stateProps, dispatchProps, ownProps) {
        return _extends({}, ownProps, stateProps, dispatchProps)
      }

      function wrapMergePropsFunc(mergeProps) {
        return function initMergePropsProxy(dispatch, _ref) {
          var displayName = _ref.displayName,
            pure = _ref.pure,
            areMergedPropsEqual = _ref.areMergedPropsEqual

          var hasRunOnce = false
          var mergedProps = void 0

          return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
            var nextMergedProps = mergeProps(
              stateProps,
              dispatchProps,
              ownProps
            )

            if (hasRunOnce) {
              if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps))
                mergedProps = nextMergedProps
            } else {
              hasRunOnce = true
              mergedProps = nextMergedProps

              if (true)
                Object(
                  __WEBPACK_IMPORTED_MODULE_0__utils_verifyPlainObject__[
                    'a' /* default */
                  ]
                )(mergedProps, displayName, 'mergeProps')
            }

            return mergedProps
          }
        }
      }

      function whenMergePropsIsFunction(mergeProps) {
        return typeof mergeProps === 'function'
          ? wrapMergePropsFunc(mergeProps)
          : undefined
      }

      function whenMergePropsIsOmitted(mergeProps) {
        return !mergeProps
          ? function() {
              return defaultMergeProps
            }
          : undefined
      }

      /* harmony default export */ __webpack_exports__['a'] = [
        whenMergePropsIsFunction,
        whenMergePropsIsOmitted,
      ]

      /***/
    },
    /* 142 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      /* unused harmony export impureFinalPropsSelectorFactory */
      /* unused harmony export pureFinalPropsSelectorFactory */
      /* harmony export (immutable) */ __webpack_exports__[
        'a'
      ] = finalPropsSelectorFactory
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__verifySubselectors__ = __webpack_require__(
        143
      )
      function _objectWithoutProperties(obj, keys) {
        var target = {}
        for (var i in obj) {
          if (keys.indexOf(i) >= 0) continue
          if (!Object.prototype.hasOwnProperty.call(obj, i)) continue
          target[i] = obj[i]
        }
        return target
      }

      function impureFinalPropsSelectorFactory(
        mapStateToProps,
        mapDispatchToProps,
        mergeProps,
        dispatch
      ) {
        return function impureFinalPropsSelector(state, ownProps) {
          return mergeProps(
            mapStateToProps(state, ownProps),
            mapDispatchToProps(dispatch, ownProps),
            ownProps
          )
        }
      }

      function pureFinalPropsSelectorFactory(
        mapStateToProps,
        mapDispatchToProps,
        mergeProps,
        dispatch,
        _ref
      ) {
        var areStatesEqual = _ref.areStatesEqual,
          areOwnPropsEqual = _ref.areOwnPropsEqual,
          areStatePropsEqual = _ref.areStatePropsEqual

        var hasRunAtLeastOnce = false
        var state = void 0
        var ownProps = void 0
        var stateProps = void 0
        var dispatchProps = void 0
        var mergedProps = void 0

        function handleFirstCall(firstState, firstOwnProps) {
          state = firstState
          ownProps = firstOwnProps
          stateProps = mapStateToProps(state, ownProps)
          dispatchProps = mapDispatchToProps(dispatch, ownProps)
          mergedProps = mergeProps(stateProps, dispatchProps, ownProps)
          hasRunAtLeastOnce = true
          return mergedProps
        }

        function handleNewPropsAndNewState() {
          stateProps = mapStateToProps(state, ownProps)

          if (mapDispatchToProps.dependsOnOwnProps)
            dispatchProps = mapDispatchToProps(dispatch, ownProps)

          mergedProps = mergeProps(stateProps, dispatchProps, ownProps)
          return mergedProps
        }

        function handleNewProps() {
          if (mapStateToProps.dependsOnOwnProps)
            stateProps = mapStateToProps(state, ownProps)

          if (mapDispatchToProps.dependsOnOwnProps)
            dispatchProps = mapDispatchToProps(dispatch, ownProps)

          mergedProps = mergeProps(stateProps, dispatchProps, ownProps)
          return mergedProps
        }

        function handleNewState() {
          var nextStateProps = mapStateToProps(state, ownProps)
          var statePropsChanged = !areStatePropsEqual(
            nextStateProps,
            stateProps
          )
          stateProps = nextStateProps

          if (statePropsChanged)
            mergedProps = mergeProps(stateProps, dispatchProps, ownProps)

          return mergedProps
        }

        function handleSubsequentCalls(nextState, nextOwnProps) {
          var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps)
          var stateChanged = !areStatesEqual(nextState, state)
          state = nextState
          ownProps = nextOwnProps

          if (propsChanged && stateChanged) return handleNewPropsAndNewState()
          if (propsChanged) return handleNewProps()
          if (stateChanged) return handleNewState()
          return mergedProps
        }

        return function pureFinalPropsSelector(nextState, nextOwnProps) {
          return hasRunAtLeastOnce
            ? handleSubsequentCalls(nextState, nextOwnProps)
            : handleFirstCall(nextState, nextOwnProps)
        }
      }

      // TODO: Add more comments

      // If pure is true, the selector returned by selectorFactory will memoize its results,
      // allowing connectAdvanced's shouldComponentUpdate to return false if final
      // props have not changed. If false, the selector will always return a new
      // object and shouldComponentUpdate will always return true.

      function finalPropsSelectorFactory(dispatch, _ref2) {
        var initMapStateToProps = _ref2.initMapStateToProps,
          initMapDispatchToProps = _ref2.initMapDispatchToProps,
          initMergeProps = _ref2.initMergeProps,
          options = _objectWithoutProperties(_ref2, [
            'initMapStateToProps',
            'initMapDispatchToProps',
            'initMergeProps',
          ])

        var mapStateToProps = initMapStateToProps(dispatch, options)
        var mapDispatchToProps = initMapDispatchToProps(dispatch, options)
        var mergeProps = initMergeProps(dispatch, options)

        if (true) {
          Object(
            __WEBPACK_IMPORTED_MODULE_0__verifySubselectors__['a' /* default */]
          )(
            mapStateToProps,
            mapDispatchToProps,
            mergeProps,
            options.displayName
          )
        }

        var selectorFactory = options.pure
          ? pureFinalPropsSelectorFactory
          : impureFinalPropsSelectorFactory

        return selectorFactory(
          mapStateToProps,
          mapDispatchToProps,
          mergeProps,
          dispatch,
          options
        )
      }

      /***/
    },
    /* 143 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      /* harmony export (immutable) */ __webpack_exports__[
        'a'
      ] = verifySubselectors
      /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_warning__ = __webpack_require__(
        26
      )

      function verify(selector, methodName, displayName) {
        if (!selector) {
          throw new Error(
            'Unexpected value for ' + methodName + ' in ' + displayName + '.'
          )
        } else if (
          methodName === 'mapStateToProps' ||
          methodName === 'mapDispatchToProps'
        ) {
          if (!selector.hasOwnProperty('dependsOnOwnProps')) {
            Object(
              __WEBPACK_IMPORTED_MODULE_0__utils_warning__['a' /* default */]
            )(
              'The selector for ' +
                methodName +
                ' of ' +
                displayName +
                ' did not specify a value for dependsOnOwnProps.'
            )
          }
        }
      }

      function verifySubselectors(
        mapStateToProps,
        mapDispatchToProps,
        mergeProps,
        displayName
      ) {
        verify(mapStateToProps, 'mapStateToProps', displayName)
        verify(mapDispatchToProps, 'mapDispatchToProps', displayName)
        verify(mergeProps, 'mergeProps', displayName)
      }

      /***/
    },
    /* 144 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'
      /* WEBPACK VAR INJECTION */
      ;(function(global) {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.__RewireAPI__ = exports.__ResetDependency__ = exports.__set__ = exports.__Rewire__ = exports.__GetDependency__ = exports.__get__ = undefined

        var _typeof =
          typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
            ? function(obj) {
                return typeof obj
              }
            : function(obj) {
                return obj &&
                  typeof Symbol === 'function' &&
                  obj.constructor === Symbol &&
                  obj !== Symbol.prototype
                  ? 'symbol'
                  : typeof obj
              }

        var _actions = __webpack_require__(17)

        var createConnectRouter = function createConnectRouter(structure) {
          var filterNotRouter = structure.filterNotRouter,
            fromJS = structure.fromJS,
            getIn = structure.getIn,
            merge = structure.merge,
            setIn = structure.setIn
          /**
           * This reducer will update the state with the most recent location history
           * has transitioned to.
           */

          var routerReducer = function routerReducer(state) {
            var _ref =
                arguments.length > 1 && arguments[1] !== undefined
                  ? arguments[1]
                  : {},
              type = _ref.type,
              payload = _ref.payload

            if (type === _get__('LOCATION_CHANGE')) {
              return merge(state, payload)
            }

            return state
          }

          var connectRouter = function connectRouter(history) {
            var initialRouterState = fromJS({
              location: history.location,
              action: history.action,
            })
            // Wrap a root reducer and return a new root reducer with router state
            return function(rootReducer) {
              return function(state, action) {
                var routerState = initialRouterState

                // Extract router state
                if (state) {
                  routerState = getIn(state, ['router']) || routerState
                  state = filterNotRouter(state)
                }
                var reducerResults = rootReducer(state, action)

                return setIn(
                  reducerResults,
                  ['router'],
                  routerReducer(routerState, action)
                )
              }
            }
          }

          return connectRouter
        }

        exports.default = _get__('createConnectRouter')

        function _getGlobalObject() {
          try {
            if (!!global) {
              return global
            }
          } catch (e) {
            try {
              if (!!window) {
                return window
              }
            } catch (e) {
              return this
            }
          }
        }

        var _RewireModuleId__ = null

        function _getRewireModuleId__() {
          if (_RewireModuleId__ === null) {
            var globalVariable = _getGlobalObject()

            if (!globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__) {
              globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__ = 0
            }

            _RewireModuleId__ = __$$GLOBAL_REWIRE_NEXT_MODULE_ID__++
          }

          return _RewireModuleId__
        }

        function _getRewireRegistry__() {
          var theGlobalVariable = _getGlobalObject()

          if (!theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__) {
            theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null)
          }

          return __$$GLOBAL_REWIRE_REGISTRY__
        }

        function _getRewiredData__() {
          var moduleId = _getRewireModuleId__()

          var registry = _getRewireRegistry__()

          var rewireData = registry[moduleId]

          if (!rewireData) {
            registry[moduleId] = Object.create(null)
            rewireData = registry[moduleId]
          }

          return rewireData
        }

        ;(function registerResetAll() {
          var theGlobalVariable = _getGlobalObject()

          if (!theGlobalVariable['__rewire_reset_all__']) {
            theGlobalVariable['__rewire_reset_all__'] = function() {
              theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(
                null
              )
            }
          }
        })()

        var INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__'
        var _RewireAPI__ = {}
        ;(function() {
          function addPropertyToAPIObject(name, value) {
            Object.defineProperty(_RewireAPI__, name, {
              value: value,
              enumerable: false,
              configurable: true,
            })
          }

          addPropertyToAPIObject('__get__', _get__)
          addPropertyToAPIObject('__GetDependency__', _get__)
          addPropertyToAPIObject('__Rewire__', _set__)
          addPropertyToAPIObject('__set__', _set__)
          addPropertyToAPIObject('__reset__', _reset__)
          addPropertyToAPIObject('__ResetDependency__', _reset__)
          addPropertyToAPIObject('__with__', _with__)
        })()

        function _get__(variableName) {
          var rewireData = _getRewiredData__()

          if (rewireData[variableName] === undefined) {
            return _get_original__(variableName)
          } else {
            var value = rewireData[variableName]

            if (value === INTENTIONAL_UNDEFINED) {
              return undefined
            } else {
              return value
            }
          }
        }

        function _get_original__(variableName) {
          switch (variableName) {
            case 'LOCATION_CHANGE':
              return _actions.LOCATION_CHANGE

            case 'createConnectRouter':
              return createConnectRouter
          }

          return undefined
        }

        function _assign__(variableName, value) {
          var rewireData = _getRewiredData__()

          if (rewireData[variableName] === undefined) {
            return _set_original__(variableName, value)
          } else {
            return (rewireData[variableName] = value)
          }
        }

        function _set_original__(variableName, _value) {
          switch (variableName) {
          }

          return undefined
        }

        function _update_operation__(operation, variableName, prefix) {
          var oldValue = _get__(variableName)

          var newValue = operation === '++' ? oldValue + 1 : oldValue - 1

          _assign__(variableName, newValue)

          return prefix ? newValue : oldValue
        }

        function _set__(variableName, value) {
          var rewireData = _getRewiredData__()

          if (
            (typeof variableName === 'undefined'
              ? 'undefined'
              : _typeof(variableName)) === 'object'
          ) {
            Object.keys(variableName).forEach(function(name) {
              rewireData[name] = variableName[name]
            })
          } else {
            if (value === undefined) {
              rewireData[variableName] = INTENTIONAL_UNDEFINED
            } else {
              rewireData[variableName] = value
            }

            return function() {
              _reset__(variableName)
            }
          }
        }

        function _reset__(variableName) {
          var rewireData = _getRewiredData__()

          delete rewireData[variableName]

          if (Object.keys(rewireData).length == 0) {
            delete _getRewireRegistry__()[_getRewireModuleId__]
          }
        }

        function _with__(object) {
          var rewireData = _getRewiredData__()

          var rewiredVariableNames = Object.keys(object)
          var previousValues = {}

          function reset() {
            rewiredVariableNames.forEach(function(variableName) {
              rewireData[variableName] = previousValues[variableName]
            })
          }

          return function(callback) {
            rewiredVariableNames.forEach(function(variableName) {
              previousValues[variableName] = rewireData[variableName]
              rewireData[variableName] = object[variableName]
            })
            var result = callback()

            if (!!result && typeof result.then == 'function') {
              result.then(reset).catch(reset)
            } else {
              reset()
            }

            return result
          }
        }

        var _typeOfOriginalExport =
          typeof createConnectRouter === 'undefined'
            ? 'undefined'
            : _typeof(createConnectRouter)

        function addNonEnumerableProperty(name, value) {
          Object.defineProperty(createConnectRouter, name, {
            value: value,
            enumerable: false,
            configurable: true,
          })
        }

        if (
          (_typeOfOriginalExport === 'object' ||
            _typeOfOriginalExport === 'function') &&
          Object.isExtensible(createConnectRouter)
        ) {
          addNonEnumerableProperty('__get__', _get__)
          addNonEnumerableProperty('__GetDependency__', _get__)
          addNonEnumerableProperty('__Rewire__', _set__)
          addNonEnumerableProperty('__set__', _set__)
          addNonEnumerableProperty('__reset__', _reset__)
          addNonEnumerableProperty('__ResetDependency__', _reset__)
          addNonEnumerableProperty('__with__', _with__)
          addNonEnumerableProperty('__RewireAPI__', _RewireAPI__)
        }

        exports.__get__ = _get__
        exports.__GetDependency__ = _get__
        exports.__Rewire__ = _set__
        exports.__set__ = _set__
        exports.__ResetDependency__ = _reset__
        exports.__RewireAPI__ = _RewireAPI__
        /* WEBPACK VAR INJECTION */
      }.call(exports, __webpack_require__(2)))

      /***/
    },
    /* 145 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'
      /* WEBPACK VAR INJECTION */
      ;(function(global) {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.__RewireAPI__ = exports.__ResetDependency__ = exports.__set__ = exports.__Rewire__ = exports.__GetDependency__ = exports.__get__ = undefined

        var _typeof =
          typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
            ? function(obj) {
                return typeof obj
              }
            : function(obj) {
                return obj &&
                  typeof Symbol === 'function' &&
                  obj.constructor === Symbol &&
                  obj !== Symbol.prototype
                  ? 'symbol'
                  : typeof obj
              }

        var _actions = __webpack_require__(17)

        function _toConsumableArray(arr) {
          if (Array.isArray(arr)) {
            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
              arr2[i] = arr[i]
            }
            return arr2
          } else {
            return Array.from(arr)
          }
        }

        /**
         * This middleware captures CALL_HISTORY_METHOD actions to redirect to the
         * provided history object. This will prevent these actions from reaching your
         * reducer or any middleware that comes after this one.
         */
        var routerMiddleware = function routerMiddleware(history) {
          return function(store) {
            return function(next) {
              return function(action) {
                // eslint-disable-line no-unused-vars
                if (action.type !== _get__('CALL_HISTORY_METHOD')) {
                  return next(action)
                }

                var _action$payload = action.payload,
                  method = _action$payload.method,
                  args = _action$payload.args

                history[method].apply(history, _toConsumableArray(args))
              }
            }
          }
        }

        exports.default = _get__('routerMiddleware')

        function _getGlobalObject() {
          try {
            if (!!global) {
              return global
            }
          } catch (e) {
            try {
              if (!!window) {
                return window
              }
            } catch (e) {
              return this
            }
          }
        }

        var _RewireModuleId__ = null

        function _getRewireModuleId__() {
          if (_RewireModuleId__ === null) {
            var globalVariable = _getGlobalObject()

            if (!globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__) {
              globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__ = 0
            }

            _RewireModuleId__ = __$$GLOBAL_REWIRE_NEXT_MODULE_ID__++
          }

          return _RewireModuleId__
        }

        function _getRewireRegistry__() {
          var theGlobalVariable = _getGlobalObject()

          if (!theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__) {
            theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null)
          }

          return __$$GLOBAL_REWIRE_REGISTRY__
        }

        function _getRewiredData__() {
          var moduleId = _getRewireModuleId__()

          var registry = _getRewireRegistry__()

          var rewireData = registry[moduleId]

          if (!rewireData) {
            registry[moduleId] = Object.create(null)
            rewireData = registry[moduleId]
          }

          return rewireData
        }

        ;(function registerResetAll() {
          var theGlobalVariable = _getGlobalObject()

          if (!theGlobalVariable['__rewire_reset_all__']) {
            theGlobalVariable['__rewire_reset_all__'] = function() {
              theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(
                null
              )
            }
          }
        })()

        var INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__'
        var _RewireAPI__ = {}
        ;(function() {
          function addPropertyToAPIObject(name, value) {
            Object.defineProperty(_RewireAPI__, name, {
              value: value,
              enumerable: false,
              configurable: true,
            })
          }

          addPropertyToAPIObject('__get__', _get__)
          addPropertyToAPIObject('__GetDependency__', _get__)
          addPropertyToAPIObject('__Rewire__', _set__)
          addPropertyToAPIObject('__set__', _set__)
          addPropertyToAPIObject('__reset__', _reset__)
          addPropertyToAPIObject('__ResetDependency__', _reset__)
          addPropertyToAPIObject('__with__', _with__)
        })()

        function _get__(variableName) {
          var rewireData = _getRewiredData__()

          if (rewireData[variableName] === undefined) {
            return _get_original__(variableName)
          } else {
            var value = rewireData[variableName]

            if (value === INTENTIONAL_UNDEFINED) {
              return undefined
            } else {
              return value
            }
          }
        }

        function _get_original__(variableName) {
          switch (variableName) {
            case 'CALL_HISTORY_METHOD':
              return _actions.CALL_HISTORY_METHOD

            case 'routerMiddleware':
              return routerMiddleware
          }

          return undefined
        }

        function _assign__(variableName, value) {
          var rewireData = _getRewiredData__()

          if (rewireData[variableName] === undefined) {
            return _set_original__(variableName, value)
          } else {
            return (rewireData[variableName] = value)
          }
        }

        function _set_original__(variableName, _value) {
          switch (variableName) {
          }

          return undefined
        }

        function _update_operation__(operation, variableName, prefix) {
          var oldValue = _get__(variableName)

          var newValue = operation === '++' ? oldValue + 1 : oldValue - 1

          _assign__(variableName, newValue)

          return prefix ? newValue : oldValue
        }

        function _set__(variableName, value) {
          var rewireData = _getRewiredData__()

          if (
            (typeof variableName === 'undefined'
              ? 'undefined'
              : _typeof(variableName)) === 'object'
          ) {
            Object.keys(variableName).forEach(function(name) {
              rewireData[name] = variableName[name]
            })
          } else {
            if (value === undefined) {
              rewireData[variableName] = INTENTIONAL_UNDEFINED
            } else {
              rewireData[variableName] = value
            }

            return function() {
              _reset__(variableName)
            }
          }
        }

        function _reset__(variableName) {
          var rewireData = _getRewiredData__()

          delete rewireData[variableName]

          if (Object.keys(rewireData).length == 0) {
            delete _getRewireRegistry__()[_getRewireModuleId__]
          }
        }

        function _with__(object) {
          var rewireData = _getRewiredData__()

          var rewiredVariableNames = Object.keys(object)
          var previousValues = {}

          function reset() {
            rewiredVariableNames.forEach(function(variableName) {
              rewireData[variableName] = previousValues[variableName]
            })
          }

          return function(callback) {
            rewiredVariableNames.forEach(function(variableName) {
              previousValues[variableName] = rewireData[variableName]
              rewireData[variableName] = object[variableName]
            })
            var result = callback()

            if (!!result && typeof result.then == 'function') {
              result.then(reset).catch(reset)
            } else {
              reset()
            }

            return result
          }
        }

        var _typeOfOriginalExport =
          typeof routerMiddleware === 'undefined'
            ? 'undefined'
            : _typeof(routerMiddleware)

        function addNonEnumerableProperty(name, value) {
          Object.defineProperty(routerMiddleware, name, {
            value: value,
            enumerable: false,
            configurable: true,
          })
        }

        if (
          (_typeOfOriginalExport === 'object' ||
            _typeOfOriginalExport === 'function') &&
          Object.isExtensible(routerMiddleware)
        ) {
          addNonEnumerableProperty('__get__', _get__)
          addNonEnumerableProperty('__GetDependency__', _get__)
          addNonEnumerableProperty('__Rewire__', _set__)
          addNonEnumerableProperty('__set__', _set__)
          addNonEnumerableProperty('__reset__', _reset__)
          addNonEnumerableProperty('__ResetDependency__', _reset__)
          addNonEnumerableProperty('__with__', _with__)
          addNonEnumerableProperty('__RewireAPI__', _RewireAPI__)
        }

        exports.__get__ = _get__
        exports.__GetDependency__ = _get__
        exports.__Rewire__ = _set__
        exports.__set__ = _set__
        exports.__ResetDependency__ = _reset__
        exports.__RewireAPI__ = _RewireAPI__
        /* WEBPACK VAR INJECTION */
      }.call(exports, __webpack_require__(2)))

      /***/
    },
    /* 146 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'
      /* WEBPACK VAR INJECTION */
      ;(function(global) {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        })
        exports.__RewireAPI__ = exports.__ResetDependency__ = exports.__set__ = exports.__Rewire__ = exports.__GetDependency__ = exports.__get__ = undefined

        var _typeof =
          typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
            ? function(obj) {
                return typeof obj
              }
            : function(obj) {
                return obj &&
                  typeof Symbol === 'function' &&
                  obj.constructor === Symbol &&
                  obj !== Symbol.prototype
                  ? 'symbol'
                  : typeof obj
              }

        var _extends =
          Object.assign ||
          function(target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i]
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key]
                }
              }
            }
            return target
          }

        var _getIn = __webpack_require__(147)

        var _getIn2 = _interopRequireDefault(_getIn)

        var _setIn = __webpack_require__(148)

        var _setIn2 = _interopRequireDefault(_setIn)

        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj }
        }

        function _objectWithoutProperties(obj, keys) {
          var target = {}
          for (var i in obj) {
            if (keys.indexOf(i) >= 0) continue
            if (!Object.prototype.hasOwnProperty.call(obj, i)) continue
            target[i] = obj[i]
          }
          return target
        }

        var structure = {
          filterNotRouter: function filterNotRouter(state) {
            var router = state.router,
              rest = _objectWithoutProperties(state, ['router']) // eslint-disable-line no-unused-vars

            return rest
          },
          fromJS: function fromJS(value) {
            return value
          },
          getIn: _get__('getIn'),
          merge: function merge(state, payload) {
            return _extends({}, state, payload)
          },
          setIn: _get__('setIn'),
          toJS: function toJS(value) {
            return value
          },
        }

        exports.default = _get__('structure')

        function _getGlobalObject() {
          try {
            if (!!global) {
              return global
            }
          } catch (e) {
            try {
              if (!!window) {
                return window
              }
            } catch (e) {
              return this
            }
          }
        }

        var _RewireModuleId__ = null

        function _getRewireModuleId__() {
          if (_RewireModuleId__ === null) {
            var globalVariable = _getGlobalObject()

            if (!globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__) {
              globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__ = 0
            }

            _RewireModuleId__ = __$$GLOBAL_REWIRE_NEXT_MODULE_ID__++
          }

          return _RewireModuleId__
        }

        function _getRewireRegistry__() {
          var theGlobalVariable = _getGlobalObject()

          if (!theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__) {
            theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null)
          }

          return __$$GLOBAL_REWIRE_REGISTRY__
        }

        function _getRewiredData__() {
          var moduleId = _getRewireModuleId__()

          var registry = _getRewireRegistry__()

          var rewireData = registry[moduleId]

          if (!rewireData) {
            registry[moduleId] = Object.create(null)
            rewireData = registry[moduleId]
          }

          return rewireData
        }

        ;(function registerResetAll() {
          var theGlobalVariable = _getGlobalObject()

          if (!theGlobalVariable['__rewire_reset_all__']) {
            theGlobalVariable['__rewire_reset_all__'] = function() {
              theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(
                null
              )
            }
          }
        })()

        var INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__'
        var _RewireAPI__ = {}
        ;(function() {
          function addPropertyToAPIObject(name, value) {
            Object.defineProperty(_RewireAPI__, name, {
              value: value,
              enumerable: false,
              configurable: true,
            })
          }

          addPropertyToAPIObject('__get__', _get__)
          addPropertyToAPIObject('__GetDependency__', _get__)
          addPropertyToAPIObject('__Rewire__', _set__)
          addPropertyToAPIObject('__set__', _set__)
          addPropertyToAPIObject('__reset__', _reset__)
          addPropertyToAPIObject('__ResetDependency__', _reset__)
          addPropertyToAPIObject('__with__', _with__)
        })()

        function _get__(variableName) {
          var rewireData = _getRewiredData__()

          if (rewireData[variableName] === undefined) {
            return _get_original__(variableName)
          } else {
            var value = rewireData[variableName]

            if (value === INTENTIONAL_UNDEFINED) {
              return undefined
            } else {
              return value
            }
          }
        }

        function _get_original__(variableName) {
          switch (variableName) {
            case 'getIn':
              return _getIn2.default

            case 'setIn':
              return _setIn2.default

            case 'structure':
              return structure
          }

          return undefined
        }

        function _assign__(variableName, value) {
          var rewireData = _getRewiredData__()

          if (rewireData[variableName] === undefined) {
            return _set_original__(variableName, value)
          } else {
            return (rewireData[variableName] = value)
          }
        }

        function _set_original__(variableName, _value) {
          switch (variableName) {
          }

          return undefined
        }

        function _update_operation__(operation, variableName, prefix) {
          var oldValue = _get__(variableName)

          var newValue = operation === '++' ? oldValue + 1 : oldValue - 1

          _assign__(variableName, newValue)

          return prefix ? newValue : oldValue
        }

        function _set__(variableName, value) {
          var rewireData = _getRewiredData__()

          if (
            (typeof variableName === 'undefined'
              ? 'undefined'
              : _typeof(variableName)) === 'object'
          ) {
            Object.keys(variableName).forEach(function(name) {
              rewireData[name] = variableName[name]
            })
          } else {
            if (value === undefined) {
              rewireData[variableName] = INTENTIONAL_UNDEFINED
            } else {
              rewireData[variableName] = value
            }

            return function() {
              _reset__(variableName)
            }
          }
        }

        function _reset__(variableName) {
          var rewireData = _getRewiredData__()

          delete rewireData[variableName]

          if (Object.keys(rewireData).length == 0) {
            delete _getRewireRegistry__()[_getRewireModuleId__]
          }
        }

        function _with__(object) {
          var rewireData = _getRewiredData__()

          var rewiredVariableNames = Object.keys(object)
          var previousValues = {}

          function reset() {
            rewiredVariableNames.forEach(function(variableName) {
              rewireData[variableName] = previousValues[variableName]
            })
          }

          return function(callback) {
            rewiredVariableNames.forEach(function(variableName) {
              previousValues[variableName] = rewireData[variableName]
              rewireData[variableName] = object[variableName]
            })
            var result = callback()

            if (!!result && typeof result.then == 'function') {
              result.then(reset).catch(reset)
            } else {
              reset()
            }

            return result
          }
        }

        var _typeOfOriginalExport =
          typeof structure === 'undefined' ? 'undefined' : _typeof(structure)

        function addNonEnumerableProperty(name, value) {
          Object.defineProperty(structure, name, {
            value: value,
            enumerable: false,
            configurable: true,
          })
        }

        if (
          (_typeOfOriginalExport === 'object' ||
            _typeOfOriginalExport === 'function') &&
          Object.isExtensible(structure)
        ) {
          addNonEnumerableProperty('__get__', _get__)
          addNonEnumerableProperty('__GetDependency__', _get__)
          addNonEnumerableProperty('__Rewire__', _set__)
          addNonEnumerableProperty('__set__', _set__)
          addNonEnumerableProperty('__reset__', _reset__)
          addNonEnumerableProperty('__ResetDependency__', _reset__)
          addNonEnumerableProperty('__with__', _with__)
          addNonEnumerableProperty('__RewireAPI__', _RewireAPI__)
        }

        exports.__get__ = _get__
        exports.__GetDependency__ = _get__
        exports.__Rewire__ = _set__
        exports.__set__ = _set__
        exports.__ResetDependency__ = _reset__
        exports.__RewireAPI__ = _RewireAPI__
        /* WEBPACK VAR INJECTION */
      }.call(exports, __webpack_require__(2)))

      /***/
    },
    /* 147 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'
      /* WEBPACK VAR INJECTION */
      ;(function(global) {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        })

        var _typeof =
          typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
            ? function(obj) {
                return typeof obj
              }
            : function(obj) {
                return obj &&
                  typeof Symbol === 'function' &&
                  obj.constructor === Symbol &&
                  obj !== Symbol.prototype
                  ? 'symbol'
                  : typeof obj
              }

        /* Code from github.com/erikras/redux-form by Erik Rasmussen */

        var getIn = function getIn(state, path) {
          if (!state) {
            return state
          }

          var length = path.length
          if (!length) {
            return undefined
          }

          var result = state
          for (var i = 0; i < length && !!result; ++i) {
            result = result[path[i]]
          }

          return result
        }

        exports.default = _get__('getIn')

        function _getGlobalObject() {
          try {
            if (!!global) {
              return global
            }
          } catch (e) {
            try {
              if (!!window) {
                return window
              }
            } catch (e) {
              return this
            }
          }
        }

        var _RewireModuleId__ = null

        function _getRewireModuleId__() {
          if (_RewireModuleId__ === null) {
            var globalVariable = _getGlobalObject()

            if (!globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__) {
              globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__ = 0
            }

            _RewireModuleId__ = __$$GLOBAL_REWIRE_NEXT_MODULE_ID__++
          }

          return _RewireModuleId__
        }

        function _getRewireRegistry__() {
          var theGlobalVariable = _getGlobalObject()

          if (!theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__) {
            theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null)
          }

          return __$$GLOBAL_REWIRE_REGISTRY__
        }

        function _getRewiredData__() {
          var moduleId = _getRewireModuleId__()

          var registry = _getRewireRegistry__()

          var rewireData = registry[moduleId]

          if (!rewireData) {
            registry[moduleId] = Object.create(null)
            rewireData = registry[moduleId]
          }

          return rewireData
        }

        ;(function registerResetAll() {
          var theGlobalVariable = _getGlobalObject()

          if (!theGlobalVariable['__rewire_reset_all__']) {
            theGlobalVariable['__rewire_reset_all__'] = function() {
              theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(
                null
              )
            }
          }
        })()

        var INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__'
        var _RewireAPI__ = {}
        ;(function() {
          function addPropertyToAPIObject(name, value) {
            Object.defineProperty(_RewireAPI__, name, {
              value: value,
              enumerable: false,
              configurable: true,
            })
          }

          addPropertyToAPIObject('__get__', _get__)
          addPropertyToAPIObject('__GetDependency__', _get__)
          addPropertyToAPIObject('__Rewire__', _set__)
          addPropertyToAPIObject('__set__', _set__)
          addPropertyToAPIObject('__reset__', _reset__)
          addPropertyToAPIObject('__ResetDependency__', _reset__)
          addPropertyToAPIObject('__with__', _with__)
        })()

        function _get__(variableName) {
          var rewireData = _getRewiredData__()

          if (rewireData[variableName] === undefined) {
            return _get_original__(variableName)
          } else {
            var value = rewireData[variableName]

            if (value === INTENTIONAL_UNDEFINED) {
              return undefined
            } else {
              return value
            }
          }
        }

        function _get_original__(variableName) {
          switch (variableName) {
            case 'getIn':
              return getIn
          }

          return undefined
        }

        function _assign__(variableName, value) {
          var rewireData = _getRewiredData__()

          if (rewireData[variableName] === undefined) {
            return _set_original__(variableName, value)
          } else {
            return (rewireData[variableName] = value)
          }
        }

        function _set_original__(variableName, _value) {
          switch (variableName) {
          }

          return undefined
        }

        function _update_operation__(operation, variableName, prefix) {
          var oldValue = _get__(variableName)

          var newValue = operation === '++' ? oldValue + 1 : oldValue - 1

          _assign__(variableName, newValue)

          return prefix ? newValue : oldValue
        }

        function _set__(variableName, value) {
          var rewireData = _getRewiredData__()

          if (
            (typeof variableName === 'undefined'
              ? 'undefined'
              : _typeof(variableName)) === 'object'
          ) {
            Object.keys(variableName).forEach(function(name) {
              rewireData[name] = variableName[name]
            })
          } else {
            if (value === undefined) {
              rewireData[variableName] = INTENTIONAL_UNDEFINED
            } else {
              rewireData[variableName] = value
            }

            return function() {
              _reset__(variableName)
            }
          }
        }

        function _reset__(variableName) {
          var rewireData = _getRewiredData__()

          delete rewireData[variableName]

          if (Object.keys(rewireData).length == 0) {
            delete _getRewireRegistry__()[_getRewireModuleId__]
          }
        }

        function _with__(object) {
          var rewireData = _getRewiredData__()

          var rewiredVariableNames = Object.keys(object)
          var previousValues = {}

          function reset() {
            rewiredVariableNames.forEach(function(variableName) {
              rewireData[variableName] = previousValues[variableName]
            })
          }

          return function(callback) {
            rewiredVariableNames.forEach(function(variableName) {
              previousValues[variableName] = rewireData[variableName]
              rewireData[variableName] = object[variableName]
            })
            var result = callback()

            if (!!result && typeof result.then == 'function') {
              result.then(reset).catch(reset)
            } else {
              reset()
            }

            return result
          }
        }

        var _typeOfOriginalExport =
          typeof getIn === 'undefined' ? 'undefined' : _typeof(getIn)

        function addNonEnumerableProperty(name, value) {
          Object.defineProperty(getIn, name, {
            value: value,
            enumerable: false,
            configurable: true,
          })
        }

        if (
          (_typeOfOriginalExport === 'object' ||
            _typeOfOriginalExport === 'function') &&
          Object.isExtensible(getIn)
        ) {
          addNonEnumerableProperty('__get__', _get__)
          addNonEnumerableProperty('__GetDependency__', _get__)
          addNonEnumerableProperty('__Rewire__', _set__)
          addNonEnumerableProperty('__set__', _set__)
          addNonEnumerableProperty('__reset__', _reset__)
          addNonEnumerableProperty('__ResetDependency__', _reset__)
          addNonEnumerableProperty('__with__', _with__)
          addNonEnumerableProperty('__RewireAPI__', _RewireAPI__)
        }

        exports.__get__ = _get__
        exports.__GetDependency__ = _get__
        exports.__Rewire__ = _set__
        exports.__set__ = _set__
        exports.__ResetDependency__ = _reset__
        exports.__RewireAPI__ = _RewireAPI__
        /* WEBPACK VAR INJECTION */
      }.call(exports, __webpack_require__(2)))

      /***/
    },
    /* 148 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'
      /* WEBPACK VAR INJECTION */
      ;(function(global) {
        Object.defineProperty(exports, '__esModule', {
          value: true,
        })

        var _typeof =
          typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol'
            ? function(obj) {
                return typeof obj
              }
            : function(obj) {
                return obj &&
                  typeof Symbol === 'function' &&
                  obj.constructor === Symbol &&
                  obj !== Symbol.prototype
                  ? 'symbol'
                  : typeof obj
              }

        var _extends =
          Object.assign ||
          function(target) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i]
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target[key] = source[key]
                }
              }
            }
            return target
          }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true,
            })
          } else {
            obj[key] = value
          }
          return obj
        }

        /* Code from github.com/erikras/redux-form by Erik Rasmussen */

        var setInWithPath = function setInWithPath(
          state,
          value,
          path,
          pathIndex
        ) {
          if (pathIndex >= path.length) {
            return value
          }

          var first = path[pathIndex]
          var next = _get__('setInWithPath')(
            state && state[first],
            value,
            path,
            pathIndex + 1
          )

          if (!state) {
            var initialized = isNaN(first) ? {} : []
            initialized[first] = next
            return initialized
          }

          if (Array.isArray(state)) {
            var copy = [].concat(state)
            copy[first] = next
            return copy
          }

          return _extends({}, state, _defineProperty({}, first, next))
        }

        var setIn = function setIn(state, field, value) {
          return _get__('setInWithPath')(state, value, field, 0)
        }

        exports.default = _get__('setIn')

        function _getGlobalObject() {
          try {
            if (!!global) {
              return global
            }
          } catch (e) {
            try {
              if (!!window) {
                return window
              }
            } catch (e) {
              return this
            }
          }
        }

        var _RewireModuleId__ = null

        function _getRewireModuleId__() {
          if (_RewireModuleId__ === null) {
            var globalVariable = _getGlobalObject()

            if (!globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__) {
              globalVariable.__$$GLOBAL_REWIRE_NEXT_MODULE_ID__ = 0
            }

            _RewireModuleId__ = __$$GLOBAL_REWIRE_NEXT_MODULE_ID__++
          }

          return _RewireModuleId__
        }

        function _getRewireRegistry__() {
          var theGlobalVariable = _getGlobalObject()

          if (!theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__) {
            theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(null)
          }

          return __$$GLOBAL_REWIRE_REGISTRY__
        }

        function _getRewiredData__() {
          var moduleId = _getRewireModuleId__()

          var registry = _getRewireRegistry__()

          var rewireData = registry[moduleId]

          if (!rewireData) {
            registry[moduleId] = Object.create(null)
            rewireData = registry[moduleId]
          }

          return rewireData
        }

        ;(function registerResetAll() {
          var theGlobalVariable = _getGlobalObject()

          if (!theGlobalVariable['__rewire_reset_all__']) {
            theGlobalVariable['__rewire_reset_all__'] = function() {
              theGlobalVariable.__$$GLOBAL_REWIRE_REGISTRY__ = Object.create(
                null
              )
            }
          }
        })()

        var INTENTIONAL_UNDEFINED = '__INTENTIONAL_UNDEFINED__'
        var _RewireAPI__ = {}
        ;(function() {
          function addPropertyToAPIObject(name, value) {
            Object.defineProperty(_RewireAPI__, name, {
              value: value,
              enumerable: false,
              configurable: true,
            })
          }

          addPropertyToAPIObject('__get__', _get__)
          addPropertyToAPIObject('__GetDependency__', _get__)
          addPropertyToAPIObject('__Rewire__', _set__)
          addPropertyToAPIObject('__set__', _set__)
          addPropertyToAPIObject('__reset__', _reset__)
          addPropertyToAPIObject('__ResetDependency__', _reset__)
          addPropertyToAPIObject('__with__', _with__)
        })()

        function _get__(variableName) {
          var rewireData = _getRewiredData__()

          if (rewireData[variableName] === undefined) {
            return _get_original__(variableName)
          } else {
            var value = rewireData[variableName]

            if (value === INTENTIONAL_UNDEFINED) {
              return undefined
            } else {
              return value
            }
          }
        }

        function _get_original__(variableName) {
          switch (variableName) {
            case 'setInWithPath':
              return setInWithPath

            case 'setIn':
              return setIn
          }

          return undefined
        }

        function _assign__(variableName, value) {
          var rewireData = _getRewiredData__()

          if (rewireData[variableName] === undefined) {
            return _set_original__(variableName, value)
          } else {
            return (rewireData[variableName] = value)
          }
        }

        function _set_original__(variableName, _value) {
          switch (variableName) {
          }

          return undefined
        }

        function _update_operation__(operation, variableName, prefix) {
          var oldValue = _get__(variableName)

          var newValue = operation === '++' ? oldValue + 1 : oldValue - 1

          _assign__(variableName, newValue)

          return prefix ? newValue : oldValue
        }

        function _set__(variableName, value) {
          var rewireData = _getRewiredData__()

          if (
            (typeof variableName === 'undefined'
              ? 'undefined'
              : _typeof(variableName)) === 'object'
          ) {
            Object.keys(variableName).forEach(function(name) {
              rewireData[name] = variableName[name]
            })
          } else {
            if (value === undefined) {
              rewireData[variableName] = INTENTIONAL_UNDEFINED
            } else {
              rewireData[variableName] = value
            }

            return function() {
              _reset__(variableName)
            }
          }
        }

        function _reset__(variableName) {
          var rewireData = _getRewiredData__()

          delete rewireData[variableName]

          if (Object.keys(rewireData).length == 0) {
            delete _getRewireRegistry__()[_getRewireModuleId__]
          }
        }

        function _with__(object) {
          var rewireData = _getRewiredData__()

          var rewiredVariableNames = Object.keys(object)
          var previousValues = {}

          function reset() {
            rewiredVariableNames.forEach(function(variableName) {
              rewireData[variableName] = previousValues[variableName]
            })
          }

          return function(callback) {
            rewiredVariableNames.forEach(function(variableName) {
              previousValues[variableName] = rewireData[variableName]
              rewireData[variableName] = object[variableName]
            })
            var result = callback()

            if (!!result && typeof result.then == 'function') {
              result.then(reset).catch(reset)
            } else {
              reset()
            }

            return result
          }
        }

        var _typeOfOriginalExport =
          typeof setIn === 'undefined' ? 'undefined' : _typeof(setIn)

        function addNonEnumerableProperty(name, value) {
          Object.defineProperty(setIn, name, {
            value: value,
            enumerable: false,
            configurable: true,
          })
        }

        if (
          (_typeOfOriginalExport === 'object' ||
            _typeOfOriginalExport === 'function') &&
          Object.isExtensible(setIn)
        ) {
          addNonEnumerableProperty('__get__', _get__)
          addNonEnumerableProperty('__GetDependency__', _get__)
          addNonEnumerableProperty('__Rewire__', _set__)
          addNonEnumerableProperty('__set__', _set__)
          addNonEnumerableProperty('__reset__', _reset__)
          addNonEnumerableProperty('__ResetDependency__', _reset__)
          addNonEnumerableProperty('__with__', _with__)
          addNonEnumerableProperty('__RewireAPI__', _RewireAPI__)
        }

        exports.__get__ = _get__
        exports.__GetDependency__ = _get__
        exports.__Rewire__ = _set__
        exports.__set__ = _set__
        exports.__ResetDependency__ = _reset__
        exports.__RewireAPI__ = _RewireAPI__
        /* WEBPACK VAR INJECTION */
      }.call(exports, __webpack_require__(2)))

      /***/
    },
    /* 149 */
    /***/ function(module, exports, __webpack_require__) {
      Object.defineProperty(exports, '__esModule', { value: true })
      exports.history = undefined
      exports.default = configureStore
      var _redux = __webpack_require__(27)
      var _history = __webpack_require__(42)
      var _reduxThunk = __webpack_require__(150)
      var _reduxThunk2 = _interopRequireDefault(_reduxThunk)
      var _connectedReactRouter = __webpack_require__(46)
      var _index = __webpack_require__(151)
      var _index2 = _interopRequireDefault(_index)
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }
      var createStoreWithMiddleware = (0, _redux.applyMiddleware)(
        _reduxThunk2.default
      )(_redux.createStore)
      var history = (exports.history = (0, _history.createBrowserHistory)())
      function configureStore(initialState) {
        var store = createStoreWithMiddleware(
          (0, _connectedReactRouter.connectRouter)(history)(_index2.default),
          initialState,
          (0, _redux.compose)(
            (0, _redux.applyMiddleware)(
              (0, _connectedReactRouter.routerMiddleware)(history)
            )
          )
        )
        return store
      }

      /***/
    },
    /* 150 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true
      function createThunkMiddleware(extraArgument) {
        return function(_ref) {
          var dispatch = _ref.dispatch,
            getState = _ref.getState
          return function(next) {
            return function(action) {
              if (typeof action === 'function') {
                return action(dispatch, getState, extraArgument)
              }

              return next(action)
            }
          }
        }
      }

      var thunk = createThunkMiddleware()
      thunk.withExtraArgument = createThunkMiddleware

      exports['default'] = thunk

      /***/
    },
    /* 151 */
    /***/ function(module, exports, __webpack_require__) {
      Object.defineProperty(exports, '__esModule', { value: true })
      var _redux = __webpack_require__(27)
      var _loginReducer = __webpack_require__(152)
      var _loginReducer2 = _interopRequireDefault(_loginReducer)
      var _counterReducer = __webpack_require__(153)
      var _counterReducer2 = _interopRequireDefault(_counterReducer)
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }
      var rootReducer = (0, _redux.combineReducers)({
        loginIn: _loginReducer2.default,
        counter: _counterReducer2.default,
      })
      exports.default = rootReducer

      /***/
    },
    /* 152 */
    /***/ function(module, exports, __webpack_require__) {
      Object.defineProperty(exports, '__esModule', { value: true })
      var _extends =
        Object.assign ||
        function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i]
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key]
              }
            }
          }
          return target
        }
      exports.default = loginIn
      var _loginTypes = __webpack_require__(55)
      var types = _interopRequireWildcard(_loginTypes)
      function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
          return obj
        } else {
          var newObj = {}
          if (obj != null) {
            for (var key in obj) {
              if (Object.prototype.hasOwnProperty.call(obj, key))
                newObj[key] = obj[key]
            }
          }
          newObj.default = obj
          return newObj
        }
      }
      var initialState = { status: '点击登录', isSuccess: false, user: null }
      function loginIn() {
        var state =
          arguments.length > 0 && arguments[0] !== undefined
            ? arguments[0]
            : initialState
        var action = arguments[1]
        switch (action.type) {
          case types.LOGIN_IN_DOING:
            return _extends({}, state, {
              status: '正在登陆',
              isSuccess: false,
              user: null,
            })
            break
          case types.LOGIN_IN_DONE:
            return _extends({}, state, {
              status: '登陆成功',
              isSuccess: true,
              user: action.user,
            })
            break
          case types.LOGIN_IN_ERROR:
            return _extends({}, state, {
              status: '登录出错',
              isSuccess: true,
              user: null,
            })
            break
          default:
            return state
        }
      }

      /***/
    },
    /* 153 */
    /***/ function(module, exports, __webpack_require__) {
      Object.defineProperty(exports, '__esModule', { value: true })
      var _extends =
        Object.assign ||
        function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i]
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key]
              }
            }
          }
          return target
        }
      exports.default = counter
      var _counterTypes = __webpack_require__(56)
      var types = _interopRequireWildcard(_counterTypes)
      function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
          return obj
        } else {
          var newObj = {}
          if (obj != null) {
            for (var key in obj) {
              if (Object.prototype.hasOwnProperty.call(obj, key))
                newObj[key] = obj[key]
            }
          }
          newObj.default = obj
          return newObj
        }
      }
      var initialState = { count: 0, user: null }
      function counter() {
        var state =
          arguments.length > 0 && arguments[0] !== undefined
            ? arguments[0]
            : initialState
        var action = arguments[1]
        switch (action.type) {
          case types.INCREMENT:
            return _extends({}, state, { count: state.count + 1 })
            break
          case types.DECREMENT:
            return _extends({}, state, { count: state.count - 1 })
            break
          default:
            return state
        }
      }

      /***/
    },
    /* 154 */
    /***/ function(module, exports, __webpack_require__) {
      Object.defineProperty(exports, '__esModule', { value: true })
      var _jsxFileName =
        '/Users/glodon/glodon/react/testReact/app/redux/pages/LoginPage.js'
      var _createClass = (function() {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i]
            descriptor.enumerable = descriptor.enumerable || false
            descriptor.configurable = true
            if ('value' in descriptor) descriptor.writable = true
            Object.defineProperty(target, descriptor.key, descriptor)
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps) defineProperties(Constructor.prototype, protoProps)
          if (staticProps) defineProperties(Constructor, staticProps)
          return Constructor
        }
      })()
      var _react = __webpack_require__(1)
      var _react2 = _interopRequireDefault(_react)
      var _View = __webpack_require__(12)
      var _View2 = _interopRequireDefault(_View)
      var _Text = __webpack_require__(19)
      var _Text2 = _interopRequireDefault(_Text)
      var _StyleSheet = __webpack_require__(5)
      var _StyleSheet2 = _interopRequireDefault(_StyleSheet)
      var _TouchableOpacity = __webpack_require__(36)
      var _TouchableOpacity2 = _interopRequireDefault(_TouchableOpacity)
      var _reactRedux = __webpack_require__(18)
      var _loginAction = __webpack_require__(213)
      var loginAction = _interopRequireWildcard(_loginAction)
      function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
          return obj
        } else {
          var newObj = {}
          if (obj != null) {
            for (var key in obj) {
              if (Object.prototype.hasOwnProperty.call(obj, key))
                newObj[key] = obj[key]
            }
          }
          newObj.default = obj
          return newObj
        }
      }
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError('Cannot call a class as a function')
        }
      }
      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          )
        }
        return call && (typeof call === 'object' || typeof call === 'function')
          ? call
          : self
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== 'function' && superClass !== null) {
          throw new TypeError(
            'Super expression must either be null or a function, not ' +
              typeof superClass
          )
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true,
          },
        })
        if (superClass)
          Object.setPrototypeOf
            ? Object.setPrototypeOf(subClass, superClass)
            : (subClass.__proto__ = superClass)
      }
      var LoginPage = (function(_Component) {
        _inherits(LoginPage, _Component)
        function LoginPage() {
          _classCallCheck(this, LoginPage)
          return _possibleConstructorReturn(
            this,
            (LoginPage.__proto__ || Object.getPrototypeOf(LoginPage)).apply(
              this,
              arguments
            )
          )
        }
        _createClass(LoginPage, [
          {
            key: 'shouldComponentUpdate',
            value: function shouldComponentUpdate(nextProps, nextState) {
              if (nextProps.status === '登陆成功' && nextProps.isSuccess) {
                this.props.history.push('/Main')
                return false
              }
              return true
            },
          },
          {
            key: 'render',
            value: function render() {
              var login = this.props.login
              return _react2.default.createElement(
                _View2.default,
                {
                  style: styles.container,
                  __source: { fileName: _jsxFileName, lineNumber: 24 },
                },
                _react2.default.createElement(
                  _Text2.default,
                  { __source: { fileName: _jsxFileName, lineNumber: 25 } },
                  '\u72B6\u6001: ',
                  this.props.status
                ),
                _react2.default.createElement(
                  _TouchableOpacity2.default,
                  {
                    onPress: function onPress() {
                      return login()
                    },
                    style: { marginTop: 50 },
                    __source: { fileName: _jsxFileName, lineNumber: 26 },
                  },
                  _react2.default.createElement(
                    _View2.default,
                    {
                      style: styles.loginBtn,
                      __source: { fileName: _jsxFileName, lineNumber: 27 },
                    },
                    _react2.default.createElement(
                      _Text2.default,
                      { __source: { fileName: _jsxFileName, lineNumber: 28 } },
                      '\u767B\u5F55'
                    )
                  )
                )
              )
            },
          },
        ])
        return LoginPage
      })(_react.Component)
      LoginPage.navigationOptions = { title: 'LoginPage' }
      var styles = _StyleSheet2.default.create({
        container: {
          flex: 1,
          height: '100%',
          alignItems: 'center',
          justifyContent: 'center',
          backgroundColor: '#F5FCFF',
        },
        loginBtn: { borderWidth: 1, padding: 5 },
      })
      exports.default = (0, _reactRedux.connect)(
        function(state) {
          return {
            status: state.loginIn.status,
            isSuccess: state.loginIn.isSuccess,
            user: state.loginIn.user,
          }
        },
        function(dispatch) {
          return {
            login: function login() {
              return dispatch(loginAction.login())
            },
          }
        }
      )(LoginPage)

      /***/
    },
    /* 155 */
    /***/ function(module, exports) {
      /**
       * Returns a function, that, as long as it continues to be invoked, will not
       * be triggered. The function will be called after it stops being called for
       * N milliseconds. If `immediate` is passed, trigger the function on the
       * leading edge, instead of the trailing. The function also has a property 'clear'
       * that is a function which will clear the timer to prevent previously scheduled executions.
       *
       * @source underscore.js
       * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/
       * @param {Function} function to wrap
       * @param {Number} timeout in ms (`100`)
       * @param {Boolean} whether to execute at the beginning (`false`)
       * @api public
       */

      module.exports = function debounce(func, wait, immediate) {
        var timeout, args, context, timestamp, result
        if (null == wait) wait = 100

        function later() {
          var last = Date.now() - timestamp

          if (last < wait && last >= 0) {
            timeout = setTimeout(later, wait - last)
          } else {
            timeout = null
            if (!immediate) {
              result = func.apply(context, args)
              context = args = null
            }
          }
        }

        var debounced = function() {
          context = this
          args = arguments
          timestamp = Date.now()
          var callNow = immediate && !timeout
          if (!timeout) timeout = setTimeout(later, wait)
          if (callNow) {
            result = func.apply(context, args)
            context = args = null
          }

          return result
        }

        debounced.clear = function() {
          if (timeout) {
            clearTimeout(timeout)
            timeout = null
          }
        }

        debounced.flush = function() {
          if (timeout) {
            result = func.apply(context, args)
            context = args = null

            clearTimeout(timeout)
            timeout = null
          }
        }

        return debounced
      }

      /***/
    },
    /* 156 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _createDOMProps = __webpack_require__(58)

      var _createDOMProps2 = _interopRequireDefault(_createDOMProps)

      var _findNodeHandle = __webpack_require__(78)

      var _findNodeHandle2 = _interopRequireDefault(_findNodeHandle)

      var _styleResolver = __webpack_require__(68)

      var _styleResolver2 = _interopRequireDefault(_styleResolver)

      var _UIManager = __webpack_require__(79)

      var _UIManager2 = _interopRequireDefault(_UIManager)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      /**
       * Copyright (c) 2016-present, Nicolas Gallagher.
       * Copyright (c) 2015-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @providesModule NativeMethodsMixin
       *
       */

      var NativeMethodsMixin = {
        /**
         * Removes focus from an input or view. This is the opposite of `focus()`.
         */
        blur: function blur() {
          _UIManager2.default.blur((0, _findNodeHandle2.default)(this))
        },

        /**
         * Requests focus for the given input or view.
         * The exact behavior triggered will depend the type of view.
         */
        focus: function focus() {
          _UIManager2.default.focus((0, _findNodeHandle2.default)(this))
        },

        /**
         * Determines the position and dimensions of the view
         */
        measure: function measure(callback) {
          _UIManager2.default.measure(
            (0, _findNodeHandle2.default)(this),
            callback
          )
        },

        /**
         * Determines the location of the given view in the window and returns the
         * values via an async callback. If the React root view is embedded in
         * another native view, this will give you the absolute coordinates. If
         * successful, the callback will be called be called with the following
         * arguments:
         *
         *  - x
         *  - y
         *  - width
         *  - height
         *
         * Note that these measurements are not available until after the rendering
         * has been completed.
         */
        measureInWindow: function measureInWindow(callback) {
          _UIManager2.default.measureInWindow(
            (0, _findNodeHandle2.default)(this),
            callback
          )
        },

        /**
         * Measures the view relative to another view (usually an ancestor)
         */
        measureLayout: function measureLayout(
          relativeToNativeNode,
          onSuccess,
          onFail
        ) {
          _UIManager2.default.measureLayout(
            (0, _findNodeHandle2.default)(this),
            relativeToNativeNode,
            onFail,
            onSuccess
          )
        },

        /**
         * This function sends props straight to the underlying DOM node.
         * This works as if all styles were set as inline styles. Since a DOM node
         * may aleady be styled with class names and inline styles, we need to get
         * the initial styles from the DOM node and merge them with incoming props.
         */
        setNativeProps: function setNativeProps(nativeProps) {
          if (!nativeProps) {
            return
          }
          var node = (0, _findNodeHandle2.default)(this)
          // Next state is determined by comparison to existing state (in the DOM).
          // Existing state has already gone through i18n transform
          var domProps = (0, _createDOMProps2.default)(
            null,
            nativeProps,
            function(style) {
              return _styleResolver2.default.resolveWithNode(style, node)
            }
          )
          _UIManager2.default.updateView(node, domProps, this)
        },
      }

      exports.default = NativeMethodsMixin

      /***/
    },
    /* 157 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _propsToAriaRole = __webpack_require__(31)

      var _propsToAriaRole2 = _interopRequireDefault(_propsToAriaRole)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      var roleComponents = {
        article: 'article',
        banner: 'header',
        complementary: 'aside',
        contentinfo: 'footer',
        form: 'form',
        label: 'label',
        link: 'a',
        list: 'ul',
        listitem: 'li',
        main: 'main',
        navigation: 'nav',
        region: 'section',
      } /**
       * Copyright (c) 2017-present, Nicolas Gallagher.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       */

      var emptyObject = {}

      var propsToAccessibilityComponent = function propsToAccessibilityComponent() {
        var props =
          arguments.length > 0 && arguments[0] !== undefined
            ? arguments[0]
            : emptyObject

        var role = (0, _propsToAriaRole2.default)(props)
        if (role) {
          if (role === 'heading') {
            var level = props['aria-level'] || 1
            return 'h' + level
          }
          return roleComponents[role]
        }
      }

      exports.default = propsToAccessibilityComponent

      /***/
    },
    /* 158 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _isDisabled = __webpack_require__(59)

      var _isDisabled2 = _interopRequireDefault(_isDisabled)

      var _propsToAriaRole = __webpack_require__(31)

      var _propsToAriaRole2 = _interopRequireDefault(_propsToAriaRole)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      /**
       * Copyright (c) 2017-present, Nicolas Gallagher.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       */

      var propsToTabIndex = function propsToTabIndex(props) {
        var role = (0, _propsToAriaRole2.default)(props)
        var focusable =
          !(0, _isDisabled2.default)(props) &&
          props.importantForAccessibility !== 'no' &&
          props.importantForAccessibility !== 'no-hide-descendants'

        // Assume that 'link' is focusable by default (uses <a>).
        // Assume that 'button' is not (uses <div role='button'>) but must be treated as such.
        if (role === 'link') {
          if (props.accessible === false || !focusable) {
            return '-1'
          }
        } else if (role === 'button') {
          if (props.accessible !== false && focusable) {
            return '0'
          }
        } else {
          if (props.accessible === true && focusable) {
            return '0'
          }
        }
      }

      exports.default = propsToTabIndex

      /***/
    },
    /* 159 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _ExecutionEnvironment = __webpack_require__(9)

      var modality = function modality() {
        if (!_ExecutionEnvironment.canUseDOM) {
          return
        }

        var styleElement = void 0
        var hadKeyboardEvent = false
        var keyboardThrottleTimeoutID = 0

        var proto = window.Element.prototype
        var matches =
          proto.matches ||
          proto.mozMatchesSelector ||
          proto.msMatchesSelector ||
          proto.webkitMatchesSelector

        // These elements should always have a focus ring drawn, because they are
        // associated with switching to a keyboard modality.
        var keyboardModalityWhitelist = [
          'input:not([type])',
          'input[type=text]',
          'input[type=search]',
          'input[type=url]',
          'input[type=tel]',
          'input[type=email]',
          'input[type=password]',
          'input[type=number]',
          'input[type=date]',
          'input[type=month]',
          'input[type=week]',
          'input[type=time]',
          'input[type=datetime]',
          'input[type=datetime-local]',
          'textarea',
          '[role=textbox]',
        ].join(',')

        /**
         * Disable the focus ring by default
         */
        var initialize = function initialize() {
          // check if the style sheet needs to be created
          var id = 'react-native-modality'
          styleElement = document.getElementById(id)
          if (!styleElement) {
            // removes focus styles by default
            var style =
              '<style id="' + id + '">:focus { outline: none; }</style>'
            document.head.insertAdjacentHTML('afterbegin', style)
            styleElement = document.getElementById(id)
          }
        }

        /**
         * Computes whether the given element should automatically trigger the
         * `focus-ring`.
         */
        var focusTriggersKeyboardModality = function focusTriggersKeyboardModality(
          el
        ) {
          if (matches) {
            return (
              matches.call(el, keyboardModalityWhitelist) &&
              matches.call(el, ':not([readonly])')
            )
          } else {
            return false
          }
        }

        /**
         * Add the focus ring to the focused element
         */
        var addFocusRing = function addFocusRing() {
          if (styleElement) {
            styleElement.disabled = true
          }
        }

        /**
         * Remove the focus ring
         */
        var removeFocusRing = function removeFocusRing() {
          if (styleElement) {
            styleElement.disabled = false
          }
        }

        /**
         * On `keydown`, set `hadKeyboardEvent`, to be removed 100ms later if there
         * are no further keyboard events. The 100ms throttle handles cases where
         * focus is redirected programmatically after a keyboard event, such as
         * opening a menu or dialog.
         */
        var handleKeyDown = function handleKeyDown(e) {
          hadKeyboardEvent = true
          if (keyboardThrottleTimeoutID !== 0) {
            clearTimeout(keyboardThrottleTimeoutID)
          }
          keyboardThrottleTimeoutID = setTimeout(function() {
            hadKeyboardEvent = false
            keyboardThrottleTimeoutID = 0
          }, 100)
        }

        /**
         * Display the focus-ring when the keyboard was used to focus
         */
        var handleFocus = function handleFocus(e) {
          if (hadKeyboardEvent || focusTriggersKeyboardModality(e.target)) {
            addFocusRing()
          }
        }

        /**
         * Remove the focus-ring when the keyboard was used to focus
         */
        var handleBlur = function handleBlur() {
          if (!hadKeyboardEvent) {
            removeFocusRing()
          }
        }

        if (document.body && document.body.addEventListener) {
          initialize()
          document.body.addEventListener('keydown', handleKeyDown, true)
          document.body.addEventListener('focus', handleFocus, true)
          document.body.addEventListener('blur', handleBlur, true)
        }
      } /**
       * Adapts focus styles based on the user's active input modality (i.e., how
       * they are interacting with the UI right now).
       *
       * Focus styles are only relevant when using the keyboard to interact with the
       * page. If we only show the focus ring when relevant, we can avoid user
       * confusion without compromising accessibility.
       *
       * The script uses two heuristics to determine whether the keyboard is being used:
       *
       * 1. a keydown event occurred immediately before a focus event;
       * 2. a focus event happened on an element which requires keyboard interaction (e.g., a text field);
       *
       * Based on https://github.com/WICG/focus-ring
       *
       * @noflow
       */

      exports.default = modality

      /***/
    },
    /* 160 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _flattenStyle = __webpack_require__(60)

      var _flattenStyle2 = _interopRequireDefault(_flattenStyle)

      var _getHairlineWidth = __webpack_require__(161)

      var _getHairlineWidth2 = _interopRequireDefault(_getHairlineWidth)

      var _ReactNativePropRegistry = __webpack_require__(61)

      var _ReactNativePropRegistry2 = _interopRequireDefault(
        _ReactNativePropRegistry
      )

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      var absoluteFillObject = {
        position: 'absolute',
        left: 0,
        right: 0,
        top: 0,
        bottom: 0,
      } /**
       * Copyright (c) 2016-present, Nicolas Gallagher.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @providesModule StyleSheet
       * @noflow
       */

      var absoluteFill = _ReactNativePropRegistry2.default.register(
        absoluteFillObject
      )

      var StyleSheet = {
        absoluteFill: absoluteFill,
        absoluteFillObject: absoluteFillObject,
        compose: function compose(style1, style2) {
          if (style1 && style2) {
            return [style1, style2]
          } else {
            return style1 || style2
          }
        },
        create: function create(styles) {
          var result = {}
          Object.keys(styles).forEach(function(key) {
            if (true) {
              var StyleSheetValidation = __webpack_require__(162).default
              StyleSheetValidation.validateStyle(key, styles)
            }
            var id =
              styles[key] &&
              _ReactNativePropRegistry2.default.register(styles[key])
            result[key] = id
          })
          return result
        },

        flatten: _flattenStyle2.default,
        hairlineWidth: (0, _getHairlineWidth2.default)(),
      }

      exports.default = StyleSheet

      /***/
    },
    /* 161 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _ExecutionEnvironment = __webpack_require__(9)

      var getHairlineWidth = function getHairlineWidth() {
        var hairlineWidth = 1
        if (
          _ExecutionEnvironment.canUseDOM &&
          window.devicePixelRatio &&
          window.devicePixelRatio >= 2
        ) {
          var body = document.body
          if (body) {
            var node = document.createElement('div')
            node.style.border = '.5px solid transparent'
            body.appendChild(node)
            if (node.offsetHeight === 1) {
              hairlineWidth = 0.5
            }
            body.removeChild(node)
          }
        }
        return hairlineWidth
      } /**
       * Based on http://dieulot.net/css-retina-hairline
       * @noflow
       */

      exports.default = getHairlineWidth

      /***/
    },
    /* 162 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _ImageStylePropTypes = __webpack_require__(163)

      var _ImageStylePropTypes2 = _interopRequireDefault(_ImageStylePropTypes)

      var _TextInputStylePropTypes = __webpack_require__(165)

      var _TextInputStylePropTypes2 = _interopRequireDefault(
        _TextInputStylePropTypes
      )

      var _TextStylePropTypes = __webpack_require__(33)

      var _TextStylePropTypes2 = _interopRequireDefault(_TextStylePropTypes)

      var _ViewStylePropTypes = __webpack_require__(34)

      var _ViewStylePropTypes2 = _interopRequireDefault(_ViewStylePropTypes)

      var _warning = __webpack_require__(6)

      var _warning2 = _interopRequireDefault(_warning)

      var _propTypes = __webpack_require__(0)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError('Cannot call a class as a function')
        }
      } /**
       * Copyright (c) 2016-present, Nicolas Gallagher.
       * Copyright (c) 2015-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @providesModule StyleSheetValidation
       *
       */

      // Hardcoded because this is a legit case but we don't want to load it from
      // a private API. We might likely want to unify style sheet creation with how it
      // is done in the DOM so this might move into React. I know what I'm doing so
      // plz don't fire me.
      var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED'

      var StyleSheetValidation = (function() {
        function StyleSheetValidation() {
          _classCallCheck(this, StyleSheetValidation)
        }

        StyleSheetValidation.validateStyleProp = function validateStyleProp(
          prop,
          style,
          caller
        ) {
          if (true) {
            var value = style[prop]

            var isCustomProperty = prop.indexOf('--') === 0
            if (isCustomProperty) return

            if (allStylePropTypes[prop] === undefined) {
              var message1 = '"' + prop + '" is not a valid style property.'
              var message2 =
                '\nValid style props: ' +
                JSON.stringify(
                  Object.keys(allStylePropTypes).sort(),
                  null,
                  '  '
                )
              styleError(message1, style, caller, message2)
            } else if (
              typeof value === 'string' &&
              value.indexOf('!important') > -1
            ) {
              styleError(
                'Invalid value of "' +
                  value +
                  '" set on prop "' +
                  prop +
                  '". Values cannot include "!important"',
                style,
                caller
              )
            } else {
              var error = allStylePropTypes[prop](
                style,
                prop,
                caller,
                'prop',
                null,
                ReactPropTypesSecret
              )
              if (error) {
                styleError(error.message, style, caller)
              }
            }
          }
        }

        StyleSheetValidation.validateStyle = function validateStyle(
          name,
          styles
        ) {
          if (true) {
            for (var prop in styles[name]) {
              StyleSheetValidation.validateStyleProp(
                prop,
                styles[name],
                'StyleSheet ' + name
              )
            }
          }
        }

        StyleSheetValidation.addValidStylePropTypes = function addValidStylePropTypes(
          stylePropTypes
        ) {
          for (var key in stylePropTypes) {
            allStylePropTypes[key] = stylePropTypes[key]
          }
        }

        return StyleSheetValidation
      })()

      exports.default = StyleSheetValidation

      var styleError = function styleError(message1, style, caller, message2) {
        ;(0, _warning2.default)(
          false,
          message1 +
            '\n' +
            (caller || '<<unknown>>') +
            ': ' +
            JSON.stringify(style, null, '  ') +
            (message2 || '')
        )
      }

      var allStylePropTypes = {}

      StyleSheetValidation.addValidStylePropTypes(_ImageStylePropTypes2.default)
      StyleSheetValidation.addValidStylePropTypes(_TextStylePropTypes2.default)
      StyleSheetValidation.addValidStylePropTypes(
        _TextInputStylePropTypes2.default
      )
      StyleSheetValidation.addValidStylePropTypes(_ViewStylePropTypes2.default)

      StyleSheetValidation.addValidStylePropTypes({
        appearance: _propTypes.string,
        borderCollapse: _propTypes.string,
        borderSpacing: (0, _propTypes.oneOf)([
          _propTypes.number,
          _propTypes.string,
        ]),
        clear: _propTypes.string,
        cursor: _propTypes.string,
        fill: _propTypes.string,
        float: (0, _propTypes.oneOf)(['end', 'left', 'none', 'right', 'start']),
        listStyle: _propTypes.string,
        pointerEvents: _propTypes.string,
        tableLayout: _propTypes.string,
        /* @private */
        MozAppearance: _propTypes.string,
        font: _propTypes.string,
      })

      /***/
    },
    /* 163 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _AnimationPropTypes = __webpack_require__(62)

      var _AnimationPropTypes2 = _interopRequireDefault(_AnimationPropTypes)

      var _BorderPropTypes = __webpack_require__(63)

      var _BorderPropTypes2 = _interopRequireDefault(_BorderPropTypes)

      var _ColorPropType = __webpack_require__(13)

      var _ColorPropType2 = _interopRequireDefault(_ColorPropType)

      var _ImageResizeMode = __webpack_require__(164)

      var _ImageResizeMode2 = _interopRequireDefault(_ImageResizeMode)

      var _InteractionPropTypes = __webpack_require__(64)

      var _InteractionPropTypes2 = _interopRequireDefault(_InteractionPropTypes)

      var _LayoutPropTypes = __webpack_require__(65)

      var _LayoutPropTypes2 = _interopRequireDefault(_LayoutPropTypes)

      var _ShadowPropTypes = __webpack_require__(66)

      var _ShadowPropTypes2 = _interopRequireDefault(_ShadowPropTypes)

      var _TransformPropTypes = __webpack_require__(67)

      var _TransformPropTypes2 = _interopRequireDefault(_TransformPropTypes)

      var _propTypes = __webpack_require__(0)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      var ImageStylePropTypes = Object.assign(
        {},
        _AnimationPropTypes2.default,
        _BorderPropTypes2.default,
        _InteractionPropTypes2.default,
        _LayoutPropTypes2.default,
        _ShadowPropTypes2.default,
        _TransformPropTypes2.default,
        {
          backgroundColor: _ColorPropType2.default,
          opacity: _propTypes.number,
          resizeMode: (0, _propTypes.oneOf)(
            Object.keys(_ImageResizeMode2.default)
          ),
          /**
           * @platform unsupported
           */
          overlayColor: _propTypes.string,
          tintColor: _ColorPropType2.default,
          /**
           * @platform web
           */
          boxShadow: _propTypes.string,
          filter: _propTypes.string,
        }
      )

      exports.default = ImageStylePropTypes

      /***/
    },
    /* 164 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true
      var ImageResizeMode = {
        center: 'center',
        contain: 'contain',
        cover: 'cover',
        none: 'none',
        repeat: 'repeat',
        stretch: 'stretch',
      }

      exports.default = ImageResizeMode

      /***/
    },
    /* 165 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _TextStylePropTypes = __webpack_require__(33)

      var _TextStylePropTypes2 = _interopRequireDefault(_TextStylePropTypes)

      var _propTypes = __webpack_require__(0)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      /**
       * Copyright (c) 2015-present, Nicolas Gallagher.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       */

      var TextInputStylePropTypes = Object.assign(
        {},
        _TextStylePropTypes2.default,
        {
          /* @platform web */
          resize: (0, _propTypes.oneOf)([
            'none',
            'vertical',
            'horizontal',
            'both',
          ]),
        }
      )

      exports.default = TextInputStylePropTypes

      /***/
    },
    /* 166 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _ExecutionEnvironment = __webpack_require__(9)

      var _createReactDOMStyle = __webpack_require__(69)

      var _createReactDOMStyle2 = _interopRequireDefault(_createReactDOMStyle)

      var _flattenArray = __webpack_require__(168)

      var _flattenArray2 = _interopRequireDefault(_flattenArray)

      var _flattenStyle = __webpack_require__(60)

      var _flattenStyle2 = _interopRequireDefault(_flattenStyle)

      var _I18nManager = __webpack_require__(72)

      var _I18nManager2 = _interopRequireDefault(_I18nManager)

      var _i18nStyle = __webpack_require__(73)

      var _i18nStyle2 = _interopRequireDefault(_i18nStyle)

      var _prefixStyles = __webpack_require__(74)

      var _StyleSheetManager = __webpack_require__(188)

      var _StyleSheetManager2 = _interopRequireDefault(_StyleSheetManager)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError('Cannot call a class as a function')
        }
      } /**
       * Copyright (c) 2016-present, Nicolas Gallagher.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @noflow
       */

      /**
       * WARNING: changes to this file in particular can cause significant changes to
       * the results of render performance benchmarks.
       */

      var emptyObject = {}

      var ReactNativeStyleResolver = (function() {
        ReactNativeStyleResolver.prototype._init = function _init() {
          this.cache = { ltr: {}, rtl: {}, rtlNoSwap: {} }
          this.injectedCache = { ltr: {}, rtl: {}, rtlNoSwap: {} }
          this.styleSheetManager = new _StyleSheetManager2.default()
        }

        function ReactNativeStyleResolver() {
          _classCallCheck(this, ReactNativeStyleResolver)

          this._init()
        }

        ReactNativeStyleResolver.prototype.getStyleSheet = function getStyleSheet() {
          // reset state on the server so critical css is always the result
          var sheet = this.styleSheetManager.getStyleSheet()
          if (!_ExecutionEnvironment.canUseDOM) {
            this._init()
          }
          return sheet
        }

        ReactNativeStyleResolver.prototype._injectRegisteredStyle = function _injectRegisteredStyle(
          id
        ) {
          var _this = this

          var doLeftAndRightSwapInRTL =
              _I18nManager2.default.doLeftAndRightSwapInRTL,
            isRTL = _I18nManager2.default.isRTL

          var dir = isRTL
            ? doLeftAndRightSwapInRTL ? 'rtl' : 'rtlNoSwap'
            : 'ltr'
          if (!this.injectedCache[dir][id]) {
            var style = (0, _flattenStyle2.default)(id)
            var domStyle = (0, _createReactDOMStyle2.default)(
              (0, _i18nStyle2.default)(style)
            )
            Object.keys(domStyle).forEach(function(styleProp) {
              var value = domStyle[styleProp]
              if (value != null) {
                _this.styleSheetManager.injectDeclaration(styleProp, value)
              }
            })
            this.injectedCache[dir][id] = true
          }
        }

        /**
         * Resolves a React Native style object to DOM attributes
         */

        ReactNativeStyleResolver.prototype.resolve = function resolve(style) {
          if (!style) {
            return emptyObject
          }

          // fast and cachable
          if (typeof style === 'number') {
            this._injectRegisteredStyle(style)
            var _key = createCacheKey(style)
            return this._resolveStyleIfNeeded(style, _key)
          }

          // resolve a plain RN style object
          if (!Array.isArray(style)) {
            return this._resolveStyleIfNeeded(style)
          }

          // flatten the style array
          // cache resolved props when all styles are registered
          // otherwise fallback to resolving
          var flatArray = (0, _flattenArray2.default)(style)
          var isArrayOfNumbers = true
          for (var i = 0; i < flatArray.length; i++) {
            var id = flatArray[i]
            if (typeof id !== 'number') {
              isArrayOfNumbers = false
            } else {
              this._injectRegisteredStyle(id)
            }
          }
          var key = isArrayOfNumbers
            ? createCacheKey(flatArray.join('-'))
            : null
          return this._resolveStyleIfNeeded(flatArray, key)
        }

        /**
         * Resolves a React Native style object to DOM attributes, accounting for
         * the existing styles applied to the DOM node.
         *
         * To determine the next style, some of the existing DOM state must be
         * converted back into React Native styles.
         */

        ReactNativeStyleResolver.prototype.resolveWithNode = function resolveWithNode(
          rnStyleNext,
          node
        ) {
          var _this2 = this

          var _getDOMStyleInfo = getDOMStyleInfo(node),
            rdomClassList = _getDOMStyleInfo.classList,
            rdomStyle = _getDOMStyleInfo.style
          // Convert the DOM classList back into a React Native form
          // Preserves unrecognized class names.

          var _rdomClassList$reduce = rdomClassList.reduce(
              function(styleProps, className) {
                var _styleSheetManager$ge = _this2.styleSheetManager.getDeclaration(
                    className
                  ),
                  prop = _styleSheetManager$ge.prop,
                  value = _styleSheetManager$ge.value

                if (prop) {
                  styleProps.style[prop] = value
                } else {
                  styleProps.classList.push(className)
                }
                return styleProps
              },
              { classList: [], style: {} }
            ),
            rnClassList = _rdomClassList$reduce.classList,
            rnStyle = _rdomClassList$reduce.style

          // Create next DOM style props from current and next RN styles

          var _resolve = this.resolve([
              (0, _i18nStyle2.default)(rnStyle),
              rnStyleNext,
            ]),
            rdomClassListNext = _resolve.classList,
            rdomStyleNext = _resolve.style

          // Final className
          // Add the current class names not managed by React Native

          var className = classListToString(
            rdomClassListNext.concat(rnClassList)
          )

          // Final style
          // Next class names take priority over current inline styles
          var style = Object.assign({}, rdomStyle)
          rdomClassListNext.forEach(function(className) {
            var _styleSheetManager$ge2 = _this2.styleSheetManager.getDeclaration(
                className
              ),
              prop = _styleSheetManager$ge2.prop

            if (style[prop]) {
              style[prop] = ''
            }
          })
          // Next inline styles take priority over current inline styles
          Object.assign(style, rdomStyleNext)

          return { className: className, style: style }
        }

        /**
         * Resolves a React Native style object
         */

        ReactNativeStyleResolver.prototype._resolveStyle = function _resolveStyle(
          style
        ) {
          var _this3 = this

          var flatStyle = (0, _flattenStyle2.default)(style)
          var domStyle = (0, _createReactDOMStyle2.default)(
            (0, _i18nStyle2.default)(flatStyle)
          )

          var props = Object.keys(domStyle).reduce(
            function(props, styleProp) {
              var value = domStyle[styleProp]
              if (value != null) {
                var className = _this3.styleSheetManager.getClassName(
                  styleProp,
                  value
                )
                if (className) {
                  props.classList.push(className)
                } else {
                  // Certain properties and values are not transformed by 'createReactDOMStyle' as they
                  // require more complex transforms into multiple CSS rules. Here we assume that StyleManager
                  // can bind these styles to a className, and prevent them becoming invalid inline-styles.
                  if (
                    styleProp === 'pointerEvents' ||
                    styleProp === 'placeholderTextColor' ||
                    styleProp === 'animationName'
                  ) {
                    var _className = _this3.styleSheetManager.injectDeclaration(
                      styleProp,
                      value
                    )
                    if (_className) {
                      props.classList.push(_className)
                    }
                  } else {
                    if (!props.style) {
                      props.style = {}
                    }
                    // 4x slower render
                    props.style[styleProp] = value
                  }
                }
              }
              return props
            },
            { classList: [] }
          )

          props.className = classListToString(props.classList)
          if (props.style) {
            props.style = (0, _prefixStyles.prefixInlineStyles)(props.style)
          }
          return props
        }

        /**
         * Caching layer over 'resolveStyle'
         */

        ReactNativeStyleResolver.prototype._resolveStyleIfNeeded = function _resolveStyleIfNeeded(
          style,
          key
        ) {
          if (key) {
            var doLeftAndRightSwapInRTL =
                _I18nManager2.default.doLeftAndRightSwapInRTL,
              isRTL = _I18nManager2.default.isRTL

            var dir = isRTL
              ? doLeftAndRightSwapInRTL ? 'rtl' : 'rtlNoSwap'
              : 'ltr'
            if (!this.cache[dir][key]) {
              // slow: convert style object to props and cache
              this.cache[dir][key] = this._resolveStyle(style)
            }
            return this.cache[dir][key]
          }
          return this._resolveStyle(style)
        }

        return ReactNativeStyleResolver
      })()

      /**
       * Misc helpers
       */

      exports.default = ReactNativeStyleResolver
      var createCacheKey = function createCacheKey(id) {
        var prefix = 'rn'
        return prefix + '-' + id
      }

      var classListToString = function classListToString(list) {
        return list.join(' ').trim()
      }

      /**
       * Copies classList and style data from a DOM node
       */
      var hyphenPattern = /-([a-z])/g
      var toCamelCase = function toCamelCase(str) {
        return str.replace(hyphenPattern, function(m) {
          return m[1].toUpperCase()
        })
      }

      var getDOMStyleInfo = function getDOMStyleInfo(node) {
        var nodeStyle = node.style
        var classList = Array.prototype.slice.call(node.classList)
        var style = {}
        // DOM style is a CSSStyleDeclaration
        // https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration
        for (var i = 0; i < nodeStyle.length; i += 1) {
          var property = nodeStyle.item(i)
          if (property) {
            // DOM style uses hyphenated prop names and may include vendor prefixes
            // Transform back into React DOM style.
            style[toCamelCase(property)] = nodeStyle.getPropertyValue(property)
          }
        }
        return { classList: classList, style: style }
      }

      /***/
    },
    /* 167 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _normalizeCssColor = __webpack_require__(32)

      var _normalizeCssColor2 = _interopRequireDefault(_normalizeCssColor)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      var processColor = function processColor(color) {
        var opacity =
          arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1

        if (
          color === undefined ||
          color === null ||
          (opacity === 1 &&
            typeof color === 'string' &&
            color.charAt(0) !== '#')
        ) {
          return color
        }

        // convert number and hex
        var int32Color = (0, _normalizeCssColor2.default)(color)
        if (int32Color === null) {
          return undefined
        }

        // convert 0xrrggbbaa into rgba
        var rgba = _normalizeCssColor2.default.rgba(int32Color)
        rgba.a = rgba.a.toFixed(1)
        var r = rgba.r,
          g = rgba.g,
          b = rgba.b,
          a = rgba.a

        return 'rgba(' + r + ',' + g + ',' + b + ',' + a * opacity + ')'
      } /**
       * Copyright (c) 2016-present, Nicolas Gallagher.
       * Copyright (c) 2015-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @providesModule processColor
       *
       */

      exports.default = processColor

      /***/
    },
    /* 168 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true
      function flattenArray(array) {
        function flattenDown(array, result) {
          for (var i = 0; i < array.length; i++) {
            var value = array[i]

            if (Array.isArray(value)) {
              flattenDown(value, result)
            } else if (value != null && value !== false) {
              result.push(value)
            }
          }

          return result
        }
        return flattenDown(array, [])
      }

      exports.default = flattenArray

      /***/
    },
    /* 169 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true
      /**
       * Copyright (c) 2015-present, Nicolas Gallagher.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @noflow
       */

      var CSS_UNIT_RE = /^[+-]?\d*(?:\.\d+)?(?:[Ee][+-]?\d+)?(%|\w*)/

      var getUnit = function getUnit(str) {
        return str.match(CSS_UNIT_RE)[1]
      }

      var isNumeric = function isNumeric(n) {
        return !isNaN(parseFloat(n)) && isFinite(n)
      }

      var multiplyStyleLengthValue = function multiplyStyleLengthValue(
        value,
        multiple
      ) {
        if (typeof value === 'string') {
          var number = parseFloat(value) * multiple
          var unit = getUnit(value)
          return '' + number + unit
        } else if (isNumeric(value)) {
          return value * multiple
        }
      }

      exports.default = multiplyStyleLengthValue

      /***/
    },
    /* 170 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      Object.defineProperty(exports, '__esModule', {
        value: true,
      })
      exports.default = createPrefixer

      var _prefixProperty = __webpack_require__(171)

      var _prefixProperty2 = _interopRequireDefault(_prefixProperty)

      var _prefixValue = __webpack_require__(172)

      var _prefixValue2 = _interopRequireDefault(_prefixValue)

      var _addNewValuesOnly = __webpack_require__(173)

      var _addNewValuesOnly2 = _interopRequireDefault(_addNewValuesOnly)

      var _isObject = __webpack_require__(174)

      var _isObject2 = _interopRequireDefault(_isObject)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      function createPrefixer(_ref) {
        var prefixMap = _ref.prefixMap,
          plugins = _ref.plugins

        function prefixAll(style) {
          for (var property in style) {
            var value = style[property]

            // handle nested objects
            if ((0, _isObject2.default)(value)) {
              style[property] = prefixAll(value)
              // handle array values
            } else if (Array.isArray(value)) {
              var combinedValue = []

              for (var i = 0, len = value.length; i < len; ++i) {
                var processedValue = (0, _prefixValue2.default)(
                  plugins,
                  property,
                  value[i],
                  style,
                  prefixMap
                )
                ;(0, _addNewValuesOnly2.default)(
                  combinedValue,
                  processedValue || value[i]
                )
              }

              // only modify the value if it was touched
              // by any plugin to prevent unnecessary mutations
              if (combinedValue.length > 0) {
                style[property] = combinedValue
              }
            } else {
              var _processedValue = (0, _prefixValue2.default)(
                plugins,
                property,
                value,
                style,
                prefixMap
              )

              // only modify the value if it was touched
              // by any plugin to prevent unnecessary mutations
              if (_processedValue) {
                style[property] = _processedValue
              }

              style = (0, _prefixProperty2.default)(prefixMap, property, style)
            }
          }

          return style
        }

        return prefixAll
      }
      module.exports = exports['default']

      /***/
    },
    /* 171 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      Object.defineProperty(exports, '__esModule', {
        value: true,
      })
      exports.default = prefixProperty

      var _capitalizeString = __webpack_require__(75)

      var _capitalizeString2 = _interopRequireDefault(_capitalizeString)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      function prefixProperty(prefixProperties, property, style) {
        if (prefixProperties.hasOwnProperty(property)) {
          var newStyle = {}
          var requiredPrefixes = prefixProperties[property]
          var capitalizedProperty = (0, _capitalizeString2.default)(property)
          var keys = Object.keys(style)
          for (var i = 0; i < keys.length; i++) {
            var styleProperty = keys[i]
            if (styleProperty === property) {
              for (var j = 0; j < requiredPrefixes.length; j++) {
                newStyle[requiredPrefixes[j] + capitalizedProperty] =
                  style[property]
              }
            }
            newStyle[styleProperty] = style[styleProperty]
          }
          return newStyle
        }
        return style
      }
      module.exports = exports['default']

      /***/
    },
    /* 172 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      Object.defineProperty(exports, '__esModule', {
        value: true,
      })
      exports.default = prefixValue
      function prefixValue(plugins, property, value, style, metaData) {
        for (var i = 0, len = plugins.length; i < len; ++i) {
          var processedValue = plugins[i](property, value, style, metaData)

          // we can stop processing if a value is returned
          // as all plugin criteria are unique
          if (processedValue) {
            return processedValue
          }
        }
      }
      module.exports = exports['default']

      /***/
    },
    /* 173 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      Object.defineProperty(exports, '__esModule', {
        value: true,
      })
      exports.default = addNewValuesOnly
      function addIfNew(list, value) {
        if (list.indexOf(value) === -1) {
          list.push(value)
        }
      }

      function addNewValuesOnly(list, values) {
        if (Array.isArray(values)) {
          for (var i = 0, len = values.length; i < len; ++i) {
            addIfNew(list, values[i])
          }
        } else {
          addIfNew(list, values)
        }
      }
      module.exports = exports['default']

      /***/
    },
    /* 174 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      Object.defineProperty(exports, '__esModule', {
        value: true,
      })
      exports.default = isObject
      function isObject(value) {
        return value instanceof Object && !Array.isArray(value)
      }
      module.exports = exports['default']

      /***/
    },
    /* 175 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _crossFade = __webpack_require__(176)

      var _crossFade2 = _interopRequireDefault(_crossFade)

      var _cursor = __webpack_require__(177)

      var _cursor2 = _interopRequireDefault(_cursor)

      var _filter = __webpack_require__(178)

      var _filter2 = _interopRequireDefault(_filter)

      var _flex = __webpack_require__(179)

      var _flex2 = _interopRequireDefault(_flex)

      var _flexboxIE = __webpack_require__(180)

      var _flexboxIE2 = _interopRequireDefault(_flexboxIE)

      var _flexboxOld = __webpack_require__(181)

      var _flexboxOld2 = _interopRequireDefault(_flexboxOld)

      var _gradient = __webpack_require__(182)

      var _gradient2 = _interopRequireDefault(_gradient)

      var _imageSet = __webpack_require__(183)

      var _imageSet2 = _interopRequireDefault(_imageSet)

      var _position = __webpack_require__(184)

      var _position2 = _interopRequireDefault(_position)

      var _sizing = __webpack_require__(185)

      var _sizing2 = _interopRequireDefault(_sizing)

      var _transition = __webpack_require__(186)

      var _transition2 = _interopRequireDefault(_transition)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      var w = ['Webkit']
      var m = ['Moz']
      var ms = ['ms']
      var wm = ['Webkit', 'Moz']
      var wms = ['Webkit', 'ms']
      var wmms = ['Webkit', 'Moz', 'ms']

      exports.default = {
        plugins: [
          _crossFade2.default,
          _cursor2.default,
          _filter2.default,
          _flex2.default,
          _flexboxIE2.default,
          _flexboxOld2.default,
          _gradient2.default,
          _imageSet2.default,
          _position2.default,
          _sizing2.default,
          _transition2.default,
        ],
        prefixMap: {
          animation: w,
          animationDelay: w,
          animationDirection: w,
          animationFillMode: w,
          animationDuration: w,
          animationIterationCount: w,
          animationName: w,
          animationPlayState: w,
          animationTimingFunction: w,
          appearance: wm,
          userSelect: wmms,
          textEmphasisPosition: w,
          textEmphasis: w,
          textEmphasisStyle: w,
          textEmphasisColor: w,
          boxDecorationBreak: w,
          clipPath: w,
          maskImage: w,
          maskMode: w,
          maskRepeat: w,
          maskPosition: w,
          maskClip: w,
          maskOrigin: w,
          maskSize: w,
          maskComposite: w,
          mask: w,
          maskBorderSource: w,
          maskBorderMode: w,
          maskBorderSlice: w,
          maskBorderWidth: w,
          maskBorderOutset: w,
          maskBorderRepeat: w,
          maskBorder: w,
          maskType: w,
          textDecorationStyle: w,
          textDecorationSkip: w,
          textDecorationLine: w,
          textDecorationColor: w,
          filter: w,
          fontFeatureSettings: w,
          breakAfter: wmms,
          breakBefore: wmms,
          breakInside: wmms,
          columnCount: wm,
          columnFill: wm,
          columnGap: wm,
          columnRule: wm,
          columnRuleColor: wm,
          columnRuleStyle: wm,
          columnRuleWidth: wm,
          columns: wm,
          columnSpan: wm,
          columnWidth: wm,
          writingMode: wms,
          flex: wms,
          flexBasis: w,
          flexDirection: wms,
          flexGrow: w,
          flexFlow: wms,
          flexShrink: w,
          flexWrap: wms,
          alignContent: w,
          alignItems: w,
          alignSelf: w,
          justifyContent: w,
          order: w,
          transform: w,
          transformOrigin: w,
          transformOriginX: w,
          transformOriginY: w,
          backfaceVisibility: w,
          perspective: w,
          perspectiveOrigin: w,
          transformStyle: w,
          transformOriginZ: w,
          backdropFilter: w,
          fontKerning: w,
          scrollSnapType: wms,
          scrollSnapPointsX: wms,
          scrollSnapPointsY: wms,
          scrollSnapDestination: wms,
          scrollSnapCoordinate: wms,
          shapeImageThreshold: w,
          shapeImageMargin: w,
          shapeImageOutside: w,
          hyphens: wmms,
          flowInto: wms,
          flowFrom: wms,
          regionFragment: wms,
          textAlignLast: m,
          tabSize: m,
          wrapFlow: ms,
          wrapThrough: ms,
          wrapMargin: ms,
          touchAction: ms,
          gridTemplateColumns: ms,
          gridTemplateRows: ms,
          gridTemplateAreas: ms,
          gridTemplate: ms,
          gridAutoColumns: ms,
          gridAutoRows: ms,
          gridAutoFlow: ms,
          grid: ms,
          gridRowStart: ms,
          gridColumnStart: ms,
          gridRowEnd: ms,
          gridRow: ms,
          gridColumn: ms,
          gridColumnEnd: ms,
          gridColumnGap: ms,
          gridRowGap: ms,
          gridArea: ms,
          gridGap: ms,
          textSizeAdjust: wms,
          borderImage: w,
          borderImageOutset: w,
          borderImageRepeat: w,
          borderImageSlice: w,
          borderImageSource: w,
          borderImageWidth: w,
          transitionDelay: w,
          transitionDuration: w,
          transitionProperty: w,
          transitionTimingFunction: w,
        },
      }

      /***/
    },
    /* 176 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      Object.defineProperty(exports, '__esModule', {
        value: true,
      })
      exports.default = crossFade

      var _isPrefixedValue = __webpack_require__(14)

      var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      // http://caniuse.com/#search=cross-fade
      var prefixes = ['-webkit-', '']
      function crossFade(property, value) {
        if (
          typeof value === 'string' &&
          !(0, _isPrefixedValue2.default)(value) &&
          value.indexOf('cross-fade(') > -1
        ) {
          return prefixes.map(function(prefix) {
            return value.replace(/cross-fade\(/g, prefix + 'cross-fade(')
          })
        }
      }
      module.exports = exports['default']

      /***/
    },
    /* 177 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      Object.defineProperty(exports, '__esModule', {
        value: true,
      })
      exports.default = cursor
      var prefixes = ['-webkit-', '-moz-', '']

      var values = {
        'zoom-in': true,
        'zoom-out': true,
        grab: true,
        grabbing: true,
      }

      function cursor(property, value) {
        if (property === 'cursor' && values.hasOwnProperty(value)) {
          return prefixes.map(function(prefix) {
            return prefix + value
          })
        }
      }
      module.exports = exports['default']

      /***/
    },
    /* 178 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      Object.defineProperty(exports, '__esModule', {
        value: true,
      })
      exports.default = filter

      var _isPrefixedValue = __webpack_require__(14)

      var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      // http://caniuse.com/#feat=css-filter-function
      var prefixes = ['-webkit-', '']
      function filter(property, value) {
        if (
          typeof value === 'string' &&
          !(0, _isPrefixedValue2.default)(value) &&
          value.indexOf('filter(') > -1
        ) {
          return prefixes.map(function(prefix) {
            return value.replace(/filter\(/g, prefix + 'filter(')
          })
        }
      }
      module.exports = exports['default']

      /***/
    },
    /* 179 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      Object.defineProperty(exports, '__esModule', {
        value: true,
      })
      exports.default = flex
      var values = {
        flex: [
          '-webkit-box',
          '-moz-box',
          '-ms-flexbox',
          '-webkit-flex',
          'flex',
        ],
        'inline-flex': [
          '-webkit-inline-box',
          '-moz-inline-box',
          '-ms-inline-flexbox',
          '-webkit-inline-flex',
          'inline-flex',
        ],
      }

      function flex(property, value) {
        if (property === 'display' && values.hasOwnProperty(value)) {
          return values[value]
        }
      }
      module.exports = exports['default']

      /***/
    },
    /* 180 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      Object.defineProperty(exports, '__esModule', {
        value: true,
      })
      exports.default = flexboxIE
      var alternativeValues = {
        'space-around': 'distribute',
        'space-between': 'justify',
        'flex-start': 'start',
        'flex-end': 'end',
      }
      var alternativeProps = {
        alignContent: 'msFlexLinePack',
        alignSelf: 'msFlexItemAlign',
        alignItems: 'msFlexAlign',
        justifyContent: 'msFlexPack',
        order: 'msFlexOrder',
        flexGrow: 'msFlexPositive',
        flexShrink: 'msFlexNegative',
        flexBasis: 'msFlexPreferredSize',
      }

      function flexboxIE(property, value, style) {
        if (alternativeProps.hasOwnProperty(property)) {
          style[alternativeProps[property]] = alternativeValues[value] || value
        }
      }
      module.exports = exports['default']

      /***/
    },
    /* 181 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      Object.defineProperty(exports, '__esModule', {
        value: true,
      })
      exports.default = flexboxOld
      var alternativeValues = {
        'space-around': 'justify',
        'space-between': 'justify',
        'flex-start': 'start',
        'flex-end': 'end',
        'wrap-reverse': 'multiple',
        wrap: 'multiple',
      }

      var alternativeProps = {
        alignItems: 'WebkitBoxAlign',
        justifyContent: 'WebkitBoxPack',
        flexWrap: 'WebkitBoxLines',
      }

      function flexboxOld(property, value, style) {
        if (property === 'flexDirection' && typeof value === 'string') {
          if (value.indexOf('column') > -1) {
            style.WebkitBoxOrient = 'vertical'
          } else {
            style.WebkitBoxOrient = 'horizontal'
          }
          if (value.indexOf('reverse') > -1) {
            style.WebkitBoxDirection = 'reverse'
          } else {
            style.WebkitBoxDirection = 'normal'
          }
        }
        if (alternativeProps.hasOwnProperty(property)) {
          style[alternativeProps[property]] = alternativeValues[value] || value
        }
      }
      module.exports = exports['default']

      /***/
    },
    /* 182 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      Object.defineProperty(exports, '__esModule', {
        value: true,
      })
      exports.default = gradient

      var _isPrefixedValue = __webpack_require__(14)

      var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      var prefixes = ['-webkit-', '-moz-', '']

      var values = /linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/

      function gradient(property, value) {
        if (
          typeof value === 'string' &&
          !(0, _isPrefixedValue2.default)(value) &&
          values.test(value)
        ) {
          return prefixes.map(function(prefix) {
            return prefix + value
          })
        }
      }
      module.exports = exports['default']

      /***/
    },
    /* 183 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      Object.defineProperty(exports, '__esModule', {
        value: true,
      })
      exports.default = imageSet

      var _isPrefixedValue = __webpack_require__(14)

      var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      // http://caniuse.com/#feat=css-image-set
      var prefixes = ['-webkit-', '']
      function imageSet(property, value) {
        if (
          typeof value === 'string' &&
          !(0, _isPrefixedValue2.default)(value) &&
          value.indexOf('image-set(') > -1
        ) {
          return prefixes.map(function(prefix) {
            return value.replace(/image-set\(/g, prefix + 'image-set(')
          })
        }
      }
      module.exports = exports['default']

      /***/
    },
    /* 184 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      Object.defineProperty(exports, '__esModule', {
        value: true,
      })
      exports.default = position
      function position(property, value) {
        if (property === 'position' && value === 'sticky') {
          return ['-webkit-sticky', 'sticky']
        }
      }
      module.exports = exports['default']

      /***/
    },
    /* 185 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      Object.defineProperty(exports, '__esModule', {
        value: true,
      })
      exports.default = sizing
      var prefixes = ['-webkit-', '-moz-', '']

      var properties = {
        maxHeight: true,
        maxWidth: true,
        width: true,
        height: true,
        columnWidth: true,
        minWidth: true,
        minHeight: true,
      }
      var values = {
        'min-content': true,
        'max-content': true,
        'fill-available': true,
        'fit-content': true,
        'contain-floats': true,
      }

      function sizing(property, value) {
        if (
          properties.hasOwnProperty(property) &&
          values.hasOwnProperty(value)
        ) {
          return prefixes.map(function(prefix) {
            return prefix + value
          })
        }
      }
      module.exports = exports['default']

      /***/
    },
    /* 186 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      Object.defineProperty(exports, '__esModule', {
        value: true,
      })
      exports.default = transition

      var _hyphenateProperty = __webpack_require__(187)

      var _hyphenateProperty2 = _interopRequireDefault(_hyphenateProperty)

      var _isPrefixedValue = __webpack_require__(14)

      var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue)

      var _capitalizeString = __webpack_require__(75)

      var _capitalizeString2 = _interopRequireDefault(_capitalizeString)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      var properties = {
        transition: true,
        transitionProperty: true,
        WebkitTransition: true,
        WebkitTransitionProperty: true,
        MozTransition: true,
        MozTransitionProperty: true,
      }

      var prefixMapping = {
        Webkit: '-webkit-',
        Moz: '-moz-',
        ms: '-ms-',
      }

      function prefixValue(value, propertyPrefixMap) {
        if ((0, _isPrefixedValue2.default)(value)) {
          return value
        }

        // only split multi values, not cubic beziers
        var multipleValues = value.split(/,(?![^()]*(?:\([^()]*\))?\))/g)

        for (var i = 0, len = multipleValues.length; i < len; ++i) {
          var singleValue = multipleValues[i]
          var values = [singleValue]
          for (var property in propertyPrefixMap) {
            var dashCaseProperty = (0, _hyphenateProperty2.default)(property)

            if (
              singleValue.indexOf(dashCaseProperty) > -1 &&
              dashCaseProperty !== 'order'
            ) {
              var prefixes = propertyPrefixMap[property]
              for (var j = 0, pLen = prefixes.length; j < pLen; ++j) {
                // join all prefixes and create a new value
                values.unshift(
                  singleValue.replace(
                    dashCaseProperty,
                    prefixMapping[prefixes[j]] + dashCaseProperty
                  )
                )
              }
            }
          }

          multipleValues[i] = values.join(',')
        }

        return multipleValues.join(',')
      }

      function transition(property, value, style, propertyPrefixMap) {
        // also check for already prefixed transitions
        if (typeof value === 'string' && properties.hasOwnProperty(property)) {
          var outputValue = prefixValue(value, propertyPrefixMap)
          // if the property is already prefixed
          var webkitOutput = outputValue
            .split(/,(?![^()]*(?:\([^()]*\))?\))/g)
            .filter(function(val) {
              return !/-moz-|-ms-/.test(val)
            })
            .join(',')

          if (property.indexOf('Webkit') > -1) {
            return webkitOutput
          }

          var mozOutput = outputValue
            .split(/,(?![^()]*(?:\([^()]*\))?\))/g)
            .filter(function(val) {
              return !/-webkit-|-ms-/.test(val)
            })
            .join(',')

          if (property.indexOf('Moz') > -1) {
            return mozOutput
          }

          style[
            'Webkit' + (0, _capitalizeString2.default)(property)
          ] = webkitOutput
          style['Moz' + (0, _capitalizeString2.default)(property)] = mozOutput
          return outputValue
        }
      }
      module.exports = exports['default']

      /***/
    },
    /* 187 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      Object.defineProperty(exports, '__esModule', {
        value: true,
      })
      exports.default = hyphenateProperty

      var _hyphenateStyleName = __webpack_require__(35)

      var _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      function hyphenateProperty(property) {
        return (0, _hyphenateStyleName2.default)(property)
      }
      module.exports = exports['default']

      /***/
    },
    /* 188 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _createAtomicRules = __webpack_require__(189)

      var _createAtomicRules2 = _interopRequireDefault(_createAtomicRules)

      var _hash = __webpack_require__(77)

      var _hash2 = _interopRequireDefault(_hash)

      var _initialRules = __webpack_require__(192)

      var _initialRules2 = _interopRequireDefault(_initialRules)

      var _WebStyleSheet = __webpack_require__(193)

      var _WebStyleSheet2 = _interopRequireDefault(_WebStyleSheet)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError('Cannot call a class as a function')
        }
      } /**
       * Copyright (c) 2016-present, Nicolas Gallagher.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @noflow
       */

      var emptyObject = {}
      var STYLE_ELEMENT_ID = 'react-native-stylesheet'

      var createClassName = function createClassName(prop, value) {
        var hashed = (0, _hash2.default)(prop + normalizeValue(value))
        return true ? 'rn-' + prop + '-' + hashed : 'rn-' + hashed
      }

      var normalizeValue = function normalizeValue(value) {
        return typeof value === 'object' ? JSON.stringify(value) : value
      }

      var StyleSheetManager = (function() {
        function StyleSheetManager() {
          var _this = this

          _classCallCheck(this, StyleSheetManager)

          this._cache = {
            byClassName: {},
            byProp: {},
          }

          this._sheet = new _WebStyleSheet2.default(STYLE_ELEMENT_ID)
          _initialRules2.default.forEach(function(rule) {
            _this._sheet.insertRuleOnce(rule)
          })
        }

        StyleSheetManager.prototype.getClassName = function getClassName(
          prop,
          value
        ) {
          var val = normalizeValue(value)
          var cache = this._cache.byProp
          return (
            cache[prop] && cache[prop].hasOwnProperty(val) && cache[prop][val]
          )
        }

        StyleSheetManager.prototype.getDeclaration = function getDeclaration(
          className
        ) {
          var cache = this._cache.byClassName
          return cache[className] || emptyObject
        }

        StyleSheetManager.prototype.getStyleSheet = function getStyleSheet() {
          var cssText = this._sheet.cssText

          return {
            id: STYLE_ELEMENT_ID,
            textContent: cssText,
          }
        }

        StyleSheetManager.prototype.injectDeclaration = function injectDeclaration(
          prop,
          value
        ) {
          var _this2 = this

          var val = normalizeValue(value)
          var className = this.getClassName(prop, val)
          if (!className) {
            className = createClassName(prop, val)
            this._addToCache(className, prop, val)
            var rules = (0, _createAtomicRules2.default)(
              '.' + className,
              prop,
              value
            )
            rules.forEach(function(rule) {
              _this2._sheet.insertRuleOnce(rule)
            })
          }
          return className
        }

        StyleSheetManager.prototype.injectKeyframe = function injectKeyframe() {
          // return identifier;
        }

        StyleSheetManager.prototype._addToCache = function _addToCache(
          className,
          prop,
          value
        ) {
          var cache = this._cache
          if (!cache.byProp[prop]) {
            cache.byProp[prop] = {}
          }
          cache.byProp[prop][value] = className
          cache.byClassName[className] = { prop: prop, value: value }
        }

        return StyleSheetManager
      })()

      exports.default = StyleSheetManager

      /***/
    },
    /* 189 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _createKeyframesRules2 = __webpack_require__(190)

      var _createKeyframesRules3 = _interopRequireDefault(
        _createKeyframesRules2
      )

      var _createRuleBlock7 = __webpack_require__(76)

      var _createRuleBlock8 = _interopRequireDefault(_createRuleBlock7)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      var createAtomicRules = function createAtomicRules(
        selector,
        prop,
        value
      ) {
        var rules = []

        // Handle custom properties and custom values that require additional rules
        // to be created.
        switch (prop) {
          // See #513
          case 'pointerEvents': {
            var _createRuleBlock3

            var val = value
            if (value === 'auto' || value === 'box-only') {
              val = 'auto !important'
              if (value === 'box-only') {
                var _createRuleBlock

                var _block = (0, _createRuleBlock8.default)(
                  ((_createRuleBlock = {}),
                  (_createRuleBlock[prop] = 'none'),
                  _createRuleBlock)
                )
                rules.push(selector + ' > *{' + _block + '}')
              }
            } else if (value === 'none' || value === 'box-none') {
              val = 'none !important'
              if (value === 'box-none') {
                var _createRuleBlock2

                var _block2 = (0, _createRuleBlock8.default)(
                  ((_createRuleBlock2 = {}),
                  (_createRuleBlock2[prop] = 'auto'),
                  _createRuleBlock2)
                )
                rules.push(selector + ' > *{' + _block2 + '}')
              }
            }
            var block = (0, _createRuleBlock8.default)(
              ((_createRuleBlock3 = {}),
              (_createRuleBlock3[prop] = val),
              _createRuleBlock3)
            )
            rules.push(selector + '{' + block + '}')
            break
          }

          case 'placeholderTextColor': {
            var _block3 = (0, _createRuleBlock8.default)({
              color: value,
              opacity: 1,
            })
            rules.push(
              '@media all {' +
                (selector + '::-webkit-input-placeholder{' + _block3 + '}') +
                (selector + '::-moz-placeholder{' + _block3 + '}') +
                (selector + ':-ms-input-placeholder{' + _block3 + '}') +
                (selector + '::placeholder{' + _block3 + '}') +
                '}'
            )
            break
          }

          case 'animationName': {
            if (typeof value === 'string') {
              var _createRuleBlock4

              // add a className referencing the animation
              var _block4 = (0, _createRuleBlock8.default)(
                ((_createRuleBlock4 = {}),
                (_createRuleBlock4[prop] = value),
                _createRuleBlock4)
              )
              rules.push(selector + '{' + _block4 + '}')
            } else {
              var _createRuleBlock5

              var animationNames = []

              // add the keyframes needed to implement each value
              value.forEach(function(keyframes) {
                if (typeof keyframes === 'string') {
                  animationNames.push(keyframes)
                } else {
                  var _createKeyframesRules = (0,
                    _createKeyframesRules3.default)(keyframes),
                    identifier = _createKeyframesRules.identifier,
                    keyframesRules = _createKeyframesRules.rules

                  keyframesRules.forEach(function(rule) {
                    rules.push(rule)
                  })
                  animationNames.push(identifier)
                }
              })

              // add a className referencing the animation identifiers
              var _block5 = (0, _createRuleBlock8.default)(
                ((_createRuleBlock5 = {}),
                (_createRuleBlock5[prop] = animationNames.join(',')),
                _createRuleBlock5)
              )
              rules.push(selector + '{' + _block5 + '}')
            }

            break
          }

          default: {
            var _createRuleBlock6

            var _block6 = (0, _createRuleBlock8.default)(
              ((_createRuleBlock6 = {}),
              (_createRuleBlock6[prop] = value),
              _createRuleBlock6)
            )
            rules.push(selector + '{' + _block6 + '}')
          }
        }

        return rules
      }

      exports.default = createAtomicRules

      /***/
    },
    /* 190 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _createRuleBlock = __webpack_require__(76)

      var _createRuleBlock2 = _interopRequireDefault(_createRuleBlock)

      var _createReactDOMStyle = __webpack_require__(69)

      var _createReactDOMStyle2 = _interopRequireDefault(_createReactDOMStyle)

      var _i18nStyle = __webpack_require__(73)

      var _i18nStyle2 = _interopRequireDefault(_i18nStyle)

      var _hash = __webpack_require__(77)

      var _hash2 = _interopRequireDefault(_hash)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      var hashObject = function hashObject(obj) {
        return (0, _hash2.default)(JSON.stringify(obj))
      }

      var createIdentifier = function createIdentifier(obj) {
        var hashed = hashObject(obj)
        return true ? 'rn-anim-' + hashed : 'rn-' + hashed
      }

      var prefixes = ['-webkit-', '']

      var makeBlock = function makeBlock(rule) {
        var domStyle = (0, _createReactDOMStyle2.default)(
          (0, _i18nStyle2.default)(rule)
        )
        return (0, _createRuleBlock2.default)(domStyle)
      }

      var makeSteps = function makeSteps(keyframes) {
        return Object.keys(keyframes)
          .map(function(stepName) {
            var rule = keyframes[stepName]
            var block = makeBlock(rule)
            return stepName + '{' + block + '}'
          })
          .join('')
      }

      var createKeyframesRules = function createKeyframesRules(keyframes) {
        var identifier = createIdentifier(keyframes)
        var rules = prefixes.map(function(prefix) {
          return (
            '@media all {@' +
            prefix +
            'keyframes ' +
            identifier +
            '{' +
            makeSteps(keyframes) +
            '}}'
          )
        })
        return { identifier: identifier, rules: rules }
      }

      exports.default = createKeyframesRules

      /***/
    },
    /* 191 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true
      var hasOwnProperty = Object.prototype.hasOwnProperty

      var mapKeyValue = function mapKeyValue(obj, fn) {
        var result = []
        for (var key in obj) {
          if (hasOwnProperty.call(obj, key)) {
            var r = fn(key, obj[key])
            r && result.push(r)
          }
        }
        return result
      }

      exports.default = mapKeyValue

      /***/
    },
    /* 192 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true
      /**
       * Copyright (c) 2016-present, Nicolas Gallagher.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       */

      // Prevent browsers throwing parse errors, e.g., on vendor-prefixed pseudo-elements
      var safeRule = function safeRule(rule) {
        return '@media all{\n' + rule + '\n}'
      }

      var resets = [
        // minimal top-level reset
        'html{-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%;-webkit-tap-highlight-color:rgba(0,0,0,0);}',
        'body{margin:0;}',
        // minimal form pseudo-element reset
        'button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0;}',
        'input::-webkit-inner-spin-button,input::-webkit-outer-spin-button,' +
          'input::-webkit-search-cancel-button,input::-webkit-search-decoration,' +
          'input::-webkit-search-results-button,input::-webkit-search-results-decoration{display:none;}',
      ]

      var reset = [safeRule(resets.join('\n'))]

      exports.default = reset

      /***/
    },
    /* 193 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _createClass = (function() {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i]
            descriptor.enumerable = descriptor.enumerable || false
            descriptor.configurable = true
            if ('value' in descriptor) descriptor.writable = true
            Object.defineProperty(target, descriptor.key, descriptor)
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps) defineProperties(Constructor.prototype, protoProps)
          if (staticProps) defineProperties(Constructor, staticProps)
          return Constructor
        }
      })() /**
       * Copyright (c) 2016-present, Nicolas Gallagher.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       */

      var _ExecutionEnvironment = __webpack_require__(9)

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError('Cannot call a class as a function')
        }
      }

      var WebStyleSheet = (function() {
        function WebStyleSheet(id) {
          _classCallCheck(this, WebStyleSheet)

          this._cssRules = []
          this._sheet = null
          this._textContent = ''

          var domStyleElement = void 0

          // on the client we check for an existing style sheet before injecting
          if (_ExecutionEnvironment.canUseDOM) {
            domStyleElement = document.getElementById(id)
            if (!domStyleElement) {
              var html = '<style id="' + id + '"></style>'
              if (document.head) {
                document.head.insertAdjacentHTML('afterbegin', html)
                domStyleElement = document.getElementById(id)
              }
            }

            if (domStyleElement) {
              // $FlowFixMe
              this._sheet = domStyleElement.sheet
              this._textContent = domStyleElement.textContent
            }
          }
        }

        WebStyleSheet.prototype.containsRule = function containsRule(rule) {
          return this._cssRules.indexOf(rule) > -1
        }

        WebStyleSheet.prototype.insertRuleOnce = function insertRuleOnce(
          rule,
          position
        ) {
          // Reduce chance of duplicate rules
          if (!this.containsRule(rule)) {
            this._cssRules.push(rule)

            // Check whether a rule was part of any prerendered styles (textContent
            // doesn't include styles injected via 'insertRule')
            if (this._textContent.indexOf(rule) === -1 && this._sheet) {
              var pos = position || this._sheet.cssRules.length
              this._sheet.insertRule(rule, pos)
            }
          }
        }

        _createClass(WebStyleSheet, [
          {
            key: 'cssText',
            get: function get() {
              return this._cssRules.join('\n')
            },
          },
        ])

        return WebStyleSheet
      })()

      exports.default = WebStyleSheet

      /***/
    },
    /* 194 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'
      /* WEBPACK VAR INJECTION */
      ;(function(global) {
        /**
         * Copyright (c) 2014-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         */

        var emptyFunction = __webpack_require__(8)
        var nativeRequestAnimationFrame = __webpack_require__(195)

        var lastTime = 0

        var requestAnimationFrame =
          nativeRequestAnimationFrame ||
          function(callback) {
            var currTime = Date.now()
            var timeDelay = Math.max(0, 16 - (currTime - lastTime))
            lastTime = currTime + timeDelay
            return global.setTimeout(function() {
              callback(Date.now())
            }, timeDelay)
          }

        // Works around a rare bug in Safari 6 where the first request is never invoked.
        requestAnimationFrame(emptyFunction)

        module.exports = requestAnimationFrame
        /* WEBPACK VAR INJECTION */
      }.call(exports, __webpack_require__(2)))

      /***/
    },
    /* 195 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'
      /* WEBPACK VAR INJECTION */
      ;(function(global) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         */

        var nativeRequestAnimationFrame =
          global.requestAnimationFrame ||
          global.webkitRequestAnimationFrame ||
          global.mozRequestAnimationFrame ||
          global.oRequestAnimationFrame ||
          global.msRequestAnimationFrame

        module.exports = nativeRequestAnimationFrame
        /* WEBPACK VAR INJECTION */
      }.call(exports, __webpack_require__(2)))

      /***/
    },
    /* 196 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'
      /* WEBPACK VAR INJECTION */
      ;(function(global) {
        /**
         * Copyright (c) 2013-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         *
         */

        // setimmediate adds setImmediate to the global. We want to make sure we export
        // the actual function.

        __webpack_require__(197)
        module.exports = global.setImmediate
        /* WEBPACK VAR INJECTION */
      }.call(exports, __webpack_require__(2)))

      /***/
    },
    /* 197 */
    /***/ function(module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */ ;(function(global, process) {
        ;(function(global, undefined) {
          'use strict'

          if (global.setImmediate) {
            return
          }

          var nextHandle = 1 // Spec says greater than zero
          var tasksByHandle = {}
          var currentlyRunningATask = false
          var doc = global.document
          var registerImmediate

          function setImmediate(callback) {
            // Callback can either be a function or a string
            if (typeof callback !== 'function') {
              callback = new Function('' + callback)
            }
            // Copy function arguments
            var args = new Array(arguments.length - 1)
            for (var i = 0; i < args.length; i++) {
              args[i] = arguments[i + 1]
            }
            // Store and register the task
            var task = { callback: callback, args: args }
            tasksByHandle[nextHandle] = task
            registerImmediate(nextHandle)
            return nextHandle++
          }

          function clearImmediate(handle) {
            delete tasksByHandle[handle]
          }

          function run(task) {
            var callback = task.callback
            var args = task.args
            switch (args.length) {
              case 0:
                callback()
                break
              case 1:
                callback(args[0])
                break
              case 2:
                callback(args[0], args[1])
                break
              case 3:
                callback(args[0], args[1], args[2])
                break
              default:
                callback.apply(undefined, args)
                break
            }
          }

          function runIfPresent(handle) {
            // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
            // So if we're currently running a task, we'll need to delay this invocation.
            if (currentlyRunningATask) {
              // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
              // "too much recursion" error.
              setTimeout(runIfPresent, 0, handle)
            } else {
              var task = tasksByHandle[handle]
              if (task) {
                currentlyRunningATask = true
                try {
                  run(task)
                } finally {
                  clearImmediate(handle)
                  currentlyRunningATask = false
                }
              }
            }
          }

          function installNextTickImplementation() {
            registerImmediate = function(handle) {
              process.nextTick(function() {
                runIfPresent(handle)
              })
            }
          }

          function canUsePostMessage() {
            // The test against `importScripts` prevents this implementation from being installed inside a web worker,
            // where `global.postMessage` means something completely different and can't be used for this purpose.
            if (global.postMessage && !global.importScripts) {
              var postMessageIsAsynchronous = true
              var oldOnMessage = global.onmessage
              global.onmessage = function() {
                postMessageIsAsynchronous = false
              }
              global.postMessage('', '*')
              global.onmessage = oldOnMessage
              return postMessageIsAsynchronous
            }
          }

          function installPostMessageImplementation() {
            // Installs an event handler on `global` for the `message` event: see
            // * https://developer.mozilla.org/en/DOM/window.postMessage
            // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

            var messagePrefix = 'setImmediate$' + Math.random() + '$'
            var onGlobalMessage = function(event) {
              if (
                event.source === global &&
                typeof event.data === 'string' &&
                event.data.indexOf(messagePrefix) === 0
              ) {
                runIfPresent(+event.data.slice(messagePrefix.length))
              }
            }

            if (global.addEventListener) {
              global.addEventListener('message', onGlobalMessage, false)
            } else {
              global.attachEvent('onmessage', onGlobalMessage)
            }

            registerImmediate = function(handle) {
              global.postMessage(messagePrefix + handle, '*')
            }
          }

          function installMessageChannelImplementation() {
            var channel = new MessageChannel()
            channel.port1.onmessage = function(event) {
              var handle = event.data
              runIfPresent(handle)
            }

            registerImmediate = function(handle) {
              channel.port2.postMessage(handle)
            }
          }

          function installReadyStateChangeImplementation() {
            var html = doc.documentElement
            registerImmediate = function(handle) {
              // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
              // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
              var script = doc.createElement('script')
              script.onreadystatechange = function() {
                runIfPresent(handle)
                script.onreadystatechange = null
                html.removeChild(script)
                script = null
              }
              html.appendChild(script)
            }
          }

          function installSetTimeoutImplementation() {
            registerImmediate = function(handle) {
              setTimeout(runIfPresent, 0, handle)
            }
          }

          // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
          var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global)
          attachTo = attachTo && attachTo.setTimeout ? attachTo : global

          // Don't get fooled by e.g. browserify environments.
          if ({}.toString.call(global.process) === '[object process]') {
            // For Node.js before 0.9
            installNextTickImplementation()
          } else if (canUsePostMessage()) {
            // For non-IE10 modern browsers
            installPostMessageImplementation()
          } else if (global.MessageChannel) {
            // For web workers, where supported
            installMessageChannelImplementation()
          } else if (
            doc &&
            'onreadystatechange' in doc.createElement('script')
          ) {
            // For IE 6–8
            installReadyStateChangeImplementation()
          } else {
            // For older browsers
            installSetTimeoutImplementation()
          }

          attachTo.setImmediate = setImmediate
          attachTo.clearImmediate = clearImmediate
        })(
          typeof self === 'undefined'
            ? typeof global === 'undefined' ? this : global
            : self
        )

        /* WEBPACK VAR INJECTION */
      }.call(exports, __webpack_require__(2), __webpack_require__(198)))

      /***/
    },
    /* 198 */
    /***/ function(module, exports) {
      // shim for using process in browser
      var process = (module.exports = {})

      // cached from whatever global is present so that test runners that stub it
      // don't break things.  But we need to wrap it in a try catch in case it is
      // wrapped in strict mode code which doesn't define any globals.  It's inside a
      // function because try/catches deoptimize in certain engines.

      var cachedSetTimeout
      var cachedClearTimeout

      function defaultSetTimout() {
        throw new Error('setTimeout has not been defined')
      }
      function defaultClearTimeout() {
        throw new Error('clearTimeout has not been defined')
      }
      ;(function() {
        try {
          if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout
          } else {
            cachedSetTimeout = defaultSetTimout
          }
        } catch (e) {
          cachedSetTimeout = defaultSetTimout
        }
        try {
          if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout
          } else {
            cachedClearTimeout = defaultClearTimeout
          }
        } catch (e) {
          cachedClearTimeout = defaultClearTimeout
        }
      })()
      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0)
        }
        // if setTimeout wasn't available but was latter defined
        if (
          (cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) &&
          setTimeout
        ) {
          cachedSetTimeout = setTimeout
          return setTimeout(fun, 0)
        }
        try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0)
        } catch (e) {
          try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0)
          } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0)
          }
        }
      }
      function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker)
        }
        // if clearTimeout wasn't available but was latter defined
        if (
          (cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) &&
          clearTimeout
        ) {
          cachedClearTimeout = clearTimeout
          return clearTimeout(marker)
        }
        try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker)
        } catch (e) {
          try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker)
          } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker)
          }
        }
      }
      var queue = []
      var draining = false
      var currentQueue
      var queueIndex = -1

      function cleanUpNextTick() {
        if (!draining || !currentQueue) {
          return
        }
        draining = false
        if (currentQueue.length) {
          queue = currentQueue.concat(queue)
        } else {
          queueIndex = -1
        }
        if (queue.length) {
          drainQueue()
        }
      }

      function drainQueue() {
        if (draining) {
          return
        }
        var timeout = runTimeout(cleanUpNextTick)
        draining = true

        var len = queue.length
        while (len) {
          currentQueue = queue
          queue = []
          while (++queueIndex < len) {
            if (currentQueue) {
              currentQueue[queueIndex].run()
            }
          }
          queueIndex = -1
          len = queue.length
        }
        currentQueue = null
        draining = false
        runClearTimeout(timeout)
      }

      process.nextTick = function(fun) {
        var args = new Array(arguments.length - 1)
        if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i]
          }
        }
        queue.push(new Item(fun, args))
        if (queue.length === 1 && !draining) {
          runTimeout(drainQueue)
        }
      }

      // v8 likes predictible objects
      function Item(fun, array) {
        this.fun = fun
        this.array = array
      }
      Item.prototype.run = function() {
        this.fun.apply(null, this.array)
      }
      process.title = 'browser'
      process.browser = true
      process.env = {}
      process.argv = []
      process.version = '' // empty string to avoid regexp issues
      process.versions = {}

      function noop() {}

      process.on = noop
      process.addListener = noop
      process.once = noop
      process.off = noop
      process.removeListener = noop
      process.removeAllListeners = noop
      process.emit = noop
      process.prependListener = noop
      process.prependOnceListener = noop

      process.listeners = function(name) {
        return []
      }

      process.binding = function(name) {
        throw new Error('process.binding is not supported')
      }

      process.cwd = function() {
        return '/'
      }
      process.chdir = function(dir) {
        throw new Error('process.chdir is not supported')
      }
      process.umask = function() {
        return 0
      }

      /***/
    },
    /* 199 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _dangerousStyleValue = __webpack_require__(200)

      var _dangerousStyleValue2 = _interopRequireDefault(_dangerousStyleValue)

      var _hyphenateStyleName = __webpack_require__(35)

      var _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName)

      var _warnValidStyle = __webpack_require__(201)

      var _warnValidStyle2 = _interopRequireDefault(_warnValidStyle)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      /**
       * Sets the value for multiple styles on a node.  If a value is specified as
       * '' (empty string), the corresponding style property will be unset.
       *
       * @param {DOMElement} node
       * @param {object} styles
       */
      function setValueForStyles(node, styles, getStack) {
        var style = node.style
        for (var styleName in styles) {
          if (!styles.hasOwnProperty(styleName)) {
            continue
          }
          var isCustomProperty = styleName.indexOf('--') === 0
          var isImportant =
            typeof styles[styleName] === 'string' &&
            styles[styleName].indexOf('!important') > -1
          if (true) {
            if (!isCustomProperty) {
              ;(0, _warnValidStyle2.default)(
                styleName,
                styles[styleName],
                getStack
              )
            }
          }
          var styleValue = (0, _dangerousStyleValue2.default)(
            styleName,
            styles[styleName],
            isCustomProperty
          )
          if (styleName === 'float') {
            styleName = 'cssFloat'
          }
          if (isCustomProperty || isImportant) {
            var name = isCustomProperty
              ? styleName
              : (0, _hyphenateStyleName2.default)(styleName)
            if (isImportant) {
              var _styleValue$split = styleValue.split('!'),
                value = _styleValue$split[0],
                priority = _styleValue$split[1]

              style.setProperty(name, value, priority)
            } else {
              style.setProperty(name, styleValue)
            }
          } else {
            style[styleName] = styleValue
          }
        }
      } /* eslint-disable */

      /**
       * Copyright 2013-present, Facebook, Inc.
       * All rights reserved.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * Based on React 16.3.0
       */

      exports.default = setValueForStyles

      /***/
    },
    /* 200 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _unitlessNumbers = __webpack_require__(71)

      var _unitlessNumbers2 = _interopRequireDefault(_unitlessNumbers)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      /**
       * Convert a value into the proper css writable value. The style name `name`
       * should be logical (no hyphens), as specified
       * in `CSSProperty.isUnitlessNumber`.
       *
       * @param {string} name CSS property name such as `topMargin`.
       * @param {*} value CSS property value such as `10px`.
       * @return {string} Normalized style value with dimensions applied.
       */
      function dangerousStyleValue(name, value, isCustomProperty) {
        // Note that we've removed escapeTextForBrowser() calls here since the
        // whole string will be escaped when the attribute is injected into
        // the markup. If you provide unsafe user data here they can inject
        // arbitrary CSS which may be problematic (I couldn't repro this):
        // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
        // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
        // This is not an XSS hole but instead a potential CSS injection issue
        // which has lead to a greater discussion about how we're going to
        // trust URLs moving forward. See #2115901

        var isEmpty =
          value == null || typeof value === 'boolean' || value === ''
        if (isEmpty) {
          return ''
        }

        if (
          !isCustomProperty &&
          typeof value === 'number' &&
          value !== 0 &&
          !(
            _unitlessNumbers2.default.hasOwnProperty(name) &&
            _unitlessNumbers2.default[name]
          )
        ) {
          return value + 'px' // Presumes implicit 'px' suffix for unitless numbers
        }

        return ('' + value).trim()
      } /* eslint-disable */

      /**
       * Copyright 2013-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @providesModule dangerousStyleValue
       * From React 16.0.0
       */

      exports.default = dangerousStyleValue

      /***/
    },
    /* 201 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true
      /* eslint-disable */

      /**
       * Copyright 2013-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @providesModule warnValidStyle
       * Based on React 16.3.0
       */

      var emptyFunction = __webpack_require__(8)

      var warnValidStyle = emptyFunction

      if (true) {
        var getComponentName = function getComponentName(instanceOrFiber) {
          if (typeof instanceOrFiber.getName === 'function') {
            // Stack reconciler
            var instance = instanceOrFiber
            return instance.getName()
          }
          if (typeof instanceOrFiber.tag === 'number') {
            // Fiber reconciler
            var fiber = instanceOrFiber
            var type = fiber.type

            if (typeof type === 'string') {
              return type
            }
            if (typeof type === 'function') {
              return type.displayName || type.name
            }
          }
          return null
        }

        // 'msTransform' is correct, but the other prefixes should be capitalized

        var camelizeStyleName = __webpack_require__(38)
        var warning = __webpack_require__(6)

        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/

        // style values shouldn't contain a semicolon
        var badStyleValueWithSemicolonPattern = /;\s*$/

        var warnedStyleNames = {}
        var warnedStyleValues = {}
        var warnedForNaNValue = false
        var warnedForInfinityValue = false

        var warnHyphenatedStyleName = function warnHyphenatedStyleName(
          name,
          owner
        ) {
          if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
            return
          }

          warnedStyleNames[name] = true
          warning(
            false,
            'Unsupported style property %s. Did you mean %s?%s',
            name,
            camelizeStyleName(name),
            checkRenderMessage(owner)
          )
        }

        var warnBadVendoredStyleName = function warnBadVendoredStyleName(
          name,
          owner
        ) {
          if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
            return
          }

          warnedStyleNames[name] = true
          warning(
            false,
            'Unsupported vendor-prefixed style property %s. Did you mean %s?%s',
            name,
            name.charAt(0).toUpperCase() + name.slice(1),
            checkRenderMessage(owner)
          )
        }

        var warnStyleValueWithSemicolon = function warnStyleValueWithSemicolon(
          name,
          value,
          owner
        ) {
          if (
            warnedStyleValues.hasOwnProperty(value) &&
            warnedStyleValues[value]
          ) {
            return
          }

          warnedStyleValues[value] = true
          warning(
            false,
            "Style property values shouldn't contain a semicolon.%s " +
              'Try "%s: %s" instead.',
            checkRenderMessage(owner),
            name,
            value.replace(badStyleValueWithSemicolonPattern, '')
          )
        }

        var warnStyleValueIsNaN = function warnStyleValueIsNaN(
          name,
          value,
          owner
        ) {
          if (warnedForNaNValue) {
            return
          }

          warnedForNaNValue = true
          warning(
            false,
            '`NaN` is an invalid value for the `%s` css style property.%s',
            name,
            checkRenderMessage(owner)
          )
        }

        var warnStyleValueIsInfinity = function warnStyleValueIsInfinity(
          name,
          value,
          owner
        ) {
          if (warnedForInfinityValue) {
            return
          }

          warnedForInfinityValue = true
          warning(
            false,
            '`Infinity` is an invalid value for the `%s` css style property.%s',
            name,
            checkRenderMessage(owner)
          )
        }

        var checkRenderMessage = function checkRenderMessage(owner) {
          var ownerName
          if (owner != null) {
            // Stack passes the owner manually all the way to CSSPropertyOperations.
            ownerName = getComponentName(owner)
          } else {
            // Fiber doesn't pass it but uses ReactDebugCurrentFiber to track it.
            // It is only enabled in development and tracks host components too.
            // var {getCurrentFiberOwnerName} = require('ReactDebugCurrentFiber');
            //  ownerName = getCurrentFiberOwnerName();
            // TODO: also report the stack.
          }
          if (ownerName) {
            return '\n\nCheck the render method of `' + ownerName + '`.'
          }
          return ''
        }

        warnValidStyle = function warnValidStyle(name, value, component) {
          var owner
          if (component) {
            // TODO: this only works with Stack. Seems like we need to add unit tests?
            // owner = component._currentElement._owner;
          }
          if (name.indexOf('-') > -1) {
            warnHyphenatedStyleName(name, owner)
          } else if (badVendoredStyleNamePattern.test(name)) {
            warnBadVendoredStyleName(name, owner)
          } else if (badStyleValueWithSemicolonPattern.test(value)) {
            warnStyleValueWithSemicolon(name, value, owner)
          }

          if (typeof value === 'number') {
            if (isNaN(value)) {
              warnStyleValueIsNaN(name, value, owner)
            } else if (!isFinite(value)) {
              warnStyleValueIsInfinity(name, value, owner)
            }
          }
        }
      }

      exports.default = warnValidStyle

      /***/
    },
    /* 202 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      var _normalizeNativeEvent = __webpack_require__(81)

      var _normalizeNativeEvent2 = _interopRequireDefault(_normalizeNativeEvent)

      var _reactDom = __webpack_require__(15)

      var _reactDom2 = _interopRequireDefault(_reactDom)

      var _unstableNativeDependencies = __webpack_require__(203)

      var _unstableNativeDependencies2 = _interopRequireDefault(
        _unstableNativeDependencies
      )

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      var EventPluginHub =
        _reactDom2.default.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED
          .EventPluginHub // based on https://github.com/facebook/react/pull/4303/files

      var ResponderEventPlugin =
          _unstableNativeDependencies2.default.ResponderEventPlugin,
        ResponderTouchHistoryStore =
          _unstableNativeDependencies2.default.ResponderTouchHistoryStore

      var topMouseDown = 'topMouseDown'
      var topMouseMove = 'topMouseMove'
      var topMouseUp = 'topMouseUp'
      var topScroll = 'topScroll'
      var topSelectionChange = 'topSelectionChange'
      var topTouchCancel = 'topTouchCancel'
      var topTouchEnd = 'topTouchEnd'
      var topTouchMove = 'topTouchMove'
      var topTouchStart = 'topTouchStart'

      var endDependencies = [topTouchCancel, topTouchEnd, topMouseUp]
      var moveDependencies = [topTouchMove, topMouseMove]
      var startDependencies = [topTouchStart, topMouseDown]

      /**
       * Setup ResponderEventPlugin dependencies
       */
      ResponderEventPlugin.eventTypes.responderMove.dependencies = moveDependencies
      ResponderEventPlugin.eventTypes.responderEnd.dependencies = endDependencies
      ResponderEventPlugin.eventTypes.responderStart.dependencies = startDependencies
      ResponderEventPlugin.eventTypes.responderRelease.dependencies = endDependencies
      ResponderEventPlugin.eventTypes.responderTerminationRequest.dependencies = []
      ResponderEventPlugin.eventTypes.responderGrant.dependencies = []
      ResponderEventPlugin.eventTypes.responderReject.dependencies = []
      ResponderEventPlugin.eventTypes.responderTerminate.dependencies = []
      ResponderEventPlugin.eventTypes.moveShouldSetResponder.dependencies = moveDependencies
      ResponderEventPlugin.eventTypes.selectionChangeShouldSetResponder.dependencies = [
        topSelectionChange,
      ]
      ResponderEventPlugin.eventTypes.scrollShouldSetResponder.dependencies = [
        topScroll,
      ]
      ResponderEventPlugin.eventTypes.startShouldSetResponder.dependencies = startDependencies

      var originalExtractEvents = ResponderEventPlugin.extractEvents
      ResponderEventPlugin.extractEvents = function(
        topLevelType,
        targetInst,
        nativeEvent,
        nativeEventTarget
      ) {
        var hasActiveTouches =
          ResponderTouchHistoryStore.touchHistory.numberActiveTouches > 0
        if (
          // Filter out mousemove and mouseup events when a touch hasn't started yet
          ((topLevelType === topMouseMove || topLevelType === topMouseUp) &&
            !hasActiveTouches) ||
          // Filter out events from wheel/middle and right click.
          nativeEvent.button === 1 ||
          nativeEvent.button === 2
        ) {
          return
        }

        var normalizedEvent = (0, _normalizeNativeEvent2.default)(nativeEvent)

        return originalExtractEvents.call(
          ResponderEventPlugin,
          topLevelType,
          targetInst,
          normalizedEvent,
          nativeEventTarget
        )
      }

      EventPluginHub.injection.injectEventPluginsByName({
        ResponderEventPlugin: ResponderEventPlugin,
      })

      /***/
    },
    /* 203 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      if (false) {
        module.exports = require('./cjs/react-dom-unstable-native-dependencies.production.min.js')
      } else {
        module.exports = __webpack_require__(204)
      }

      /***/
    },
    /* 204 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'
      /** @license React v16.2.0
       * react-dom-unstable-native-dependencies.development.js
       *
       * Copyright (c) 2013-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       */

      if (true) {
        ;(function() {
          'use strict'

          var ReactDOM = __webpack_require__(15)
          var invariant = __webpack_require__(4)
          var warning = __webpack_require__(6)
          var _assign = __webpack_require__(10)
          var emptyFunction = __webpack_require__(8)

          /**
           * WARNING: DO NOT manually require this module.
           * This is a replacement for `invariant(...)` used by the error code system
           * and will _only_ be required by the corresponding babel pass.
           * It always throws.
           */

          {
            // In DEV mode, we swap out invokeGuardedCallback for a special version
            // that plays more nicely with the browser's DevTools. The idea is to preserve
            // "Pause on exceptions" behavior. Because React wraps all user-provided
            // functions in invokeGuardedCallback, and the production version of
            // invokeGuardedCallback uses a try-catch, all user exceptions are treated
            // like caught exceptions, and the DevTools won't pause unless the developer
            // takes the extra step of enabling pause on caught exceptions. This is
            // untintuitive, though, because even though React has caught the error, from
            // the developer's perspective, the error is uncaught.
            //
            // To preserve the expected "Pause on exceptions" behavior, we don't use a
            // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
            // DOM node, and call the user-provided callback from inside an event handler
            // for that fake event. If the callback throws, the error is "captured" using
            // a global event handler. But because the error happens in a different
            // event loop context, it does not interrupt the normal program flow.
            // Effectively, this gives us try-catch behavior without actually using
            // try-catch. Neat!

            // Check that the browser supports the APIs we need to implement our special
            // DEV version of invokeGuardedCallback
            if (
              typeof window !== 'undefined' &&
              typeof window.dispatchEvent === 'function' &&
              typeof document !== 'undefined' &&
              typeof document.createEvent === 'function'
            ) {
              var fakeNode = document.createElement('react')
            }
          }

          var getFiberCurrentPropsFromNode = null
          var getInstanceFromNode = null
          var getNodeFromInstance = null

          var injection = {
            injectComponentTree: function(Injected) {
              getFiberCurrentPropsFromNode =
                Injected.getFiberCurrentPropsFromNode
              getInstanceFromNode = Injected.getInstanceFromNode
              getNodeFromInstance = Injected.getNodeFromInstance

              {
                warning(
                  getNodeFromInstance && getInstanceFromNode,
                  'EventPluginUtils.injection.injectComponentTree(...): Injected ' +
                    'module is missing getNodeFromInstance or getInstanceFromNode.'
                )
              }
            },
          }

          function isEndish(topLevelType) {
            return (
              topLevelType === 'topMouseUp' ||
              topLevelType === 'topTouchEnd' ||
              topLevelType === 'topTouchCancel'
            )
          }

          function isMoveish(topLevelType) {
            return (
              topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove'
            )
          }
          function isStartish(topLevelType) {
            return (
              topLevelType === 'topMouseDown' ||
              topLevelType === 'topTouchStart'
            )
          }

          var validateEventDispatches
          {
            validateEventDispatches = function(event) {
              var dispatchListeners = event._dispatchListeners
              var dispatchInstances = event._dispatchInstances

              var listenersIsArr = Array.isArray(dispatchListeners)
              var listenersLen = listenersIsArr
                ? dispatchListeners.length
                : dispatchListeners ? 1 : 0

              var instancesIsArr = Array.isArray(dispatchInstances)
              var instancesLen = instancesIsArr
                ? dispatchInstances.length
                : dispatchInstances ? 1 : 0

              warning(
                instancesIsArr === listenersIsArr &&
                  instancesLen === listenersLen,
                'EventPluginUtils: Invalid `event`.'
              )
            }
          }

          /**
           * Standard/simple iteration through an event's collected dispatches.
           */

          /**
           * Standard/simple iteration through an event's collected dispatches, but stops
           * at the first dispatch execution returning true, and returns that id.
           *
           * @return {?string} id of the first dispatch execution who's listener returns
           * true, or null if no listener returned true.
           */
          function executeDispatchesInOrderStopAtTrueImpl(event) {
            var dispatchListeners = event._dispatchListeners
            var dispatchInstances = event._dispatchInstances
            {
              validateEventDispatches(event)
            }
            if (Array.isArray(dispatchListeners)) {
              for (var i = 0; i < dispatchListeners.length; i++) {
                if (event.isPropagationStopped()) {
                  break
                }
                // Listeners and Instances are two parallel arrays that are always in sync.
                if (dispatchListeners[i](event, dispatchInstances[i])) {
                  return dispatchInstances[i]
                }
              }
            } else if (dispatchListeners) {
              if (dispatchListeners(event, dispatchInstances)) {
                return dispatchInstances
              }
            }
            return null
          }

          /**
           * @see executeDispatchesInOrderStopAtTrueImpl
           */
          function executeDispatchesInOrderStopAtTrue(event) {
            var ret = executeDispatchesInOrderStopAtTrueImpl(event)
            event._dispatchInstances = null
            event._dispatchListeners = null
            return ret
          }

          /**
           * Execution of a "direct" dispatch - there must be at most one dispatch
           * accumulated on the event or it is considered an error. It doesn't really make
           * sense for an event with multiple dispatches (bubbled) to keep track of the
           * return values at each dispatch execution, but it does tend to make sense when
           * dealing with "direct" dispatches.
           *
           * @return {*} The return value of executing the single dispatch.
           */
          function executeDirectDispatch(event) {
            {
              validateEventDispatches(event)
            }
            var dispatchListener = event._dispatchListeners
            var dispatchInstance = event._dispatchInstances
            !!Array.isArray(dispatchListener)
              ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.')
              : void 0
            event.currentTarget = dispatchListener
              ? getNodeFromInstance(dispatchInstance)
              : null
            var res = dispatchListener ? dispatchListener(event) : null
            event.currentTarget = null
            event._dispatchListeners = null
            event._dispatchInstances = null
            return res
          }

          /**
           * @param {SyntheticEvent} event
           * @return {boolean} True iff number of dispatches accumulated is greater than 0.
           */
          function hasDispatches(event) {
            return !!event._dispatchListeners
          }

          // Before we know whether it is functional or class

          // Root of a host tree. Could be nested inside another node.
          // A subtree. Could be an entry point to a different renderer.
          var HostComponent = 5

          function getParent(inst) {
            do {
              inst = inst['return']
              // TODO: If this is a HostRoot we might want to bail out.
              // That is depending on if we want nested subtrees (layers) to bubble
              // events to their parent. We could also go through parentNode on the
              // host node but that wouldn't work for React Native and doesn't let us
              // do the portal feature.
            } while (inst && inst.tag !== HostComponent)
            if (inst) {
              return inst
            }
            return null
          }

          /**
           * Return the lowest common ancestor of A and B, or null if they are in
           * different trees.
           */
          function getLowestCommonAncestor(instA, instB) {
            var depthA = 0
            for (var tempA = instA; tempA; tempA = getParent(tempA)) {
              depthA++
            }
            var depthB = 0
            for (var tempB = instB; tempB; tempB = getParent(tempB)) {
              depthB++
            }

            // If A is deeper, crawl up.
            while (depthA - depthB > 0) {
              instA = getParent(instA)
              depthA--
            }

            // If B is deeper, crawl up.
            while (depthB - depthA > 0) {
              instB = getParent(instB)
              depthB--
            }

            // Walk in lockstep until we find a match.
            var depth = depthA
            while (depth--) {
              if (instA === instB || instA === instB.alternate) {
                return instA
              }
              instA = getParent(instA)
              instB = getParent(instB)
            }
            return null
          }

          /**
           * Return if A is an ancestor of B.
           */
          function isAncestor(instA, instB) {
            while (instB) {
              if (instA === instB || instA === instB.alternate) {
                return true
              }
              instB = getParent(instB)
            }
            return false
          }

          /**
           * Return the parent instance of the passed-in instance.
           */
          function getParentInstance(inst) {
            return getParent(inst)
          }

          /**
           * Simulates the traversal of a two-phase, capture/bubble event dispatch.
           */
          function traverseTwoPhase(inst, fn, arg) {
            var path = []
            while (inst) {
              path.push(inst)
              inst = getParent(inst)
            }
            var i
            for (i = path.length; i-- > 0; ) {
              fn(path[i], 'captured', arg)
            }
            for (i = 0; i < path.length; i++) {
              fn(path[i], 'bubbled', arg)
            }
          }

          /**
           * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
           * should would receive a `mouseEnter` or `mouseLeave` event.
           *
           * Does not invoke the callback on the nearest common ancestor because nothing
           * "entered" or "left" that element.
           */

          /**
           * Registers plugins so that they can extract and dispatch events.
           *
           * @see {EventPluginHub}
           */

          /**
           * Ordered list of injected plugins.
           */

          /**
           * Mapping from event name to dispatch config
           */

          /**
           * Mapping from registration name to plugin module
           */

          /**
           * Mapping from registration name to event name
           */

          /**
           * Mapping from lowercase registration names to the properly cased version,
           * used to warn in the case of missing event handlers. Available
           * only in true.
           * @type {Object}
           */

          // Trust the developer to only use possibleRegistrationNames in true

          /**
           * Injects an ordering of plugins (by plugin name). This allows the ordering
           * to be decoupled from injection of the actual plugins so that ordering is
           * always deterministic regardless of packaging, on-the-fly injection, etc.
           *
           * @param {array} InjectedEventPluginOrder
           * @internal
           * @see {EventPluginHub.injection.injectEventPluginOrder}
           */

          /**
           * Injects plugins to be used by `EventPluginHub`. The plugin names must be
           * in the ordering injected by `injectEventPluginOrder`.
           *
           * Plugins can be injected as part of page initialization or on-the-fly.
           *
           * @param {object} injectedNamesToPlugins Map from names to plugin modules.
           * @internal
           * @see {EventPluginHub.injection.injectEventPluginsByName}
           */

          /**
           * Accumulates items that must not be null or undefined into the first one. This
           * is used to conserve memory by avoiding array allocations, and thus sacrifices
           * API cleanness. Since `current` can be null before being passed in and not
           * null after this function, make sure to assign it back to `current`:
           *
           * `a = accumulateInto(a, b);`
           *
           * This API should be sparingly used. Try `accumulate` for something cleaner.
           *
           * @return {*|array<*>} An accumulation of items.
           */

          function accumulateInto(current, next) {
            !(next != null)
              ? invariant(
                  false,
                  'accumulateInto(...): Accumulated items must not be null or undefined.'
                )
              : void 0

            if (current == null) {
              return next
            }

            // Both are not empty. Warning: Never call x.concat(y) when you are not
            // certain that x is an Array (x could be a string with concat method).
            if (Array.isArray(current)) {
              if (Array.isArray(next)) {
                current.push.apply(current, next)
                return current
              }
              current.push(next)
              return current
            }

            if (Array.isArray(next)) {
              // A bit too dangerous to mutate `next`.
              return [current].concat(next)
            }

            return [current, next]
          }

          /**
           * @param {array} arr an "accumulation" of items which is either an Array or
           * a single item. Useful when paired with the `accumulate` module. This is a
           * simple utility that allows us to reason about a collection of items, but
           * handling the case when there is exactly one item (and we do not need to
           * allocate an array).
           * @param {function} cb Callback invoked with each element or a collection.
           * @param {?} [scope] Scope used as `this` in a callback.
           */
          function forEachAccumulated(arr, cb, scope) {
            if (Array.isArray(arr)) {
              arr.forEach(cb, scope)
            } else if (arr) {
              cb.call(scope, arr)
            }
          }

          function isInteractive(tag) {
            return (
              tag === 'button' ||
              tag === 'input' ||
              tag === 'select' ||
              tag === 'textarea'
            )
          }

          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case 'onClick':
              case 'onClickCapture':
              case 'onDoubleClick':
              case 'onDoubleClickCapture':
              case 'onMouseDown':
              case 'onMouseDownCapture':
              case 'onMouseMove':
              case 'onMouseMoveCapture':
              case 'onMouseUp':
              case 'onMouseUpCapture':
                return !!(props.disabled && isInteractive(type))
              default:
                return false
            }
          }

          /**
           * This is a unified interface for event plugins to be installed and configured.
           *
           * Event plugins can implement the following properties:
           *
           *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
           *     Required. When a top-level event is fired, this method is expected to
           *     extract synthetic events that will in turn be queued and dispatched.
           *
           *   `eventTypes` {object}
           *     Optional, plugins that fire events must publish a mapping of registration
           *     names that are used to register listeners. Values of this mapping must
           *     be objects that contain `registrationName` or `phasedRegistrationNames`.
           *
           *   `executeDispatch` {function(object, function, string)}
           *     Optional, allows plugins to override how an event gets dispatched. By
           *     default, the listener is simply invoked.
           *
           * Each plugin that is injected into `EventsPluginHub` is immediately operable.
           *
           * @public
           */

          /**
           * Methods for injecting dependencies.
           */

          /**
           * @param {object} inst The instance, which is the source of events.
           * @param {string} registrationName Name of listener (e.g. `onClick`).
           * @return {?function} The stored callback.
           */
          function getListener(inst, registrationName) {
            var listener

            // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
            // live here; needs to be moved to a better place soon
            var stateNode = inst.stateNode
            if (!stateNode) {
              // Work in progress (ex: onload events in incremental mode).
              return null
            }
            var props = getFiberCurrentPropsFromNode(stateNode)
            if (!props) {
              // Work in progress.
              return null
            }
            listener = props[registrationName]
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null
            }
            !(!listener || typeof listener === 'function')
              ? invariant(
                  false,
                  'Expected `%s` listener to be a function, instead got a value of `%s` type.',
                  registrationName,
                  typeof listener
                )
              : void 0
            return listener
          }

          /**
           * Allows registered plugins an opportunity to extract events from top-level
           * native browser events.
           *
           * @return {*} An accumulation of synthetic events.
           * @internal
           */

          /**
           * Enqueues a synthetic event that should be dispatched when
           * `processEventQueue` is invoked.
           *
           * @param {*} events An accumulation of synthetic events.
           * @internal
           */

          /**
           * Dispatches all synthetic events on the event queue.
           *
           * @internal
           */

          /**
           * Some event types have a notion of different registration names for different
           * "phases" of propagation. This finds listeners by a given phase.
           */
          function listenerAtPhase(inst, event, propagationPhase) {
            var registrationName =
              event.dispatchConfig.phasedRegistrationNames[propagationPhase]
            return getListener(inst, registrationName)
          }

          /**
           * A small set of propagation patterns, each of which will accept a small amount
           * of information, and generate a set of "dispatch ready event objects" - which
           * are sets of events that have already been annotated with a set of dispatched
           * listener functions/ids. The API is designed this way to discourage these
           * propagation strategies from actually executing the dispatches, since we
           * always want to collect the entire set of dispatches before executing even a
           * single one.
           */

          /**
           * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
           * here, allows us to not have to bind or create functions for each event.
           * Mutating the event's members allows us to not have to create a wrapping
           * "dispatch" object that pairs the event with the listener.
           */
          function accumulateDirectionalDispatches(inst, phase, event) {
            {
              warning(inst, 'Dispatching inst must not be null')
            }
            var listener = listenerAtPhase(inst, event, phase)
            if (listener) {
              event._dispatchListeners = accumulateInto(
                event._dispatchListeners,
                listener
              )
              event._dispatchInstances = accumulateInto(
                event._dispatchInstances,
                inst
              )
            }
          }

          /**
           * Collect dispatches (must be entirely collected before dispatching - see unit
           * tests). Lazily allocate the array to conserve memory.  We must loop through
           * each event and perform the traversal for each one. We cannot perform a
           * single traversal for the entire collection of events because each event may
           * have a different target.
           */
          function accumulateTwoPhaseDispatchesSingle(event) {
            if (event && event.dispatchConfig.phasedRegistrationNames) {
              traverseTwoPhase(
                event._targetInst,
                accumulateDirectionalDispatches,
                event
              )
            }
          }

          /**
           * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
           */
          function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
            if (event && event.dispatchConfig.phasedRegistrationNames) {
              var targetInst = event._targetInst
              var parentInst = targetInst ? getParentInstance(targetInst) : null
              traverseTwoPhase(
                parentInst,
                accumulateDirectionalDispatches,
                event
              )
            }
          }

          /**
           * Accumulates without regard to direction, does not look for phased
           * registration names. Same as `accumulateDirectDispatchesSingle` but without
           * requiring that the `dispatchMarker` be the same as the dispatched ID.
           */
          function accumulateDispatches(inst, ignoredDirection, event) {
            if (inst && event && event.dispatchConfig.registrationName) {
              var registrationName = event.dispatchConfig.registrationName
              var listener = getListener(inst, registrationName)
              if (listener) {
                event._dispatchListeners = accumulateInto(
                  event._dispatchListeners,
                  listener
                )
                event._dispatchInstances = accumulateInto(
                  event._dispatchInstances,
                  inst
                )
              }
            }
          }

          /**
           * Accumulates dispatches on an `SyntheticEvent`, but only for the
           * `dispatchMarker`.
           * @param {SyntheticEvent} event
           */
          function accumulateDirectDispatchesSingle(event) {
            if (event && event.dispatchConfig.registrationName) {
              accumulateDispatches(event._targetInst, null, event)
            }
          }

          function accumulateTwoPhaseDispatches(events) {
            forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle)
          }

          function accumulateTwoPhaseDispatchesSkipTarget(events) {
            forEachAccumulated(
              events,
              accumulateTwoPhaseDispatchesSingleSkipTarget
            )
          }

          function accumulateDirectDispatches(events) {
            forEachAccumulated(events, accumulateDirectDispatchesSingle)
          }

          /* eslint valid-typeof: 0 */

          var didWarnForAddedNewProperty = false
          var isProxySupported = typeof Proxy === 'function'
          var EVENT_POOL_SIZE = 10

          var shouldBeReleasedProperties = [
            'dispatchConfig',
            '_targetInst',
            'nativeEvent',
            'isDefaultPrevented',
            'isPropagationStopped',
            '_dispatchListeners',
            '_dispatchInstances',
          ]

          /**
           * @interface Event
           * @see http://www.w3.org/TR/DOM-Level-3-Events/
           */
          var EventInterface = {
            type: null,
            target: null,
            // currentTarget is set when dispatching; no use in copying it here
            currentTarget: emptyFunction.thatReturnsNull,
            eventPhase: null,
            bubbles: null,
            cancelable: null,
            timeStamp: function(event) {
              return event.timeStamp || Date.now()
            },
            defaultPrevented: null,
            isTrusted: null,
          }

          /**
           * Synthetic events are dispatched by event plugins, typically in response to a
           * top-level event delegation handler.
           *
           * These systems should generally use pooling to reduce the frequency of garbage
           * collection. The system should check `isPersistent` to determine whether the
           * event should be released into the pool after being dispatched. Users that
           * need a persisted event should invoke `persist`.
           *
           * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
           * normalizing browser quirks. Subclasses do not necessarily have to implement a
           * DOM interface; custom application-specific events can also subclass this.
           *
           * @param {object} dispatchConfig Configuration used to dispatch this event.
           * @param {*} targetInst Marker identifying the event target.
           * @param {object} nativeEvent Native browser event.
           * @param {DOMEventTarget} nativeEventTarget Target node.
           */
          function SyntheticEvent(
            dispatchConfig,
            targetInst,
            nativeEvent,
            nativeEventTarget
          ) {
            {
              // these have a getter/setter for warnings
              delete this.nativeEvent
              delete this.preventDefault
              delete this.stopPropagation
            }

            this.dispatchConfig = dispatchConfig
            this._targetInst = targetInst
            this.nativeEvent = nativeEvent

            var Interface = this.constructor.Interface
            for (var propName in Interface) {
              if (!Interface.hasOwnProperty(propName)) {
                continue
              }
              {
                delete this[propName] // this has a getter/setter for warnings
              }
              var normalize = Interface[propName]
              if (normalize) {
                this[propName] = normalize(nativeEvent)
              } else {
                if (propName === 'target') {
                  this.target = nativeEventTarget
                } else {
                  this[propName] = nativeEvent[propName]
                }
              }
            }

            var defaultPrevented =
              nativeEvent.defaultPrevented != null
                ? nativeEvent.defaultPrevented
                : nativeEvent.returnValue === false
            if (defaultPrevented) {
              this.isDefaultPrevented = emptyFunction.thatReturnsTrue
            } else {
              this.isDefaultPrevented = emptyFunction.thatReturnsFalse
            }
            this.isPropagationStopped = emptyFunction.thatReturnsFalse
            return this
          }

          _assign(SyntheticEvent.prototype, {
            preventDefault: function() {
              this.defaultPrevented = true
              var event = this.nativeEvent
              if (!event) {
                return
              }

              if (event.preventDefault) {
                event.preventDefault()
              } else if (typeof event.returnValue !== 'unknown') {
                event.returnValue = false
              }
              this.isDefaultPrevented = emptyFunction.thatReturnsTrue
            },

            stopPropagation: function() {
              var event = this.nativeEvent
              if (!event) {
                return
              }

              if (event.stopPropagation) {
                event.stopPropagation()
              } else if (typeof event.cancelBubble !== 'unknown') {
                // The ChangeEventPlugin registers a "propertychange" event for
                // IE. This event does not support bubbling or cancelling, and
                // any references to cancelBubble throw "Member not found".  A
                // typeof check of "unknown" circumvents this issue (and is also
                // IE specific).
                event.cancelBubble = true
              }

              this.isPropagationStopped = emptyFunction.thatReturnsTrue
            },

            /**
             * We release all dispatched `SyntheticEvent`s after each event loop, adding
             * them back into the pool. This allows a way to hold onto a reference that
             * won't be added back into the pool.
             */
            persist: function() {
              this.isPersistent = emptyFunction.thatReturnsTrue
            },

            /**
             * Checks if this event should be released back into the pool.
             *
             * @return {boolean} True if this should not be released, false otherwise.
             */
            isPersistent: emptyFunction.thatReturnsFalse,

            /**
             * `PooledClass` looks for `destructor` on each instance it releases.
             */
            destructor: function() {
              var Interface = this.constructor.Interface
              for (var propName in Interface) {
                {
                  Object.defineProperty(
                    this,
                    propName,
                    getPooledWarningPropertyDefinition(
                      propName,
                      Interface[propName]
                    )
                  )
                }
              }
              for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
                this[shouldBeReleasedProperties[i]] = null
              }
              {
                Object.defineProperty(
                  this,
                  'nativeEvent',
                  getPooledWarningPropertyDefinition('nativeEvent', null)
                )
                Object.defineProperty(
                  this,
                  'preventDefault',
                  getPooledWarningPropertyDefinition(
                    'preventDefault',
                    emptyFunction
                  )
                )
                Object.defineProperty(
                  this,
                  'stopPropagation',
                  getPooledWarningPropertyDefinition(
                    'stopPropagation',
                    emptyFunction
                  )
                )
              }
            },
          })

          SyntheticEvent.Interface = EventInterface

          /**
           * Helper to reduce boilerplate when creating subclasses.
           *
           * @param {function} Class
           * @param {?object} Interface
           */
          SyntheticEvent.augmentClass = function(Class, Interface) {
            var Super = this

            var E = function() {}
            E.prototype = Super.prototype
            var prototype = new E()

            _assign(prototype, Class.prototype)
            Class.prototype = prototype
            Class.prototype.constructor = Class

            Class.Interface = _assign({}, Super.Interface, Interface)
            Class.augmentClass = Super.augmentClass
            addEventPoolingTo(Class)
          }

          /** Proxying after everything set on SyntheticEvent
           * to resolve Proxy issue on some WebKit browsers
           * in which some Event properties are set to undefined (GH#10010)
           */
          {
            if (isProxySupported) {
              /*eslint-disable no-func-assign */
              SyntheticEvent = new Proxy(SyntheticEvent, {
                construct: function(target, args) {
                  return this.apply(
                    target,
                    Object.create(target.prototype),
                    args
                  )
                },
                apply: function(constructor, that, args) {
                  return new Proxy(constructor.apply(that, args), {
                    set: function(target, prop, value) {
                      if (
                        prop !== 'isPersistent' &&
                        !target.constructor.Interface.hasOwnProperty(prop) &&
                        shouldBeReleasedProperties.indexOf(prop) === -1
                      ) {
                        warning(
                          didWarnForAddedNewProperty || target.isPersistent(),
                          "This synthetic event is reused for performance reasons. If you're " +
                            "seeing this, you're adding a new property in the synthetic event object. " +
                            'The property is never released. See ' +
                            'https://fb.me/react-event-pooling for more information.'
                        )
                        didWarnForAddedNewProperty = true
                      }
                      target[prop] = value
                      return true
                    },
                  })
                },
              })
              /*eslint-enable no-func-assign */
            }
          }

          addEventPoolingTo(SyntheticEvent)

          /**
           * Helper to nullify syntheticEvent instance properties when destructing
           *
           * @param {String} propName
           * @param {?object} getVal
           * @return {object} defineProperty object
           */
          function getPooledWarningPropertyDefinition(propName, getVal) {
            var isFunction = typeof getVal === 'function'
            return {
              configurable: true,
              set: set,
              get: get,
            }

            function set(val) {
              var action = isFunction
                ? 'setting the method'
                : 'setting the property'
              warn(action, 'This is effectively a no-op')
              return val
            }

            function get() {
              var action = isFunction
                ? 'accessing the method'
                : 'accessing the property'
              var result = isFunction
                ? 'This is a no-op function'
                : 'This is set to null'
              warn(action, result)
              return getVal
            }

            function warn(action, result) {
              var warningCondition = false
              warning(
                warningCondition,
                "This synthetic event is reused for performance reasons. If you're seeing this, " +
                  "you're %s `%s` on a released/nullified synthetic event. %s. " +
                  'If you must keep the original synthetic event around, use event.persist(). ' +
                  'See https://fb.me/react-event-pooling for more information.',
                action,
                propName,
                result
              )
            }
          }

          function getPooledEvent(
            dispatchConfig,
            targetInst,
            nativeEvent,
            nativeInst
          ) {
            var EventConstructor = this
            if (EventConstructor.eventPool.length) {
              var instance = EventConstructor.eventPool.pop()
              EventConstructor.call(
                instance,
                dispatchConfig,
                targetInst,
                nativeEvent,
                nativeInst
              )
              return instance
            }
            return new EventConstructor(
              dispatchConfig,
              targetInst,
              nativeEvent,
              nativeInst
            )
          }

          function releasePooledEvent(event) {
            var EventConstructor = this
            !(event instanceof EventConstructor)
              ? invariant(
                  false,
                  'Trying to release an event instance  into a pool of a different type.'
                )
              : void 0
            event.destructor()
            if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
              EventConstructor.eventPool.push(event)
            }
          }

          function addEventPoolingTo(EventConstructor) {
            EventConstructor.eventPool = []
            EventConstructor.getPooled = getPooledEvent
            EventConstructor.release = releasePooledEvent
          }

          var SyntheticEvent$1 = SyntheticEvent

          /**
           * `touchHistory` isn't actually on the native event, but putting it in the
           * interface will ensure that it is cleaned up when pooled/destroyed. The
           * `ResponderEventPlugin` will populate it appropriately.
           */
          var ResponderEventInterface = {
            touchHistory: function(nativeEvent) {
              return null // Actually doesn't even look at the native event.
            },
          }

          /**
           * @param {object} dispatchConfig Configuration used to dispatch this event.
           * @param {string} dispatchMarker Marker identifying the event target.
           * @param {object} nativeEvent Native event.
           * @extends {SyntheticEvent}
           */
          function ResponderSyntheticEvent(
            dispatchConfig,
            dispatchMarker,
            nativeEvent,
            nativeEventTarget
          ) {
            return SyntheticEvent$1.call(
              this,
              dispatchConfig,
              dispatchMarker,
              nativeEvent,
              nativeEventTarget
            )
          }

          SyntheticEvent$1.augmentClass(
            ResponderSyntheticEvent,
            ResponderEventInterface
          )

          /**
           * Tracks the position and time of each active touch by `touch.identifier`. We
           * should typically only see IDs in the range of 1-20 because IDs get recycled
           * when touches end and start again.
           */

          var MAX_TOUCH_BANK = 20
          var touchBank = []
          var touchHistory = {
            touchBank: touchBank,
            numberActiveTouches: 0,
            // If there is only one active touch, we remember its location. This prevents
            // us having to loop through all of the touches all the time in the most
            // common case.
            indexOfSingleActiveTouch: -1,
            mostRecentTimeStamp: 0,
          }

          function timestampForTouch(touch) {
            // The legacy internal implementation provides "timeStamp", which has been
            // renamed to "timestamp". Let both work for now while we iron it out
            // TODO (evv): rename timeStamp to timestamp in internal code
            return touch.timeStamp || touch.timestamp
          }

          /**
           * TODO: Instead of making gestures recompute filtered velocity, we could
           * include a built in velocity computation that can be reused globally.
           */
          function createTouchRecord(touch) {
            return {
              touchActive: true,
              startPageX: touch.pageX,
              startPageY: touch.pageY,
              startTimeStamp: timestampForTouch(touch),
              currentPageX: touch.pageX,
              currentPageY: touch.pageY,
              currentTimeStamp: timestampForTouch(touch),
              previousPageX: touch.pageX,
              previousPageY: touch.pageY,
              previousTimeStamp: timestampForTouch(touch),
            }
          }

          function resetTouchRecord(touchRecord, touch) {
            touchRecord.touchActive = true
            touchRecord.startPageX = touch.pageX
            touchRecord.startPageY = touch.pageY
            touchRecord.startTimeStamp = timestampForTouch(touch)
            touchRecord.currentPageX = touch.pageX
            touchRecord.currentPageY = touch.pageY
            touchRecord.currentTimeStamp = timestampForTouch(touch)
            touchRecord.previousPageX = touch.pageX
            touchRecord.previousPageY = touch.pageY
            touchRecord.previousTimeStamp = timestampForTouch(touch)
          }

          function getTouchIdentifier(_ref) {
            var identifier = _ref.identifier

            !(identifier != null)
              ? invariant(false, 'Touch object is missing identifier.')
              : void 0
            {
              warning(
                identifier <= MAX_TOUCH_BANK,
                'Touch identifier %s is greater than maximum supported %s which causes ' +
                  'performance issues backfilling array locations for all of the indices.',
                identifier,
                MAX_TOUCH_BANK
              )
            }
            return identifier
          }

          function recordTouchStart(touch) {
            var identifier = getTouchIdentifier(touch)
            var touchRecord = touchBank[identifier]
            if (touchRecord) {
              resetTouchRecord(touchRecord, touch)
            } else {
              touchBank[identifier] = createTouchRecord(touch)
            }
            touchHistory.mostRecentTimeStamp = timestampForTouch(touch)
          }

          function recordTouchMove(touch) {
            var touchRecord = touchBank[getTouchIdentifier(touch)]
            if (touchRecord) {
              touchRecord.touchActive = true
              touchRecord.previousPageX = touchRecord.currentPageX
              touchRecord.previousPageY = touchRecord.currentPageY
              touchRecord.previousTimeStamp = touchRecord.currentTimeStamp
              touchRecord.currentPageX = touch.pageX
              touchRecord.currentPageY = touch.pageY
              touchRecord.currentTimeStamp = timestampForTouch(touch)
              touchHistory.mostRecentTimeStamp = timestampForTouch(touch)
            } else {
              console.error(
                'Cannot record touch move without a touch start.\n' +
                  'Touch Move: %s\n',
                'Touch Bank: %s',
                printTouch(touch),
                printTouchBank()
              )
            }
          }

          function recordTouchEnd(touch) {
            var touchRecord = touchBank[getTouchIdentifier(touch)]
            if (touchRecord) {
              touchRecord.touchActive = false
              touchRecord.previousPageX = touchRecord.currentPageX
              touchRecord.previousPageY = touchRecord.currentPageY
              touchRecord.previousTimeStamp = touchRecord.currentTimeStamp
              touchRecord.currentPageX = touch.pageX
              touchRecord.currentPageY = touch.pageY
              touchRecord.currentTimeStamp = timestampForTouch(touch)
              touchHistory.mostRecentTimeStamp = timestampForTouch(touch)
            } else {
              console.error(
                'Cannot record touch end without a touch start.\n' +
                  'Touch End: %s\n',
                'Touch Bank: %s',
                printTouch(touch),
                printTouchBank()
              )
            }
          }

          function printTouch(touch) {
            return JSON.stringify({
              identifier: touch.identifier,
              pageX: touch.pageX,
              pageY: touch.pageY,
              timestamp: timestampForTouch(touch),
            })
          }

          function printTouchBank() {
            var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK))
            if (touchBank.length > MAX_TOUCH_BANK) {
              printed += ' (original size: ' + touchBank.length + ')'
            }
            return printed
          }

          var ResponderTouchHistoryStore = {
            recordTouchTrack: function(topLevelType, nativeEvent) {
              if (isMoveish(topLevelType)) {
                nativeEvent.changedTouches.forEach(recordTouchMove)
              } else if (isStartish(topLevelType)) {
                nativeEvent.changedTouches.forEach(recordTouchStart)
                touchHistory.numberActiveTouches = nativeEvent.touches.length
                if (touchHistory.numberActiveTouches === 1) {
                  touchHistory.indexOfSingleActiveTouch =
                    nativeEvent.touches[0].identifier
                }
              } else if (isEndish(topLevelType)) {
                nativeEvent.changedTouches.forEach(recordTouchEnd)
                touchHistory.numberActiveTouches = nativeEvent.touches.length
                if (touchHistory.numberActiveTouches === 1) {
                  for (var i = 0; i < touchBank.length; i++) {
                    var touchTrackToCheck = touchBank[i]
                    if (
                      touchTrackToCheck != null &&
                      touchTrackToCheck.touchActive
                    ) {
                      touchHistory.indexOfSingleActiveTouch = i
                      break
                    }
                  }
                  {
                    var activeRecord =
                      touchBank[touchHistory.indexOfSingleActiveTouch]
                    warning(
                      activeRecord != null && activeRecord.touchActive,
                      'Cannot find single active touch.'
                    )
                  }
                }
              }
            },

            touchHistory: touchHistory,
          }

          /**
           * Accumulates items that must not be null or undefined.
           *
           * This is used to conserve memory by avoiding array allocations.
           *
           * @return {*|array<*>} An accumulation of items.
           */
          function accumulate(current, next) {
            !(next != null)
              ? invariant(
                  false,
                  'accumulate(...): Accumulated items must be not be null or undefined.'
                )
              : void 0

            if (current == null) {
              return next
            }

            // Both are not empty. Warning: Never call x.concat(y) when you are not
            // certain that x is an Array (x could be a string with concat method).
            if (Array.isArray(current)) {
              return current.concat(next)
            }

            if (Array.isArray(next)) {
              return [current].concat(next)
            }

            return [current, next]
          }

          /**
           * Instance of element that should respond to touch/move types of interactions,
           * as indicated explicitly by relevant callbacks.
           */
          var responderInst = null

          /**
           * Count of current touches. A textInput should become responder iff the
           * selection changes while there is a touch on the screen.
           */
          var trackedTouchCount = 0

          /**
           * Last reported number of active touches.
           */
          var previousActiveTouches = 0

          var changeResponder = function(
            nextResponderInst,
            blockHostResponder
          ) {
            var oldResponderInst = responderInst
            responderInst = nextResponderInst
            if (ResponderEventPlugin.GlobalResponderHandler !== null) {
              ResponderEventPlugin.GlobalResponderHandler.onChange(
                oldResponderInst,
                nextResponderInst,
                blockHostResponder
              )
            }
          }

          var eventTypes = {
            /**
             * On a `touchStart`/`mouseDown`, is it desired that this element become the
             * responder?
             */
            startShouldSetResponder: {
              phasedRegistrationNames: {
                bubbled: 'onStartShouldSetResponder',
                captured: 'onStartShouldSetResponderCapture',
              },
            },

            /**
             * On a `scroll`, is it desired that this element become the responder? This
             * is usually not needed, but should be used to retroactively infer that a
             * `touchStart` had occurred during momentum scroll. During a momentum scroll,
             * a touch start will be immediately followed by a scroll event if the view is
             * currently scrolling.
             *
             * TODO: This shouldn't bubble.
             */
            scrollShouldSetResponder: {
              phasedRegistrationNames: {
                bubbled: 'onScrollShouldSetResponder',
                captured: 'onScrollShouldSetResponderCapture',
              },
            },

            /**
             * On text selection change, should this element become the responder? This
             * is needed for text inputs or other views with native selection, so the
             * JS view can claim the responder.
             *
             * TODO: This shouldn't bubble.
             */
            selectionChangeShouldSetResponder: {
              phasedRegistrationNames: {
                bubbled: 'onSelectionChangeShouldSetResponder',
                captured: 'onSelectionChangeShouldSetResponderCapture',
              },
            },

            /**
             * On a `touchMove`/`mouseMove`, is it desired that this element become the
             * responder?
             */
            moveShouldSetResponder: {
              phasedRegistrationNames: {
                bubbled: 'onMoveShouldSetResponder',
                captured: 'onMoveShouldSetResponderCapture',
              },
            },

            /**
             * Direct responder events dispatched directly to responder. Do not bubble.
             */
            responderStart: { registrationName: 'onResponderStart' },
            responderMove: { registrationName: 'onResponderMove' },
            responderEnd: { registrationName: 'onResponderEnd' },
            responderRelease: { registrationName: 'onResponderRelease' },
            responderTerminationRequest: {
              registrationName: 'onResponderTerminationRequest',
            },
            responderGrant: { registrationName: 'onResponderGrant' },
            responderReject: { registrationName: 'onResponderReject' },
            responderTerminate: { registrationName: 'onResponderTerminate' },
          }

          /**
           *
           * Responder System:
           * ----------------
           *
           * - A global, solitary "interaction lock" on a view.
           * - If a node becomes the responder, it should convey visual feedback
           *   immediately to indicate so, either by highlighting or moving accordingly.
           * - To be the responder means, that touches are exclusively important to that
           *   responder view, and no other view.
           * - While touches are still occurring, the responder lock can be transferred to
           *   a new view, but only to increasingly "higher" views (meaning ancestors of
           *   the current responder).
           *
           * Responder being granted:
           * ------------------------
           *
           * - Touch starts, moves, and scrolls can cause an ID to become the responder.
           * - We capture/bubble `startShouldSetResponder`/`moveShouldSetResponder` to
           *   the "appropriate place".
           * - If nothing is currently the responder, the "appropriate place" is the
           *   initiating event's `targetID`.
           * - If something *is* already the responder, the "appropriate place" is the
           *   first common ancestor of the event target and the current `responderInst`.
           * - Some negotiation happens: See the timing diagram below.
           * - Scrolled views automatically become responder. The reasoning is that a
           *   platform scroll view that isn't built on top of the responder system has
           *   began scrolling, and the active responder must now be notified that the
           *   interaction is no longer locked to it - the system has taken over.
           *
           * - Responder being released:
           *   As soon as no more touches that *started* inside of descendants of the
           *   *current* responderInst, an `onResponderRelease` event is dispatched to the
           *   current responder, and the responder lock is released.
           *
           * TODO:
           * - on "end", a callback hook for `onResponderEndShouldRemainResponder` that
           *   determines if the responder lock should remain.
           * - If a view shouldn't "remain" the responder, any active touches should by
           *   default be considered "dead" and do not influence future negotiations or
           *   bubble paths. It should be as if those touches do not exist.
           * -- For multitouch: Usually a translate-z will choose to "remain" responder
           *  after one out of many touches ended. For translate-y, usually the view
           *  doesn't wish to "remain" responder after one of many touches end.
           * - Consider building this on top of a `stopPropagation` model similar to
           *   `W3C` events.
           * - Ensure that `onResponderTerminate` is called on touch cancels, whether or
           *   not `onResponderTerminationRequest` returns `true` or `false`.
           *
           */

          /*                                             Negotiation Performed
                                             +-----------------------+
                                            /                         \
Process low level events to    +     Current Responder      +   wantsResponderID
determine who to perform negot-|   (if any exists at all)   |
iation/transition              | Otherwise just pass through|
-------------------------------+----------------------------+------------------+
Bubble to find first ID        |                            |
to return true:wantsResponderID|                            |
                               |                            |
     +-------------+           |                            |
     | onTouchStart|           |                            |
     +------+------+     none  |                            |
            |            return|                            |
+-----------v-------------+true| +------------------------+ |
|onStartShouldSetResponder|----->|onResponderStart (cur)  |<-----------+
+-----------+-------------+    | +------------------------+ |          |
            |                  |                            | +--------+-------+
            | returned true for|       false:REJECT +-------->|onResponderReject
            | wantsResponderID |                    |       | +----------------+
            | (now attempt     | +------------------+-----+ |
            |  handoff)        | |   onResponder          | |
            +------------------->|      TerminationRequest| |
                               | +------------------+-----+ |
                               |                    |       | +----------------+
                               |         true:GRANT +-------->|onResponderGrant|
                               |                            | +--------+-------+
                               | +------------------------+ |          |
                               | |   onResponderTerminate |<-----------+
                               | +------------------+-----+ |
                               |                    |       | +----------------+
                               |                    +-------->|onResponderStart|
                               |                            | +----------------+
Bubble to find first ID        |                            |
to return true:wantsResponderID|                            |
                               |                            |
     +-------------+           |                            |
     | onTouchMove |           |                            |
     +------+------+     none  |                            |
            |            return|                            |
+-----------v-------------+true| +------------------------+ |
|onMoveShouldSetResponder |----->|onResponderMove (cur)   |<-----------+
+-----------+-------------+    | +------------------------+ |          |
            |                  |                            | +--------+-------+
            | returned true for|       false:REJECT +-------->|onResponderRejec|
            | wantsResponderID |                    |       | +----------------+
            | (now attempt     | +------------------+-----+ |
            |  handoff)        | |   onResponder          | |
            +------------------->|      TerminationRequest| |
                               | +------------------+-----+ |
                               |                    |       | +----------------+
                               |         true:GRANT +-------->|onResponderGrant|
                               |                            | +--------+-------+
                               | +------------------------+ |          |
                               | |   onResponderTerminate |<-----------+
                               | +------------------+-----+ |
                               |                    |       | +----------------+
                               |                    +-------->|onResponderMove |
                               |                            | +----------------+
                               |                            |
                               |                            |
      Some active touch started|                            |
      inside current responder | +------------------------+ |
      +------------------------->|      onResponderEnd    | |
      |                        | +------------------------+ |
  +---+---------+              |                            |
  | onTouchEnd  |              |                            |
  +---+---------+              |                            |
      |                        | +------------------------+ |
      +------------------------->|     onResponderEnd     | |
      No active touches started| +-----------+------------+ |
      inside current responder |             |              |
                               |             v              |
                               | +------------------------+ |
                               | |    onResponderRelease  | |
                               | +------------------------+ |
                               |                            |
                               +                            + */

          /**
           * A note about event ordering in the `EventPluginHub`.
           *
           * Suppose plugins are injected in the following order:
           *
           * `[R, S, C]`
           *
           * To help illustrate the example, assume `S` is `SimpleEventPlugin` (for
           * `onClick` etc) and `R` is `ResponderEventPlugin`.
           *
           * "Deferred-Dispatched Events":
           *
           * - The current event plugin system will traverse the list of injected plugins,
           *   in order, and extract events by collecting the plugin's return value of
           *   `extractEvents()`.
           * - These events that are returned from `extractEvents` are "deferred
           *   dispatched events".
           * - When returned from `extractEvents`, deferred-dispatched events contain an
           *   "accumulation" of deferred dispatches.
           * - These deferred dispatches are accumulated/collected before they are
           *   returned, but processed at a later time by the `EventPluginHub` (hence the
           *   name deferred).
           *
           * In the process of returning their deferred-dispatched events, event plugins
           * themselves can dispatch events on-demand without returning them from
           * `extractEvents`. Plugins might want to do this, so that they can use event
           * dispatching as a tool that helps them decide which events should be extracted
           * in the first place.
           *
           * "On-Demand-Dispatched Events":
           *
           * - On-demand-dispatched events are not returned from `extractEvents`.
           * - On-demand-dispatched events are dispatched during the process of returning
           *   the deferred-dispatched events.
           * - They should not have side effects.
           * - They should be avoided, and/or eventually be replaced with another
           *   abstraction that allows event plugins to perform multiple "rounds" of event
           *   extraction.
           *
           * Therefore, the sequence of event dispatches becomes:
           *
           * - `R`s on-demand events (if any)   (dispatched by `R` on-demand)
           * - `S`s on-demand events (if any)   (dispatched by `S` on-demand)
           * - `C`s on-demand events (if any)   (dispatched by `C` on-demand)
           * - `R`s extracted events (if any)   (dispatched by `EventPluginHub`)
           * - `S`s extracted events (if any)   (dispatched by `EventPluginHub`)
           * - `C`s extracted events (if any)   (dispatched by `EventPluginHub`)
           *
           * In the case of `ResponderEventPlugin`: If the `startShouldSetResponder`
           * on-demand dispatch returns `true` (and some other details are satisfied) the
           * `onResponderGrant` deferred dispatched event is returned from
           * `extractEvents`. The sequence of dispatch executions in this case
           * will appear as follows:
           *
           * - `startShouldSetResponder` (`ResponderEventPlugin` dispatches on-demand)
           * - `touchStartCapture`       (`EventPluginHub` dispatches as usual)
           * - `touchStart`              (`EventPluginHub` dispatches as usual)
           * - `responderGrant/Reject`   (`EventPluginHub` dispatches as usual)
           */

          function setResponderAndExtractTransfer(
            topLevelType,
            targetInst,
            nativeEvent,
            nativeEventTarget
          ) {
            var shouldSetEventType = isStartish(topLevelType)
              ? eventTypes.startShouldSetResponder
              : isMoveish(topLevelType)
                ? eventTypes.moveShouldSetResponder
                : topLevelType === 'topSelectionChange'
                  ? eventTypes.selectionChangeShouldSetResponder
                  : eventTypes.scrollShouldSetResponder

            // TODO: stop one short of the current responder.
            var bubbleShouldSetFrom = !responderInst
              ? targetInst
              : getLowestCommonAncestor(responderInst, targetInst)

            // When capturing/bubbling the "shouldSet" event, we want to skip the target
            // (deepest ID) if it happens to be the current responder. The reasoning:
            // It's strange to get an `onMoveShouldSetResponder` when you're *already*
            // the responder.
            var skipOverBubbleShouldSetFrom =
              bubbleShouldSetFrom === responderInst
            var shouldSetEvent = ResponderSyntheticEvent.getPooled(
              shouldSetEventType,
              bubbleShouldSetFrom,
              nativeEvent,
              nativeEventTarget
            )
            shouldSetEvent.touchHistory =
              ResponderTouchHistoryStore.touchHistory
            if (skipOverBubbleShouldSetFrom) {
              accumulateTwoPhaseDispatchesSkipTarget(shouldSetEvent)
            } else {
              accumulateTwoPhaseDispatches(shouldSetEvent)
            }
            var wantsResponderInst = executeDispatchesInOrderStopAtTrue(
              shouldSetEvent
            )
            if (!shouldSetEvent.isPersistent()) {
              shouldSetEvent.constructor.release(shouldSetEvent)
            }

            if (!wantsResponderInst || wantsResponderInst === responderInst) {
              return null
            }
            var extracted
            var grantEvent = ResponderSyntheticEvent.getPooled(
              eventTypes.responderGrant,
              wantsResponderInst,
              nativeEvent,
              nativeEventTarget
            )
            grantEvent.touchHistory = ResponderTouchHistoryStore.touchHistory

            accumulateDirectDispatches(grantEvent)
            var blockHostResponder = executeDirectDispatch(grantEvent) === true
            if (responderInst) {
              var terminationRequestEvent = ResponderSyntheticEvent.getPooled(
                eventTypes.responderTerminationRequest,
                responderInst,
                nativeEvent,
                nativeEventTarget
              )
              terminationRequestEvent.touchHistory =
                ResponderTouchHistoryStore.touchHistory
              accumulateDirectDispatches(terminationRequestEvent)
              var shouldSwitch =
                !hasDispatches(terminationRequestEvent) ||
                executeDirectDispatch(terminationRequestEvent)
              if (!terminationRequestEvent.isPersistent()) {
                terminationRequestEvent.constructor.release(
                  terminationRequestEvent
                )
              }

              if (shouldSwitch) {
                var terminateEvent = ResponderSyntheticEvent.getPooled(
                  eventTypes.responderTerminate,
                  responderInst,
                  nativeEvent,
                  nativeEventTarget
                )
                terminateEvent.touchHistory =
                  ResponderTouchHistoryStore.touchHistory
                accumulateDirectDispatches(terminateEvent)
                extracted = accumulate(extracted, [grantEvent, terminateEvent])
                changeResponder(wantsResponderInst, blockHostResponder)
              } else {
                var rejectEvent = ResponderSyntheticEvent.getPooled(
                  eventTypes.responderReject,
                  wantsResponderInst,
                  nativeEvent,
                  nativeEventTarget
                )
                rejectEvent.touchHistory =
                  ResponderTouchHistoryStore.touchHistory
                accumulateDirectDispatches(rejectEvent)
                extracted = accumulate(extracted, rejectEvent)
              }
            } else {
              extracted = accumulate(extracted, grantEvent)
              changeResponder(wantsResponderInst, blockHostResponder)
            }
            return extracted
          }

          /**
           * A transfer is a negotiation between a currently set responder and the next
           * element to claim responder status. Any start event could trigger a transfer
           * of responderInst. Any move event could trigger a transfer.
           *
           * @param {string} topLevelType Record from `BrowserEventConstants`.
           * @return {boolean} True if a transfer of responder could possibly occur.
           */
          function canTriggerTransfer(topLevelType, topLevelInst, nativeEvent) {
            return (
              topLevelInst &&
              // responderIgnoreScroll: We are trying to migrate away from specifically
              // tracking native scroll events here and responderIgnoreScroll indicates we
              // will send topTouchCancel to handle canceling touch events instead
              ((topLevelType === 'topScroll' &&
                !nativeEvent.responderIgnoreScroll) ||
                (trackedTouchCount > 0 &&
                  topLevelType === 'topSelectionChange') ||
                isStartish(topLevelType) ||
                isMoveish(topLevelType))
            )
          }

          /**
           * Returns whether or not this touch end event makes it such that there are no
           * longer any touches that started inside of the current `responderInst`.
           *
           * @param {NativeEvent} nativeEvent Native touch end event.
           * @return {boolean} Whether or not this touch end event ends the responder.
           */
          function noResponderTouches(nativeEvent) {
            var touches = nativeEvent.touches
            if (!touches || touches.length === 0) {
              return true
            }
            for (var i = 0; i < touches.length; i++) {
              var activeTouch = touches[i]
              var target = activeTouch.target
              if (target !== null && target !== undefined && target !== 0) {
                // Is the original touch location inside of the current responder?
                var targetInst = getInstanceFromNode(target)
                if (isAncestor(responderInst, targetInst)) {
                  return false
                }
              }
            }
            return true
          }

          var ResponderEventPlugin = {
            /* For unit testing only */
            _getResponder: function() {
              return responderInst
            },

            eventTypes: eventTypes,

            /**
             * We must be resilient to `targetInst` being `null` on `touchMove` or
             * `touchEnd`. On certain platforms, this means that a native scroll has
             * assumed control and the original touch targets are destroyed.
             */
            extractEvents: function(
              topLevelType,
              targetInst,
              nativeEvent,
              nativeEventTarget
            ) {
              if (isStartish(topLevelType)) {
                trackedTouchCount += 1
              } else if (isEndish(topLevelType)) {
                if (trackedTouchCount >= 0) {
                  trackedTouchCount -= 1
                } else {
                  console.error(
                    'Ended a touch event which was not counted in `trackedTouchCount`.'
                  )
                  return null
                }
              }

              ResponderTouchHistoryStore.recordTouchTrack(
                topLevelType,
                nativeEvent
              )

              var extracted = canTriggerTransfer(
                topLevelType,
                targetInst,
                nativeEvent
              )
                ? setResponderAndExtractTransfer(
                    topLevelType,
                    targetInst,
                    nativeEvent,
                    nativeEventTarget
                  )
                : null
              // Responder may or may not have transferred on a new touch start/move.
              // Regardless, whoever is the responder after any potential transfer, we
              // direct all touch start/move/ends to them in the form of
              // `onResponderMove/Start/End`. These will be called for *every* additional
              // finger that move/start/end, dispatched directly to whoever is the
              // current responder at that moment, until the responder is "released".
              //
              // These multiple individual change touch events are are always bookended
              // by `onResponderGrant`, and one of
              // (`onResponderRelease/onResponderTerminate`).
              var isResponderTouchStart =
                responderInst && isStartish(topLevelType)
              var isResponderTouchMove =
                responderInst && isMoveish(topLevelType)
              var isResponderTouchEnd = responderInst && isEndish(topLevelType)
              var incrementalTouch = isResponderTouchStart
                ? eventTypes.responderStart
                : isResponderTouchMove
                  ? eventTypes.responderMove
                  : isResponderTouchEnd ? eventTypes.responderEnd : null

              if (incrementalTouch) {
                var gesture = ResponderSyntheticEvent.getPooled(
                  incrementalTouch,
                  responderInst,
                  nativeEvent,
                  nativeEventTarget
                )
                gesture.touchHistory = ResponderTouchHistoryStore.touchHistory
                accumulateDirectDispatches(gesture)
                extracted = accumulate(extracted, gesture)
              }

              var isResponderTerminate =
                responderInst && topLevelType === 'topTouchCancel'
              var isResponderRelease =
                responderInst &&
                !isResponderTerminate &&
                isEndish(topLevelType) &&
                noResponderTouches(nativeEvent)
              var finalTouch = isResponderTerminate
                ? eventTypes.responderTerminate
                : isResponderRelease ? eventTypes.responderRelease : null
              if (finalTouch) {
                var finalEvent = ResponderSyntheticEvent.getPooled(
                  finalTouch,
                  responderInst,
                  nativeEvent,
                  nativeEventTarget
                )
                finalEvent.touchHistory =
                  ResponderTouchHistoryStore.touchHistory
                accumulateDirectDispatches(finalEvent)
                extracted = accumulate(extracted, finalEvent)
                changeResponder(null)
              }

              var numberActiveTouches =
                ResponderTouchHistoryStore.touchHistory.numberActiveTouches
              if (
                ResponderEventPlugin.GlobalInteractionHandler &&
                numberActiveTouches !== previousActiveTouches
              ) {
                ResponderEventPlugin.GlobalInteractionHandler.onChange(
                  numberActiveTouches
                )
              }
              previousActiveTouches = numberActiveTouches

              return extracted
            },

            GlobalResponderHandler: null,
            GlobalInteractionHandler: null,

            injection: {
              /**
               * @param {{onChange: (ReactID, ReactID) => void} GlobalResponderHandler
               * Object that handles any change in responder. Use this to inject
               * integration with an existing touch handling system etc.
               */
              injectGlobalResponderHandler: function(GlobalResponderHandler) {
                ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler
              },

              /**
               * @param {{onChange: (numberActiveTouches) => void} GlobalInteractionHandler
               * Object that handles any change in the number of active touches.
               */
              injectGlobalInteractionHandler: function(
                GlobalInteractionHandler
              ) {
                ResponderEventPlugin.GlobalInteractionHandler = GlobalInteractionHandler
              },
            },
          }

          // This is used by react-native-web.
          var injectComponentTree = injection.injectComponentTree
          // Inject react-dom's ComponentTree into this module.
          var ReactDOMComponentTree =
            ReactDOM.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED
              .ReactDOMComponentTree

          injectComponentTree(ReactDOMComponentTree)

          var ReactDOMUnstableNativeDependencies = Object.freeze({
            injectComponentTree: injectComponentTree,
            ResponderEventPlugin: ResponderEventPlugin,
            ResponderTouchHistoryStore: ResponderTouchHistoryStore,
          })

          var unstableNativeDependencies = ReactDOMUnstableNativeDependencies

          module.exports = unstableNativeDependencies
        })()
      }

      /***/
    },
    /* 205 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _StyleSheetPropType = __webpack_require__(85)

      var _StyleSheetPropType2 = _interopRequireDefault(_StyleSheetPropType)

      var _TextStylePropTypes = __webpack_require__(33)

      var _TextStylePropTypes2 = _interopRequireDefault(_TextStylePropTypes)

      var _propTypes = __webpack_require__(0)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      var TextPropTypes = {
        accessibilityComponentType: _propTypes.string,
        accessibilityLabel: _propTypes.string,
        accessibilityLiveRegion: (0, _propTypes.oneOf)([
          'assertive',
          'none',
          'polite',
        ]),
        accessibilityRole: (0, _propTypes.oneOf)([
          'button',
          'heading',
          'label',
          'link',
          'listitem',
        ]),
        accessibilityTraits: (0, _propTypes.oneOfType)([
          _propTypes.array,
          _propTypes.string,
        ]),
        accessible: _propTypes.bool,
        children: _propTypes.any,
        importantForAccessibility: (0, _propTypes.oneOf)([
          'auto',
          'no',
          'no-hide-descendants',
          'yes',
        ]),
        numberOfLines: _propTypes.number,
        onBlur: _propTypes.func,
        onContextMenu: _propTypes.func,
        onFocus: _propTypes.func,
        onLayout: _propTypes.func,
        onPress: _propTypes.func,
        selectable: _propTypes.bool,
        style: (0, _StyleSheetPropType2.default)(_TextStylePropTypes2.default),
        testID: _propTypes.string,
      } /**
       * Copyright (c) 2015-present, Nicolas Gallagher.
       * Copyright (c) 2015-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @providesModule TextPropTypes
       *
       */

      exports.default = TextPropTypes

      /***/
    },
    /* 206 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'
      /**
       * Copyright (c) 2013-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       */

      var _assign = __webpack_require__(10)

      var emptyObject = __webpack_require__(20)
      var _invariant = __webpack_require__(4)

      if (true) {
        var warning = __webpack_require__(6)
      }

      var MIXINS_KEY = 'mixins'

      // Helper function to allow the creation of anonymous functions which do not
      // have .name set to the name of the variable being assigned to.
      function identity(fn) {
        return fn
      }

      var ReactPropTypeLocationNames
      if (true) {
        ReactPropTypeLocationNames = {
          prop: 'prop',
          context: 'context',
          childContext: 'child context',
        }
      } else {
        ReactPropTypeLocationNames = {}
      }

      function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
        /**
         * Policies that describe methods in `ReactClassInterface`.
         */

        var injectedMixins = []

        /**
         * Composite components are higher-level components that compose other composite
         * or host components.
         *
         * To create a new type of `ReactClass`, pass a specification of
         * your new class to `React.createClass`. The only requirement of your class
         * specification is that you implement a `render` method.
         *
         *   var MyComponent = React.createClass({
         *     render: function() {
         *       return <div>Hello World</div>;
         *     }
         *   });
         *
         * The class specification supports a specific protocol of methods that have
         * special meaning (e.g. `render`). See `ReactClassInterface` for
         * more the comprehensive protocol. Any other properties and methods in the
         * class specification will be available on the prototype.
         *
         * @interface ReactClassInterface
         * @internal
         */
        var ReactClassInterface = {
          /**
           * An array of Mixin objects to include when defining your component.
           *
           * @type {array}
           * @optional
           */
          mixins: 'DEFINE_MANY',

          /**
           * An object containing properties and methods that should be defined on
           * the component's constructor instead of its prototype (static methods).
           *
           * @type {object}
           * @optional
           */
          statics: 'DEFINE_MANY',

          /**
           * Definition of prop types for this component.
           *
           * @type {object}
           * @optional
           */
          propTypes: 'DEFINE_MANY',

          /**
           * Definition of context types for this component.
           *
           * @type {object}
           * @optional
           */
          contextTypes: 'DEFINE_MANY',

          /**
           * Definition of context types this component sets for its children.
           *
           * @type {object}
           * @optional
           */
          childContextTypes: 'DEFINE_MANY',

          // ==== Definition methods ====

          /**
           * Invoked when the component is mounted. Values in the mapping will be set on
           * `this.props` if that prop is not specified (i.e. using an `in` check).
           *
           * This method is invoked before `getInitialState` and therefore cannot rely
           * on `this.state` or use `this.setState`.
           *
           * @return {object}
           * @optional
           */
          getDefaultProps: 'DEFINE_MANY_MERGED',

          /**
           * Invoked once before the component is mounted. The return value will be used
           * as the initial value of `this.state`.
           *
           *   getInitialState: function() {
           *     return {
           *       isOn: false,
           *       fooBaz: new BazFoo()
           *     }
           *   }
           *
           * @return {object}
           * @optional
           */
          getInitialState: 'DEFINE_MANY_MERGED',

          /**
           * @return {object}
           * @optional
           */
          getChildContext: 'DEFINE_MANY_MERGED',

          /**
           * Uses props from `this.props` and state from `this.state` to render the
           * structure of the component.
           *
           * No guarantees are made about when or how often this method is invoked, so
           * it must not have side effects.
           *
           *   render: function() {
           *     var name = this.props.name;
           *     return <div>Hello, {name}!</div>;
           *   }
           *
           * @return {ReactComponent}
           * @required
           */
          render: 'DEFINE_ONCE',

          // ==== Delegate methods ====

          /**
           * Invoked when the component is initially created and about to be mounted.
           * This may have side effects, but any external subscriptions or data created
           * by this method must be cleaned up in `componentWillUnmount`.
           *
           * @optional
           */
          componentWillMount: 'DEFINE_MANY',

          /**
           * Invoked when the component has been mounted and has a DOM representation.
           * However, there is no guarantee that the DOM node is in the document.
           *
           * Use this as an opportunity to operate on the DOM when the component has
           * been mounted (initialized and rendered) for the first time.
           *
           * @param {DOMElement} rootNode DOM element representing the component.
           * @optional
           */
          componentDidMount: 'DEFINE_MANY',

          /**
           * Invoked before the component receives new props.
           *
           * Use this as an opportunity to react to a prop transition by updating the
           * state using `this.setState`. Current props are accessed via `this.props`.
           *
           *   componentWillReceiveProps: function(nextProps, nextContext) {
           *     this.setState({
           *       likesIncreasing: nextProps.likeCount > this.props.likeCount
           *     });
           *   }
           *
           * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
           * transition may cause a state change, but the opposite is not true. If you
           * need it, you are probably looking for `componentWillUpdate`.
           *
           * @param {object} nextProps
           * @optional
           */
          componentWillReceiveProps: 'DEFINE_MANY',

          /**
           * Invoked while deciding if the component should be updated as a result of
           * receiving new props, state and/or context.
           *
           * Use this as an opportunity to `return false` when you're certain that the
           * transition to the new props/state/context will not require a component
           * update.
           *
           *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
           *     return !equal(nextProps, this.props) ||
           *       !equal(nextState, this.state) ||
           *       !equal(nextContext, this.context);
           *   }
           *
           * @param {object} nextProps
           * @param {?object} nextState
           * @param {?object} nextContext
           * @return {boolean} True if the component should update.
           * @optional
           */
          shouldComponentUpdate: 'DEFINE_ONCE',

          /**
           * Invoked when the component is about to update due to a transition from
           * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
           * and `nextContext`.
           *
           * Use this as an opportunity to perform preparation before an update occurs.
           *
           * NOTE: You **cannot** use `this.setState()` in this method.
           *
           * @param {object} nextProps
           * @param {?object} nextState
           * @param {?object} nextContext
           * @param {ReactReconcileTransaction} transaction
           * @optional
           */
          componentWillUpdate: 'DEFINE_MANY',

          /**
           * Invoked when the component's DOM representation has been updated.
           *
           * Use this as an opportunity to operate on the DOM when the component has
           * been updated.
           *
           * @param {object} prevProps
           * @param {?object} prevState
           * @param {?object} prevContext
           * @param {DOMElement} rootNode DOM element representing the component.
           * @optional
           */
          componentDidUpdate: 'DEFINE_MANY',

          /**
           * Invoked when the component is about to be removed from its parent and have
           * its DOM representation destroyed.
           *
           * Use this as an opportunity to deallocate any external resources.
           *
           * NOTE: There is no `componentDidUnmount` since your component will have been
           * destroyed by that point.
           *
           * @optional
           */
          componentWillUnmount: 'DEFINE_MANY',

          // ==== Advanced methods ====

          /**
           * Updates the component's currently mounted DOM representation.
           *
           * By default, this implements React's rendering and reconciliation algorithm.
           * Sophisticated clients may wish to override this.
           *
           * @param {ReactReconcileTransaction} transaction
           * @internal
           * @overridable
           */
          updateComponent: 'OVERRIDE_BASE',
        }

        /**
         * Mapping from class specification keys to special processing functions.
         *
         * Although these are declared like instance properties in the specification
         * when defining classes using `React.createClass`, they are actually static
         * and are accessible on the constructor instead of the prototype. Despite
         * being static, they must be defined outside of the "statics" key under
         * which all other static methods are defined.
         */
        var RESERVED_SPEC_KEYS = {
          displayName: function(Constructor, displayName) {
            Constructor.displayName = displayName
          },
          mixins: function(Constructor, mixins) {
            if (mixins) {
              for (var i = 0; i < mixins.length; i++) {
                mixSpecIntoComponent(Constructor, mixins[i])
              }
            }
          },
          childContextTypes: function(Constructor, childContextTypes) {
            if (true) {
              validateTypeDef(Constructor, childContextTypes, 'childContext')
            }
            Constructor.childContextTypes = _assign(
              {},
              Constructor.childContextTypes,
              childContextTypes
            )
          },
          contextTypes: function(Constructor, contextTypes) {
            if (true) {
              validateTypeDef(Constructor, contextTypes, 'context')
            }
            Constructor.contextTypes = _assign(
              {},
              Constructor.contextTypes,
              contextTypes
            )
          },
          /**
           * Special case getDefaultProps which should move into statics but requires
           * automatic merging.
           */
          getDefaultProps: function(Constructor, getDefaultProps) {
            if (Constructor.getDefaultProps) {
              Constructor.getDefaultProps = createMergedResultFunction(
                Constructor.getDefaultProps,
                getDefaultProps
              )
            } else {
              Constructor.getDefaultProps = getDefaultProps
            }
          },
          propTypes: function(Constructor, propTypes) {
            if (true) {
              validateTypeDef(Constructor, propTypes, 'prop')
            }
            Constructor.propTypes = _assign(
              {},
              Constructor.propTypes,
              propTypes
            )
          },
          statics: function(Constructor, statics) {
            mixStaticSpecIntoComponent(Constructor, statics)
          },
          autobind: function() {},
        }

        function validateTypeDef(Constructor, typeDef, location) {
          for (var propName in typeDef) {
            if (typeDef.hasOwnProperty(propName)) {
              // use a warning instead of an _invariant so components
              // don't show up in prod but only in __DEV__
              if (true) {
                warning(
                  typeof typeDef[propName] === 'function',
                  '%s: %s type `%s` is invalid; it must be a function, usually from ' +
                    'React.PropTypes.',
                  Constructor.displayName || 'ReactClass',
                  ReactPropTypeLocationNames[location],
                  propName
                )
              }
            }
          }
        }

        function validateMethodOverride(isAlreadyDefined, name) {
          var specPolicy = ReactClassInterface.hasOwnProperty(name)
            ? ReactClassInterface[name]
            : null

          // Disallow overriding of base class methods unless explicitly allowed.
          if (ReactClassMixin.hasOwnProperty(name)) {
            _invariant(
              specPolicy === 'OVERRIDE_BASE',
              'ReactClassInterface: You are attempting to override ' +
                '`%s` from your class specification. Ensure that your method names ' +
                'do not overlap with React methods.',
              name
            )
          }

          // Disallow defining methods more than once unless explicitly allowed.
          if (isAlreadyDefined) {
            _invariant(
              specPolicy === 'DEFINE_MANY' ||
                specPolicy === 'DEFINE_MANY_MERGED',
              'ReactClassInterface: You are attempting to define ' +
                '`%s` on your component more than once. This conflict may be due ' +
                'to a mixin.',
              name
            )
          }
        }

        /**
         * Mixin helper which handles policy validation and reserved
         * specification keys when building React classes.
         */
        function mixSpecIntoComponent(Constructor, spec) {
          if (!spec) {
            if (true) {
              var typeofSpec = typeof spec
              var isMixinValid = typeofSpec === 'object' && spec !== null

              if (true) {
                warning(
                  isMixinValid,
                  "%s: You're attempting to include a mixin that is either null " +
                    'or not an object. Check the mixins included by the component, ' +
                    'as well as any mixins they include themselves. ' +
                    'Expected object but got %s.',
                  Constructor.displayName || 'ReactClass',
                  spec === null ? null : typeofSpec
                )
              }
            }

            return
          }

          _invariant(
            typeof spec !== 'function',
            "ReactClass: You're attempting to " +
              'use a component class or function as a mixin. Instead, just use a ' +
              'regular object.'
          )
          _invariant(
            !isValidElement(spec),
            "ReactClass: You're attempting to " +
              'use a component as a mixin. Instead, just use a regular object.'
          )

          var proto = Constructor.prototype
          var autoBindPairs = proto.__reactAutoBindPairs

          // By handling mixins before any other properties, we ensure the same
          // chaining order is applied to methods with DEFINE_MANY policy, whether
          // mixins are listed before or after these methods in the spec.
          if (spec.hasOwnProperty(MIXINS_KEY)) {
            RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins)
          }

          for (var name in spec) {
            if (!spec.hasOwnProperty(name)) {
              continue
            }

            if (name === MIXINS_KEY) {
              // We have already handled mixins in a special case above.
              continue
            }

            var property = spec[name]
            var isAlreadyDefined = proto.hasOwnProperty(name)
            validateMethodOverride(isAlreadyDefined, name)

            if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
              RESERVED_SPEC_KEYS[name](Constructor, property)
            } else {
              // Setup methods on prototype:
              // The following member methods should not be automatically bound:
              // 1. Expected ReactClass methods (in the "interface").
              // 2. Overridden methods (that were mixed in).
              var isReactClassMethod = ReactClassInterface.hasOwnProperty(name)
              var isFunction = typeof property === 'function'
              var shouldAutoBind =
                isFunction &&
                !isReactClassMethod &&
                !isAlreadyDefined &&
                spec.autobind !== false

              if (shouldAutoBind) {
                autoBindPairs.push(name, property)
                proto[name] = property
              } else {
                if (isAlreadyDefined) {
                  var specPolicy = ReactClassInterface[name]

                  // These cases should already be caught by validateMethodOverride.
                  _invariant(
                    isReactClassMethod &&
                      (specPolicy === 'DEFINE_MANY_MERGED' ||
                        specPolicy === 'DEFINE_MANY'),
                    'ReactClass: Unexpected spec policy %s for key %s ' +
                      'when mixing in component specs.',
                    specPolicy,
                    name
                  )

                  // For methods which are defined more than once, call the existing
                  // methods before calling the new property, merging if appropriate.
                  if (specPolicy === 'DEFINE_MANY_MERGED') {
                    proto[name] = createMergedResultFunction(
                      proto[name],
                      property
                    )
                  } else if (specPolicy === 'DEFINE_MANY') {
                    proto[name] = createChainedFunction(proto[name], property)
                  }
                } else {
                  proto[name] = property
                  if (true) {
                    // Add verbose displayName to the function, which helps when looking
                    // at profiling tools.
                    if (typeof property === 'function' && spec.displayName) {
                      proto[name].displayName = spec.displayName + '_' + name
                    }
                  }
                }
              }
            }
          }
        }

        function mixStaticSpecIntoComponent(Constructor, statics) {
          if (!statics) {
            return
          }
          for (var name in statics) {
            var property = statics[name]
            if (!statics.hasOwnProperty(name)) {
              continue
            }

            var isReserved = name in RESERVED_SPEC_KEYS
            _invariant(
              !isReserved,
              'ReactClass: You are attempting to define a reserved ' +
                'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
                'as an instance property instead; it will still be accessible on the ' +
                'constructor.',
              name
            )

            var isInherited = name in Constructor
            _invariant(
              !isInherited,
              'ReactClass: You are attempting to define ' +
                '`%s` on your component more than once. This conflict may be ' +
                'due to a mixin.',
              name
            )
            Constructor[name] = property
          }
        }

        /**
         * Merge two objects, but throw if both contain the same key.
         *
         * @param {object} one The first object, which is mutated.
         * @param {object} two The second object
         * @return {object} one after it has been mutated to contain everything in two.
         */
        function mergeIntoWithNoDuplicateKeys(one, two) {
          _invariant(
            one && two && typeof one === 'object' && typeof two === 'object',
            'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
          )

          for (var key in two) {
            if (two.hasOwnProperty(key)) {
              _invariant(
                one[key] === undefined,
                'mergeIntoWithNoDuplicateKeys(): ' +
                  'Tried to merge two objects with the same key: `%s`. This conflict ' +
                  'may be due to a mixin; in particular, this may be caused by two ' +
                  'getInitialState() or getDefaultProps() methods returning objects ' +
                  'with clashing keys.',
                key
              )
              one[key] = two[key]
            }
          }
          return one
        }

        /**
         * Creates a function that invokes two functions and merges their return values.
         *
         * @param {function} one Function to invoke first.
         * @param {function} two Function to invoke second.
         * @return {function} Function that invokes the two argument functions.
         * @private
         */
        function createMergedResultFunction(one, two) {
          return function mergedResult() {
            var a = one.apply(this, arguments)
            var b = two.apply(this, arguments)
            if (a == null) {
              return b
            } else if (b == null) {
              return a
            }
            var c = {}
            mergeIntoWithNoDuplicateKeys(c, a)
            mergeIntoWithNoDuplicateKeys(c, b)
            return c
          }
        }

        /**
         * Creates a function that invokes two functions and ignores their return vales.
         *
         * @param {function} one Function to invoke first.
         * @param {function} two Function to invoke second.
         * @return {function} Function that invokes the two argument functions.
         * @private
         */
        function createChainedFunction(one, two) {
          return function chainedFunction() {
            one.apply(this, arguments)
            two.apply(this, arguments)
          }
        }

        /**
         * Binds a method to the component.
         *
         * @param {object} component Component whose method is going to be bound.
         * @param {function} method Method to be bound.
         * @return {function} The bound method.
         */
        function bindAutoBindMethod(component, method) {
          var boundMethod = method.bind(component)
          if (true) {
            boundMethod.__reactBoundContext = component
            boundMethod.__reactBoundMethod = method
            boundMethod.__reactBoundArguments = null
            var componentName = component.constructor.displayName
            var _bind = boundMethod.bind
            boundMethod.bind = function(newThis) {
              for (
                var _len = arguments.length,
                  args = Array(_len > 1 ? _len - 1 : 0),
                  _key = 1;
                _key < _len;
                _key++
              ) {
                args[_key - 1] = arguments[_key]
              }

              // User is trying to bind() an autobound method; we effectively will
              // ignore the value of "this" that the user is trying to use, so
              // let's warn.
              if (newThis !== component && newThis !== null) {
                if (true) {
                  warning(
                    false,
                    'bind(): React component methods may only be bound to the ' +
                      'component instance. See %s',
                    componentName
                  )
                }
              } else if (!args.length) {
                if (true) {
                  warning(
                    false,
                    'bind(): You are binding a component method to the component. ' +
                      'React does this for you automatically in a high-performance ' +
                      'way, so you can safely remove this call. See %s',
                    componentName
                  )
                }
                return boundMethod
              }
              var reboundMethod = _bind.apply(boundMethod, arguments)
              reboundMethod.__reactBoundContext = component
              reboundMethod.__reactBoundMethod = method
              reboundMethod.__reactBoundArguments = args
              return reboundMethod
            }
          }
          return boundMethod
        }

        /**
         * Binds all auto-bound methods in a component.
         *
         * @param {object} component Component whose method is going to be bound.
         */
        function bindAutoBindMethods(component) {
          var pairs = component.__reactAutoBindPairs
          for (var i = 0; i < pairs.length; i += 2) {
            var autoBindKey = pairs[i]
            var method = pairs[i + 1]
            component[autoBindKey] = bindAutoBindMethod(component, method)
          }
        }

        var IsMountedPreMixin = {
          componentDidMount: function() {
            this.__isMounted = true
          },
        }

        var IsMountedPostMixin = {
          componentWillUnmount: function() {
            this.__isMounted = false
          },
        }

        /**
         * Add more to the ReactClass base class. These are all legacy features and
         * therefore not already part of the modern ReactComponent.
         */
        var ReactClassMixin = {
          /**
           * TODO: This will be deprecated because state should always keep a consistent
           * type signature and the only use case for this, is to avoid that.
           */
          replaceState: function(newState, callback) {
            this.updater.enqueueReplaceState(this, newState, callback)
          },

          /**
           * Checks whether or not this composite component is mounted.
           * @return {boolean} True if mounted, false otherwise.
           * @protected
           * @final
           */
          isMounted: function() {
            if (true) {
              warning(
                this.__didWarnIsMounted,
                '%s: isMounted is deprecated. Instead, make sure to clean up ' +
                  'subscriptions and pending requests in componentWillUnmount to ' +
                  'prevent memory leaks.',
                (this.constructor && this.constructor.displayName) ||
                  this.name ||
                  'Component'
              )
              this.__didWarnIsMounted = true
            }
            return !!this.__isMounted
          },
        }

        var ReactClassComponent = function() {}
        _assign(
          ReactClassComponent.prototype,
          ReactComponent.prototype,
          ReactClassMixin
        )

        /**
         * Creates a composite component class given a class specification.
         * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
         *
         * @param {object} spec Class specification (which must define `render`).
         * @return {function} Component constructor function.
         * @public
         */
        function createClass(spec) {
          // To keep our warnings more understandable, we'll use a little hack here to
          // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
          // unnecessarily identify a class without displayName as 'Constructor'.
          var Constructor = identity(function(props, context, updater) {
            // This constructor gets overridden by mocks. The argument is used
            // by mocks to assert on what gets mounted.

            if (true) {
              warning(
                this instanceof Constructor,
                'Something is calling a React component directly. Use a factory or ' +
                  'JSX instead. See: https://fb.me/react-legacyfactory'
              )
            }

            // Wire up auto-binding
            if (this.__reactAutoBindPairs.length) {
              bindAutoBindMethods(this)
            }

            this.props = props
            this.context = context
            this.refs = emptyObject
            this.updater = updater || ReactNoopUpdateQueue

            this.state = null

            // ReactClasses doesn't have constructors. Instead, they use the
            // getInitialState and componentWillMount methods for initialization.

            var initialState = this.getInitialState
              ? this.getInitialState()
              : null
            if (true) {
              // We allow auto-mocks to proceed as if they're returning null.
              if (
                initialState === undefined &&
                this.getInitialState._isMockFunction
              ) {
                // This is probably bad practice. Consider warning here and
                // deprecating this convenience.
                initialState = null
              }
            }
            _invariant(
              typeof initialState === 'object' && !Array.isArray(initialState),
              '%s.getInitialState(): must return an object or null',
              Constructor.displayName || 'ReactCompositeComponent'
            )

            this.state = initialState
          })
          Constructor.prototype = new ReactClassComponent()
          Constructor.prototype.constructor = Constructor
          Constructor.prototype.__reactAutoBindPairs = []

          injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor))

          mixSpecIntoComponent(Constructor, IsMountedPreMixin)
          mixSpecIntoComponent(Constructor, spec)
          mixSpecIntoComponent(Constructor, IsMountedPostMixin)

          // Initialize the defaultProps property after all mixins have been merged.
          if (Constructor.getDefaultProps) {
            Constructor.defaultProps = Constructor.getDefaultProps()
          }

          if (true) {
            // This is a tag to indicate that the use of these method names is ok,
            // since it's used with createClass. If it's not, then it's likely a
            // mistake so we'll warn you to use the static property, property
            // initializer or constructor respectively.
            if (Constructor.getDefaultProps) {
              Constructor.getDefaultProps.isReactClassApproved = {}
            }
            if (Constructor.prototype.getInitialState) {
              Constructor.prototype.getInitialState.isReactClassApproved = {}
            }
          }

          _invariant(
            Constructor.prototype.render,
            'createClass(...): Class specification must implement a `render` method.'
          )

          if (true) {
            warning(
              !Constructor.prototype.componentShouldUpdate,
              '%s has a method called ' +
                'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
                'The name is phrased as a question because the function is ' +
                'expected to return a value.',
              spec.displayName || 'A component'
            )
            warning(
              !Constructor.prototype.componentWillRecieveProps,
              '%s has a method called ' +
                'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
              spec.displayName || 'A component'
            )
          }

          // Reduce time spent doing lookups by setting these on the prototype.
          for (var methodName in ReactClassInterface) {
            if (!Constructor.prototype[methodName]) {
              Constructor.prototype[methodName] = null
            }
          }

          return Constructor
        }

        return createClass
      }

      module.exports = factory

      /***/
    },
    /* 207 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _PooledClass = __webpack_require__(89)

      var _PooledClass2 = _interopRequireDefault(_PooledClass)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      var twoArgumentPooler = _PooledClass2.default.twoArgumentPooler

      /**
       * PooledClass representing the bounding rectangle of a region.
       */
      /**
       * Copyright (c) 2015-present, Nicolas Gallagher.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       *
       */

      function BoundingDimensions(width, height) {
        this.width = width
        this.height = height
      }

      BoundingDimensions.prototype.destructor = function() {
        this.width = null
        this.height = null
      }

      BoundingDimensions.getPooledFromElement = function(element) {
        return BoundingDimensions.getPooled(
          element.offsetWidth,
          element.offsetHeight
        )
      }

      _PooledClass2.default.addPoolingTo(BoundingDimensions, twoArgumentPooler)

      exports.default = BoundingDimensions

      /***/
    },
    /* 208 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _PooledClass = __webpack_require__(89)

      var _PooledClass2 = _interopRequireDefault(_PooledClass)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      var twoArgumentPooler = _PooledClass2.default.twoArgumentPooler /**
       * Copyright (c) 2015-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @noflow
       */

      function Position(left, top) {
        this.left = left
        this.top = top
      }

      Position.prototype.destructor = function() {
        this.left = null
        this.top = null
      }

      _PooledClass2.default.addPoolingTo(Position, twoArgumentPooler)

      exports.default = Position

      /***/
    },
    /* 209 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      /**
       * Copyright (c) 2013-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       */

      var TouchEventUtils = {
        /**
         * Utility function for common case of extracting out the primary touch from a
         * touch event.
         * - `touchEnd` events usually do not have the `touches` property.
         *   http://stackoverflow.com/questions/3666929/
         *   mobile-sarai-touchend-event-not-firing-when-last-touch-is-removed
         *
         * @param {Event} nativeEvent Native event that may or may not be a touch.
         * @return {TouchesObject?} an object with pageX and pageY or null.
         */
        extractSingleTouch: function extractSingleTouch(nativeEvent) {
          var touches = nativeEvent.touches
          var changedTouches = nativeEvent.changedTouches
          var hasTouches = touches && touches.length > 0
          var hasChangedTouches = changedTouches && changedTouches.length > 0

          return !hasTouches && hasChangedTouches
            ? changedTouches[0]
            : hasTouches ? touches[0] : nativeEvent
        },
      }

      module.exports = TouchEventUtils

      /***/
    },
    /* 210 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _createReactClass = __webpack_require__(86)

      var _createReactClass2 = _interopRequireDefault(_createReactClass)

      var _EdgeInsetsPropType = __webpack_require__(83)

      var _EdgeInsetsPropType2 = _interopRequireDefault(_EdgeInsetsPropType)

      var _ensurePositiveDelayProps = __webpack_require__(87)

      var _ensurePositiveDelayProps2 = _interopRequireDefault(
        _ensurePositiveDelayProps
      )

      var _react = __webpack_require__(1)

      var _react2 = _interopRequireDefault(_react)

      var _StyleSheet = __webpack_require__(5)

      var _StyleSheet2 = _interopRequireDefault(_StyleSheet)

      var _reactTimerMixin = __webpack_require__(211)

      var _reactTimerMixin2 = _interopRequireDefault(_reactTimerMixin)

      var _Touchable = __webpack_require__(88)

      var _Touchable2 = _interopRequireDefault(_Touchable)

      var _ViewPropTypes = __webpack_require__(212)

      var _ViewPropTypes2 = _interopRequireDefault(_ViewPropTypes)

      var _warning = __webpack_require__(6)

      var _warning2 = _interopRequireDefault(_warning)

      var _propTypes = __webpack_require__(0)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      function _objectWithoutProperties(obj, keys) {
        var target = {}
        for (var i in obj) {
          if (keys.indexOf(i) >= 0) continue
          if (!Object.prototype.hasOwnProperty.call(obj, i)) continue
          target[i] = obj[i]
        }
        return target
      } /**
       * Copyright (c) 2016-present, Nicolas Gallagher.
       * Copyright (c) 2015-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       *
       * @providesModule TouchableWithoutFeedback
       *
       */

      var PRESS_RETENTION_OFFSET = { top: 20, left: 20, right: 20, bottom: 30 }

      /**
       * Do not use unless you have a very good reason. All elements that
       * respond to press should have a visual feedback when touched.
       *
       * TouchableWithoutFeedback supports only one child.
       * If you wish to have several child components, wrap them in a View.
       */

      /* eslint-disable react/prefer-es6-class, react/prop-types */
      var TouchableWithoutFeedback = (0, _createReactClass2.default)({
        displayName: 'TouchableWithoutFeedback',
        mixins: [_reactTimerMixin2.default, _Touchable2.default.Mixin],

        propTypes: {
          accessibilityComponentType:
            _ViewPropTypes2.default.accessibilityComponentType,
          accessibilityLabel: _propTypes.string,
          accessibilityRole: _ViewPropTypes2.default.accessibilityRole,
          accessibilityTraits: _ViewPropTypes2.default.accessibilityTraits,
          accessible: _propTypes.bool,
          children: _propTypes.any,
          /**
           * Delay in ms, from onPressIn, before onLongPress is called.
           */
          delayLongPress: _propTypes.number,
          /**
           * Delay in ms, from the start of the touch, before onPressIn is called.
           */
          delayPressIn: _propTypes.number,
          /**
           * Delay in ms, from the release of the touch, before onPressOut is called.
           */
          delayPressOut: _propTypes.number,
          /**
           * If true, disable all interactions for this component.
           */
          disabled: _propTypes.bool,
          /**
           * This defines how far your touch can start away from the button. This is
           * added to `pressRetentionOffset` when moving off of the button.
           */
          // $FlowFixMe(>=0.41.0)
          hitSlop: _EdgeInsetsPropType2.default,
          /**
           * Invoked on mount and layout changes with
           *
           *   `{nativeEvent: {layout: {x, y, width, height}}}`
           */
          onLayout: _propTypes.func,
          onLongPress: _propTypes.func,
          /**
           * Called when the touch is released, but not if cancelled (e.g. by a scroll
           * that steals the responder lock).
           */
          onPress: _propTypes.func,
          onPressIn: _propTypes.func,
          onPressOut: _propTypes.func,
          /**
           * When the scroll view is disabled, this defines how far your touch may
           * move off of the button, before deactivating the button. Once deactivated,
           * try moving it back and you'll see that the button is once again
           * reactivated! Move it back and forth several times while the scroll view
           * is disabled. Ensure you pass in a constant to reduce memory allocations.
           */
          // $FlowFixMe
          pressRetentionOffset: _EdgeInsetsPropType2.default,
          testID: _propTypes.string,
        },

        getInitialState: function getInitialState() {
          return this.touchableGetInitialState()
        },

        componentDidMount: function componentDidMount() {
          ;(0, _ensurePositiveDelayProps2.default)(this.props)
        },

        componentWillReceiveProps: function componentWillReceiveProps(
          nextProps
        ) {
          ;(0, _ensurePositiveDelayProps2.default)(nextProps)
        },

        /**
         * `Touchable.Mixin` self callbacks. The mixin will invoke these if they are
         * defined on your component.
         */
        touchableHandlePress: function touchableHandlePress(e) {
          this.props.onPress && this.props.onPress(e)
        },

        touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
          this.props.onPressIn && this.props.onPressIn(e)
        },

        touchableHandleActivePressOut: function touchableHandleActivePressOut(
          e
        ) {
          this.props.onPressOut && this.props.onPressOut(e)
        },

        touchableHandleLongPress: function touchableHandleLongPress(e) {
          this.props.onLongPress && this.props.onLongPress(e)
        },

        touchableGetPressRectOffset: function touchableGetPressRectOffset() {
          return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET
        },

        touchableGetHitSlop: function touchableGetHitSlop() {
          return this.props.hitSlop
        },

        touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
          return this.props.delayPressIn || 0
        },

        touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
          return this.props.delayLongPress === 0
            ? 0
            : this.props.delayLongPress || 500
        },

        touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
          return this.props.delayPressOut || 0
        },

        render: function render() {
          var _props = this.props,
            delayLongPress = _props.delayLongPress,
            delayPressIn = _props.delayPressIn,
            delayPressOut = _props.delayPressOut,
            onLongPress = _props.onLongPress,
            onPress = _props.onPress,
            onPressIn = _props.onPressIn,
            onPressOut = _props.onPressOut,
            pressRetentionOffset = _props.pressRetentionOffset,
            other = _objectWithoutProperties(_props, [
              'delayLongPress',
              'delayPressIn',
              'delayPressOut',
              'onLongPress',
              'onPress',
              'onPressIn',
              'onPressOut',
              'pressRetentionOffset',
            ])

          // Note(avik): remove dynamic typecast once Flow has been upgraded
          // $FlowFixMe

          var child = _react2.default.Children.only(this.props.children)
          var children = child.props.children
          ;(0, _warning2.default)(
            !child.type || child.type.displayName !== 'Text',
            'TouchableWithoutFeedback does not work well with Text children. Wrap children in a View instead. See ' +
              ((child._owner &&
                child._owner.getName &&
                child._owner.getName()) ||
                '<unknown>')
          )
          if (
            'development' !== 'production' &&
            _Touchable2.default.TOUCH_TARGET_DEBUG &&
            child.type &&
            child.type.displayName === 'View'
          ) {
            children = _react2.default.Children.toArray(children)
            children.push(
              _Touchable2.default.renderDebugView({
                color: 'red',
                hitSlop: this.props.hitSlop,
              })
            )
          }
          var style =
            _Touchable2.default.TOUCH_TARGET_DEBUG &&
            child.type &&
            child.type.displayName === 'Text'
              ? [
                  !this.props.disabled && styles.actionable,
                  child.props.style,
                  { color: 'red' },
                ]
              : [!this.props.disabled && styles.actionable, child.props.style]
          return _react2.default.cloneElement(
            child,
            Object.assign({}, other, {
              accessible: this.props.accessible !== false,
              children: children,
              onKeyDown: this.touchableHandleKeyEvent,
              onKeyUp: this.touchableHandleKeyEvent,
              onResponderGrant: this.touchableHandleResponderGrant,
              onResponderMove: this.touchableHandleResponderMove,
              onResponderRelease: this.touchableHandleResponderRelease,
              onResponderTerminate: this.touchableHandleResponderTerminate,
              onResponderTerminationRequest: this
                .touchableHandleResponderTerminationRequest,
              onStartShouldSetResponder: this
                .touchableHandleStartShouldSetResponder,
              style: style,
            })
          )
        },
      })

      var styles = _StyleSheet2.default.create({
        actionable: {
          cursor: 'pointer',
          touchAction: 'manipulation',
        },
      })

      exports.default = TouchableWithoutFeedback

      /***/
    },
    /* 211 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'
      /* WEBPACK VAR INJECTION */
      ;(function(global) {
        /*
 *  Copyright (c) 2015-present, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under the BSD-style license found in the
 *  LICENSE file in the root directory of this source tree. An additional grant
 *  of patent rights can be found in the PATENTS file in the same directory.
 *
 */

        var GLOBAL = typeof window === 'undefined' ? global : window

        var setter = function(_setter, _clearer, array) {
          return function(callback, delta) {
            var id = _setter(
              function() {
                _clearer.call(this, id)
                callback.apply(this, arguments)
              }.bind(this),
              delta
            )

            if (!this[array]) {
              this[array] = [id]
            } else {
              this[array].push(id)
            }
            return id
          }
        }

        var clearer = function(_clearer, array) {
          return function(id) {
            if (this[array]) {
              var index = this[array].indexOf(id)
              if (index !== -1) {
                this[array].splice(index, 1)
              }
            }
            _clearer(id)
          }
        }

        var _timeouts = 'TimerMixin_timeouts'
        var _clearTimeout = clearer(GLOBAL.clearTimeout, _timeouts)
        var _setTimeout = setter(GLOBAL.setTimeout, _clearTimeout, _timeouts)

        var _intervals = 'TimerMixin_intervals'
        var _clearInterval = clearer(GLOBAL.clearInterval, _intervals)
        var _setInterval = setter(
          GLOBAL.setInterval,
          function() {
            /* noop */
          },
          _intervals
        )

        var _immediates = 'TimerMixin_immediates'
        var _clearImmediate = clearer(GLOBAL.clearImmediate, _immediates)
        var _setImmediate = setter(
          GLOBAL.setImmediate,
          _clearImmediate,
          _immediates
        )

        var _rafs = 'TimerMixin_rafs'
        var _cancelAnimationFrame = clearer(GLOBAL.cancelAnimationFrame, _rafs)
        var _requestAnimationFrame = setter(
          GLOBAL.requestAnimationFrame,
          _cancelAnimationFrame,
          _rafs
        )

        var TimerMixin = {
          componentWillUnmount: function() {
            this[_timeouts] &&
              this[_timeouts].forEach(function(id) {
                GLOBAL.clearTimeout(id)
              })
            this[_timeouts] = null
            this[_intervals] &&
              this[_intervals].forEach(function(id) {
                GLOBAL.clearInterval(id)
              })
            this[_intervals] = null
            this[_immediates] &&
              this[_immediates].forEach(function(id) {
                GLOBAL.clearImmediate(id)
              })
            this[_immediates] = null
            this[_rafs] &&
              this[_rafs].forEach(function(id) {
                GLOBAL.cancelAnimationFrame(id)
              })
            this[_rafs] = null
          },

          setTimeout: _setTimeout,
          clearTimeout: _clearTimeout,

          setInterval: _setInterval,
          clearInterval: _clearInterval,

          setImmediate: _setImmediate,
          clearImmediate: _clearImmediate,

          requestAnimationFrame: _requestAnimationFrame,
          cancelAnimationFrame: _cancelAnimationFrame,
        }

        module.exports = TimerMixin

        /* WEBPACK VAR INJECTION */
      }.call(exports, __webpack_require__(2)))

      /***/
    },
    /* 212 */
    /***/ function(module, exports, __webpack_require__) {
      'use strict'

      exports.__esModule = true

      var _ViewPropTypes = __webpack_require__(82)

      var _ViewPropTypes2 = _interopRequireDefault(_ViewPropTypes)

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }

      exports.default = _ViewPropTypes2.default

      /***/
    },
    /* 213 */
    /***/ function(module, exports, __webpack_require__) {
      Object.defineProperty(exports, '__esModule', { value: true })
      exports.login = login
      var _loginTypes = __webpack_require__(55)
      var types = _interopRequireWildcard(_loginTypes)
      function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
          return obj
        } else {
          var newObj = {}
          if (obj != null) {
            for (var key in obj) {
              if (Object.prototype.hasOwnProperty.call(obj, key))
                newObj[key] = obj[key]
            }
          }
          newObj.default = obj
          return newObj
        }
      }
      var user = { name: 'zhangsan', age: 24 }
      function login() {
        console.log('登录方法')
        return function(dispatch) {
          dispatch(isLogining())
          dispatch(loginSuccess(true, user))
        }
      }
      function isLogining() {
        return { type: types.LOGIN_IN_DOING }
      }
      function loginSuccess(isSuccess, user) {
        console.log('success')
        return { type: types.LOGIN_IN_DONE, user: user }
      }
      function loginError(isSuccess) {
        console.log('error')
        return { type: types.LOGIN_IN_ERROR }
      }

      /***/
    },
    /* 214 */
    /***/ function(module, exports, __webpack_require__) {
      Object.defineProperty(exports, '__esModule', { value: true })
      var _jsxFileName =
        '/Users/glodon/glodon/react/testReact/app/redux/pages/MainPage.js'
      var _createClass = (function() {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i]
            descriptor.enumerable = descriptor.enumerable || false
            descriptor.configurable = true
            if ('value' in descriptor) descriptor.writable = true
            Object.defineProperty(target, descriptor.key, descriptor)
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps) defineProperties(Constructor.prototype, protoProps)
          if (staticProps) defineProperties(Constructor, staticProps)
          return Constructor
        }
      })()
      var _react = __webpack_require__(1)
      var _react2 = _interopRequireDefault(_react)
      var _View = __webpack_require__(12)
      var _View2 = _interopRequireDefault(_View)
      var _Text = __webpack_require__(19)
      var _Text2 = _interopRequireDefault(_Text)
      var _StyleSheet = __webpack_require__(5)
      var _StyleSheet2 = _interopRequireDefault(_StyleSheet)
      var _TouchableOpacity = __webpack_require__(36)
      var _TouchableOpacity2 = _interopRequireDefault(_TouchableOpacity)
      var _Counter = __webpack_require__(215)
      var _Counter2 = _interopRequireDefault(_Counter)
      var _reactRedux = __webpack_require__(18)
      var _counterAction = __webpack_require__(217)
      var counterAction = _interopRequireWildcard(_counterAction)
      function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
          return obj
        } else {
          var newObj = {}
          if (obj != null) {
            for (var key in obj) {
              if (Object.prototype.hasOwnProperty.call(obj, key))
                newObj[key] = obj[key]
            }
          }
          newObj.default = obj
          return newObj
        }
      }
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError('Cannot call a class as a function')
        }
      }
      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          )
        }
        return call && (typeof call === 'object' || typeof call === 'function')
          ? call
          : self
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== 'function' && superClass !== null) {
          throw new TypeError(
            'Super expression must either be null or a function, not ' +
              typeof superClass
          )
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true,
          },
        })
        if (superClass)
          Object.setPrototypeOf
            ? Object.setPrototypeOf(subClass, superClass)
            : (subClass.__proto__ = superClass)
      }
      var MainPage = (function(_Component) {
        _inherits(MainPage, _Component)
        function MainPage() {
          _classCallCheck(this, MainPage)
          return _possibleConstructorReturn(
            this,
            (MainPage.__proto__ || Object.getPrototypeOf(MainPage)).apply(
              this,
              arguments
            )
          )
        }
        _createClass(MainPage, [
          {
            key: 'logout',
            value: function logout() {
              this.props.history.replace('/Login')
            },
          },
          {
            key: 'render',
            value: function render() {
              var _this2 = this
              var _props = this.props,
                user = _props.user,
                count = _props.count,
                incrementFn = _props.incrementFn,
                decrementFn = _props.decrementFn
              return _react2.default.createElement(
                _View2.default,
                {
                  style: styles.container,
                  __source: { fileName: _jsxFileName, lineNumber: 21 },
                },
                _react2.default.createElement(_Counter2.default, {
                  incrementFn: incrementFn,
                  decrementFn: decrementFn,
                  counter: count,
                  __source: { fileName: _jsxFileName, lineNumber: 22 },
                }),
                _react2.default.createElement(
                  _TouchableOpacity2.default,
                  {
                    onPress: function onPress() {
                      _this2.logout()
                    },
                    style: { marginTop: 50 },
                    __source: { fileName: _jsxFileName, lineNumber: 27 },
                  },
                  _react2.default.createElement(
                    _View2.default,
                    { __source: { fileName: _jsxFileName, lineNumber: 33 } },
                    _react2.default.createElement(
                      _Text2.default,
                      { __source: { fileName: _jsxFileName, lineNumber: 34 } },
                      '\u9000\u51FA\u767B\u5F55(',
                      user.name,
                      ')'
                    )
                  )
                )
              )
            },
          },
        ])
        return MainPage
      })(_react.Component)
      MainPage.navigationOptions = { title: 'MainPage' }
      var styles = _StyleSheet2.default.create({
        container: {
          flex: 1,
          height: '100%',
          alignItems: 'center',
          justifyContent: 'center',
          backgroundColor: '#F5FFFF',
        },
      })
      exports.default = (0, _reactRedux.connect)(
        function(state) {
          return { count: state.counter.count, user: state.loginIn.user }
        },
        function(dispatch) {
          return {
            incrementFn: function incrementFn() {
              return dispatch(counterAction.increment())
            },
            decrementFn: function decrementFn() {
              return dispatch(counterAction.decrement())
            },
          }
        }
      )(MainPage)

      /***/
    },
    /* 215 */
    /***/ function(module, exports, __webpack_require__) {
      Object.defineProperty(exports, '__esModule', { value: true })
      var _jsxFileName =
        '/Users/glodon/glodon/react/testReact/app/redux/components/Counter.js'
      var _createClass = (function() {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i]
            descriptor.enumerable = descriptor.enumerable || false
            descriptor.configurable = true
            if ('value' in descriptor) descriptor.writable = true
            Object.defineProperty(target, descriptor.key, descriptor)
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps) defineProperties(Constructor.prototype, protoProps)
          if (staticProps) defineProperties(Constructor, staticProps)
          return Constructor
        }
      })()
      var _react = __webpack_require__(1)
      var _react2 = _interopRequireDefault(_react)
      var _StyleSheet = __webpack_require__(5)
      var _StyleSheet2 = _interopRequireDefault(_StyleSheet)
      var _View = __webpack_require__(12)
      var _View2 = _interopRequireDefault(_View)
      var _Text = __webpack_require__(19)
      var _Text2 = _interopRequireDefault(_Text)
      var _Button = __webpack_require__(216)
      var _Button2 = _interopRequireDefault(_Button)
      var _propTypes = __webpack_require__(0)
      var _propTypes2 = _interopRequireDefault(_propTypes)
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError('Cannot call a class as a function')
        }
      }
      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          )
        }
        return call && (typeof call === 'object' || typeof call === 'function')
          ? call
          : self
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== 'function' && superClass !== null) {
          throw new TypeError(
            'Super expression must either be null or a function, not ' +
              typeof superClass
          )
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true,
          },
        })
        if (superClass)
          Object.setPrototypeOf
            ? Object.setPrototypeOf(subClass, superClass)
            : (subClass.__proto__ = superClass)
      }
      var Counter = (function(_Component) {
        _inherits(Counter, _Component)
        function Counter() {
          _classCallCheck(this, Counter)
          return _possibleConstructorReturn(
            this,
            (Counter.__proto__ || Object.getPrototypeOf(Counter)).apply(
              this,
              arguments
            )
          )
        }
        _createClass(Counter, [
          {
            key: 'render',
            value: function render() {
              console.log('counter')
              console.log(this.props)
              var _props = this.props,
                decrementFn = _props.decrementFn,
                incrementFn = _props.incrementFn,
                counter = _props.counter
              return _react2.default.createElement(
                _View2.default,
                {
                  style: styles.container,
                  __source: { fileName: _jsxFileName, lineNumber: 17 },
                },
                _react2.default.createElement(_Button2.default, {
                  onClick: decrementFn,
                  text: '\u51CF',
                  __source: { fileName: _jsxFileName, lineNumber: 18 },
                }),
                _react2.default.createElement(
                  _Text2.default,
                  {
                    style: styles.label,
                    __source: { fileName: _jsxFileName, lineNumber: 19 },
                  },
                  counter
                ),
                _react2.default.createElement(_Button2.default, {
                  onClick: incrementFn,
                  text: '\u52A0',
                  __source: { fileName: _jsxFileName, lineNumber: 20 },
                })
              )
            },
          },
        ])
        return Counter
      })(_react.Component)
      Counter.propTypes = {
        decrementFn: _propTypes2.default.func.isRequired,
        incrementFn: _propTypes2.default.func.isRequired,
      }
      exports.default = Counter
      var styles = _StyleSheet2.default.create({
        container: {
          width: 200,
          height: 50,
          flexDirection: 'row',
          alignItems: 'center',
          justifyContent: 'center',
          borderWidth: 1,
        },
        label: { width: 40, textAlign: 'center' },
      })

      /***/
    },
    /* 216 */
    /***/ function(module, exports, __webpack_require__) {
      Object.defineProperty(exports, '__esModule', { value: true })
      var _jsxFileName =
        '/Users/glodon/glodon/react/testReact/app/redux/components/Button.js'
      var _createClass = (function() {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i]
            descriptor.enumerable = descriptor.enumerable || false
            descriptor.configurable = true
            if ('value' in descriptor) descriptor.writable = true
            Object.defineProperty(target, descriptor.key, descriptor)
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps) defineProperties(Constructor.prototype, protoProps)
          if (staticProps) defineProperties(Constructor, staticProps)
          return Constructor
        }
      })()
      var _react = __webpack_require__(1)
      var _react2 = _interopRequireDefault(_react)
      var _propTypes = __webpack_require__(0)
      var _propTypes2 = _interopRequireDefault(_propTypes)
      var _StyleSheet = __webpack_require__(5)
      var _StyleSheet2 = _interopRequireDefault(_StyleSheet)
      var _Text = __webpack_require__(19)
      var _Text2 = _interopRequireDefault(_Text)
      var _TouchableOpacity = __webpack_require__(36)
      var _TouchableOpacity2 = _interopRequireDefault(_TouchableOpacity)
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj }
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError('Cannot call a class as a function')
        }
      }
      function _possibleConstructorReturn(self, call) {
        if (!self) {
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called"
          )
        }
        return call && (typeof call === 'object' || typeof call === 'function')
          ? call
          : self
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== 'function' && superClass !== null) {
          throw new TypeError(
            'Super expression must either be null or a function, not ' +
              typeof superClass
          )
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true,
          },
        })
        if (superClass)
          Object.setPrototypeOf
            ? Object.setPrototypeOf(subClass, superClass)
            : (subClass.__proto__ = superClass)
      }
      var Button = (function(_Component) {
        _inherits(Button, _Component)
        function Button() {
          _classCallCheck(this, Button)
          return _possibleConstructorReturn(
            this,
            (Button.__proto__ || Object.getPrototypeOf(Button)).apply(
              this,
              arguments
            )
          )
        }
        _createClass(Button, [
          {
            key: 'render',
            value: function render() {
              var _props = this.props,
                text = _props.text,
                onClick = _props.onClick
              return _react2.default.createElement(
                _TouchableOpacity2.default,
                {
                  style: styles.Button,
                  onPress: onClick,
                  __source: { fileName: _jsxFileName, lineNumber: 9 },
                },
                _react2.default.createElement(
                  _Text2.default,
                  { __source: { fileName: _jsxFileName, lineNumber: 10 } },
                  text
                )
              )
            },
          },
        ])
        return Button
      })(_react.Component)
      exports.default = Button
      Button.propTypes = {
        text: _propTypes2.default.string.isRequired,
        onClick: _propTypes2.default.func.isRequired,
      }
      var styles = _StyleSheet2.default.create({
        Button: {
          width: 60,
          height: 20,
          borderWidth: 1,
          borderColor: 'lightgray',
          margin: 5,
          alignItems: 'center',
          justifyContent: 'center',
        },
      })

      /***/
    },
    /* 217 */
    /***/ function(module, exports, __webpack_require__) {
      Object.defineProperty(exports, '__esModule', { value: true })
      exports.decrement = decrement
      exports.increment = increment
      var _counterTypes = __webpack_require__(56)
      var types = _interopRequireWildcard(_counterTypes)
      function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
          return obj
        } else {
          var newObj = {}
          if (obj != null) {
            for (var key in obj) {
              if (Object.prototype.hasOwnProperty.call(obj, key))
                newObj[key] = obj[key]
            }
          }
          newObj.default = obj
          return newObj
        }
      }
      function decrement() {
        return { type: types.DECREMENT }
      }
      function increment() {
        return { type: types.INCREMENT }
      }

      /***/
    },
    /* 218 */
    /***/ function(module, exports, __webpack_require__) {
      /* eslint global-require: 0 */

      module.exports = {
        // Core
        get createNavigationContainer() {
          return __webpack_require__(219).default
        },
        get StateUtils() {
          return __webpack_require__(220).default
        },
        get addNavigationHelpers() {
          return __webpack_require__(221).default
        },
        get NavigationActions() {
          return __webpack_require__(222).default
        },

        // Navigators
        get createNavigator() {
          return __webpack_require__(223).default
        },

        // Routers
        get StackRouter() {
          return __webpack_require__(224).default
        },
        get TabRouter() {
          return __webpack_require__(225).default
        },

        // HOCs
        get withNavigation() {
          return __webpack_require__(226).default
        },
        get withNavigationFocus() {
          return __webpack_require__(227).default
        },
      }

      /***/
    },
    /* 219 */
    /***/ function(module, exports) {
      throw new Error(
        'Module parse failed: Unexpected token (16:9)\nYou may need an appropriate loader to handle this file type.\n| export default function createNavigationContainer(Component) {\n|   class NavigationContainer extends React.Component {\n|     subs = null;\n| \n|     static router = Component.router;'
      )

      /***/
    },
    /* 220 */
    /***/ function(module, exports) {
      throw new Error(
        'Module parse failed: Unexpected token (51:6)\nYou may need an appropriate loader to handle this file type.\n| \n|     return {\n|       ...state,\n|       index: routes.length - 1,\n|       routes,'
      )

      /***/
    },
    /* 221 */
    /***/ function(module, exports) {
      throw new Error(
        'Module parse failed: Unexpected token (8:4)\nYou may need an appropriate loader to handle this file type.\n| export default function(navigation) {\n|   return {\n|     ...navigation,\n|     goBack: key => {\n|       let actualizedKey = key;'
      )

      /***/
    },
    /* 222 */
    /***/ function(module, __webpack_exports__, __webpack_require__) {
      'use strict'
      Object.defineProperty(__webpack_exports__, '__esModule', { value: true })
      const BACK = 'Navigation/BACK'
      const INIT = 'Navigation/INIT'
      const NAVIGATE = 'Navigation/NAVIGATE'
      const POP = 'Navigation/POP'
      const POP_TO_TOP = 'Navigation/POP_TO_TOP'
      const PUSH = 'Navigation/PUSH'
      const RESET = 'Navigation/RESET'
      const REPLACE = 'Navigation/REPLACE'
      const SET_PARAMS = 'Navigation/SET_PARAMS'
      const URI = 'Navigation/URI'
      const COMPLETE_TRANSITION = 'Navigation/COMPLETE_TRANSITION'

      const createAction = (type, fn) => {
        fn.toString = () => type
        return fn
      }

      const back = createAction(BACK, (payload = {}) => ({
        type: BACK,
        key: payload.key,
        immediate: payload.immediate,
      }))

      const init = createAction(INIT, (payload = {}) => {
        const action = {
          type: INIT,
        }
        if (payload.params) {
          action.params = payload.params
        }
        return action
      })

      const navigate = createAction(NAVIGATE, payload => {
        const action = {
          type: NAVIGATE,
          routeName: payload.routeName,
        }
        if (payload.params) {
          action.params = payload.params
        }
        if (payload.action) {
          action.action = payload.action
        }
        if (payload.key) {
          action.key = payload.key
        }
        return action
      })

      const pop = createAction(POP, payload => ({
        type: POP,
        n: payload && payload.n,
        immediate: payload && payload.immediate,
      }))

      const popToTop = createAction(POP_TO_TOP, payload => ({
        type: POP_TO_TOP,
        immediate: payload && payload.immediate,
        key: payload && payload.key,
      }))

      const push = createAction(PUSH, payload => {
        const action = {
          type: PUSH,
          routeName: payload.routeName,
        }
        if (payload.params) {
          action.params = payload.params
        }
        if (payload.action) {
          action.action = payload.action
        }
        return action
      })

      const reset = createAction(RESET, payload => ({
        type: RESET,
        index: payload.index,
        key: payload.key,
        actions: payload.actions,
      }))

      const replace = createAction(REPLACE, payload => ({
        type: REPLACE,
        key: payload.key,
        newKey: payload.newKey,
        params: payload.params,
        action: payload.action,
        routeName: payload.routeName,
        immediate: payload.immediate,
      }))

      const setParams = createAction(SET_PARAMS, payload => ({
        type: SET_PARAMS,
        key: payload.key,
        params: payload.params,
      }))

      const uri = createAction(URI, payload => ({
        type: URI,
        uri: payload.uri,
      }))

      const completeTransition = createAction(COMPLETE_TRANSITION, payload => ({
        type: COMPLETE_TRANSITION,
        key: payload && payload.key,
      }))

      /* harmony default export */ __webpack_exports__['default'] = {
        // Action constants
        BACK,
        INIT,
        NAVIGATE,
        POP,
        POP_TO_TOP,
        PUSH,
        RESET,
        REPLACE,
        SET_PARAMS,
        URI,
        COMPLETE_TRANSITION,

        // Action creators
        back,
        init,
        navigate,
        pop,
        popToTop,
        push,
        reset,
        replace,
        setParams,
        uri,
        completeTransition,
      }

      /***/
    },
    /* 223 */
    /***/ function(module, exports) {
      throw new Error(
        'Module parse failed: Unexpected token (9:20)\nYou may need an appropriate loader to handle this file type.\n|   return NavigationView => {\n|     class Navigator extends React.Component {\n|       static router = router;\n|       static navigationOptions = null;\n| '
      )

      /***/
    },
    /* 224 */
    /***/ function(module, exports) {
      throw new Error(
        'Module parse failed: Unexpected token (51:30)\nYou may need an appropriate loader to handle this file type.\n| \n|   const initialChildRouter = childRouters[initialRouteName];\n|   const pathsByRouteNames = { ...stackConfig.paths } || {};\n|   let paths = [];\n| '
      )

      /***/
    },
    /* 225 */
    /***/ function(module, exports) {
      throw new Error(
        'Module parse failed: Unexpected token (56:14)\nYou may need an appropriate loader to handle this file type.\n|             const childAction = NavigationActions.init();\n|             return {\n|               ...tabRouter.getStateForAction(childAction),\n|               key: routeName,\n|               routeName,'
      )

      /***/
    },
    /* 226 */
    /***/ function(module, exports) {
      throw new Error(
        'Module parse failed: Unexpected token (7:23)\nYou may need an appropriate loader to handle this file type.\n| export default function withNavigation(Component) {\n|   class ComponentWithNavigation extends React.Component {\n|     static displayName = `withNavigation(${Component.displayName ||\n|       Component.name})`;\n| '
      )

      /***/
    },
    /* 227 */
    /***/ function(module, exports) {
      throw new Error(
        'Module parse failed: Unexpected token (8:23)\nYou may need an appropriate loader to handle this file type.\n| export default function withNavigationFocus(Component) {\n|   class ComponentWithNavigationFocus extends React.Component {\n|     static displayName = `withNavigationFocus(${Component.displayName ||\n|       Component.name})`;\n| '
      )

      /***/
    },
    /******/
  ]
)
